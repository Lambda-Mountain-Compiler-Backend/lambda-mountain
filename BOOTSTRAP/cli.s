.global _start
.text
_start:
	mov %rsp,%rbp
	mov $malloc_SB_block_SB_head_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_page_SB_tail_CL_U64, %r15
	movq $0, 0(%r15)
	mov $malloc_SB_large_SB_size_CL_U64, %r15
	movq $1024, 0(%r15)
	mov $point_SB_of_SB_interest_CL_U64, %r15
	movq $0, 0(%r15)
	mov $rc_SB_magic_SB_number_CL_U64, %r15
	movq $423809104, 0(%r15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_header_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_text_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_init_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_data_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_profile_SB_onexit_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $3
	movq $assemble_SB_global_SB_initializer_SB_section_CL_SS, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	mov $assemble_SB_final_CL_String, %r15
	movq $uuid_00000000000dab3d, 0(%r15)
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $0, 0(%r15)
	mov $main_SB_with_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000dab92, 0(%r15)
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $0, 0(%r15)
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000dab3d, 0(%r15)
	pushq $2
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $preprocess_SB_macros_CL_MacroListMacroList, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	movq $ast_SB_parsed_SB_program_CL_ASTAST, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	movq $global_SB_type_SB_context_CL_TContextTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $global_SB_ctx_CL_FContextFContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $parse_SB_suffixes_CL_SfxListSfxList, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	movq $99999, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	movq $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	popq 200(%R15)
	popq 208(%R15)
	popq 216(%R15)
	popq 224(%R15)
	popq 232(%R15)
	popq 240(%R15)
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %r15
	movq $0, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq $0
	pushq $0
	pushq $1
	movq $already_SB_tokenized_CL_ListStringListString, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov $uuid_SB_counter_CL_U64, %r15
	movq $0, 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $cstring_SB_cache_CL_StringStringListStringStringList, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	mov %rbp,%rsp
	popq %r8
	movq %rsp, %r9
	push %rbp
	mov %rsp, %rbp
	pushq %r8
	pushq %r9
	call main
	mov %rbp, %rsp
	pop %rbp
	mov $60, %rax
	mov $0, %rdi
	syscall
_EQ__EQ__CL_ArrowU64ConsStringString:
	pushq $0
	pushq $0
	pushq $0
	mov -8(%rbp), %R8
	mov -16(%rbp), %R9
	cmp %R8,%R9
	je uuid_00000000000da9e3
	cmp $0,%R8
	je uuid_00000000000da9e4
	cmp $0,%R9
	je uuid_00000000000da9e4
uuid_00000000000da9e2:
	mov %R8, %r14
	movb 0(%r14), %r15b
	movb %r15b, -32(%rbp)
	mov %R9, %r14
	movb 0(%r14), %r15b
	movb %r15b, -40(%rbp)
	mov -32(%RBP), %AL
	mov -40(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	je uuid_00000000000da9e4
	mov -32(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	movq %RAX, -48(%rbp)
	mov -48(%rbp), %R10
	cmp $0,%R10
	jne uuid_00000000000da9e3
	inc %R8
	inc %R9
	jmp uuid_00000000000da9e2
uuid_00000000000da9e3:
	mov $1, %RAX
	jmp uuid_00000000000da9e5
uuid_00000000000da9e4:
	mov $0, %RAX
	jmp uuid_00000000000da9e5
uuid_00000000000da9e5:
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsStringString:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_AD__CL_ArrowSConsSS:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000da9e9
	jmp uuid_00000000000da9eb
uuid_00000000000da9e9:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000da9e6
	movq -48(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000da9e8
uuid_00000000000da9e6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000da9e8:
	mov -72(%RBP),%RSP
	add $-72, %RSP
uuid_00000000000da9eb:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64U64:
#call function hash : Arrow<Sized<8>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
non_SB_zero_CL_ArrowU64S:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000da9f1
	push %RBP
	jmp uuid_00000000000da9ee
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000da9ed
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000da9f0
uuid_00000000000da9ee:
uuid_00000000000da9f0:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000da9f3
uuid_00000000000da9f1:
	movq $0, -40(%rbp)
uuid_00000000000da9f3:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000da9f4
	jmp uuid_00000000000da9f6
uuid_00000000000da9f4:
	movq $1, -24(%rbp)
uuid_00000000000da9f6:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsSS:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000da9fd
	jmp uuid_00000000000da9ff
uuid_00000000000da9fd:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000da9fa
	jmp uuid_00000000000da9fc
uuid_00000000000da9fa:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000da9f7
	jmp uuid_00000000000da9f9
uuid_00000000000da9f7:
	movb $1, -192(%rbp)
uuid_00000000000da9f9:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000da9fc:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000da9ff:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa5b
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa12
	jmp uuid_00000000000daa14
uuid_00000000000daa12:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa03
	jmp uuid_00000000000daa05
uuid_00000000000daa03:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daa00
	jmp uuid_00000000000daa02
uuid_00000000000daa00:
	movb $1, -384(%rbp)
uuid_00000000000daa02:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000daa05:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa0f
	jmp uuid_00000000000daa11
uuid_00000000000daa0f:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa09
	jmp uuid_00000000000daa0b
uuid_00000000000daa09:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daa06
	jmp uuid_00000000000daa08
uuid_00000000000daa06:
	movb $1, -448(%rbp)
uuid_00000000000daa08:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000daa0b:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa0c
	jmp uuid_00000000000daa0e
uuid_00000000000daa0c:
	movb $1, -336(%rbp)
uuid_00000000000daa0e:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000daa11:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000daa14:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa58
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa2d
	jmp uuid_00000000000daa2f
uuid_00000000000daa2d:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa1b
	jmp uuid_00000000000daa1d
uuid_00000000000daa1b:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daa18
	jmp uuid_00000000000daa1a
uuid_00000000000daa18:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daa15
	jmp uuid_00000000000daa17
uuid_00000000000daa15:
	movb $1, -592(%rbp)
uuid_00000000000daa17:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000daa1a:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000daa1d:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa2a
	jmp uuid_00000000000daa2c
uuid_00000000000daa2a:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa24
	jmp uuid_00000000000daa26
uuid_00000000000daa24:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daa21
	jmp uuid_00000000000daa23
uuid_00000000000daa21:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daa1e
	jmp uuid_00000000000daa20
uuid_00000000000daa1e:
	movb $1, -704(%rbp)
uuid_00000000000daa20:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daa23:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daa26:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa27
	jmp uuid_00000000000daa29
uuid_00000000000daa27:
	movb $1, -544(%rbp)
uuid_00000000000daa29:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daa2c:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daa2f:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa55
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa48
	jmp uuid_00000000000daa4a
uuid_00000000000daa48:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa39
	jmp uuid_00000000000daa3b
uuid_00000000000daa39:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daa36
	jmp uuid_00000000000daa38
uuid_00000000000daa36:
	movb $1, -896(%rbp)
uuid_00000000000daa38:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000daa3b:
	mov -904(%RBP),%RSP
	add $-920, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa45
	jmp uuid_00000000000daa47
uuid_00000000000daa45:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa3f
	jmp uuid_00000000000daa41
uuid_00000000000daa3f:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daa3c
	jmp uuid_00000000000daa3e
uuid_00000000000daa3c:
	movb $1, -960(%rbp)
uuid_00000000000daa3e:
	mov -976(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000daa41:
	mov -968(%RBP),%RSP
	add $-984, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa42
	jmp uuid_00000000000daa44
uuid_00000000000daa42:
	movb $1, -848(%rbp)
uuid_00000000000daa44:
	mov -928(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000daa47:
	mov -864(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000daa4a:
	mov -856(%RBP),%RSP
	add $-984, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa52
	push %RBP
	jmp uuid_00000000000daa4f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daa4e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daa51
uuid_00000000000daa4f:
uuid_00000000000daa51:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000daa54
uuid_00000000000daa52:
	push %RBP
	mov -984(%RBP), %RAX
	mov -920(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa4b
	jmp uuid_00000000000daa4d
uuid_00000000000daa4b:
	movq $1, -64(%rbp)
uuid_00000000000daa4d:
	mov -992(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000daa54:
	mov -784(%RBP),%RSP
	add $-992, %RSP
	jmp uuid_00000000000daa57
uuid_00000000000daa55:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daa33
	jmp uuid_00000000000daa35
uuid_00000000000daa33:
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daa30
	jmp uuid_00000000000daa32
uuid_00000000000daa30:
	movq $1, -64(%rbp)
uuid_00000000000daa32:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000daa35:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000daa57:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000daa5a
uuid_00000000000daa58:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000daa5a:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000daa5d
uuid_00000000000daa5b:
	movq $1, -64(%rbp)
uuid_00000000000daa5d:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_EX__EQ__CL_ArrowU64ConsSS:
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
print_CL_ArrowNilS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa83
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa62
	jmp uuid_00000000000daa64
uuid_00000000000daa62:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daa5f
	jmp uuid_00000000000daa61
uuid_00000000000daa5f:
	movb $1, -128(%rbp)
uuid_00000000000daa61:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000daa64:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa80
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa6b
	jmp uuid_00000000000daa6d
uuid_00000000000daa6b:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daa68
	jmp uuid_00000000000daa6a
uuid_00000000000daa68:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daa65
	jmp uuid_00000000000daa67
uuid_00000000000daa65:
	movb $1, -192(%rbp)
uuid_00000000000daa67:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000daa6a:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000daa6d:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa7d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa74
	jmp uuid_00000000000daa76
uuid_00000000000daa74:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daa71
	jmp uuid_00000000000daa73
uuid_00000000000daa71:
	movb $1, -304(%rbp)
uuid_00000000000daa73:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000daa76:
	mov -312(%RBP),%RSP
	add $-328, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daa7a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daa79
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daa7c
uuid_00000000000daa7a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa77
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa78
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daa7c:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000daa7f
uuid_00000000000daa7d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daa7f:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000daa82
uuid_00000000000daa80:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daa82:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000daa85
uuid_00000000000daa83:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa5e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daa85:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fail_CL_ArrowNilString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fail_CL_ArrowNilConsStringString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa86
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
exit_CL_ArrowNilU64:
	mov $60, %RAX
	mov -8(%rbp), %RDI
	syscall
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000daa87:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000daa88
	inc %RDX
	inc %R15
	jmp uuid_00000000000daa87
uuid_00000000000daa88:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
eprint_CL_ArrowNilString:
	mov -8(%rbp), %R15
	mov $0, %RDX
uuid_00000000000daa89:
	mov 0(%R15), %R14B
	cmp $0,%R14B
	je uuid_00000000000daa8a
	inc %RDX
	inc %R15
	jmp uuid_00000000000daa89
uuid_00000000000daa8a:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $2
	pushq -8(%rbp)
	push %RDX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
uuid_00000000000daa8b:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000daa8b
uuid_00000000000daa8c:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000daa8c
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilASCII:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $0, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
print_CL_ArrowNilI64:
	pushq $0
	mov -8(%rbp), %R15
	mov $0, %R14
	cmp $0,%R15
	jge uuid_00000000000daa8d
	neg %R15
	movb $45, -24(%rbp)
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq $1
	mov	%rbp, %r12
	addq $-24, %r12
	push %R12
	pushq $1
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daa8d:
	mov	%R15, %RAX
	mov $0, %RDX
	mov $10, %RCX
	div %RCX
	push %RDX
	inc %R14
	mov	%RAX, %R15
	cmp $0,%R15
	jne uuid_00000000000daa8d
uuid_00000000000daa8e:
	pop %RDX
	movb %DL, -24(%rbp)
	addb $48, -24(%rbp)
	dec %R14
	mov $1, %RAX
	mov $1, %RDI
	mov	%rbp, %r12
	addq $-24, %r12
	mov	%R12, %RSI
	mov $1, %RDX
	syscall
	cmp $0,%R14
	jne uuid_00000000000daa8e
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU32:
	mov $0, %R15
	mov -8(%rbp), %R15D
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU16:
	mov $0, %R15
	mov -8(%rbp), %R15W
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilU8:
	mov $0, %R15
	mov -8(%rbp), %R15B
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI32:
	mov $0, %R15
	mov -8(%rbp), %R15D
	movsx %R15D,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI16:
	mov $0, %R15
	mov -8(%rbp), %R15W
	movsx %R15W,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
print_CL_ArrowNilI8:
	mov $0, %R15
	mov -8(%rbp), %R15B
	movsx %R15B,%R15
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	push %R15
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64:
	mov -8(%rbp), %RAX
	mov -16(%rbp), %RDI
	mov -24(%rbp), %RSI
	mov -32(%rbp), %RDX
	syscall
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
read_SB_file_CL_ArrowStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa94
	jmp uuid_00000000000daa96
uuid_00000000000daa94:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa92
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daa96:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1025
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $1024
uuid_00000000000daa9c:
	mov -56(%RBP), %RAX
	mov $1024, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa9d
	jmp uuid_00000000000daa9e
uuid_00000000000daa9d:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	mov -40(%RBP), %RAX
	mov -48(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	pushq $1024
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
	push %RBP
	mov -56(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daa99
	jmp uuid_00000000000daa9b
uuid_00000000000daa99:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa97
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa98
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daa9b:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1025, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000daa9c
uuid_00000000000daa9e:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
clone_SB_rope_CL_ArrowStringS:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $1024
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov -48(%RBP), %R13
	mov -40(%RBP), %R15
	add %R13, %R15
	movb $0, 0(%R15)
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daab8
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daaa5
	jmp uuid_00000000000daaa7
uuid_00000000000daaa5:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daaa2
	jmp uuid_00000000000daaa4
uuid_00000000000daaa2:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daa9f
	jmp uuid_00000000000daaa1
uuid_00000000000daa9f:
	movb $1, -144(%rbp)
uuid_00000000000daaa1:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000daaa4:
	mov -160(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000daaa7:
	mov -152(%RBP),%RSP
	add $-216, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daab5
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daaab
	jmp uuid_00000000000daaad
uuid_00000000000daaab:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daaa8
	jmp uuid_00000000000daaaa
uuid_00000000000daaa8:
	movb $1, -256(%rbp)
uuid_00000000000daaaa:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000daaad:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daab2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daab1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daab4
uuid_00000000000daab2:
	pushq $0
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	push %RAX
uuid_00000000000daaae:
	mov -296(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daaaf
	jmp uuid_00000000000daab0
uuid_00000000000daaaf:
#call function realloc : Arrow<Cons<Array<?,?>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	mov -296(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -288(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -288(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	mov -280(%RBP), %R15
	mov -288(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	movb %R15B, -296(%rbp)
	jmp uuid_00000000000daaae
uuid_00000000000daab0:
uuid_00000000000daab4:
	mov -224(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000daab7
uuid_00000000000daab5:
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
#call function clone-rope-impl : Arrow<Cons<Cons<Array<?,?>,S>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_SB_impl_CL_ArrowU64ConsU64ConsSArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000daab7:
	mov -112(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000daaba
uuid_00000000000daab8:
uuid_00000000000daaba:
	mov -80(%RBP),%RSP
	add $-104, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
clone_SB_rope_CL_ArrowStringU8:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %r14
	mov -8(%rbp),%r15b
	mov %r15b, 0(%r14)
	mov -24(%rbp), %r15
	movb $0, 1(%r15)
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
length_CL_ArrowU64String:
	pushq $0
uuid_00000000000daabb:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daabc
	jmp uuid_00000000000daabd
uuid_00000000000daabc:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000daabb
uuid_00000000000daabd:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
write_SB_file_CL_ArrowNilConsStringString:
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $2
	pushq -8(%rbp)
	pushq $577
	pushq $420
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	pushq -32(%rbp)
	pushq -16(%rbp)
#call function length : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call length_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function system-call : Arrow<Cons<Cons<Cons<U64,U64>,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $3
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call system_SB_call_CL_ArrowU64ConsU64ConsU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
to_SB_string_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
uuid_00000000000daabe:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daabf
	jmp uuid_00000000000daac0
uuid_00000000000daabf:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -56(%rbp), %R8
	movb %R8B, -48(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	add $8, %rsp
	jmp uuid_00000000000daabe
uuid_00000000000daac0:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daac2
	pushq $0
	pushq $uuid_00000000000daac1
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000daac4
uuid_00000000000daac2:
uuid_00000000000daac4:
	mov -56(%RBP),%RSP
	add $-56, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringI64:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daac6
	jmp uuid_00000000000daac8
uuid_00000000000daac6:
	pushq $0
	pushq $uuid_00000000000daac5
	pushq $2
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov $0, %RAX
	mov -8(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -8(%rbp)
uuid_00000000000daac8:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	pushq $0
uuid_00000000000daac9:
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daaca
	jmp uuid_00000000000daacb
uuid_00000000000daaca:
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	mov %RAX, %RAX
	mov $48, %R14
	addq %R14,%RAX
	push %RAX
	mov -8(%RBP), %RAX
	mov $10, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -88(%rbp), %R8
	movb %R8B, -80(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	add $8, %rsp
	jmp uuid_00000000000daac9
uuid_00000000000daacb:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daacc
	pushq $0
	pushq $uuid_00000000000daac1
	pushq $2
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000daace
uuid_00000000000daacc:
uuid_00000000000daace:
	mov -88(%RBP),%RSP
	add $-88, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_i64_CL_ArrowI64String:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daacf
	jmp uuid_00000000000daad1
uuid_00000000000daacf:
	movb $1, -24(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000daad1:
	mov -32(%RBP),%RSP
	add $-32, %RSP
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daad2
	jmp uuid_00000000000daad4
uuid_00000000000daad2:
	mov $0, %RAX
	mov -40(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000daad4:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_u64_CL_ArrowU64String:
	pushq $0
uuid_00000000000daaf7:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000daaf8
	jmp uuid_00000000000daaf9
uuid_00000000000daaf8:
	mov -24(%RBP), %RAX
	mov $10, %R14
	mul %R14
	movq %RAX, -24(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $48, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daaf4
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $49, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daaf1
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $50, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daaee
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $51, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daaeb
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $52, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daae8
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $53, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daae5
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $54, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daae2
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $55, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daadf
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $56, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daadc
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $57, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daad9
	push %RBP
	jmp uuid_00000000000daad6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daad5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daad8
uuid_00000000000daad6:
uuid_00000000000daad8:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000daadb
uuid_00000000000daad9:
	mov -24(%RBP), %RAX
	mov $9, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daadb:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000daade
uuid_00000000000daadc:
	mov -24(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daade:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000daae1
uuid_00000000000daadf:
	mov -24(%RBP), %RAX
	mov $7, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daae1:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000daae4
uuid_00000000000daae2:
	mov -24(%RBP), %RAX
	mov $6, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daae4:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000daae7
uuid_00000000000daae5:
	mov -24(%RBP), %RAX
	mov $5, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daae7:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000daaea
uuid_00000000000daae8:
	mov -24(%RBP), %RAX
	mov $4, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daaea:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000daaed
uuid_00000000000daaeb:
	mov -24(%RBP), %RAX
	mov $3, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daaed:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000daaf0
uuid_00000000000daaee:
	mov -24(%RBP), %RAX
	mov $2, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daaf0:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000daaf3
uuid_00000000000daaf1:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000daaf3:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000daaf6
uuid_00000000000daaf4:
uuid_00000000000daaf6:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000daaf7
uuid_00000000000daaf9:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_hex_CL_ArrowStringU64:
	pushq $0
	pushq $0
	pushq $3
	pushq $16
uuid_00000000000dab3a:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab3b
	jmp uuid_00000000000dab3c
uuid_00000000000dab3b:
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab37
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab34
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab31
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab2e
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab2b
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab28
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab25
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab22
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab1f
	push %RBP
	pushq -56(%rbp)
	mov -216(%RBP), %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab1c
	push %RBP
	pushq -56(%rbp)
	mov -232(%RBP), %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab19
	push %RBP
	pushq -56(%rbp)
	mov -248(%RBP), %RAX
	mov $11, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab16
	push %RBP
	pushq -56(%rbp)
	mov -264(%RBP), %RAX
	mov $12, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab13
	push %RBP
	pushq -56(%rbp)
	mov -280(%RBP), %RAX
	mov $13, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab10
	push %RBP
	pushq -56(%rbp)
	mov -296(%RBP), %RAX
	mov $14, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab0d
	push %RBP
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov $15, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab0a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dab09
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dab0c
uuid_00000000000dab0a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab08
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab0c:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dab0f
uuid_00000000000dab0d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab07
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab0f:
	mov -288(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dab12
uuid_00000000000dab10:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab06
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab12:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dab15
uuid_00000000000dab13:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab05
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab15:
	mov -256(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dab18
uuid_00000000000dab16:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab04
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab18:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dab1b
uuid_00000000000dab19:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab03
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab1b:
	mov -224(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dab1e
uuid_00000000000dab1c:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab02
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab1e:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000dab21
uuid_00000000000dab1f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab01
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab21:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dab24
uuid_00000000000dab22:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab00
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab24:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000dab27
uuid_00000000000dab25:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daaff
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab27:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000dab2a
uuid_00000000000dab28:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daafe
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab2a:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dab2d
uuid_00000000000dab2b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daafd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab2d:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000dab30
uuid_00000000000dab2e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daafc
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab30:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000dab33
uuid_00000000000dab31:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daafb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab33:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000dab36
uuid_00000000000dab34:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daafa
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab36:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000dab39
uuid_00000000000dab37:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daac1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dab39:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	mov $16, %R14
	mov $0, %RDX
	div %R14
	movq %RAX, -8(%rbp)
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000dab3a
uuid_00000000000dab3c:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
has_SB_prefix_CL_ArrowU64ConsStringString:
	pushq $1
uuid_00000000000dab44:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dab45
	jmp uuid_00000000000dab46
uuid_00000000000dab45:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dab41
	movq $0, -32(%rbp)
	movq $uuid_00000000000dab3d, -16(%rbp)
	jmp uuid_00000000000dab43
uuid_00000000000dab41:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	mov -48(%RBP), %AL
	mov -56(%RBP), %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dab3e
	movq $0, -32(%rbp)
	movq $uuid_00000000000dab3d, -16(%rbp)
	jmp uuid_00000000000dab40
uuid_00000000000dab3e:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
uuid_00000000000dab40:
	mov -64(%RBP),%RSP
	add $-64, %RSP
uuid_00000000000dab43:
	mov -40(%RBP),%RSP
	add $-64, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dab44
uuid_00000000000dab46:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_prefix_CL_ArrowStringConsStringString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dab4a
	jmp uuid_00000000000dab4c
uuid_00000000000dab4a:
uuid_00000000000dab47:
	mov -16(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dab48
	jmp uuid_00000000000dab49
uuid_00000000000dab48:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -16(%RBP), %RAX
	inc %RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000dab47
uuid_00000000000dab49:
uuid_00000000000dab4c:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
replace_CL_ArrowStringConsStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dab50:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dab51
	jmp uuid_00000000000dab52
uuid_00000000000dab51:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dab4d
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000dab4f
uuid_00000000000dab4d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -24(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function remove-prefix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call remove_SB_prefix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000dab4f:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000dab50
uuid_00000000000dab52:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_suffix_CL_ArrowU64ConsStringString:
	pushq $0
uuid_00000000000dab56:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dab57
	jmp uuid_00000000000dab58
uuid_00000000000dab57:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dab53
	jmp uuid_00000000000dab55
uuid_00000000000dab53:
	movq $1, -32(%rbp)
uuid_00000000000dab55:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dab56
uuid_00000000000dab58:
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
remove_SB_suffix_CL_ArrowStringConsStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dab5c:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dab5d
	jmp uuid_00000000000dab5e
uuid_00000000000dab5d:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dab59
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000dab5b
uuid_00000000000dab59:
	movq $uuid_00000000000daac1, -8(%rbp)
uuid_00000000000dab5b:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dab5c
uuid_00000000000dab5e:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
deep_SB_hash_CL_ArrowU64String:
	pushq $0
	pushq $0
uuid_00000000000dab5f:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dab60
	jmp uuid_00000000000dab61
uuid_00000000000dab60:
	mov $0, %R14
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov -40(%rbp), %R14B
	mov %R14, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	jmp uuid_00000000000dab5f
uuid_00000000000dab61:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_ML__CL_ArrowStringConsU64String:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dab62:
	mov -16(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab63
	jmp uuid_00000000000dab64
uuid_00000000000dab63:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	mov -16(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -16(%rbp)
	jmp uuid_00000000000dab62
uuid_00000000000dab64:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
not_CL_ArrowU64U64:
	pushq $0
	push %RBP
	mov -8(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab65
	jmp uuid_00000000000dab67
uuid_00000000000dab65:
	movq $1, -24(%rbp)
uuid_00000000000dab67:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
not_CL_ArrowU64U8:
	pushq $0
	push %RBP
	mov -8(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dab68
	jmp uuid_00000000000dab6a
uuid_00000000000dab68:
	movq $1, -24(%rbp)
uuid_00000000000dab6a:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $0, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $8, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -8(%RBP), %R15
	add $16, %R15
	mov 0(%R15), %R15
	push %R15
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock:
	mov -8(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 0(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 8(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock:
	mov -16(%RBP), %R14
	mov -8(%RBP), %R15
	mov %R14, 16(%R15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
malloc_SB_new_SB_page_CL_ArrowNilNil:
	mov $12, %RAX
	mov $0, %RDI
	syscall
	mov	%RAX, %R8
	movq %R8, %r15
	movq $malloc_SB_block_SB_head_CL_U64, %r14
	movq %r15, 0(%r14)
	movq %R8, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	addq $1073741824, %R8
	mov $12, %RAX
	mov	%R8, %RDI
	syscall
	movq %R8, %r15
	movq $malloc_SB_page_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
realloc_CL_ArrowArray_QM__QM_ConsU64Array_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -16(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
	push %RBP
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -40(%RBP), %RAX
	cmp %R14,%RAX
	setle %AL
	andq $1,%RAX
	push %RAX
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab71
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -56(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
	pushq $0
uuid_00000000000dab6e:
	mov -72(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab6f
	jmp uuid_00000000000dab70
uuid_00000000000dab6f:
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %R15B, %R14B
	mov -72(%RBP), %R13
	mov -80(%RBP), %R15
	add %R13, %R15
	mov %R14B, 0(%R15)
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %rsp
	add $8, %rsp
	jmp uuid_00000000000dab6e
uuid_00000000000dab70:
#call function free : Arrow<Array<?,?>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call free_CL_ArrowNilArray_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -64(%rbp), %r15
	movq %r15, -32(%rbp)
	mov -64(%rbp), %r15
	mov %r15, -32(%rbp)
	jmp uuid_00000000000dab73
uuid_00000000000dab71:
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab6b
	jmp uuid_00000000000dab6d
uuid_00000000000dab6b:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
uuid_00000000000dab6d:
	mov -56(%RBP),%RSP
	add $-56, %RSP
uuid_00000000000dab73:
	mov -48(%RBP),%RSP
	add $-56, %RSP
#call function .block-data : Arrow<Array<MallocBlock,?>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_data_CL_ArrowArray_QM__QM_Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
_DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock:
	pushq $0
	push %RBP
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab74
#call function .block-size : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_size_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $24, %RAX
	addq %R14,%RAX
	mov %RAX, %R14
	mov -8(%RBP), %RAX
	addq %R14,%RAX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
	jmp uuid_00000000000dab76
uuid_00000000000dab74:
	movq $1073741824, -24(%rbp)
uuid_00000000000dab76:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
free_CL_ArrowNilArray_QM__QM_:
	mov -8(%RBP), %RAX
	mov $24, %R14
	subq %R14,%RAX
	push %RAX
#call function .block-prev : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_prev_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -32(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab77
	jmp uuid_00000000000dab79
uuid_00000000000dab77:
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dab79:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab7a
	jmp uuid_00000000000dab7c
uuid_00000000000dab7a:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dab7c:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_U64:
#call function malloc : Arrow<Cons<U64,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
malloc_CL_ArrowArray_QM__QM_ConsU64U64:
	push %RBP
	mov $malloc_SB_block_SB_head_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab7d
	jmp uuid_00000000000dab7f
uuid_00000000000dab7d:
#call function malloc-new-page : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call malloc_SB_new_SB_page_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dab7f:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov $malloc_SB_first_SB_free_CL_U64, %r15
	pushq 0(%r15)
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab80
	jmp uuid_00000000000dab82
uuid_00000000000dab80:
	mov $malloc_SB_block_SB_head_CL_U64, %r14
	movq 0(%r14), %r15
	movq %r15, -40(%rbp)
	mov 0(%r14), %r15
	mov %r15, -40(%rbp)
uuid_00000000000dab82:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	pushq $0
uuid_00000000000dab86:
#call function .free-space : Arrow<Array<MallocBlock,?>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_free_SB_space_CL_ArrowU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab87
	jmp uuid_00000000000dab88
uuid_00000000000dab87:
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	mov $malloc_SB_first_SB_free_CL_U64, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	mov -40(%rbp), %r15
	mov %r15, 0(%r14)
	push %RBP
	mov -16(%RBP), %RAX
	mov $malloc_SB_large_SB_size_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab83
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	jmp uuid_00000000000dab85
uuid_00000000000dab83:
uuid_00000000000dab85:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	add $8, %RSP
	jmp uuid_00000000000dab86
uuid_00000000000dab88:
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $8, %RAX
	mov -64(%RBP), %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov $malloc_SB_block_SB_tail_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov -72(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $malloc_SB_block_SB_tail_CL_U64, %r15
	pushq 0(%r15)
	mov -80(%RBP), %RAX
	mov $24, %R14
	addq %R14,%RAX
	push %RAX
	mov -88(%RBP), %RAX
	mov -8(%RBP), %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $malloc_SB_block_SB_tail_CL_U64, %r14
	movq %r15, 0(%r14)
#call function .block-next : Arrow<Array<MallocBlock,?>,Array<MallocBlock,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_block_SB_next_CL_ArrowArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab89
	jmp uuid_00000000000dab8b
uuid_00000000000dab89:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dab8b:
	mov -104(%RBP),%RSP
	add $-104, %RSP
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-size : Arrow<Cons<Array<MallocBlock,?>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_size_CL_ArrowNilConsU64Array_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function set.block-next : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_next_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -80(%RBP), %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab8c
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dab8e
uuid_00000000000dab8c:
#call function set.block-prev : Arrow<Cons<Array<MallocBlock,?>,Array<MallocBlock,?>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $0
	mov %RBX, %RBP
	call set_DT_block_SB_prev_CL_ArrowNilConsArray_QM_MallocBlockArray_QM_MallocBlock
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dab8e:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_:
	pushq $0
uuid_00000000000dab8f:
	mov -40(%RBP), %RAX
	mov -24(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dab90
	jmp uuid_00000000000dab91
uuid_00000000000dab90:
	mov -16(%RBP), %R14B
	mov -40(%RBP), %R13
	mov -8(%RBP), %R15
	add %R13, %R15
	movb %R14B, 0(%R15)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000dab8f
uuid_00000000000dab91:
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64Type:
	mov $3, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64AST:
	mov $10, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentKV:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64FragmentList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64Context:
	mov $2, %RAX
	push %RAX
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
non_SB_zero_CL_ArrowU64TContext:
	mov $2, %RAX
	push %RAX
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
non_SB_zero_CL_ArrowU64FContext:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
non_SB_zero_CL_ArrowU64STypeList:
	mov $1, %RAX
	push %RAX
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64StringTypeList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64StringList:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64StringU64List:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringStringList:
	mov $1, %RAX
	push %RAX
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
non_SB_zero_CL_ArrowU64StringSList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64MacroList:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
non_SB_zero_CL_ArrowU64SfxList:
	mov $1, %RAX
	push %RAX
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mangle_SB_identifier_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dabfb:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dabfc
	jmp uuid_00000000000dabfd
uuid_00000000000dabfc:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabf8
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabf5
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabf2
	push %RBP
	pushq -48(%rbp)
	mov -112(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabef
	push %RBP
	pushq -48(%rbp)
	mov -128(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabec
	push %RBP
	pushq -48(%rbp)
	mov -144(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabe9
	push %RBP
	pushq -48(%rbp)
	mov -160(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabe6
	push %RBP
	pushq -48(%rbp)
	mov -176(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabe3
	push %RBP
	pushq -48(%rbp)
	mov -192(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabe0
	push %RBP
	pushq -48(%rbp)
	mov -208(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabdd
	push %RBP
	pushq -48(%rbp)
	mov -224(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabda
	push %RBP
	pushq -48(%rbp)
	mov -240(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabd7
	push %RBP
	pushq -48(%rbp)
	mov -256(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabd4
	push %RBP
	pushq -48(%rbp)
	mov -272(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabd1
	push %RBP
	pushq -48(%rbp)
	mov -288(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabce
	push %RBP
	pushq -48(%rbp)
	mov -304(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabcb
	push %RBP
	pushq -48(%rbp)
	mov -320(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabc8
	push %RBP
	pushq -48(%rbp)
	mov -336(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabc5
	push %RBP
	pushq -48(%rbp)
	mov -352(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabc2
	push %RBP
	pushq -48(%rbp)
	mov -368(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabbf
	push %RBP
	pushq -48(%rbp)
	mov -384(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabbc
	push %RBP
	pushq -48(%rbp)
	mov -400(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabb9
	push %RBP
	pushq -48(%rbp)
	mov -416(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dabb6
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000dabb3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dabb2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dabb5
uuid_00000000000dabb3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabb5:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dabb8
uuid_00000000000dabb6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabb1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabb8:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000dabbb
uuid_00000000000dabb9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabb0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabbb:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dabbe
uuid_00000000000dabbc:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabaf
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabbe:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dabc1
uuid_00000000000dabbf:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabae
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabc1:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000dabc4
uuid_00000000000dabc2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabad
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabc4:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dabc7
uuid_00000000000dabc5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabac
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabc7:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000dabca
uuid_00000000000dabc8:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabab
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabca:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000dabcd
uuid_00000000000dabcb:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dabaa
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabcd:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000dabd0
uuid_00000000000dabce:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabd0:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dabd3
uuid_00000000000dabd1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabd3:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dabd6
uuid_00000000000dabd4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabd6:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dabd9
uuid_00000000000dabd7:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabd9:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dabdc
uuid_00000000000dabda:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabdc:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dabdf
uuid_00000000000dabdd:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabdf:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dabe2
uuid_00000000000dabe0:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabe2:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dabe5
uuid_00000000000dabe3:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabe5:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dabe8
uuid_00000000000dabe6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabe8:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dabeb
uuid_00000000000dabe9:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabeb:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dabee
uuid_00000000000dabec:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab9f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabee:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dabf1
uuid_00000000000dabef:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab9e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabf1:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dabf4
uuid_00000000000dabf2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab9d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabf4:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dabf7
uuid_00000000000dabf5:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab9c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabf7:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dabfa
uuid_00000000000dabf8:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dab9b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dabfa:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000dabfb
uuid_00000000000dabfd:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mangle_SB_identifier_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac31
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac02
	jmp uuid_00000000000dac04
uuid_00000000000dac02:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dabff
	jmp uuid_00000000000dac01
uuid_00000000000dabff:
	movb $1, -152(%rbp)
uuid_00000000000dac01:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dac04:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dac2e
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac0b
	jmp uuid_00000000000dac0d
uuid_00000000000dac0b:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dac08
	jmp uuid_00000000000dac0a
uuid_00000000000dac08:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dac05
	jmp uuid_00000000000dac07
uuid_00000000000dac05:
	movb $1, -216(%rbp)
uuid_00000000000dac07:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dac0a:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dac0d:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dac2b
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac24
	jmp uuid_00000000000dac26
uuid_00000000000dac24:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dac21
	jmp uuid_00000000000dac23
uuid_00000000000dac21:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dac1e
	jmp uuid_00000000000dac20
uuid_00000000000dac1e:
	movb $1, -328(%rbp)
uuid_00000000000dac20:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dac23:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dac26:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dac28
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dac27
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dac2a
uuid_00000000000dac28:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dac2a:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dac2d
uuid_00000000000dac2b:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dac1b:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac1c
	jmp uuid_00000000000dac1d
uuid_00000000000dac1c:
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac14
	jmp uuid_00000000000dac16
uuid_00000000000dac14:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dac11
	jmp uuid_00000000000dac13
uuid_00000000000dac11:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	jmp uuid_00000000000dac0e
	jmp uuid_00000000000dac10
uuid_00000000000dac0e:
	movb $1, -384(%rbp)
uuid_00000000000dac10:
	mov -448(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dac13:
	mov -400(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000dac16:
	mov -392(%RBP),%RSP
	add $-472, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dac18
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dac17
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dac1a
uuid_00000000000dac18:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	movq -440(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -240(%rbp)
uuid_00000000000dac1a:
	mov -336(%RBP),%RSP
	add $-472, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dac1b
uuid_00000000000dac1d:
uuid_00000000000dac2d:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dac30
uuid_00000000000dac2e:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dac30:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dac33
uuid_00000000000dac31:
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dabfe
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dac33:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mangle_SB_identifier_CL_ArrowStringConsTypeString:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daba4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-identifier : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
mangle_SB_c_SB_type_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac3a
	jmp uuid_00000000000dac3c
uuid_00000000000dac3a:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dac37
	jmp uuid_00000000000dac39
uuid_00000000000dac37:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dac34
	jmp uuid_00000000000dac36
uuid_00000000000dac34:
	movb $1, -120(%rbp)
uuid_00000000000dac36:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dac39:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dac3c:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad24
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dad21
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac44
	jmp uuid_00000000000dac46
uuid_00000000000dac44:
	push %RBP
	jmp uuid_00000000000dac41
	jmp uuid_00000000000dac43
uuid_00000000000dac41:
	movb $1, -264(%rbp)
uuid_00000000000dac43:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dac46:
	mov -272(%RBP),%RSP
	add $-280, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad1e
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac4e
	jmp uuid_00000000000dac50
uuid_00000000000dac4e:
	push %RBP
	jmp uuid_00000000000dac4b
	jmp uuid_00000000000dac4d
uuid_00000000000dac4b:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac48
	jmp uuid_00000000000dac4a
uuid_00000000000dac48:
	movb $1, -320(%rbp)
uuid_00000000000dac4a:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dac4d:
	mov -336(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dac50:
	mov -328(%RBP),%RSP
	add $-352, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad1b
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac58
	jmp uuid_00000000000dac5a
uuid_00000000000dac58:
	push %RBP
	jmp uuid_00000000000dac55
	jmp uuid_00000000000dac57
uuid_00000000000dac55:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq $uuid_00000000000dac51
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac52
	jmp uuid_00000000000dac54
uuid_00000000000dac52:
	movb $1, -392(%rbp)
uuid_00000000000dac54:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dac57:
	mov -408(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dac5a:
	mov -400(%RBP),%RSP
	add $-424, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad18
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac62
	jmp uuid_00000000000dac64
uuid_00000000000dac62:
	push %RBP
	jmp uuid_00000000000dac5f
	jmp uuid_00000000000dac61
uuid_00000000000dac5f:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000dac5b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac5c
	jmp uuid_00000000000dac5e
uuid_00000000000dac5c:
	movb $1, -464(%rbp)
uuid_00000000000dac5e:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dac61:
	mov -480(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dac64:
	mov -472(%RBP),%RSP
	add $-496, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad15
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac6d
	jmp uuid_00000000000dac6f
uuid_00000000000dac6d:
	push %RBP
	jmp uuid_00000000000dac6a
	jmp uuid_00000000000dac6c
uuid_00000000000dac6a:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq $uuid_00000000000dac66
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac67
	jmp uuid_00000000000dac69
uuid_00000000000dac67:
	movb $1, -536(%rbp)
uuid_00000000000dac69:
	mov -560(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dac6c:
	mov -552(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dac6f:
	mov -544(%RBP),%RSP
	add $-568, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad12
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac78
	jmp uuid_00000000000dac7a
uuid_00000000000dac78:
	push %RBP
	jmp uuid_00000000000dac75
	jmp uuid_00000000000dac77
uuid_00000000000dac75:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000dac71
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac72
	jmp uuid_00000000000dac74
uuid_00000000000dac72:
	movb $1, -608(%rbp)
uuid_00000000000dac74:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dac77:
	mov -624(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dac7a:
	mov -616(%RBP),%RSP
	add $-640, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad0f
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac83
	jmp uuid_00000000000dac85
uuid_00000000000dac83:
	push %RBP
	jmp uuid_00000000000dac80
	jmp uuid_00000000000dac82
uuid_00000000000dac80:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq $uuid_00000000000dac7c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac7d
	jmp uuid_00000000000dac7f
uuid_00000000000dac7d:
	movb $1, -680(%rbp)
uuid_00000000000dac7f:
	mov -704(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dac82:
	mov -696(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dac85:
	mov -688(%RBP),%RSP
	add $-712, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad0c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac8e
	jmp uuid_00000000000dac90
uuid_00000000000dac8e:
	push %RBP
	jmp uuid_00000000000dac8b
	jmp uuid_00000000000dac8d
uuid_00000000000dac8b:
	push %RBP
	mov -728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq $uuid_00000000000dac87
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac88
	jmp uuid_00000000000dac8a
uuid_00000000000dac88:
	movb $1, -752(%rbp)
uuid_00000000000dac8a:
	mov -776(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dac8d:
	mov -768(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dac90:
	mov -760(%RBP),%RSP
	add $-784, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad09
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dac99
	jmp uuid_00000000000dac9b
uuid_00000000000dac99:
	push %RBP
	jmp uuid_00000000000dac96
	jmp uuid_00000000000dac98
uuid_00000000000dac96:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000dac92
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac93
	jmp uuid_00000000000dac95
uuid_00000000000dac93:
	movb $1, -824(%rbp)
uuid_00000000000dac95:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dac98:
	mov -840(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dac9b:
	mov -832(%RBP),%RSP
	add $-856, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad06
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daca4
	jmp uuid_00000000000daca6
uuid_00000000000daca4:
	push %RBP
	jmp uuid_00000000000daca1
	jmp uuid_00000000000daca3
uuid_00000000000daca1:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq $uuid_00000000000dac9d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac9e
	jmp uuid_00000000000daca0
uuid_00000000000dac9e:
	movb $1, -896(%rbp)
uuid_00000000000daca0:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000daca3:
	mov -912(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000daca6:
	mov -904(%RBP),%RSP
	add $-928, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad03
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dacaf
	jmp uuid_00000000000dacb1
uuid_00000000000dacaf:
	push %RBP
	jmp uuid_00000000000dacac
	jmp uuid_00000000000dacae
uuid_00000000000dacac:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000daca8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daca9
	jmp uuid_00000000000dacab
uuid_00000000000daca9:
	movb $1, -968(%rbp)
uuid_00000000000dacab:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dacae:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dacb1:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad00
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dacba
	jmp uuid_00000000000dacbc
uuid_00000000000dacba:
	push %RBP
	jmp uuid_00000000000dacb7
	jmp uuid_00000000000dacb9
uuid_00000000000dacb7:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq $uuid_00000000000dacb3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dacb4
	jmp uuid_00000000000dacb6
uuid_00000000000dacb4:
	movb $1, -1040(%rbp)
uuid_00000000000dacb6:
	mov -1064(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dacb9:
	mov -1056(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dacbc:
	mov -1048(%RBP),%RSP
	add $-1072, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dacfd
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dacc5
	jmp uuid_00000000000dacc7
uuid_00000000000dacc5:
	push %RBP
	jmp uuid_00000000000dacc2
	jmp uuid_00000000000dacc4
uuid_00000000000dacc2:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000dacbe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dacbf
	jmp uuid_00000000000dacc1
uuid_00000000000dacbf:
	movb $1, -1112(%rbp)
uuid_00000000000dacc1:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dacc4:
	mov -1128(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dacc7:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dacfa
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dace2
	jmp uuid_00000000000dace4
uuid_00000000000dace2:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dacd8
	jmp uuid_00000000000dacda
uuid_00000000000dacd8:
	push %RBP
	mov -1232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daccf
	jmp uuid_00000000000dacd1
uuid_00000000000daccf:
	push %RBP
	jmp uuid_00000000000daccc
	jmp uuid_00000000000dacce
uuid_00000000000daccc:
	push %RBP
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	jmp uuid_00000000000dacc9
	jmp uuid_00000000000daccb
uuid_00000000000dacc9:
	movb $1, -1312(%rbp)
uuid_00000000000daccb:
	mov -1336(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dacce:
	mov -1328(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dacd1:
	mov -1320(%RBP),%RSP
	add $-1360, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dacd5
	jmp uuid_00000000000dacd7
uuid_00000000000dacd5:
	push %RBP
	jmp uuid_00000000000dacd2
	jmp uuid_00000000000dacd4
uuid_00000000000dacd2:
	movb $1, -1248(%rbp)
uuid_00000000000dacd4:
	mov -1368(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000dacd7:
	mov -1264(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000dacda:
	mov -1256(%RBP),%RSP
	add $-1368, %RSP
	mov -1248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dacdf
	jmp uuid_00000000000dace1
uuid_00000000000dacdf:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dacdc
	jmp uuid_00000000000dacde
uuid_00000000000dacdc:
	movb $1, -1184(%rbp)
uuid_00000000000dacde:
	mov -1376(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dace1:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dace4:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dacf7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dacec
	jmp uuid_00000000000dacee
uuid_00000000000dacec:
	push %RBP
	jmp uuid_00000000000dace9
	jmp uuid_00000000000daceb
uuid_00000000000dace9:
	push %RBP
	jmp uuid_00000000000dace6
	jmp uuid_00000000000dace8
uuid_00000000000dace6:
	movb $1, -1424(%rbp)
uuid_00000000000dace8:
	mov -1448(%RBP),%RSP
	add $-1448, %RSP
uuid_00000000000daceb:
	mov -1440(%RBP),%RSP
	add $-1448, %RSP
uuid_00000000000dacee:
	mov -1432(%RBP),%RSP
	add $-1448, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dacf4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dacf3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dacf6
uuid_00000000000dacf4:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000dacef
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq $uuid_00000000000dacef
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dacf0
	pushq $0
	pushq -1456(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000dacf2
uuid_00000000000dacf0:
uuid_00000000000dacf2:
	mov -1464(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000dacf6:
	mov -1392(%RBP),%RSP
	add $-1464, %RSP
	jmp uuid_00000000000dacf9
uuid_00000000000dacf7:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000dace5
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dacf9:
	mov -1152(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000dacfc
uuid_00000000000dacfa:
	pushq $0
	pushq $uuid_00000000000dacc8
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dacfc:
	mov -1080(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000dacff
uuid_00000000000dacfd:
	pushq $0
	pushq $uuid_00000000000dacbd
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dacff:
	mov -1008(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000dad02
uuid_00000000000dad00:
	pushq $0
	pushq $uuid_00000000000dacb2
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad02:
	mov -936(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000dad05
uuid_00000000000dad03:
	pushq $0
	pushq $uuid_00000000000daca7
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad05:
	mov -864(%RBP),%RSP
	add $-928, %RSP
	jmp uuid_00000000000dad08
uuid_00000000000dad06:
	pushq $0
	pushq $uuid_00000000000dac9c
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad08:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000dad0b
uuid_00000000000dad09:
	pushq $0
	pushq $uuid_00000000000dac91
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad0b:
	mov -720(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dad0e
uuid_00000000000dad0c:
	pushq $0
	pushq $uuid_00000000000dac86
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad0e:
	mov -648(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000dad11
uuid_00000000000dad0f:
	pushq $0
	pushq $uuid_00000000000dac7b
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad11:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dad14
uuid_00000000000dad12:
	pushq $0
	pushq $uuid_00000000000dac70
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad14:
	mov -504(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000dad17
uuid_00000000000dad15:
	pushq $0
	pushq $uuid_00000000000dac65
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad17:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000dad1a
uuid_00000000000dad18:
	pushq $0
	pushq $uuid_00000000000dac40
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad1a:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000dad1d
uuid_00000000000dad1b:
	pushq $0
	pushq $uuid_00000000000dac40
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad1d:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dad20
uuid_00000000000dad1e:
uuid_00000000000dad20:
	mov -232(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dad23
uuid_00000000000dad21:
	pushq $0
	pushq $uuid_00000000000dac40
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dad23:
	mov -200(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dad26
uuid_00000000000dad24:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dac3d
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000dac3f
uuid_00000000000dac3d:
uuid_00000000000dac3f:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000dad26:
	mov -88(%RBP),%RSP
	add $-200, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
escape_SB_string_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dad4c:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dad4d
	jmp uuid_00000000000dad4e
uuid_00000000000dad4d:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad49
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000dad4b
uuid_00000000000dad49:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad46
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad43
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad40
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad3d
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad3a
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad37
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad34
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad31
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad2e
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000dad2b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dad2a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dad2d
uuid_00000000000dad2b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad28
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad29
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dad2d:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000dad30
uuid_00000000000dad2e:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad30:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dad33
uuid_00000000000dad31:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $9
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad33:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000dad36
uuid_00000000000dad34:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $35
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad36:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000dad39
uuid_00000000000dad37:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $10
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad39:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dad3c
uuid_00000000000dad3a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $39
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad3c:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000dad3f
uuid_00000000000dad3d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $41
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad3f:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000dad42
uuid_00000000000dad40:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dad27
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad42:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000dad45
uuid_00000000000dad43:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad45:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000dad48
uuid_00000000000dad46:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $59
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad48:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000dad4b:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dad4c
uuid_00000000000dad4e:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_literal_CL_ArrowStringString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dad8b:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dad8c
	jmp uuid_00000000000dad8d
uuid_00000000000dad8c:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -48(%rbp)
	mov -64(%RBP), %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad88
	push %RBP
	pushq -48(%rbp)
	mov -80(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad85
	push %RBP
	pushq -48(%rbp)
	mov -96(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad82
	push %RBP
	pushq -48(%rbp)
	jmp uuid_00000000000dad7f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dad7e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dad81
uuid_00000000000dad7f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad81:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dad84
uuid_00000000000dad82:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dad7d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad84:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dad87
uuid_00000000000dad85:
	pushq $uuid_00000000000dab3d
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad76
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad73
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad70
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad6d
	push %RBP
	pushq -96(%rbp)
	mov -176(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad6a
	push %RBP
	pushq -96(%rbp)
	mov -192(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad67
	push %RBP
	pushq -96(%rbp)
	mov -208(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad64
	push %RBP
	pushq -96(%rbp)
	mov -224(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad61
	push %RBP
	pushq -96(%rbp)
	mov -240(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad5e
	push %RBP
	pushq -96(%rbp)
	mov -256(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dad5b
	push %RBP
	jmp uuid_00000000000dad58
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dad57
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dad5a
uuid_00000000000dad58:
uuid_00000000000dad5a:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dad5d
uuid_00000000000dad5b:
	movq $uuid_00000000000dad56, -88(%rbp)
uuid_00000000000dad5d:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dad60
uuid_00000000000dad5e:
	movq $uuid_00000000000daa6f, -88(%rbp)
uuid_00000000000dad60:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dad63
uuid_00000000000dad61:
	movq $uuid_00000000000dad55, -88(%rbp)
uuid_00000000000dad63:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dad66
uuid_00000000000dad64:
	movq $uuid_00000000000dad54, -88(%rbp)
uuid_00000000000dad66:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dad69
uuid_00000000000dad67:
	movq $uuid_00000000000dad53, -88(%rbp)
uuid_00000000000dad69:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dad6c
uuid_00000000000dad6a:
	movq $uuid_00000000000dad52, -88(%rbp)
uuid_00000000000dad6c:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dad6f
uuid_00000000000dad6d:
	movq $uuid_00000000000daa70, -88(%rbp)
uuid_00000000000dad6f:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dad72
uuid_00000000000dad70:
	movq $uuid_00000000000dad51, -88(%rbp)
uuid_00000000000dad72:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dad75
uuid_00000000000dad73:
	movq $uuid_00000000000daa6e, -88(%rbp)
uuid_00000000000dad75:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dad78
uuid_00000000000dad76:
	movq $uuid_00000000000dad50, -88(%rbp)
uuid_00000000000dad78:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dad7a
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dad79
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000dad7c
uuid_00000000000dad7a:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -88(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000dad7c:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000dad87:
	mov -72(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000dad8a
uuid_00000000000dad88:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dad4f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000dad8a:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000dad8b
uuid_00000000000dad8d:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_string_CL_ArrowSS:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dad91
	jmp uuid_00000000000dad93
uuid_00000000000dad91:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dad8e
	jmp uuid_00000000000dad90
uuid_00000000000dad8e:
	movb $1, -96(%rbp)
uuid_00000000000dad90:
	mov -112(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000dad93:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dada4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dad9a
	jmp uuid_00000000000dad9c
uuid_00000000000dad9a:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dad97
	jmp uuid_00000000000dad99
uuid_00000000000dad97:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dad94
	jmp uuid_00000000000dad96
uuid_00000000000dad94:
	movb $1, -160(%rbp)
uuid_00000000000dad96:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dad99:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dad9c:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dada1
	push %RBP
	jmp uuid_00000000000dad9e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dad9d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dada0
uuid_00000000000dad9e:
uuid_00000000000dada0:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dada3
uuid_00000000000dada1:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dada3:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dada6
uuid_00000000000dada4:
	pushq $0
#call function escape-string : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dada6:
	mov -64(%RBP),%RSP
	add $-120, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
exit_SB_error_CL_ArrowNilConsASTString:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadc6
	jmp uuid_00000000000dadc8
uuid_00000000000dadc6:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadb3
	jmp uuid_00000000000dadb5
uuid_00000000000dadb3:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadaa
	jmp uuid_00000000000dadac
uuid_00000000000dadaa:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000dada7
	jmp uuid_00000000000dada9
uuid_00000000000dada7:
	movb $1, -440(%rbp)
uuid_00000000000dada9:
	mov -456(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dadac:
	mov -448(%RBP),%RSP
	add $-480, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadb0
	jmp uuid_00000000000dadb2
uuid_00000000000dadb0:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dadad
	jmp uuid_00000000000dadaf
uuid_00000000000dadad:
	movb $1, -344(%rbp)
uuid_00000000000dadaf:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dadb2:
	mov -360(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dadb5:
	mov -352(%RBP),%RSP
	add $-560, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadc3
	jmp uuid_00000000000dadc5
uuid_00000000000dadc3:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadbd
	jmp uuid_00000000000dadbf
uuid_00000000000dadbd:
	push %RBP
	jmp uuid_00000000000dadba
	jmp uuid_00000000000dadbc
uuid_00000000000dadba:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dadb7
	jmp uuid_00000000000dadb9
uuid_00000000000dadb7:
	movb $1, -648(%rbp)
uuid_00000000000dadb9:
	mov -672(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000dadbc:
	mov -664(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000dadbf:
	mov -656(%RBP),%RSP
	add $-680, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadc0
	jmp uuid_00000000000dadc2
uuid_00000000000dadc0:
	movb $1, -248(%rbp)
uuid_00000000000dadc2:
	mov -568(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000dadc5:
	mov -264(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000dadc8:
	mov -256(%RBP),%RSP
	add $-680, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadde
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dadd2
	jmp uuid_00000000000dadd4
uuid_00000000000dadd2:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dadcf
	jmp uuid_00000000000dadd1
uuid_00000000000dadcf:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dadcc
	jmp uuid_00000000000dadce
uuid_00000000000dadcc:
	movb $1, -768(%rbp)
uuid_00000000000dadce:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000dadd1:
	mov -784(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000dadd4:
	mov -776(%RBP),%RSP
	add $-936, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daddb
	push %RBP
	jmp uuid_00000000000dadd8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dadd7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dadda
uuid_00000000000dadd8:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dadda:
	mov -944(%RBP),%RSP
	add $-944, %RSP
	jmp uuid_00000000000daddd
uuid_00000000000daddb:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadd5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadca
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadca
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadd6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000daddd:
	mov -688(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000dade0
uuid_00000000000dadde:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadc9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadca
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadcb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dade0:
	mov -168(%RBP),%RSP
	add $-680, %RSP
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_variable_CL_ArrowU64String:
	pushq $0
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %AL
	mov $33, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae7c
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %AL
	mov $36, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae79
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %AL
	mov $37, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae76
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %AL
	mov $38, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae73
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %AL
	mov $42, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae70
	push %RBP
	pushq -32(%rbp)
	mov -128(%RBP), %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae6d
	push %RBP
	pushq -32(%rbp)
	mov -144(%RBP), %AL
	mov $45, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae6a
	push %RBP
	pushq -32(%rbp)
	mov -160(%RBP), %AL
	mov $46, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae67
	push %RBP
	pushq -32(%rbp)
	mov -176(%RBP), %AL
	mov $47, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae64
	push %RBP
	pushq -32(%rbp)
	mov -192(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae61
	push %RBP
	pushq -32(%rbp)
	mov -208(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae5e
	push %RBP
	pushq -32(%rbp)
	mov -224(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae5b
	push %RBP
	pushq -32(%rbp)
	mov -240(%RBP), %AL
	mov $61, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae58
	push %RBP
	pushq -32(%rbp)
	mov -256(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae55
	push %RBP
	pushq -32(%rbp)
	mov -272(%RBP), %AL
	mov $63, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae52
	push %RBP
	pushq -32(%rbp)
	mov -288(%RBP), %AL
	mov $64, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae4f
	push %RBP
	pushq -32(%rbp)
	mov -304(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae4c
	push %RBP
	pushq -32(%rbp)
	mov -320(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae49
	push %RBP
	pushq -32(%rbp)
	mov -336(%RBP), %AL
	mov $94, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae46
	push %RBP
	pushq -32(%rbp)
	mov -352(%RBP), %AL
	mov $95, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae43
	push %RBP
	pushq -32(%rbp)
	mov -368(%RBP), %AL
	mov $97, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae40
	push %RBP
	pushq -32(%rbp)
	mov -384(%RBP), %AL
	mov $98, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae3d
	push %RBP
	pushq -32(%rbp)
	mov -400(%RBP), %AL
	mov $99, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae3a
	push %RBP
	pushq -32(%rbp)
	mov -416(%RBP), %AL
	mov $100, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae37
	push %RBP
	pushq -32(%rbp)
	mov -432(%RBP), %AL
	mov $101, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae34
	push %RBP
	pushq -32(%rbp)
	mov -448(%RBP), %AL
	mov $102, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae31
	push %RBP
	pushq -32(%rbp)
	mov -464(%RBP), %AL
	mov $103, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae2e
	push %RBP
	pushq -32(%rbp)
	mov -480(%RBP), %AL
	mov $104, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae2b
	push %RBP
	pushq -32(%rbp)
	mov -496(%RBP), %AL
	mov $105, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae28
	push %RBP
	pushq -32(%rbp)
	mov -512(%RBP), %AL
	mov $106, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae25
	push %RBP
	pushq -32(%rbp)
	mov -528(%RBP), %AL
	mov $107, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae22
	push %RBP
	pushq -32(%rbp)
	mov -544(%RBP), %AL
	mov $108, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae1f
	push %RBP
	pushq -32(%rbp)
	mov -560(%RBP), %AL
	mov $109, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae1c
	push %RBP
	pushq -32(%rbp)
	mov -576(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae19
	push %RBP
	pushq -32(%rbp)
	mov -592(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae16
	push %RBP
	pushq -32(%rbp)
	mov -608(%RBP), %AL
	mov $112, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae13
	push %RBP
	pushq -32(%rbp)
	mov -624(%RBP), %AL
	mov $113, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae10
	push %RBP
	pushq -32(%rbp)
	mov -640(%RBP), %AL
	mov $114, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae0d
	push %RBP
	pushq -32(%rbp)
	mov -656(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae0a
	push %RBP
	pushq -32(%rbp)
	mov -672(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae07
	push %RBP
	pushq -32(%rbp)
	mov -688(%RBP), %AL
	mov $117, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae04
	push %RBP
	pushq -32(%rbp)
	mov -704(%RBP), %AL
	mov $118, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dae01
	push %RBP
	pushq -32(%rbp)
	mov -720(%RBP), %AL
	mov $119, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadfe
	push %RBP
	pushq -32(%rbp)
	mov -736(%RBP), %AL
	mov $120, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadfb
	push %RBP
	pushq -32(%rbp)
	mov -752(%RBP), %AL
	mov $121, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadf8
	push %RBP
	pushq -32(%rbp)
	mov -768(%RBP), %AL
	mov $122, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadf5
	push %RBP
	pushq -32(%rbp)
	mov -784(%RBP), %AL
	mov $124, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadf2
	push %RBP
	pushq -32(%rbp)
	mov -800(%RBP), %AL
	mov $126, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dadef
	push %RBP
	jmp uuid_00000000000dadec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dadeb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dadee
uuid_00000000000dadec:
uuid_00000000000dadee:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000dadf1
uuid_00000000000dadef:
	movb $1, -24(%rbp)
uuid_00000000000dadf1:
	mov -792(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000dadf4
uuid_00000000000dadf2:
	movb $1, -24(%rbp)
uuid_00000000000dadf4:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dadf7
uuid_00000000000dadf5:
	movb $1, -24(%rbp)
uuid_00000000000dadf7:
	mov -760(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000dadfa
uuid_00000000000dadf8:
	movb $1, -24(%rbp)
uuid_00000000000dadfa:
	mov -744(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000dadfd
uuid_00000000000dadfb:
	movb $1, -24(%rbp)
uuid_00000000000dadfd:
	mov -728(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000dae00
uuid_00000000000dadfe:
	movb $1, -24(%rbp)
uuid_00000000000dae00:
	mov -712(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000dae03
uuid_00000000000dae01:
	movb $1, -24(%rbp)
uuid_00000000000dae03:
	mov -696(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000dae06
uuid_00000000000dae04:
	movb $1, -24(%rbp)
uuid_00000000000dae06:
	mov -680(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000dae09
uuid_00000000000dae07:
	movb $1, -24(%rbp)
uuid_00000000000dae09:
	mov -664(%RBP),%RSP
	add $-672, %RSP
	jmp uuid_00000000000dae0c
uuid_00000000000dae0a:
	movb $1, -24(%rbp)
uuid_00000000000dae0c:
	mov -648(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000dae0f
uuid_00000000000dae0d:
	movb $1, -24(%rbp)
uuid_00000000000dae0f:
	mov -632(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dae12
uuid_00000000000dae10:
	movb $1, -24(%rbp)
uuid_00000000000dae12:
	mov -616(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dae15
uuid_00000000000dae13:
	movb $1, -24(%rbp)
uuid_00000000000dae15:
	mov -600(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000dae18
uuid_00000000000dae16:
	movb $1, -24(%rbp)
uuid_00000000000dae18:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000dae1b
uuid_00000000000dae19:
	movb $1, -24(%rbp)
uuid_00000000000dae1b:
	mov -568(%RBP),%RSP
	add $-576, %RSP
	jmp uuid_00000000000dae1e
uuid_00000000000dae1c:
	movb $1, -24(%rbp)
uuid_00000000000dae1e:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dae21
uuid_00000000000dae1f:
	movb $1, -24(%rbp)
uuid_00000000000dae21:
	mov -536(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000dae24
uuid_00000000000dae22:
	movb $1, -24(%rbp)
uuid_00000000000dae24:
	mov -520(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000dae27
uuid_00000000000dae25:
	movb $1, -24(%rbp)
uuid_00000000000dae27:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000dae2a
uuid_00000000000dae28:
	movb $1, -24(%rbp)
uuid_00000000000dae2a:
	mov -488(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000dae2d
uuid_00000000000dae2b:
	movb $1, -24(%rbp)
uuid_00000000000dae2d:
	mov -472(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000dae30
uuid_00000000000dae2e:
	movb $1, -24(%rbp)
uuid_00000000000dae30:
	mov -456(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000dae33
uuid_00000000000dae31:
	movb $1, -24(%rbp)
uuid_00000000000dae33:
	mov -440(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000dae36
uuid_00000000000dae34:
	movb $1, -24(%rbp)
uuid_00000000000dae36:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dae39
uuid_00000000000dae37:
	movb $1, -24(%rbp)
uuid_00000000000dae39:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000dae3c
uuid_00000000000dae3a:
	movb $1, -24(%rbp)
uuid_00000000000dae3c:
	mov -392(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dae3f
uuid_00000000000dae3d:
	movb $1, -24(%rbp)
uuid_00000000000dae3f:
	mov -376(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dae42
uuid_00000000000dae40:
	movb $1, -24(%rbp)
uuid_00000000000dae42:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000dae45
uuid_00000000000dae43:
	movb $1, -24(%rbp)
uuid_00000000000dae45:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dae48
uuid_00000000000dae46:
	movb $1, -24(%rbp)
uuid_00000000000dae48:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000dae4b
uuid_00000000000dae49:
	movb $1, -24(%rbp)
uuid_00000000000dae4b:
	mov -312(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000dae4e
uuid_00000000000dae4c:
	movb $1, -24(%rbp)
uuid_00000000000dae4e:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000dae51
uuid_00000000000dae4f:
	movb $1, -24(%rbp)
uuid_00000000000dae51:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dae54
uuid_00000000000dae52:
	movb $1, -24(%rbp)
uuid_00000000000dae54:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dae57
uuid_00000000000dae55:
	movb $1, -24(%rbp)
uuid_00000000000dae57:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dae5a
uuid_00000000000dae58:
	movb $1, -24(%rbp)
uuid_00000000000dae5a:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dae5d
uuid_00000000000dae5b:
	movb $1, -24(%rbp)
uuid_00000000000dae5d:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dae60
uuid_00000000000dae5e:
	movb $1, -24(%rbp)
uuid_00000000000dae60:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dae63
uuid_00000000000dae61:
	push %RBP
	mov -8(%RBP), %RAX
	inc %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dade5
	jmp uuid_00000000000dade7
uuid_00000000000dade5:
	movb $1, -24(%rbp)
uuid_00000000000dade7:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dade8
	jmp uuid_00000000000dadea
uuid_00000000000dade8:
	movb $1, -24(%rbp)
uuid_00000000000dadea:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dae63:
	mov -184(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dae66
uuid_00000000000dae64:
	movb $1, -24(%rbp)
uuid_00000000000dae66:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dae69
uuid_00000000000dae67:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000dade1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dade2
	movb $1, -24(%rbp)
	jmp uuid_00000000000dade4
uuid_00000000000dade2:
uuid_00000000000dade4:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dae69:
	mov -152(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000dae6c
uuid_00000000000dae6a:
	movb $1, -24(%rbp)
uuid_00000000000dae6c:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dae6f
uuid_00000000000dae6d:
	movb $1, -24(%rbp)
uuid_00000000000dae6f:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dae72
uuid_00000000000dae70:
	movb $1, -24(%rbp)
uuid_00000000000dae72:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dae75
uuid_00000000000dae73:
	movb $1, -24(%rbp)
uuid_00000000000dae75:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dae78
uuid_00000000000dae76:
	movb $1, -24(%rbp)
uuid_00000000000dae78:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dae7b
uuid_00000000000dae79:
	movb $1, -24(%rbp)
uuid_00000000000dae7b:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dae7e
uuid_00000000000dae7c:
	movb $1, -24(%rbp)
uuid_00000000000dae7e:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000dae7f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dae80
	jmp uuid_00000000000dae82
uuid_00000000000dae80:
	movb $0, -24(%rbp)
uuid_00000000000dae82:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringIsUsed:
	pushq $uuid_00000000000dab3d
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae95
	push %RBP
	pushq -32(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae92
	push %RBP
	pushq -32(%rbp)
	mov -80(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae8f
	push %RBP
	pushq -32(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae8c
	push %RBP
	pushq -32(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae89
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dae88
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dae8b
uuid_00000000000dae89:
	movq $uuid_00000000000dae87, -24(%rbp)
uuid_00000000000dae8b:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dae8e
uuid_00000000000dae8c:
	movq $uuid_00000000000dae86, -24(%rbp)
uuid_00000000000dae8e:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dae91
uuid_00000000000dae8f:
	movq $uuid_00000000000dae85, -24(%rbp)
uuid_00000000000dae91:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dae94
uuid_00000000000dae92:
	movq $uuid_00000000000dae84, -24(%rbp)
uuid_00000000000dae94:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dae97
uuid_00000000000dae95:
	movq $uuid_00000000000dae83, -24(%rbp)
uuid_00000000000dae97:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
to_SB_string_CL_ArrowStringType:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
to_SB_string_CL_ArrowSListType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daeb6
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daea2
	jmp uuid_00000000000daea4
uuid_00000000000daea2:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dae9f
	jmp uuid_00000000000daea1
uuid_00000000000dae9f:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000dae9c
	jmp uuid_00000000000dae9e
uuid_00000000000dae9c:
	movb $1, -216(%rbp)
uuid_00000000000dae9e:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000daea1:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000daea4:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daeb3
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daeab
	jmp uuid_00000000000daead
uuid_00000000000daeab:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daea8
	jmp uuid_00000000000daeaa
uuid_00000000000daea8:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000daea5
	jmp uuid_00000000000daea7
uuid_00000000000daea5:
	movb $1, -360(%rbp)
uuid_00000000000daea7:
	mov -424(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000daeaa:
	mov -376(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000daead:
	mov -368(%RBP),%RSP
	add $-448, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daeb0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daeaf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daeb2
uuid_00000000000daeb0:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeae
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000daeb2:
	mov -312(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000daeb5
uuid_00000000000daeb3:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000daeb5:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000daeb8
uuid_00000000000daeb6:
uuid_00000000000daeb8:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
to_SB_string_SB_impl_CL_ArrowSType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf00
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daebc
	jmp uuid_00000000000daebe
uuid_00000000000daebc:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daeb9
	jmp uuid_00000000000daebb
uuid_00000000000daeb9:
	movb $1, -152(%rbp)
uuid_00000000000daebb:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000daebe:
	mov -160(%RBP),%RSP
	add $-176, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daefd
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daec5
	jmp uuid_00000000000daec7
uuid_00000000000daec5:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daec2
	jmp uuid_00000000000daec4
uuid_00000000000daec2:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daebf
	jmp uuid_00000000000daec1
uuid_00000000000daebf:
	movb $1, -216(%rbp)
uuid_00000000000daec1:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000daec4:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000daec7:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daefa
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daecf
	jmp uuid_00000000000daed1
uuid_00000000000daecf:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daecc
	jmp uuid_00000000000daece
uuid_00000000000daecc:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daec9
	jmp uuid_00000000000daecb
uuid_00000000000daec9:
	movb $1, -328(%rbp)
uuid_00000000000daecb:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000daece:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000daed1:
	mov -336(%RBP),%RSP
	add $-400, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daef7
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daee2
	jmp uuid_00000000000daee4
uuid_00000000000daee2:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daed8
	jmp uuid_00000000000daeda
uuid_00000000000daed8:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daed5
	jmp uuid_00000000000daed7
uuid_00000000000daed5:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	jmp uuid_00000000000daed2
	jmp uuid_00000000000daed4
uuid_00000000000daed2:
	movb $1, -504(%rbp)
uuid_00000000000daed4:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000daed7:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000daeda:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daedf
	jmp uuid_00000000000daee1
uuid_00000000000daedf:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daedc
	jmp uuid_00000000000daede
uuid_00000000000daedc:
	movb $1, -440(%rbp)
uuid_00000000000daede:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000daee1:
	mov -456(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000daee4:
	mov -448(%RBP),%RSP
	add $-608, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daef4
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daeeb
	jmp uuid_00000000000daeed
uuid_00000000000daeeb:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daee8
	jmp uuid_00000000000daeea
uuid_00000000000daee8:
	push %RBP
	mov -624(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daee5
	jmp uuid_00000000000daee7
uuid_00000000000daee5:
	movb $1, -648(%rbp)
uuid_00000000000daee7:
	mov -712(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000daeea:
	mov -664(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000daeed:
	mov -656(%RBP),%RSP
	add $-720, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daef1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daef0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daef3
uuid_00000000000daef1:
	pushq $0
	pushq -720(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeee
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<List<Type>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowSListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeef
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000daef3:
	mov -616(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000daef6
uuid_00000000000daef4:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daedb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000daef6:
	mov -408(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000daef9
uuid_00000000000daef7:
	pushq $0
	pushq -400(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000daef9:
	mov -296(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000daefc
uuid_00000000000daefa:
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function to-string-impl : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_SB_impl_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daec8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000daefc:
	mov -184(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000daeff
uuid_00000000000daefd:
	pushq $0
	pushq -176(%rbp)
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000daeff:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000daf02
uuid_00000000000daf00:
	pushq $0
	pushq $uuid_00000000000dabfe
	pushq $2
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000daf02:
	mov -88(%RBP),%RSP
	add $-112, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf09
	jmp uuid_00000000000daf0b
uuid_00000000000daf09:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf06
	jmp uuid_00000000000daf08
uuid_00000000000daf06:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf03
	jmp uuid_00000000000daf05
uuid_00000000000daf03:
	movb $1, -192(%rbp)
uuid_00000000000daf05:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000daf08:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000daf0b:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf70
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf1e
	jmp uuid_00000000000daf20
uuid_00000000000daf1e:
	push %RBP
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf0f
	jmp uuid_00000000000daf11
uuid_00000000000daf0f:
	push %RBP
	mov -368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daf0c
	jmp uuid_00000000000daf0e
uuid_00000000000daf0c:
	movb $1, -384(%rbp)
uuid_00000000000daf0e:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000daf11:
	mov -392(%RBP),%RSP
	add $-408, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf1b
	jmp uuid_00000000000daf1d
uuid_00000000000daf1b:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf15
	jmp uuid_00000000000daf17
uuid_00000000000daf15:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daf12
	jmp uuid_00000000000daf14
uuid_00000000000daf12:
	movb $1, -448(%rbp)
uuid_00000000000daf14:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000daf17:
	mov -456(%RBP),%RSP
	add $-472, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf18
	jmp uuid_00000000000daf1a
uuid_00000000000daf18:
	movb $1, -336(%rbp)
uuid_00000000000daf1a:
	mov -416(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000daf1d:
	mov -352(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000daf20:
	mov -344(%RBP),%RSP
	add $-472, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf6d
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf39
	jmp uuid_00000000000daf3b
uuid_00000000000daf39:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf27
	jmp uuid_00000000000daf29
uuid_00000000000daf27:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf24
	jmp uuid_00000000000daf26
uuid_00000000000daf24:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf21
	jmp uuid_00000000000daf23
uuid_00000000000daf21:
	movb $1, -592(%rbp)
uuid_00000000000daf23:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000daf26:
	mov -608(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000daf29:
	mov -600(%RBP),%RSP
	add $-664, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf36
	jmp uuid_00000000000daf38
uuid_00000000000daf36:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf30
	jmp uuid_00000000000daf32
uuid_00000000000daf30:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf2d
	jmp uuid_00000000000daf2f
uuid_00000000000daf2d:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf2a
	jmp uuid_00000000000daf2c
uuid_00000000000daf2a:
	movb $1, -704(%rbp)
uuid_00000000000daf2c:
	mov -752(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daf2f:
	mov -720(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daf32:
	mov -712(%RBP),%RSP
	add $-776, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf33
	jmp uuid_00000000000daf35
uuid_00000000000daf33:
	movb $1, -544(%rbp)
uuid_00000000000daf35:
	mov -672(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daf38:
	mov -560(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000daf3b:
	mov -552(%RBP),%RSP
	add $-776, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf6a
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf5a
	jmp uuid_00000000000daf5c
uuid_00000000000daf5a:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf48
	jmp uuid_00000000000daf4a
uuid_00000000000daf48:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf45
	jmp uuid_00000000000daf47
uuid_00000000000daf45:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daf42
	jmp uuid_00000000000daf44
uuid_00000000000daf42:
	movb $1, -896(%rbp)
uuid_00000000000daf44:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000daf47:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000daf4a:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf57
	jmp uuid_00000000000daf59
uuid_00000000000daf57:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf51
	jmp uuid_00000000000daf53
uuid_00000000000daf51:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf4e
	jmp uuid_00000000000daf50
uuid_00000000000daf4e:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daf4b
	jmp uuid_00000000000daf4d
uuid_00000000000daf4b:
	movb $1, -1008(%rbp)
uuid_00000000000daf4d:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000daf50:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000daf53:
	mov -1016(%RBP),%RSP
	add $-1080, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf54
	jmp uuid_00000000000daf56
uuid_00000000000daf54:
	movb $1, -848(%rbp)
uuid_00000000000daf56:
	mov -976(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000daf59:
	mov -864(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000daf5c:
	mov -856(%RBP),%RSP
	add $-1080, %RSP
	mov -848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf67
	push %RBP
	jmp uuid_00000000000daf64
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daf63
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daf66
uuid_00000000000daf64:
uuid_00000000000daf66:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000daf69
uuid_00000000000daf67:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daf60
	jmp uuid_00000000000daf62
uuid_00000000000daf60:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daf5d
	jmp uuid_00000000000daf5f
uuid_00000000000daf5d:
	movq $1, -64(%rbp)
uuid_00000000000daf5f:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000daf62:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000daf69:
	mov -784(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000daf6c
uuid_00000000000daf6a:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daf3f
	jmp uuid_00000000000daf41
uuid_00000000000daf3f:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daf3c
	jmp uuid_00000000000daf3e
uuid_00000000000daf3c:
	movq $1, -64(%rbp)
uuid_00000000000daf3e:
	mov -792(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000daf41:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000daf6c:
	mov -480(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000daf6f
uuid_00000000000daf6d:
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000daf6f:
	mov -272(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000daf72
uuid_00000000000daf70:
	movq $1, -64(%rbp)
uuid_00000000000daf72:
	mov -128(%RBP),%RSP
	add $-264, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dafaa
	jmp uuid_00000000000dafac
uuid_00000000000dafaa:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dafa7
	jmp uuid_00000000000dafa9
uuid_00000000000dafa7:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf79
	jmp uuid_00000000000daf7b
uuid_00000000000daf79:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf76
	jmp uuid_00000000000daf78
uuid_00000000000daf76:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daf73
	jmp uuid_00000000000daf75
uuid_00000000000daf73:
	movb $1, -112(%rbp)
uuid_00000000000daf75:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000daf78:
	mov -128(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000daf7b:
	mov -120(%RBP),%RSP
	add $-184, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafa4
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf82
	jmp uuid_00000000000daf84
uuid_00000000000daf82:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf7f
	jmp uuid_00000000000daf81
uuid_00000000000daf7f:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000daf7c
	jmp uuid_00000000000daf7e
uuid_00000000000daf7c:
	movb $1, -224(%rbp)
uuid_00000000000daf7e:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000daf81:
	mov -240(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000daf84:
	mov -232(%RBP),%RSP
	add $-296, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafa1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dafa0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dafa3
uuid_00000000000dafa1:
	push %RBP
#call function does-concrete-type-instance-exist : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call does_SB_concrete_SB_type_SB_instance_SB_exist_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daf8d
	pushq -296(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,HashtableEq<Tuple<String,U64>,List<Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqListTypeTupleU64StringConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000daf8f
uuid_00000000000daf8d:
uuid_00000000000daf8f:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
uuid_00000000000daf9d:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000daf9e
	jmp uuid_00000000000daf9f
uuid_00000000000daf9e:
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daf96
	jmp uuid_00000000000daf98
uuid_00000000000daf96:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daf93
	jmp uuid_00000000000daf95
uuid_00000000000daf93:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000daf90
	jmp uuid_00000000000daf92
uuid_00000000000daf90:
	movb $1, -440(%rbp)
uuid_00000000000daf92:
	mov -504(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000daf95:
	mov -456(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000daf98:
	mov -448(%RBP),%RSP
	add $-528, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000daf9a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000daf99
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000daf9c
uuid_00000000000daf9a:
#call function add-concrete-type-instance : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
uuid_00000000000daf9c:
	mov -392(%RBP),%RSP
	add $-528, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000daf9d
uuid_00000000000daf9f:
uuid_00000000000dafa3:
	mov -192(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000dafa6
uuid_00000000000dafa4:
uuid_00000000000dafa6:
	mov -80(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dafa9:
	mov -48(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dafac:
	mov -40(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
does_SB_concrete_SB_type_SB_instance_SB_exist_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafb3
	jmp uuid_00000000000dafb5
uuid_00000000000dafb3:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafb0
	jmp uuid_00000000000dafb2
uuid_00000000000dafb0:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dafad
	jmp uuid_00000000000dafaf
uuid_00000000000dafad:
	movb $1, -104(%rbp)
uuid_00000000000dafaf:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dafb2:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dafb5:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafde
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafbc
	jmp uuid_00000000000dafbe
uuid_00000000000dafbc:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafb9
	jmp uuid_00000000000dafbb
uuid_00000000000dafb9:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dafb6
	jmp uuid_00000000000dafb8
uuid_00000000000dafb6:
	movb $1, -216(%rbp)
uuid_00000000000dafb8:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dafbb:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dafbe:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafdb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dafda
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dafdd
uuid_00000000000dafdb:
	pushq -288(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
uuid_00000000000dafd7:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dafd8
	jmp uuid_00000000000dafd9
uuid_00000000000dafd8:
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafcd
	jmp uuid_00000000000dafcf
uuid_00000000000dafcd:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafca
	jmp uuid_00000000000dafcc
uuid_00000000000dafca:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000dafc7
	jmp uuid_00000000000dafc9
uuid_00000000000dafc7:
	movb $1, -448(%rbp)
uuid_00000000000dafc9:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dafcc:
	mov -464(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dafcf:
	mov -456(%RBP),%RSP
	add $-536, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dafd4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dafd3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dafd6
uuid_00000000000dafd4:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dafd0
	jmp uuid_00000000000dafd2
uuid_00000000000dafd0:
	movq $1, -40(%rbp)
uuid_00000000000dafd2:
	mov -544(%RBP),%RSP
	add $-544, %RSP
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
uuid_00000000000dafd6:
	mov -400(%RBP),%RSP
	add $-544, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dafd7
uuid_00000000000dafd9:
uuid_00000000000dafdd:
	mov -184(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dafe0
uuid_00000000000dafde:
uuid_00000000000dafe0:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
typeof_CL_ArrowTypeAST:
#call function .lookup : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
ascript_CL_ArrowNilConsTypeAST:
#call function .bind : Arrow<Cons<Cons<HashtableIs<AST,Type>,AST>,Type>,HashtableIs<AST,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $type_SB_index_CL_HashtableIsTypeAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2e0
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2dd
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dafe7
	jmp uuid_00000000000dafe9
uuid_00000000000dafe7:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafe4
	jmp uuid_00000000000dafe6
uuid_00000000000dafe4:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dafe1
	jmp uuid_00000000000dafe3
uuid_00000000000dafe1:
	movb $1, -560(%rbp)
uuid_00000000000dafe3:
	mov -656(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dafe6:
	mov -576(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dafe9:
	mov -568(%RBP),%RSP
	add $-728, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2da
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daff0
	jmp uuid_00000000000daff2
uuid_00000000000daff0:
	push %RBP
	jmp uuid_00000000000dafed
	jmp uuid_00000000000dafef
uuid_00000000000dafed:
	push %RBP
	jmp uuid_00000000000dafea
	jmp uuid_00000000000dafec
uuid_00000000000dafea:
	movb $1, -816(%rbp)
uuid_00000000000dafec:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dafef:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000daff2:
	mov -824(%RBP),%RSP
	add $-840, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2d7
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000daff9
	jmp uuid_00000000000daffb
uuid_00000000000daff9:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000daff6
	jmp uuid_00000000000daff8
uuid_00000000000daff6:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000daff3
	jmp uuid_00000000000daff5
uuid_00000000000daff3:
	movb $1, -928(%rbp)
uuid_00000000000daff5:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000daff8:
	mov -944(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000daffb:
	mov -936(%RBP),%RSP
	add $-1080, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2d4
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db02d
	jmp uuid_00000000000db02f
uuid_00000000000db02d:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db01a
	jmp uuid_00000000000db01c
uuid_00000000000db01a:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db008
	jmp uuid_00000000000db00a
uuid_00000000000db008:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	jmp uuid_00000000000db005
	jmp uuid_00000000000db007
uuid_00000000000db005:
	movb $1, -1360(%rbp)
uuid_00000000000db007:
	mov -1376(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000db00a:
	mov -1368(%RBP),%RSP
	add $-1400, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db017
	jmp uuid_00000000000db019
uuid_00000000000db017:
	push %RBP
	mov -1240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db011
	jmp uuid_00000000000db013
uuid_00000000000db011:
	push %RBP
	jmp uuid_00000000000db00e
	jmp uuid_00000000000db010
uuid_00000000000db00e:
	push %RBP
	jmp uuid_00000000000db00b
	jmp uuid_00000000000db00d
uuid_00000000000db00b:
	movb $1, -1488(%rbp)
uuid_00000000000db00d:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db010:
	mov -1504(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db013:
	mov -1496(%RBP),%RSP
	add $-1512, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db014
	jmp uuid_00000000000db016
uuid_00000000000db014:
	movb $1, -1264(%rbp)
uuid_00000000000db016:
	mov -1408(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db019:
	mov -1280(%RBP),%RSP
	add $-1512, %RSP
uuid_00000000000db01c:
	mov -1272(%RBP),%RSP
	add $-1512, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db02a
	jmp uuid_00000000000db02c
uuid_00000000000db02a:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db024
	jmp uuid_00000000000db026
uuid_00000000000db024:
	push %RBP
	jmp uuid_00000000000db021
	jmp uuid_00000000000db023
uuid_00000000000db021:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db01e
	jmp uuid_00000000000db020
uuid_00000000000db01e:
	movb $1, -1600(%rbp)
uuid_00000000000db020:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db023:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db026:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db027
	jmp uuid_00000000000db029
uuid_00000000000db027:
	movb $1, -1168(%rbp)
uuid_00000000000db029:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db02c:
	mov -1184(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000db02f:
	mov -1176(%RBP),%RSP
	add $-1632, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2d1
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db06a
	jmp uuid_00000000000db06c
uuid_00000000000db06a:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db058
	jmp uuid_00000000000db05a
uuid_00000000000db058:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db04f
	jmp uuid_00000000000db051
uuid_00000000000db04f:
	push %RBP
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	jmp uuid_00000000000db04c
	jmp uuid_00000000000db04e
uuid_00000000000db04c:
	movb $1, -1912(%rbp)
uuid_00000000000db04e:
	mov -1928(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000db051:
	mov -1920(%RBP),%RSP
	add $-1952, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db055
	jmp uuid_00000000000db057
uuid_00000000000db055:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db052
	jmp uuid_00000000000db054
uuid_00000000000db052:
	movb $1, -1816(%rbp)
uuid_00000000000db054:
	mov -1960(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000db057:
	mov -1832(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000db05a:
	mov -1824(%RBP),%RSP
	add $-2032, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db067
	jmp uuid_00000000000db069
uuid_00000000000db067:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2112(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db061
	jmp uuid_00000000000db063
uuid_00000000000db061:
	push %RBP
	jmp uuid_00000000000db05e
	jmp uuid_00000000000db060
uuid_00000000000db05e:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db05b
	jmp uuid_00000000000db05d
uuid_00000000000db05b:
	movb $1, -2120(%rbp)
uuid_00000000000db05d:
	mov -2144(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db060:
	mov -2136(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db063:
	mov -2128(%RBP),%RSP
	add $-2152, %RSP
	mov -2120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db064
	jmp uuid_00000000000db066
uuid_00000000000db064:
	movb $1, -1720(%rbp)
uuid_00000000000db066:
	mov -2040(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db069:
	mov -1736(%RBP),%RSP
	add $-2152, %RSP
uuid_00000000000db06c:
	mov -1728(%RBP),%RSP
	add $-2152, %RSP
	mov -1720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2ce
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db099
	jmp uuid_00000000000db09b
uuid_00000000000db099:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db086
	jmp uuid_00000000000db088
uuid_00000000000db086:
	push %RBP
	jmp uuid_00000000000db083
	jmp uuid_00000000000db085
uuid_00000000000db083:
	push %RBP
	mov -2264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db080
	jmp uuid_00000000000db082
uuid_00000000000db080:
	movb $1, -2336(%rbp)
uuid_00000000000db082:
	mov -2360(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000db085:
	mov -2352(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000db088:
	mov -2344(%RBP),%RSP
	add $-2368, %RSP
	mov -2336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db096
	jmp uuid_00000000000db098
uuid_00000000000db096:
	push %RBP
	mov -2216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db090
	jmp uuid_00000000000db092
uuid_00000000000db090:
	push %RBP
	jmp uuid_00000000000db08d
	jmp uuid_00000000000db08f
uuid_00000000000db08d:
	push %RBP
	mov -2384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2488(%rbp)
	pushq $uuid_00000000000db089
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db08a
	jmp uuid_00000000000db08c
uuid_00000000000db08a:
	movb $1, -2456(%rbp)
uuid_00000000000db08c:
	mov -2480(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db08f:
	mov -2472(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db092:
	mov -2464(%RBP),%RSP
	add $-2488, %RSP
	mov -2456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db093
	jmp uuid_00000000000db095
uuid_00000000000db093:
	movb $1, -2240(%rbp)
uuid_00000000000db095:
	mov -2376(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db098:
	mov -2256(%RBP),%RSP
	add $-2488, %RSP
uuid_00000000000db09b:
	mov -2248(%RBP),%RSP
	add $-2488, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2cb
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0b6
	jmp uuid_00000000000db0b8
uuid_00000000000db0b6:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0a3
	jmp uuid_00000000000db0a5
uuid_00000000000db0a3:
	push %RBP
	jmp uuid_00000000000db0a0
	jmp uuid_00000000000db0a2
uuid_00000000000db0a0:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db09d
	jmp uuid_00000000000db09f
uuid_00000000000db09d:
	movb $1, -2672(%rbp)
uuid_00000000000db09f:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000db0a2:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000db0a5:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0b3
	jmp uuid_00000000000db0b5
uuid_00000000000db0b3:
	push %RBP
	mov -2552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ad
	jmp uuid_00000000000db0af
uuid_00000000000db0ad:
	push %RBP
	jmp uuid_00000000000db0aa
	jmp uuid_00000000000db0ac
uuid_00000000000db0aa:
	push %RBP
	mov -2720(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2824(%rbp)
	pushq $uuid_00000000000db0a6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db0a7
	jmp uuid_00000000000db0a9
uuid_00000000000db0a7:
	movb $1, -2792(%rbp)
uuid_00000000000db0a9:
	mov -2816(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db0ac:
	mov -2808(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db0af:
	mov -2800(%RBP),%RSP
	add $-2824, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0b0
	jmp uuid_00000000000db0b2
uuid_00000000000db0b0:
	movb $1, -2576(%rbp)
uuid_00000000000db0b2:
	mov -2712(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db0b5:
	mov -2592(%RBP),%RSP
	add $-2824, %RSP
uuid_00000000000db0b8:
	mov -2584(%RBP),%RSP
	add $-2824, %RSP
	mov -2576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2c8
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -2904(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0db
	jmp uuid_00000000000db0dd
uuid_00000000000db0db:
	push %RBP
	mov -2896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db0d8
	jmp uuid_00000000000db0da
uuid_00000000000db0d8:
	push %RBP
	mov -2888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0d2
	jmp uuid_00000000000db0d4
uuid_00000000000db0d2:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db0cf
	jmp uuid_00000000000db0d1
uuid_00000000000db0cf:
	push %RBP
	mov -3064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0c9
	jmp uuid_00000000000db0cb
uuid_00000000000db0c9:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db0c6
	jmp uuid_00000000000db0c8
uuid_00000000000db0c6:
	push %RBP
	mov -3240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0c0
	jmp uuid_00000000000db0c2
uuid_00000000000db0c0:
	push %RBP
	jmp uuid_00000000000db0bd
	jmp uuid_00000000000db0bf
uuid_00000000000db0bd:
	push %RBP
	mov -3368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3472(%rbp)
	pushq $uuid_00000000000db0b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db0ba
	jmp uuid_00000000000db0bc
uuid_00000000000db0ba:
	movb $1, -3440(%rbp)
uuid_00000000000db0bc:
	mov -3464(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0bf:
	mov -3456(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0c2:
	mov -3448(%RBP),%RSP
	add $-3472, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0c3
	jmp uuid_00000000000db0c5
uuid_00000000000db0c3:
	movb $1, -3264(%rbp)
uuid_00000000000db0c5:
	mov -3360(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0c8:
	mov -3280(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0cb:
	mov -3272(%RBP),%RSP
	add $-3472, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0cc
	jmp uuid_00000000000db0ce
uuid_00000000000db0cc:
	movb $1, -3088(%rbp)
uuid_00000000000db0ce:
	mov -3184(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0d1:
	mov -3104(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0d4:
	mov -3096(%RBP),%RSP
	add $-3472, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0d5
	jmp uuid_00000000000db0d7
uuid_00000000000db0d5:
	movb $1, -2912(%rbp)
uuid_00000000000db0d7:
	mov -3008(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0da:
	mov -2928(%RBP),%RSP
	add $-3472, %RSP
uuid_00000000000db0dd:
	mov -2920(%RBP),%RSP
	add $-3472, %RSP
	mov -2912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2c5
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -3552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ff
	jmp uuid_00000000000db101
uuid_00000000000db0ff:
	push %RBP
	mov -3544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ed
	jmp uuid_00000000000db0ef
uuid_00000000000db0ed:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0e4
	jmp uuid_00000000000db0e6
uuid_00000000000db0e4:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000db0e1
	jmp uuid_00000000000db0e3
uuid_00000000000db0e1:
	movb $1, -3752(%rbp)
uuid_00000000000db0e3:
	mov -3768(%RBP),%RSP
	add $-3792, %RSP
uuid_00000000000db0e6:
	mov -3760(%RBP),%RSP
	add $-3792, %RSP
	mov -3752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0ea
	jmp uuid_00000000000db0ec
uuid_00000000000db0ea:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db0e7
	jmp uuid_00000000000db0e9
uuid_00000000000db0e7:
	movb $1, -3656(%rbp)
uuid_00000000000db0e9:
	mov -3800(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000db0ec:
	mov -3672(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000db0ef:
	mov -3664(%RBP),%RSP
	add $-3872, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0fc
	jmp uuid_00000000000db0fe
uuid_00000000000db0fc:
	push %RBP
	mov -3536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db0f6
	jmp uuid_00000000000db0f8
uuid_00000000000db0f6:
	push %RBP
	jmp uuid_00000000000db0f3
	jmp uuid_00000000000db0f5
uuid_00000000000db0f3:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3992(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db0f0
	jmp uuid_00000000000db0f2
uuid_00000000000db0f0:
	movb $1, -3960(%rbp)
uuid_00000000000db0f2:
	mov -3984(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db0f5:
	mov -3976(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db0f8:
	mov -3968(%RBP),%RSP
	add $-3992, %RSP
	mov -3960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db0f9
	jmp uuid_00000000000db0fb
uuid_00000000000db0f9:
	movb $1, -3560(%rbp)
uuid_00000000000db0fb:
	mov -3880(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db0fe:
	mov -3576(%RBP),%RSP
	add $-3992, %RSP
uuid_00000000000db101:
	mov -3568(%RBP),%RSP
	add $-3992, %RSP
	mov -3560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2c2
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db141
	jmp uuid_00000000000db143
uuid_00000000000db141:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db12e
	jmp uuid_00000000000db130
uuid_00000000000db12e:
	push %RBP
	jmp uuid_00000000000db12b
	jmp uuid_00000000000db12d
uuid_00000000000db12b:
	movb $1, -4176(%rbp)
uuid_00000000000db12d:
	mov -4192(%RBP),%RSP
	add $-4192, %RSP
uuid_00000000000db130:
	mov -4184(%RBP),%RSP
	add $-4192, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db13e
	jmp uuid_00000000000db140
uuid_00000000000db13e:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db138
	jmp uuid_00000000000db13a
uuid_00000000000db138:
	push %RBP
	jmp uuid_00000000000db135
	jmp uuid_00000000000db137
uuid_00000000000db135:
	push %RBP
	mov -4208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq $uuid_00000000000db131
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db132
	jmp uuid_00000000000db134
uuid_00000000000db132:
	movb $1, -4280(%rbp)
uuid_00000000000db134:
	mov -4304(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db137:
	mov -4296(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db13a:
	mov -4288(%RBP),%RSP
	add $-4312, %RSP
	mov -4280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db13b
	jmp uuid_00000000000db13d
uuid_00000000000db13b:
	movb $1, -4080(%rbp)
uuid_00000000000db13d:
	mov -4200(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db140:
	mov -4096(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db143:
	mov -4088(%RBP),%RSP
	add $-4312, %RSP
	mov -4080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2bf
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db161
	jmp uuid_00000000000db163
uuid_00000000000db161:
	push %RBP
	mov -4384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db15e
	jmp uuid_00000000000db160
uuid_00000000000db15e:
	push %RBP
	mov -4376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db158
	jmp uuid_00000000000db15a
uuid_00000000000db158:
	push %RBP
	jmp uuid_00000000000db155
	jmp uuid_00000000000db157
uuid_00000000000db155:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	pushq $uuid_00000000000db151
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db152
	jmp uuid_00000000000db154
uuid_00000000000db152:
	movb $1, -4576(%rbp)
uuid_00000000000db154:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db157:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db15a:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db15b
	jmp uuid_00000000000db15d
uuid_00000000000db15b:
	movb $1, -4400(%rbp)
uuid_00000000000db15d:
	mov -4496(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db160:
	mov -4416(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000db163:
	mov -4408(%RBP),%RSP
	add $-4608, %RSP
	mov -4400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2bc
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db174
	jmp uuid_00000000000db176
uuid_00000000000db174:
	push %RBP
	mov -4680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db171
	jmp uuid_00000000000db173
uuid_00000000000db171:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db16b
	jmp uuid_00000000000db16d
uuid_00000000000db16b:
	push %RBP
	jmp uuid_00000000000db168
	jmp uuid_00000000000db16a
uuid_00000000000db168:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq $uuid_00000000000db164
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db165
	jmp uuid_00000000000db167
uuid_00000000000db165:
	movb $1, -4872(%rbp)
uuid_00000000000db167:
	mov -4896(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db16a:
	mov -4888(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db16d:
	mov -4880(%RBP),%RSP
	add $-4904, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db16e
	jmp uuid_00000000000db170
uuid_00000000000db16e:
	movb $1, -4696(%rbp)
uuid_00000000000db170:
	mov -4792(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db173:
	mov -4712(%RBP),%RSP
	add $-4904, %RSP
uuid_00000000000db176:
	mov -4704(%RBP),%RSP
	add $-4904, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2b9
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1d4
	jmp uuid_00000000000db1d6
uuid_00000000000db1d4:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db1d1
	jmp uuid_00000000000db1d3
uuid_00000000000db1d1:
	push %RBP
	mov -4968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1cb
	jmp uuid_00000000000db1cd
uuid_00000000000db1cb:
	push %RBP
	pushq -5136(%RBP)
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	jmp uuid_00000000000db1c8
	jmp uuid_00000000000db1ca
uuid_00000000000db1c8:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1c5
	jmp uuid_00000000000db1c7
uuid_00000000000db1c5:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1bf
	jmp uuid_00000000000db1c1
uuid_00000000000db1bf:
	push %RBP
	jmp uuid_00000000000db1bc
	jmp uuid_00000000000db1be
uuid_00000000000db1bc:
	push %RBP
	mov -5304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db1b9
	jmp uuid_00000000000db1bb
uuid_00000000000db1b9:
	movb $1, -5376(%rbp)
uuid_00000000000db1bb:
	mov -5400(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db1be:
	mov -5392(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db1c1:
	mov -5384(%RBP),%RSP
	add $-5408, %RSP
	mov -5376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1c2
	jmp uuid_00000000000db1c4
uuid_00000000000db1c2:
	movb $1, -5168(%rbp)
uuid_00000000000db1c4:
	mov -5296(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db1c7:
	mov -5216(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db1ca:
	mov -5184(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db1cd:
	mov -5176(%RBP),%RSP
	add $-5408, %RSP
	mov -5168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1ce
	jmp uuid_00000000000db1d0
uuid_00000000000db1ce:
	movb $1, -4992(%rbp)
uuid_00000000000db1d0:
	mov -5088(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db1d3:
	mov -5008(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000db1d6:
	mov -5000(%RBP),%RSP
	add $-5408, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2b6
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db202
	jmp uuid_00000000000db204
uuid_00000000000db202:
	push %RBP
	mov -5480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db1ff
	jmp uuid_00000000000db201
uuid_00000000000db1ff:
	push %RBP
	mov -5472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db1fc
	jmp uuid_00000000000db1fe
uuid_00000000000db1fc:
	movb $1, -5496(%rbp)
uuid_00000000000db1fe:
	mov -5592(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000db201:
	mov -5512(%RBP),%RSP
	add $-5664, %RSP
uuid_00000000000db204:
	mov -5504(%RBP),%RSP
	add $-5664, %RSP
	mov -5496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2b3
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db24e
	jmp uuid_00000000000db250
uuid_00000000000db24e:
	push %RBP
	pushq -5720(%RBP)
	pushq -5728(%RBP)
	pushq -5736(%RBP)
	jmp uuid_00000000000db24b
	jmp uuid_00000000000db24d
uuid_00000000000db24b:
	push %RBP
	mov -5712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db248
	jmp uuid_00000000000db24a
uuid_00000000000db248:
	push %RBP
	mov -5704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db245
	jmp uuid_00000000000db247
uuid_00000000000db245:
	movb $1, -5752(%rbp)
uuid_00000000000db247:
	mov -5880(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000db24a:
	mov -5800(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000db24d:
	mov -5768(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000db250:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2b0
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db284
	jmp uuid_00000000000db286
uuid_00000000000db284:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	jmp uuid_00000000000db281
	jmp uuid_00000000000db283
uuid_00000000000db281:
	push %RBP
	mov -5968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db27e
	jmp uuid_00000000000db280
uuid_00000000000db27e:
	movb $1, -6040(%rbp)
uuid_00000000000db280:
	mov -6120(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000db283:
	mov -6056(%RBP),%RSP
	add $-6128, %RSP
uuid_00000000000db286:
	mov -6048(%RBP),%RSP
	add $-6128, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2ad
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db28d
	jmp uuid_00000000000db28f
uuid_00000000000db28d:
	push %RBP
	jmp uuid_00000000000db28a
	jmp uuid_00000000000db28c
uuid_00000000000db28a:
	push %RBP
	mov -6144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db287
	jmp uuid_00000000000db289
uuid_00000000000db287:
	movb $1, -6216(%rbp)
uuid_00000000000db289:
	mov -6240(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000db28c:
	mov -6232(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000db28f:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2aa
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db29f
	jmp uuid_00000000000db2a1
uuid_00000000000db29f:
	push %RBP
	jmp uuid_00000000000db29c
	jmp uuid_00000000000db29e
uuid_00000000000db29c:
	movb $1, -6336(%rbp)
uuid_00000000000db29e:
	mov -6352(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000db2a1:
	mov -6344(%RBP),%RSP
	add $-6352, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db2a7
	push %RBP
	jmp uuid_00000000000db2a4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db2a3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db2a6
uuid_00000000000db2a4:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db2a2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2a6:
	mov -6360(%RBP),%RSP
	add $-6360, %RSP
	jmp uuid_00000000000db2a9
uuid_00000000000db2a7:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2a9:
	mov -6256(%RBP),%RSP
	add $-6352, %RSP
	jmp uuid_00000000000db2ac
uuid_00000000000db2aa:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db299
#call function typeof-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db296
	jmp uuid_00000000000db298
uuid_00000000000db296:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db290
	jmp uuid_00000000000db292
uuid_00000000000db290:
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
uuid_00000000000db292:
	mov -6296(%RBP),%RSP
	add $-6296, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db293
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db23a
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db23a
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6312(%rbp)
	pushq -6320(%rbp)
	pushq -6328(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000db295
uuid_00000000000db293:
uuid_00000000000db295:
	mov -6304(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000db298:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
	jmp uuid_00000000000db29b
uuid_00000000000db299:
uuid_00000000000db29b:
	mov -6256(%RBP),%RSP
	add $-6256, %RSP
uuid_00000000000db2ac:
	mov -6136(%RBP),%RSP
	add $-6256, %RSP
	jmp uuid_00000000000db2af
uuid_00000000000db2ad:
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof-var : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6128(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2af:
	mov -5960(%RBP),%RSP
	add $-6152, %RSP
	jmp uuid_00000000000db2b2
uuid_00000000000db2b0:
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db276
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000db278
uuid_00000000000db276:
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	push %RBP
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	pushq -6008(%rbp)
	pushq -6016(%rbp)
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq $0
	push %RBP
	mov -6112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db26f
	jmp uuid_00000000000db271
uuid_00000000000db26f:
	push %RBP
	mov -6104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db25d
	jmp uuid_00000000000db25f
uuid_00000000000db25d:
	push %RBP
	mov -6200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6304(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db254
	jmp uuid_00000000000db256
uuid_00000000000db254:
	push %RBP
	pushq -6280(%RBP)
	pushq -6288(%RBP)
	pushq -6296(%RBP)
	jmp uuid_00000000000db251
	jmp uuid_00000000000db253
uuid_00000000000db251:
	movb $1, -6312(%rbp)
uuid_00000000000db253:
	mov -6328(%RBP),%RSP
	add $-6352, %RSP
uuid_00000000000db256:
	mov -6320(%RBP),%RSP
	add $-6352, %RSP
	mov -6312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db25a
	jmp uuid_00000000000db25c
uuid_00000000000db25a:
	push %RBP
	mov -6192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db257
	jmp uuid_00000000000db259
uuid_00000000000db257:
	movb $1, -6216(%rbp)
uuid_00000000000db259:
	mov -6360(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000db25c:
	mov -6232(%RBP),%RSP
	add $-6432, %RSP
uuid_00000000000db25f:
	mov -6224(%RBP),%RSP
	add $-6432, %RSP
	mov -6216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db26c
	jmp uuid_00000000000db26e
uuid_00000000000db26c:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db266
	jmp uuid_00000000000db268
uuid_00000000000db266:
	push %RBP
	jmp uuid_00000000000db263
	jmp uuid_00000000000db265
uuid_00000000000db263:
	push %RBP
	mov -6448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6552(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db260
	jmp uuid_00000000000db262
uuid_00000000000db260:
	movb $1, -6520(%rbp)
uuid_00000000000db262:
	mov -6544(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db265:
	mov -6536(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db268:
	mov -6528(%RBP),%RSP
	add $-6552, %RSP
	mov -6520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db269
	jmp uuid_00000000000db26b
uuid_00000000000db269:
	movb $1, -6120(%rbp)
uuid_00000000000db26b:
	mov -6440(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db26e:
	mov -6136(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db271:
	mov -6128(%RBP),%RSP
	add $-6552, %RSP
	mov -6120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db273
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db272
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db275
uuid_00000000000db273:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -6368(%rbp)
	pushq -6376(%rbp)
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	pushq -6336(%rbp)
	pushq -6344(%rbp)
	pushq -6352(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db275:
	mov -6040(%RBP),%RSP
	add $-6552, %RSP
uuid_00000000000db278:
	mov -5960(%RBP),%RSP
	add $-6552, %RSP
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5896(%rbp)
	pushq -5904(%rbp)
	pushq -5912(%rbp)
	pushq -5920(%rbp)
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5856(%rbp)
	pushq -5864(%rbp)
	pushq -5872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db279
	pushq -6560(%rbp)
	pushq -6568(%rbp)
	pushq -6576(%rbp)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db27b
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db27a
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db27a
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6584(%rbp)
	pushq -6592(%rbp)
	pushq -6600(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000db27d
uuid_00000000000db27b:
uuid_00000000000db27d:
	mov -6608(%RBP),%RSP
	add $-6608, %RSP
uuid_00000000000db2b2:
	mov -5672(%RBP),%RSP
	add $-6608, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db2b5
uuid_00000000000db2b3:
	pushq $3
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db205
	jmp uuid_00000000000db207
uuid_00000000000db205:
	pushq $0
	popq -5672(%RBP)
uuid_00000000000db207:
	mov -5680(%RBP),%RSP
	add $-5680, %RSP
	pushq $4
	pushq $0
	pushq $0
	pushq $3
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -5720(%rbp)
	pushq -5728(%rbp)
	pushq -5736(%rbp)
	pushq -5744(%rbp)
	pushq -5752(%rbp)
	pushq -5760(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq $0
	push %RBP
	mov -5864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db20e
	jmp uuid_00000000000db210
uuid_00000000000db20e:
	push %RBP
	jmp uuid_00000000000db20b
	jmp uuid_00000000000db20d
uuid_00000000000db20b:
	push %RBP
	mov -5800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db208
	jmp uuid_00000000000db20a
uuid_00000000000db208:
	movb $1, -5872(%rbp)
uuid_00000000000db20a:
	mov -5896(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000db20d:
	mov -5888(%RBP),%RSP
	add $-5904, %RSP
uuid_00000000000db210:
	mov -5880(%RBP),%RSP
	add $-5904, %RSP
	mov -5872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db221
	push %RBP
	jmp uuid_00000000000db21e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db21d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db220
uuid_00000000000db21e:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db217
	jmp uuid_00000000000db219
uuid_00000000000db217:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000db219:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db21a
	jmp uuid_00000000000db21c
uuid_00000000000db21a:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000db21c:
	mov -5928(%RBP),%RSP
	add $-5928, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq -5976(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000db220:
	mov -5912(%RBP),%RSP
	add $-5984, %RSP
	jmp uuid_00000000000db223
uuid_00000000000db221:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db211
	jmp uuid_00000000000db213
uuid_00000000000db211:
	pushq $3
	popq -5688(%RBP)
uuid_00000000000db213:
	mov -5912(%RBP),%RSP
	add $-5912, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5672(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db214
	jmp uuid_00000000000db216
uuid_00000000000db214:
	pushq $0
	popq -5688(%RBP)
uuid_00000000000db216:
	mov -5920(%RBP),%RSP
	add $-5920, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function apply-or-cons-and-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000db223:
	mov -5792(%RBP),%RSP
	add $-6000, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db224
	jmp uuid_00000000000db226
uuid_00000000000db224:
#call function implicit-tail : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call implicit_SB_tail_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5712(%RBP)
	popq -5704(%RBP)
	popq -5696(%RBP)
uuid_00000000000db226:
	mov -6008(%RBP),%RSP
	add $-6008, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000db227
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db22a
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db22c
uuid_00000000000db22a:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db228
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db228
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db227
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $uuid_00000000000db229
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db22c:
	mov -6016(%RBP),%RSP
	add $-6016, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6024(%rbp)
	pushq -6032(%rbp)
	pushq -6040(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db242
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db244
uuid_00000000000db242:
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	push %RBP
	pushq -6056(%rbp)
	pushq -6064(%rbp)
	pushq -6072(%rbp)
	pushq -6080(%rbp)
	pushq -6088(%rbp)
	pushq -6096(%rbp)
	pushq -6104(%rbp)
	pushq -6112(%rbp)
	pushq -6120(%rbp)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db233
	jmp uuid_00000000000db235
uuid_00000000000db233:
	push %RBP
	jmp uuid_00000000000db230
	jmp uuid_00000000000db232
uuid_00000000000db230:
	push %RBP
	mov -6136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db22d
	jmp uuid_00000000000db22f
uuid_00000000000db22d:
	movb $1, -6208(%rbp)
uuid_00000000000db22f:
	mov -6232(%RBP),%RSP
	add $-6240, %RSP
uuid_00000000000db232:
	mov -6224(%RBP),%RSP
	add $-6240, %RSP
uuid_00000000000db235:
	mov -6216(%RBP),%RSP
	add $-6240, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db23f
	push %RBP
	jmp uuid_00000000000db23c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db23b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db23e
uuid_00000000000db23c:
uuid_00000000000db23e:
	mov -6248(%RBP),%RSP
	add $-6248, %RSP
	mov %RSP, %R14
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db241
uuid_00000000000db23f:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db236
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function var-name-if-var : Arrow<AST,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call var_SB_name_SB_if_SB_var_CL_ArrowStringAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db237
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6240(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db238
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6256(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db239
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6248(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -6280(%RBP)
	popq -6272(%RBP)
	popq -6264(%RBP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db23a
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db23a
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db241:
	mov -6128(%RBP),%RSP
	add $-6280, %RSP
uuid_00000000000db244:
	mov -6048(%RBP),%RSP
	add $-6280, %RSP
uuid_00000000000db2b5:
	mov -5416(%RBP),%RSP
	add $-6280, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db2b8
uuid_00000000000db2b6:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5408(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db1db
	jmp uuid_00000000000db1dd
uuid_00000000000db1db:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1d8
	jmp uuid_00000000000db1da
uuid_00000000000db1d8:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1d7
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db1da:
	mov -5448(%RBP),%RSP
	add $-5448, %RSP
uuid_00000000000db1dd:
	mov -5440(%RBP),%RSP
	add $-5448, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db1df
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1de
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db1e1
uuid_00000000000db1df:
uuid_00000000000db1e1:
	mov -5480(%RBP),%RSP
	add $-5480, %RSP
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -5472(%RBP)
	popq -5464(%RBP)
	popq -5456(%RBP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1f4
	jmp uuid_00000000000db1f6
uuid_00000000000db1f4:
	push %RBP
	jmp uuid_00000000000db1f1
	jmp uuid_00000000000db1f3
uuid_00000000000db1f1:
	push %RBP
	mov -5616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1eb
	jmp uuid_00000000000db1ed
uuid_00000000000db1eb:
	push %RBP
	jmp uuid_00000000000db1e8
	jmp uuid_00000000000db1ea
uuid_00000000000db1e8:
	push %RBP
	jmp uuid_00000000000db1e5
	jmp uuid_00000000000db1e7
uuid_00000000000db1e5:
	push %RBP
	mov -5696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db1e2
	jmp uuid_00000000000db1e4
uuid_00000000000db1e2:
	movb $1, -5744(%rbp)
uuid_00000000000db1e4:
	mov -5776(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db1e7:
	mov -5768(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db1ea:
	mov -5760(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db1ed:
	mov -5752(%RBP),%RSP
	add $-5848, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1ee
	jmp uuid_00000000000db1f0
uuid_00000000000db1ee:
	movb $1, -5640(%rbp)
uuid_00000000000db1f0:
	mov -5664(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db1f3:
	mov -5656(%RBP),%RSP
	add $-5848, %RSP
uuid_00000000000db1f6:
	mov -5648(%RBP),%RSP
	add $-5848, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1f8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db1f7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db1fa
uuid_00000000000db1f8:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	pushq -5848(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db1fa:
	mov -5560(%RBP),%RSP
	add $-5848, %RSP
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -5408(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1fb
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db1fb
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db2b8:
	mov -4912(%RBP),%RSP
	add $-5848, %RSP
	jmp uuid_00000000000db2bb
uuid_00000000000db2b9:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -4984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db18f
	jmp uuid_00000000000db191
uuid_00000000000db18f:
	push %RBP
	mov -4976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db186
	jmp uuid_00000000000db188
uuid_00000000000db186:
	push %RBP
	mov -5040(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db17d
	jmp uuid_00000000000db17f
uuid_00000000000db17d:
	push %RBP
	mov -5104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db17a
	jmp uuid_00000000000db17c
uuid_00000000000db17a:
	push %RBP
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db177
	jmp uuid_00000000000db179
uuid_00000000000db177:
	movb $1, -5120(%rbp)
uuid_00000000000db179:
	mov -5184(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000db17c:
	mov -5136(%RBP),%RSP
	add $-5208, %RSP
uuid_00000000000db17f:
	mov -5128(%RBP),%RSP
	add $-5208, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db183
	jmp uuid_00000000000db185
uuid_00000000000db183:
	push %RBP
	jmp uuid_00000000000db180
	jmp uuid_00000000000db182
uuid_00000000000db180:
	movb $1, -5056(%rbp)
uuid_00000000000db182:
	mov -5216(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000db185:
	mov -5072(%RBP),%RSP
	add $-5216, %RSP
uuid_00000000000db188:
	mov -5064(%RBP),%RSP
	add $-5216, %RSP
	mov -5056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db18c
	jmp uuid_00000000000db18e
uuid_00000000000db18c:
	push %RBP
	mov -4968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5232(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db189
	jmp uuid_00000000000db18b
uuid_00000000000db189:
	movb $1, -4992(%rbp)
uuid_00000000000db18b:
	mov -5224(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000db18e:
	mov -5008(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000db191:
	mov -5000(%RBP),%RSP
	add $-5232, %RSP
	mov -4992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1b6
	push %RBP
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq $0
	push %RBP
	mov -5264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1aa
	jmp uuid_00000000000db1ac
uuid_00000000000db1aa:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db1a1
	jmp uuid_00000000000db1a3
uuid_00000000000db1a1:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db198
	jmp uuid_00000000000db19a
uuid_00000000000db198:
	push %RBP
	mov -5384(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -5456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db195
	jmp uuid_00000000000db197
uuid_00000000000db195:
	push %RBP
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	jmp uuid_00000000000db192
	jmp uuid_00000000000db194
uuid_00000000000db192:
	movb $1, -5400(%rbp)
uuid_00000000000db194:
	mov -5464(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000db197:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000db19a:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db19e
	jmp uuid_00000000000db1a0
uuid_00000000000db19e:
	push %RBP
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db19b
	jmp uuid_00000000000db19d
uuid_00000000000db19b:
	movb $1, -5336(%rbp)
uuid_00000000000db19d:
	mov -5496(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000db1a0:
	mov -5352(%RBP),%RSP
	add $-5520, %RSP
uuid_00000000000db1a3:
	mov -5344(%RBP),%RSP
	add $-5520, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1a7
	jmp uuid_00000000000db1a9
uuid_00000000000db1a7:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5536(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db1a4
	jmp uuid_00000000000db1a6
uuid_00000000000db1a4:
	movb $1, -5272(%rbp)
uuid_00000000000db1a6:
	mov -5528(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000db1a9:
	mov -5288(%RBP),%RSP
	add $-5536, %RSP
uuid_00000000000db1ac:
	mov -5280(%RBP),%RSP
	add $-5536, %RSP
	mov -5272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db1b3
	push %RBP
	jmp uuid_00000000000db1b0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db1af
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db1b2
uuid_00000000000db1b0:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db164
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db164
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db1b2:
	mov -5544(%RBP),%RSP
	add $-5544, %RSP
	jmp uuid_00000000000db1b5
uuid_00000000000db1b3:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db164
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db164
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1ad
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db1ad
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -4928(%RBP)
	popq -4920(%RBP)
	popq -4912(%RBP)
uuid_00000000000db1b5:
	mov -5240(%RBP),%RSP
	add $-5536, %RSP
	jmp uuid_00000000000db1b8
uuid_00000000000db1b6:
uuid_00000000000db1b8:
	mov -4960(%RBP),%RSP
	add $-5232, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2bb:
	mov -4616(%RBP),%RSP
	add $-5232, %RSP
	jmp uuid_00000000000db2be
uuid_00000000000db2bc:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq $1
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2be:
	mov -4320(%RBP),%RSP
	add $-4608, %RSP
	jmp uuid_00000000000db2c1
uuid_00000000000db2bf:
#call function as-constant : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac7c
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call as_SB_constant_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq $0
	push %RBP
	mov -4488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db14a
	jmp uuid_00000000000db14c
uuid_00000000000db14a:
	push %RBP
	jmp uuid_00000000000db147
	jmp uuid_00000000000db149
uuid_00000000000db147:
	push %RBP
	mov -4472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db144
	jmp uuid_00000000000db146
uuid_00000000000db144:
	movb $1, -4496(%rbp)
uuid_00000000000db146:
	mov -4520(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000db149:
	mov -4512(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000db14c:
	mov -4504(%RBP),%RSP
	add $-4592, %RSP
	mov -4496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db14e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db14d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db150
uuid_00000000000db14e:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db150:
	mov -4416(%RBP),%RSP
	add $-4592, %RSP
uuid_00000000000db2c1:
	mov -4000(%RBP),%RSP
	add $-4592, %RSP
	jmp uuid_00000000000db2c4
uuid_00000000000db2c2:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	push %RBP
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq $0
	push %RBP
	mov -4168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db108
	jmp uuid_00000000000db10a
uuid_00000000000db108:
	push %RBP
	jmp uuid_00000000000db105
	jmp uuid_00000000000db107
uuid_00000000000db105:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db102
	jmp uuid_00000000000db104
uuid_00000000000db102:
	movb $1, -4176(%rbp)
uuid_00000000000db104:
	mov -4200(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000db107:
	mov -4192(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000db10a:
	mov -4184(%RBP),%RSP
	add $-4208, %RSP
	mov -4176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db11f
	push %RBP
	jmp uuid_00000000000db11c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db11b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db11e
uuid_00000000000db11c:
uuid_00000000000db11e:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	jmp uuid_00000000000db121
uuid_00000000000db11f:
	push %RBP
#call function is-reg8 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db10c
	jmp uuid_00000000000db10e
uuid_00000000000db10c:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db10b
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db10e:
	mov -4216(%RBP),%RSP
	add $-4216, %RSP
	push %RBP
#call function is-reg16 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db110
	jmp uuid_00000000000db112
uuid_00000000000db110:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db10f
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db112:
	mov -4224(%RBP),%RSP
	add $-4224, %RSP
	push %RBP
#call function is-reg32 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db114
	jmp uuid_00000000000db116
uuid_00000000000db114:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db113
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db116:
	mov -4232(%RBP),%RSP
	add $-4232, %RSP
	push %RBP
#call function is-reg64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db118
	jmp uuid_00000000000db11a
uuid_00000000000db118:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db117
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -4016(%RBP)
	popq -4008(%RBP)
	popq -4000(%RBP)
uuid_00000000000db11a:
	mov -4240(%RBP),%RSP
	add $-4240, %RSP
uuid_00000000000db121:
	mov -4096(%RBP),%RSP
	add $-4240, %RSP
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db128
	jmp uuid_00000000000db12a
uuid_00000000000db128:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db122
	jmp uuid_00000000000db124
uuid_00000000000db122:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000db124:
	mov -4280(%RBP),%RSP
	add $-4280, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db125
	jmp uuid_00000000000db127
uuid_00000000000db125:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
uuid_00000000000db127:
	mov -4312(%RBP),%RSP
	add $-4312, %RSP
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -3792(%RBP)
	popq -3784(%RBP)
	popq -3776(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db12a:
	mov -4248(%RBP),%RSP
	add $-4312, %RSP
uuid_00000000000db2c4:
	mov -3480(%RBP),%RSP
	add $-4312, %RSP
	jmp uuid_00000000000db2c7
uuid_00000000000db2c5:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db0de
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	mov %RSP, %R14
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db0e0
uuid_00000000000db0de:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	pushq -3328(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	pushq -3592(%rbp)
	pushq -3600(%rbp)
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000db0e0:
	mov -3480(%RBP),%RSP
	add $-3600, %RSP
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $2
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -3136(%rbp)
	pushq -3144(%rbp)
	pushq -3152(%rbp)
	pushq -3160(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2c7:
	mov -2832(%RBP),%RSP
	add $-3600, %RSP
	jmp uuid_00000000000db2ca
uuid_00000000000db2c8:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2ca:
	mov -2496(%RBP),%RSP
	add $-2824, %RSP
	jmp uuid_00000000000db2cd
uuid_00000000000db2cb:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2368(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db09c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2cd:
	mov -2160(%RBP),%RSP
	add $-2488, %RSP
	jmp uuid_00000000000db2d0
uuid_00000000000db2ce:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq $0
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db07d
	jmp uuid_00000000000db07f
uuid_00000000000db07d:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db06d
	jmp uuid_00000000000db06f
uuid_00000000000db06d:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	movq -2240(%rbp), %r15
	movq %r15, -1952(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -1944(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -1936(%rbp)
uuid_00000000000db06f:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq $0
	push %RBP
	mov -2392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db076
	jmp uuid_00000000000db078
uuid_00000000000db076:
	push %RBP
	mov -2384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db073
	jmp uuid_00000000000db075
uuid_00000000000db073:
	push %RBP
	mov -2376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db070
	jmp uuid_00000000000db072
uuid_00000000000db070:
	movb $1, -2400(%rbp)
uuid_00000000000db072:
	mov -2496(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db075:
	mov -2416(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db078:
	mov -2408(%RBP),%RSP
	add $-2568, %RSP
	mov -2400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db07a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db079
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db07c
uuid_00000000000db07a:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db07c:
	mov -2320(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db07f:
	mov -2184(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000db2d0:
	mov -1640(%RBP),%RSP
	add $-2568, %RSP
	jmp uuid_00000000000db2d3
uuid_00000000000db2d1:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db03f
	jmp uuid_00000000000db041
uuid_00000000000db03f:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db036
	jmp uuid_00000000000db038
uuid_00000000000db036:
	push %RBP
	jmp uuid_00000000000db033
	jmp uuid_00000000000db035
uuid_00000000000db033:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db030
	jmp uuid_00000000000db032
uuid_00000000000db030:
	movb $1, -1888(%rbp)
uuid_00000000000db032:
	mov -1912(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000db035:
	mov -1904(%RBP),%RSP
	add $-1984, %RSP
uuid_00000000000db038:
	mov -1896(%RBP),%RSP
	add $-1984, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db03c
	jmp uuid_00000000000db03e
uuid_00000000000db03c:
	push %RBP
	jmp uuid_00000000000db039
	jmp uuid_00000000000db03b
uuid_00000000000db039:
	movb $1, -1792(%rbp)
uuid_00000000000db03b:
	mov -1992(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000db03e:
	mov -1808(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000db041:
	mov -1800(%RBP),%RSP
	add $-1992, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db049
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db048
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db04b
uuid_00000000000db049:
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db042
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	jmp uuid_00000000000db044
uuid_00000000000db042:
uuid_00000000000db044:
	mov -2000(%RBP),%RSP
	add $-2000, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db045
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db047
uuid_00000000000db045:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1400(%RBP)
	popq -1392(%RBP)
	popq -1384(%RBP)
uuid_00000000000db047:
	mov -2032(%RBP),%RSP
	add $-2032, %RSP
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db04b:
	mov -1712(%RBP),%RSP
	add $-2032, %RSP
uuid_00000000000db2d3:
	mov -1088(%RBP),%RSP
	add $-2032, %RSP
	jmp uuid_00000000000db2d6
uuid_00000000000db2d4:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db002
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dafff
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffd
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000daffd
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	jmp uuid_00000000000db001
uuid_00000000000dafff:
uuid_00000000000db001:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000db004
uuid_00000000000db002:
uuid_00000000000db004:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000db2d6:
	mov -848(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000db2d9
uuid_00000000000db2d7:
uuid_00000000000db2d9:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	mov %RSP, %R14
	add $72, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	movq 112(%R14), %R15
	movq %R15, 112(%RSP)
	movq 104(%R14), %R15
	movq %R15, 104(%RSP)
	movq 96(%R14), %R15
	movq %R15, 96(%RSP)
	movq 88(%R14), %R15
	movq %R15, 88(%RSP)
	movq 80(%R14), %R15
	movq %R15, 80(%RSP)
	movq 72(%R14), %R15
	movq %R15, 72(%RSP)
	movq 64(%R14), %R15
	movq %R15, 64(%RSP)
	movq 56(%R14), %R15
	movq %R15, 56(%RSP)
	movq 48(%R14), %R15
	movq %R15, 48(%RSP)
	movq 40(%R14), %R15
	movq %R15, 40(%RSP)
	movq 32(%R14), %R15
	movq %R15, 32(%RSP)
	movq 24(%R14), %R15
	movq %R15, 24(%RSP)
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db2dc
uuid_00000000000db2da:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
	push -264(%RSP)
uuid_00000000000db2dc:
	mov -480(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000db2df
uuid_00000000000db2dd:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2df:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000db2e2
uuid_00000000000db2e0:
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db2e2:
	mov -320(%RBP),%RSP
	add $-392, %RSP
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db2e3
	mov %RSP, %R14
	movq 16(%R14), %R15
	movq %R15, 16(%RSP)
	movq 8(%R14), %R15
	movq %R15, 8(%RSP)
	movq 0(%R14), %R15
	movq %R15, 0(%RSP)
	jmp uuid_00000000000db2e5
uuid_00000000000db2e3:
#call function maybe-specialize : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db23a
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $uuid_00000000000db23a
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
uuid_00000000000db2e5:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $240, %rsp
	ret
add_SB_alias_CL_ArrowNilConsTypeConsStringString:
#call function cons : Arrow<Cons<Tuple<Tuple<String,String>,Type>,List<Tuple<Tuple<String,String>,Type>>>,List<Tuple<Tuple<String,String>,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $48, %rsp
	ret
find_SB_alias_CL_ArrowStringConsTypeString:
	pushq -8(%rbp)
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000db366:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db367
	jmp uuid_00000000000db368
uuid_00000000000db367:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db328
	jmp uuid_00000000000db32a
uuid_00000000000db328:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db325
	jmp uuid_00000000000db327
uuid_00000000000db325:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000db322
	jmp uuid_00000000000db324
uuid_00000000000db322:
	movb $1, -280(%rbp)
uuid_00000000000db324:
	mov -376(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000db327:
	mov -296(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000db32a:
	mov -288(%RBP),%RSP
	add $-432, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db363
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db362
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db365
uuid_00000000000db363:
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	push %RBP
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db355
	jmp uuid_00000000000db357
uuid_00000000000db355:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db343
	jmp uuid_00000000000db345
uuid_00000000000db343:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db33a
	jmp uuid_00000000000db33c
uuid_00000000000db33a:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db331
	jmp uuid_00000000000db333
uuid_00000000000db331:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db32e
	jmp uuid_00000000000db330
uuid_00000000000db32e:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000db32b
	jmp uuid_00000000000db32d
uuid_00000000000db32b:
	movb $1, -736(%rbp)
uuid_00000000000db32d:
	mov -800(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db330:
	mov -752(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db333:
	mov -744(%RBP),%RSP
	add $-824, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db337
	jmp uuid_00000000000db339
uuid_00000000000db337:
	push %RBP
	jmp uuid_00000000000db334
	jmp uuid_00000000000db336
uuid_00000000000db334:
	movb $1, -672(%rbp)
uuid_00000000000db336:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000db339:
	mov -688(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000db33c:
	mov -680(%RBP),%RSP
	add $-832, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db340
	jmp uuid_00000000000db342
uuid_00000000000db340:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db33d
	jmp uuid_00000000000db33f
uuid_00000000000db33d:
	movb $1, -608(%rbp)
uuid_00000000000db33f:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000db342:
	mov -624(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000db345:
	mov -616(%RBP),%RSP
	add $-848, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db352
	jmp uuid_00000000000db354
uuid_00000000000db352:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db34c
	jmp uuid_00000000000db34e
uuid_00000000000db34c:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db349
	jmp uuid_00000000000db34b
uuid_00000000000db349:
	push %RBP
	mov -864(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db346
	jmp uuid_00000000000db348
uuid_00000000000db346:
	movb $1, -888(%rbp)
uuid_00000000000db348:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db34b:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db34e:
	mov -896(%RBP),%RSP
	add $-928, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db34f
	jmp uuid_00000000000db351
uuid_00000000000db34f:
	movb $1, -560(%rbp)
uuid_00000000000db351:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db354:
	mov -576(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000db357:
	mov -568(%RBP),%RSP
	add $-928, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db35f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db35e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db361
uuid_00000000000db35f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db35b
	jmp uuid_00000000000db35d
uuid_00000000000db35b:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db358
	jmp uuid_00000000000db35a
uuid_00000000000db358:
	movq -912(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -912(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000db35a:
	mov -944(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000db35d:
	mov -936(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000db361:
	mov -496(%RBP),%RSP
	add $-944, %RSP
	movq -368(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000db365:
	mov -200(%RBP),%RSP
	add $-944, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db366
uuid_00000000000db368:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
find_SB_alias_SB_type_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $3
	mov $alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000db3aa:
#call function non-zero : Arrow<List<Tuple<Tuple<String,String>,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db3ab
	jmp uuid_00000000000db3ac
uuid_00000000000db3ab:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db387
	jmp uuid_00000000000db389
uuid_00000000000db387:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db384
	jmp uuid_00000000000db386
uuid_00000000000db384:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	jmp uuid_00000000000db381
	jmp uuid_00000000000db383
uuid_00000000000db381:
	movb $1, -272(%rbp)
uuid_00000000000db383:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db386:
	mov -288(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db389:
	mov -280(%RBP),%RSP
	add $-424, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3a7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db3a6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db3a9
uuid_00000000000db3a7:
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db399
	jmp uuid_00000000000db39b
uuid_00000000000db399:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000db396
	jmp uuid_00000000000db398
uuid_00000000000db396:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db390
	jmp uuid_00000000000db392
uuid_00000000000db390:
	push %RBP
	mov -616(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db38d
	jmp uuid_00000000000db38f
uuid_00000000000db38d:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db38a
	jmp uuid_00000000000db38c
uuid_00000000000db38a:
	movb $1, -632(%rbp)
uuid_00000000000db38c:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db38f:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db392:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db393
	jmp uuid_00000000000db395
uuid_00000000000db393:
	movb $1, -552(%rbp)
uuid_00000000000db395:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db398:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000db39b:
	mov -560(%RBP),%RSP
	add $-672, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3a3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db3a2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db3a5
uuid_00000000000db3a3:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db39f
	jmp uuid_00000000000db3a1
uuid_00000000000db39f:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db39c
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	jmp uuid_00000000000db39e
uuid_00000000000db39c:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000db39e:
	mov -688(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000db3a1:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000db3a5:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	movq -360(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000db3a9:
	mov -192(%RBP),%RSP
	add $-688, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db3aa
uuid_00000000000db3ac:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_class_SB_exists_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String:
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleU64TupleU64StringConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<Tuple<String,U64>,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq $0
	pushq -24(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_as_SB_special_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,HashtableEq<Tuple<String,Type>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_special_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
index_SB_lone_SB_tag_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lone_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $lone_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_fragment_CL_ArrowU64Type:
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function global-is-seen : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call global_SB_is_SB_seen_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3af
#call function .bind : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,HashtableEq<Tuple<String,Type>,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000db3b1
uuid_00000000000db3af:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ad
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db3b1:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
global_SB_is_SB_seen_CL_ArrowU64ConsTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,Type>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
has_SB_only_SB_child_CL_ArrowNilConsStringString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,HashtableEq<String,String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
get_SB_only_SB_child_CL_ArrowStringString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,String>,String>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_only_SB_child_CL_HashtableEqStringString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $uuid_00000000000dab3d
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_of_SB_tag_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $24, %rsp
	ret
index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String:
#call function .bind : Arrow<Cons<Cons<Array<BTreeEq<String,U64>,?>,String>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov	$class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String, %r12
	push %R12
	pushq -8(%rbp)
	pushq -16(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
size_SB_of_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<BTreeEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3d0
	jmp uuid_00000000000db3d2
uuid_00000000000db3d0:
	push %RBP
	jmp uuid_00000000000db3cd
	jmp uuid_00000000000db3cf
uuid_00000000000db3cd:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db3ca
	jmp uuid_00000000000db3cc
uuid_00000000000db3ca:
	movb $1, -104(%rbp)
uuid_00000000000db3cc:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000db3cf:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000db3d2:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3d8
	push %RBP
	jmp uuid_00000000000db3d5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db3d4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db3d7
uuid_00000000000db3d5:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3d3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db3d7:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000db3da
uuid_00000000000db3d8:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
uuid_00000000000db3da:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
class_SB_of_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_class_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,HashtableEq<String,Tuple<Type,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $64, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3f4
	jmp uuid_00000000000db3f6
uuid_00000000000db3f4:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3ea
	jmp uuid_00000000000db3ec
uuid_00000000000db3ea:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3e7
	jmp uuid_00000000000db3e9
uuid_00000000000db3e7:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3e1
	jmp uuid_00000000000db3e3
uuid_00000000000db3e1:
	push %RBP
	jmp uuid_00000000000db3de
	jmp uuid_00000000000db3e0
uuid_00000000000db3de:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db3db
	jmp uuid_00000000000db3dd
uuid_00000000000db3db:
	movb $1, -304(%rbp)
uuid_00000000000db3dd:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db3e0:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db3e3:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3e4
	jmp uuid_00000000000db3e6
uuid_00000000000db3e4:
	movb $1, -208(%rbp)
uuid_00000000000db3e6:
	mov -272(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db3e9:
	mov -224(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000db3ec:
	mov -216(%RBP),%RSP
	add $-336, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db3f1
	jmp uuid_00000000000db3f3
uuid_00000000000db3f1:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq $uuid_00000000000db3ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db3ee
	jmp uuid_00000000000db3f0
uuid_00000000000db3ee:
	movb $1, -144(%rbp)
uuid_00000000000db3f0:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000db3f3:
	mov -160(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000db3f6:
	mov -152(%RBP),%RSP
	add $-352, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db415
	push %RBP
	jmp uuid_00000000000db412
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db411
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db414
uuid_00000000000db412:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db410
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db414:
	mov -360(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000db417
uuid_00000000000db415:
#call function fields-of-tag : Arrow<String,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3fd
	jmp uuid_00000000000db3ff
uuid_00000000000db3fd:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3fa
	jmp uuid_00000000000db3fc
uuid_00000000000db3fa:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db3f7
	jmp uuid_00000000000db3f9
uuid_00000000000db3f7:
	movb $1, -480(%rbp)
uuid_00000000000db3f9:
	mov -528(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000db3fc:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000db3ff:
	mov -488(%RBP),%RSP
	add $-552, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db40d
	push %RBP
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db406
	jmp uuid_00000000000db408
uuid_00000000000db406:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000db403
	jmp uuid_00000000000db405
uuid_00000000000db403:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000db400
	jmp uuid_00000000000db402
uuid_00000000000db400:
	movb $1, -624(%rbp)
uuid_00000000000db402:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000db405:
	mov -640(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000db408:
	mov -632(%RBP),%RSP
	add $-696, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db40a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db409
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db40c
uuid_00000000000db40a:
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000db40c:
	mov -560(%RBP),%RSP
	add $-696, %RSP
	jmp uuid_00000000000db40f
uuid_00000000000db40d:
uuid_00000000000db40f:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000db417:
	mov -112(%RBP),%RSP
	add $-552, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $uuid_00000000000db418
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac7c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db238
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dab01
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
set_SB_type_SB_fields_CL_ArrowNilConsTypeType:
	pushq $uuid_00000000000dab3d
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db427
	jmp uuid_00000000000db429
uuid_00000000000db427:
	push %RBP
	jmp uuid_00000000000db424
	jmp uuid_00000000000db426
uuid_00000000000db424:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db421
	jmp uuid_00000000000db423
uuid_00000000000db421:
	movb $1, -128(%rbp)
uuid_00000000000db423:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000db426:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000db429:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db42f
	push %RBP
	jmp uuid_00000000000db42c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db42b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db42e
uuid_00000000000db42c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db42a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000db42e:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000db431
uuid_00000000000db42f:
	movq -160(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000db431:
	mov -96(%RBP),%RSP
	add $-160, %RSP
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,HashtableEq<String,Tuple<Type,Type>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -64(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $56, %rsp
	ret
get_SB_vararg_SB_inner_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db438
	jmp uuid_00000000000db43a
uuid_00000000000db438:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db435
	jmp uuid_00000000000db437
uuid_00000000000db435:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db432
	jmp uuid_00000000000db434
uuid_00000000000db432:
	movb $1, -120(%rbp)
uuid_00000000000db434:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db437:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db43a:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db45a
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db450
	jmp uuid_00000000000db452
uuid_00000000000db450:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db447
	jmp uuid_00000000000db449
uuid_00000000000db447:
	push %RBP
	jmp uuid_00000000000db444
	jmp uuid_00000000000db446
uuid_00000000000db444:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	jmp uuid_00000000000db441
	jmp uuid_00000000000db443
uuid_00000000000db441:
	movb $1, -296(%rbp)
uuid_00000000000db443:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000db446:
	mov -312(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000db449:
	mov -304(%RBP),%RSP
	add $-344, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db44d
	jmp uuid_00000000000db44f
uuid_00000000000db44d:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db44a
	jmp uuid_00000000000db44c
uuid_00000000000db44a:
	movb $1, -232(%rbp)
uuid_00000000000db44c:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000db44f:
	mov -248(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000db452:
	mov -240(%RBP),%RSP
	add $-360, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db457
	push %RBP
	jmp uuid_00000000000db454
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db453
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db456
uuid_00000000000db454:
uuid_00000000000db456:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000db459
uuid_00000000000db457:
	movq -344(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000db459:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000db45c
uuid_00000000000db45a:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db43b
	jmp uuid_00000000000db43d
uuid_00000000000db43b:
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000db43d:
	mov -200(%RBP),%RSP
	add $-200, %RSP
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db43e
	jmp uuid_00000000000db440
uuid_00000000000db43e:
	movq -160(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000db440:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000db45c:
	mov -88(%RBP),%RSP
	add $-208, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
maybe_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
maybe_SB_local_SB_variable_CL_ArrowTypeType:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db45e
	jmp uuid_00000000000db460
uuid_00000000000db45e:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db45d
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db460:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db467
	jmp uuid_00000000000db469
uuid_00000000000db467:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db464
	jmp uuid_00000000000db466
uuid_00000000000db464:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db461
	jmp uuid_00000000000db463
uuid_00000000000db461:
	movb $1, -104(%rbp)
uuid_00000000000db463:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db466:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db469:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db492
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db470
	jmp uuid_00000000000db472
uuid_00000000000db470:
	push %RBP
	jmp uuid_00000000000db46d
	jmp uuid_00000000000db46f
uuid_00000000000db46d:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db236
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db46a
	jmp uuid_00000000000db46c
uuid_00000000000db46a:
	movb $1, -216(%rbp)
uuid_00000000000db46c:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db46f:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db472:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db48f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db479
	jmp uuid_00000000000db47b
uuid_00000000000db479:
	push %RBP
	jmp uuid_00000000000db476
	jmp uuid_00000000000db478
uuid_00000000000db476:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db473
	jmp uuid_00000000000db475
uuid_00000000000db473:
	movb $1, -288(%rbp)
uuid_00000000000db475:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db478:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db47b:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db48c
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db482
	jmp uuid_00000000000db484
uuid_00000000000db482:
	push %RBP
	jmp uuid_00000000000db47f
	jmp uuid_00000000000db481
uuid_00000000000db47f:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db47c
	jmp uuid_00000000000db47e
uuid_00000000000db47c:
	movb $1, -360(%rbp)
uuid_00000000000db47e:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db481:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db484:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db489
	push %RBP
	jmp uuid_00000000000db486
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db485
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db488
uuid_00000000000db486:
uuid_00000000000db488:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000db48b
uuid_00000000000db489:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db48b:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000db48e
uuid_00000000000db48c:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db48e:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000db491
uuid_00000000000db48f:
	movq $1, -40(%rbp)
uuid_00000000000db491:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db494
uuid_00000000000db492:
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db494:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_simple_SB_constructor_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db49b
	jmp uuid_00000000000db49d
uuid_00000000000db49b:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db498
	jmp uuid_00000000000db49a
uuid_00000000000db498:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db495
	jmp uuid_00000000000db497
uuid_00000000000db495:
	movb $1, -104(%rbp)
uuid_00000000000db497:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db49a:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db49d:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4ae
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4a4
	jmp uuid_00000000000db4a6
uuid_00000000000db4a4:
	push %RBP
	jmp uuid_00000000000db4a1
	jmp uuid_00000000000db4a3
uuid_00000000000db4a1:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db236
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db49e
	jmp uuid_00000000000db4a0
uuid_00000000000db49e:
	movb $1, -216(%rbp)
uuid_00000000000db4a0:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db4a3:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db4a6:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4ab
	push %RBP
	jmp uuid_00000000000db4a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db4a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db4aa
uuid_00000000000db4a8:
uuid_00000000000db4aa:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db4ad
uuid_00000000000db4ab:
	movq $1, -40(%rbp)
uuid_00000000000db4ad:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db4b0
uuid_00000000000db4ae:
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-simple-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_simple_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db4b0:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_tag_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4b7
	jmp uuid_00000000000db4b9
uuid_00000000000db4b7:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db4b4
	jmp uuid_00000000000db4b6
uuid_00000000000db4b4:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db4b1
	jmp uuid_00000000000db4b3
uuid_00000000000db4b1:
	movb $1, -104(%rbp)
uuid_00000000000db4b3:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db4b6:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db4b9:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4ca
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4c0
	jmp uuid_00000000000db4c2
uuid_00000000000db4c0:
	push %RBP
	jmp uuid_00000000000db4bd
	jmp uuid_00000000000db4bf
uuid_00000000000db4bd:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db3ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4ba
	jmp uuid_00000000000db4bc
uuid_00000000000db4ba:
	movb $1, -216(%rbp)
uuid_00000000000db4bc:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db4bf:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db4c2:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4c7
	push %RBP
	jmp uuid_00000000000db4c4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db4c3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db4c6
uuid_00000000000db4c4:
uuid_00000000000db4c6:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db4c9
uuid_00000000000db4c7:
	movq $1, -40(%rbp)
uuid_00000000000db4c9:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db4cc
uuid_00000000000db4ca:
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-tag : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_tag_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db4cc:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_open_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db563
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4d0
	jmp uuid_00000000000db4d2
uuid_00000000000db4d0:
	push %RBP
	jmp uuid_00000000000db4cd
	jmp uuid_00000000000db4cf
uuid_00000000000db4cd:
	movb $1, -136(%rbp)
uuid_00000000000db4cf:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000db4d2:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db560
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4d9
	jmp uuid_00000000000db4db
uuid_00000000000db4d9:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db4d6
	jmp uuid_00000000000db4d8
uuid_00000000000db4d6:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db4d3
	jmp uuid_00000000000db4d5
uuid_00000000000db4d3:
	movb $1, -192(%rbp)
uuid_00000000000db4d5:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000db4d8:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000db4db:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db55d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4fa
	jmp uuid_00000000000db4fc
uuid_00000000000db4fa:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4f1
	jmp uuid_00000000000db4f3
uuid_00000000000db4f1:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4e8
	jmp uuid_00000000000db4ea
uuid_00000000000db4e8:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4e5
	jmp uuid_00000000000db4e7
uuid_00000000000db4e5:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db4e2
	jmp uuid_00000000000db4e4
uuid_00000000000db4e2:
	movb $1, -432(%rbp)
uuid_00000000000db4e4:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000db4e7:
	mov -448(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000db4ea:
	mov -440(%RBP),%RSP
	add $-520, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4ee
	jmp uuid_00000000000db4f0
uuid_00000000000db4ee:
	push %RBP
	jmp uuid_00000000000db4eb
	jmp uuid_00000000000db4ed
uuid_00000000000db4eb:
	movb $1, -368(%rbp)
uuid_00000000000db4ed:
	mov -528(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000db4f0:
	mov -384(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000db4f3:
	mov -376(%RBP),%RSP
	add $-528, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db4f7
	jmp uuid_00000000000db4f9
uuid_00000000000db4f7:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4f4
	jmp uuid_00000000000db4f6
uuid_00000000000db4f4:
	movb $1, -304(%rbp)
uuid_00000000000db4f6:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000db4f9:
	mov -320(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000db4fc:
	mov -312(%RBP),%RSP
	add $-544, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db55a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db515
	jmp uuid_00000000000db517
uuid_00000000000db515:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db50c
	jmp uuid_00000000000db50e
uuid_00000000000db50c:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db503
	jmp uuid_00000000000db505
uuid_00000000000db503:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db500
	jmp uuid_00000000000db502
uuid_00000000000db500:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000db4fd
	jmp uuid_00000000000db4ff
uuid_00000000000db4fd:
	movb $1, -712(%rbp)
uuid_00000000000db4ff:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000db502:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000db505:
	mov -720(%RBP),%RSP
	add $-800, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db509
	jmp uuid_00000000000db50b
uuid_00000000000db509:
	push %RBP
	jmp uuid_00000000000db506
	jmp uuid_00000000000db508
uuid_00000000000db506:
	movb $1, -648(%rbp)
uuid_00000000000db508:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000db50b:
	mov -664(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000db50e:
	mov -656(%RBP),%RSP
	add $-808, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db512
	jmp uuid_00000000000db514
uuid_00000000000db512:
	push %RBP
	mov -560(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db50f
	jmp uuid_00000000000db511
uuid_00000000000db50f:
	movb $1, -584(%rbp)
uuid_00000000000db511:
	mov -816(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db514:
	mov -600(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000db517:
	mov -592(%RBP),%RSP
	add $-824, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db557
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db531
	jmp uuid_00000000000db533
uuid_00000000000db531:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db527
	jmp uuid_00000000000db529
uuid_00000000000db527:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db51e
	jmp uuid_00000000000db520
uuid_00000000000db51e:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db51b
	jmp uuid_00000000000db51d
uuid_00000000000db51b:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000db518
	jmp uuid_00000000000db51a
uuid_00000000000db518:
	movb $1, -992(%rbp)
uuid_00000000000db51a:
	mov -1056(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db51d:
	mov -1008(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000db520:
	mov -1000(%RBP),%RSP
	add $-1080, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db524
	jmp uuid_00000000000db526
uuid_00000000000db524:
	push %RBP
	jmp uuid_00000000000db521
	jmp uuid_00000000000db523
uuid_00000000000db521:
	movb $1, -928(%rbp)
uuid_00000000000db523:
	mov -1088(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000db526:
	mov -944(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000db529:
	mov -936(%RBP),%RSP
	add $-1088, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db52e
	jmp uuid_00000000000db530
uuid_00000000000db52e:
	push %RBP
	mov -840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000db52a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db52b
	jmp uuid_00000000000db52d
uuid_00000000000db52b:
	movb $1, -864(%rbp)
uuid_00000000000db52d:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db530:
	mov -880(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db533:
	mov -872(%RBP),%RSP
	add $-1104, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db554
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db53a
	jmp uuid_00000000000db53c
uuid_00000000000db53a:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db537
	jmp uuid_00000000000db539
uuid_00000000000db537:
	push %RBP
	jmp uuid_00000000000db534
	jmp uuid_00000000000db536
uuid_00000000000db534:
	movb $1, -1144(%rbp)
uuid_00000000000db536:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000db539:
	mov -1160(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000db53c:
	mov -1152(%RBP),%RSP
	add $-1208, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db551
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db550
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db553
uuid_00000000000db551:
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
uuid_00000000000db54d:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db54e
	jmp uuid_00000000000db54f
uuid_00000000000db54e:
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	push %RBP
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db543
	jmp uuid_00000000000db545
uuid_00000000000db543:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db540
	jmp uuid_00000000000db542
uuid_00000000000db540:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000db53d
	jmp uuid_00000000000db53f
uuid_00000000000db53d:
	movb $1, -1344(%rbp)
uuid_00000000000db53f:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000db542:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000db545:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db54a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db549
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db54c
uuid_00000000000db54a:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db546
	jmp uuid_00000000000db548
uuid_00000000000db546:
	movq $1, -40(%rbp)
uuid_00000000000db548:
	mov -1440(%RBP),%RSP
	add $-1440, %RSP
	movq -1400(%rbp), %r15
	movq %r15, -1248(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -1240(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -1232(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -1224(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -1216(%rbp)
uuid_00000000000db54c:
	mov -1296(%RBP),%RSP
	add $-1440, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000db54d
uuid_00000000000db54f:
uuid_00000000000db553:
	mov -1112(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000db556
uuid_00000000000db554:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db556:
	mov -832(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000db559
uuid_00000000000db557:
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db559:
	mov -552(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000db55c
uuid_00000000000db55a:
uuid_00000000000db55c:
	mov -272(%RBP),%RSP
	add $-544, %RSP
	jmp uuid_00000000000db55f
uuid_00000000000db55d:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4dc
	jmp uuid_00000000000db4de
uuid_00000000000db4dc:
	movq $1, -40(%rbp)
uuid_00000000000db4de:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db4df
	jmp uuid_00000000000db4e1
uuid_00000000000db4df:
	movq $1, -40(%rbp)
uuid_00000000000db4e1:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000db55f:
	mov -160(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000db562
uuid_00000000000db560:
	movq $1, -40(%rbp)
uuid_00000000000db562:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000db565
uuid_00000000000db563:
	movq $1, -40(%rbp)
uuid_00000000000db565:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_vararg_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db56c
	jmp uuid_00000000000db56e
uuid_00000000000db56c:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db569
	jmp uuid_00000000000db56b
uuid_00000000000db569:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db566
	jmp uuid_00000000000db568
uuid_00000000000db566:
	movb $1, -104(%rbp)
uuid_00000000000db568:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db56b:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db56e:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db57f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db575
	jmp uuid_00000000000db577
uuid_00000000000db575:
	push %RBP
	jmp uuid_00000000000db572
	jmp uuid_00000000000db574
uuid_00000000000db572:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db56f
	jmp uuid_00000000000db571
uuid_00000000000db56f:
	movb $1, -216(%rbp)
uuid_00000000000db571:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db574:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db577:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db57c
	push %RBP
	jmp uuid_00000000000db579
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db578
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db57b
uuid_00000000000db579:
uuid_00000000000db57b:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000db57e
uuid_00000000000db57c:
	movq $1, -40(%rbp)
uuid_00000000000db57e:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db581
uuid_00000000000db57f:
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db581:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_parameterized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db591
	jmp uuid_00000000000db593
uuid_00000000000db591:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db588
	jmp uuid_00000000000db58a
uuid_00000000000db588:
	push %RBP
	jmp uuid_00000000000db585
	jmp uuid_00000000000db587
uuid_00000000000db585:
	push %RBP
	jmp uuid_00000000000db582
	jmp uuid_00000000000db584
uuid_00000000000db582:
	movb $1, -168(%rbp)
uuid_00000000000db584:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db587:
	mov -184(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000db58a:
	mov -176(%RBP),%RSP
	add $-192, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db58e
	jmp uuid_00000000000db590
uuid_00000000000db58e:
	push %RBP
	jmp uuid_00000000000db58b
	jmp uuid_00000000000db58d
uuid_00000000000db58b:
	movb $1, -104(%rbp)
uuid_00000000000db58d:
	mov -200(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000db590:
	mov -120(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000db593:
	mov -112(%RBP),%RSP
	add $-200, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5aa
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db59a
	jmp uuid_00000000000db59c
uuid_00000000000db59a:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db597
	jmp uuid_00000000000db599
uuid_00000000000db597:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db594
	jmp uuid_00000000000db596
uuid_00000000000db594:
	movb $1, -240(%rbp)
uuid_00000000000db596:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db599:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db59c:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5a7
	push %RBP
	jmp uuid_00000000000db5a4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db5a3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db5a6
uuid_00000000000db5a4:
uuid_00000000000db5a6:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000db5a9
uuid_00000000000db5a7:
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db59d
	jmp uuid_00000000000db59f
uuid_00000000000db59d:
	movq $1, -40(%rbp)
uuid_00000000000db59f:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	push %RBP
#call function is-parameterized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call is_SB_parameterized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5a0
	jmp uuid_00000000000db5a2
uuid_00000000000db5a0:
	movq $1, -40(%rbp)
uuid_00000000000db5a2:
	mov -328(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000db5a9:
	mov -208(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000db5ac
uuid_00000000000db5aa:
	movq $1, -40(%rbp)
uuid_00000000000db5ac:
	mov -72(%RBP),%RSP
	add $-200, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_sized_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5e1
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5b3
	jmp uuid_00000000000db5b5
uuid_00000000000db5b3:
	push %RBP
	jmp uuid_00000000000db5b0
	jmp uuid_00000000000db5b2
uuid_00000000000db5b0:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5ad
	jmp uuid_00000000000db5af
uuid_00000000000db5ad:
	movb $1, -136(%rbp)
uuid_00000000000db5af:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000db5b2:
	mov -152(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000db5b5:
	mov -144(%RBP),%RSP
	add $-168, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5de
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5bc
	jmp uuid_00000000000db5be
uuid_00000000000db5bc:
	push %RBP
	jmp uuid_00000000000db5b9
	jmp uuid_00000000000db5bb
uuid_00000000000db5b9:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5b6
	jmp uuid_00000000000db5b8
uuid_00000000000db5b6:
	movb $1, -208(%rbp)
uuid_00000000000db5b8:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000db5bb:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000db5be:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5db
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5c5
	jmp uuid_00000000000db5c7
uuid_00000000000db5c5:
	push %RBP
	jmp uuid_00000000000db5c2
	jmp uuid_00000000000db5c4
uuid_00000000000db5c2:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db238
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5bf
	jmp uuid_00000000000db5c1
uuid_00000000000db5bf:
	movb $1, -280(%rbp)
uuid_00000000000db5c1:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db5c4:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000db5c7:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5d8
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5ce
	jmp uuid_00000000000db5d0
uuid_00000000000db5ce:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5cb
	jmp uuid_00000000000db5cd
uuid_00000000000db5cb:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5c8
	jmp uuid_00000000000db5ca
uuid_00000000000db5c8:
	movb $1, -352(%rbp)
uuid_00000000000db5ca:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db5cd:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000db5d0:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db5d5
	push %RBP
	jmp uuid_00000000000db5d2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db5d1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db5d4
uuid_00000000000db5d2:
uuid_00000000000db5d4:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000db5d7
uuid_00000000000db5d5:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db5d7:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000db5da
uuid_00000000000db5d8:
	movq $1, -40(%rbp)
uuid_00000000000db5da:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000db5dd
uuid_00000000000db5db:
	movq $1, -40(%rbp)
uuid_00000000000db5dd:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000db5e0
uuid_00000000000db5de:
	movq $1, -40(%rbp)
uuid_00000000000db5e0:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000db5e3
uuid_00000000000db5e1:
	movq $1, -40(%rbp)
uuid_00000000000db5e3:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_representation_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5ea
	jmp uuid_00000000000db5ec
uuid_00000000000db5ea:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5e7
	jmp uuid_00000000000db5e9
uuid_00000000000db5e7:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db5e4
	jmp uuid_00000000000db5e6
uuid_00000000000db5e4:
	movb $1, -104(%rbp)
uuid_00000000000db5e6:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db5e9:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000db5ec:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db63a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5f4
	jmp uuid_00000000000db5f6
uuid_00000000000db5f4:
	push %RBP
	jmp uuid_00000000000db5f1
	jmp uuid_00000000000db5f3
uuid_00000000000db5f1:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db5ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5ee
	jmp uuid_00000000000db5f0
uuid_00000000000db5ee:
	movb $1, -216(%rbp)
uuid_00000000000db5f0:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db5f3:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000db5f6:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db637
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db5fd
	jmp uuid_00000000000db5ff
uuid_00000000000db5fd:
	push %RBP
	jmp uuid_00000000000db5fa
	jmp uuid_00000000000db5fc
uuid_00000000000db5fa:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq $uuid_00000000000db10b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db5f7
	jmp uuid_00000000000db5f9
uuid_00000000000db5f7:
	movb $1, -288(%rbp)
uuid_00000000000db5f9:
	mov -312(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db5fc:
	mov -304(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000db5ff:
	mov -296(%RBP),%RSP
	add $-320, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db634
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db606
	jmp uuid_00000000000db608
uuid_00000000000db606:
	push %RBP
	jmp uuid_00000000000db603
	jmp uuid_00000000000db605
uuid_00000000000db603:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000db10f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db600
	jmp uuid_00000000000db602
uuid_00000000000db600:
	movb $1, -360(%rbp)
uuid_00000000000db602:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db605:
	mov -376(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db608:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db631
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db60f
	jmp uuid_00000000000db611
uuid_00000000000db60f:
	push %RBP
	jmp uuid_00000000000db60c
	jmp uuid_00000000000db60e
uuid_00000000000db60c:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq $uuid_00000000000db113
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db609
	jmp uuid_00000000000db60b
uuid_00000000000db609:
	movb $1, -432(%rbp)
uuid_00000000000db60b:
	mov -456(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000db60e:
	mov -448(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000db611:
	mov -440(%RBP),%RSP
	add $-464, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db62e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db618
	jmp uuid_00000000000db61a
uuid_00000000000db618:
	push %RBP
	jmp uuid_00000000000db615
	jmp uuid_00000000000db617
uuid_00000000000db615:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000db117
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db612
	jmp uuid_00000000000db614
uuid_00000000000db612:
	movb $1, -504(%rbp)
uuid_00000000000db614:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000db617:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000db61a:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db62b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db621
	jmp uuid_00000000000db623
uuid_00000000000db621:
	push %RBP
	jmp uuid_00000000000db61e
	jmp uuid_00000000000db620
uuid_00000000000db61e:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db61b
	jmp uuid_00000000000db61d
uuid_00000000000db61b:
	movb $1, -576(%rbp)
uuid_00000000000db61d:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000db620:
	mov -592(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000db623:
	mov -584(%RBP),%RSP
	add $-608, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db628
	push %RBP
	jmp uuid_00000000000db625
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db624
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db627
uuid_00000000000db625:
uuid_00000000000db627:
	mov -616(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000db62a
uuid_00000000000db628:
	movq $1, -40(%rbp)
uuid_00000000000db62a:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000db62d
uuid_00000000000db62b:
	movq $1, -40(%rbp)
uuid_00000000000db62d:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000db630
uuid_00000000000db62e:
	movq $1, -40(%rbp)
uuid_00000000000db630:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000db633
uuid_00000000000db631:
	movq $1, -40(%rbp)
uuid_00000000000db633:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000db636
uuid_00000000000db634:
	movq $1, -40(%rbp)
uuid_00000000000db636:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000db639
uuid_00000000000db637:
	movq $1, -40(%rbp)
uuid_00000000000db639:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000db63c
uuid_00000000000db63a:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db63c:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
guess_SB_representation_CL_ArrowTypeType:
	push %RBP
#call function has-representation : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call has_SB_representation_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db650
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db64d
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db64a
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db647
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db644
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db641
	push %RBP
	jmp uuid_00000000000db63e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db63d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db640
uuid_00000000000db63e:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db640:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000db643
uuid_00000000000db641:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db117
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db643:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000db646
uuid_00000000000db644:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db113
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db646:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000db649
uuid_00000000000db647:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db10f
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db649:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000db64c
uuid_00000000000db64a:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db10b
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db64c:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000db64f
uuid_00000000000db64d:
uuid_00000000000db64f:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	jmp uuid_00000000000db652
uuid_00000000000db650:
uuid_00000000000db652:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
as_SB_constant_CL_ArrowTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db653
	jmp uuid_00000000000db655
uuid_00000000000db653:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5ed
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db655:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db678
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db659
	jmp uuid_00000000000db65b
uuid_00000000000db659:
	push %RBP
	mov -120(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db656
	jmp uuid_00000000000db658
uuid_00000000000db656:
	movb $1, -136(%rbp)
uuid_00000000000db658:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000db65b:
	mov -144(%RBP),%RSP
	add $-160, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db675
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db662
	jmp uuid_00000000000db664
uuid_00000000000db662:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db65f
	jmp uuid_00000000000db661
uuid_00000000000db65f:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db65c
	jmp uuid_00000000000db65e
uuid_00000000000db65c:
	movb $1, -200(%rbp)
uuid_00000000000db65e:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000db661:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000db664:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db672
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db66b
	jmp uuid_00000000000db66d
uuid_00000000000db66b:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db668
	jmp uuid_00000000000db66a
uuid_00000000000db668:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db665
	jmp uuid_00000000000db667
uuid_00000000000db665:
	movb $1, -312(%rbp)
uuid_00000000000db667:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000db66a:
	mov -328(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000db66d:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db66f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db66e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db671
uuid_00000000000db66f:
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db671:
	mov -280(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000db674
uuid_00000000000db672:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000db674:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000db677
uuid_00000000000db675:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000db677:
	mov -104(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000db67a
uuid_00000000000db678:
uuid_00000000000db67a:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
deep_SB_hash_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db68c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db685
	jmp uuid_00000000000db687
uuid_00000000000db685:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db682
	jmp uuid_00000000000db684
uuid_00000000000db682:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000db67f
	jmp uuid_00000000000db681
uuid_00000000000db67f:
	movb $1, -200(%rbp)
uuid_00000000000db681:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000db684:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000db687:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db689
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db688
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db68b
uuid_00000000000db689:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000db68b:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000db68e
uuid_00000000000db68c:
uuid_00000000000db68e:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
ascript_SB_normal_CL_ArrowNilConsTypeAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db69a
	jmp uuid_00000000000db69c
uuid_00000000000db69a:
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db697
#call function add-concrete-type-instance : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov $types_SB_have_SB_changed_CL_U8, %r15
	movb $1, 0(%r15)
	jmp uuid_00000000000db699
uuid_00000000000db697:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db694
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db691
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db68f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db690
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db693
uuid_00000000000db691:
uuid_00000000000db693:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000db696
uuid_00000000000db694:
uuid_00000000000db696:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000db699:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000db69c:
	mov -112(%RBP),%RSP
	add $-152, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
typeof_CL_ArrowTypeFragmentList:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6a3
	jmp uuid_00000000000db6a5
uuid_00000000000db6a3:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000db6a0
	jmp uuid_00000000000db6a2
uuid_00000000000db6a0:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db69d
	jmp uuid_00000000000db69f
uuid_00000000000db69d:
	movb $1, -552(%rbp)
uuid_00000000000db69f:
	mov -728(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000db6a2:
	mov -568(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000db6a5:
	mov -560(%RBP),%RSP
	add $-896, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6ad
	push %RBP
	jmp uuid_00000000000db6aa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db6a9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db6ac
uuid_00000000000db6aa:
uuid_00000000000db6ac:
	mov -904(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000db6af
uuid_00000000000db6ad:
#call function typeof : Arrow<FragmentList,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db6a6
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	jmp uuid_00000000000db6a8
uuid_00000000000db6a6:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000db6a8:
	mov -904(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000db6af:
	mov -376(%RBP),%RSP
	add $-904, %RSP
	subq $24, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
to_SB_s_CL_ArrowSAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6b6
	jmp uuid_00000000000db6b8
uuid_00000000000db6b6:
	push %RBP
	jmp uuid_00000000000db6b3
	jmp uuid_00000000000db6b5
uuid_00000000000db6b3:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db6b0
	jmp uuid_00000000000db6b2
uuid_00000000000db6b0:
	movb $1, -264(%rbp)
uuid_00000000000db6b2:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000db6b5:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000db6b8:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db730
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6c0
	jmp uuid_00000000000db6c2
uuid_00000000000db6c0:
	push %RBP
	jmp uuid_00000000000db6bd
	jmp uuid_00000000000db6bf
uuid_00000000000db6bd:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db6ba
	jmp uuid_00000000000db6bc
uuid_00000000000db6ba:
	movb $1, -384(%rbp)
uuid_00000000000db6bc:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000db6bf:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000db6c2:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db72d
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6e2
	jmp uuid_00000000000db6e4
uuid_00000000000db6e2:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6d0
	jmp uuid_00000000000db6d2
uuid_00000000000db6d0:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6c7
	jmp uuid_00000000000db6c9
uuid_00000000000db6c7:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000db6c4
	jmp uuid_00000000000db6c6
uuid_00000000000db6c4:
	movb $1, -696(%rbp)
uuid_00000000000db6c6:
	mov -712(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000db6c9:
	mov -704(%RBP),%RSP
	add $-736, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6cd
	jmp uuid_00000000000db6cf
uuid_00000000000db6cd:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db6ca
	jmp uuid_00000000000db6cc
uuid_00000000000db6ca:
	movb $1, -600(%rbp)
uuid_00000000000db6cc:
	mov -744(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000db6cf:
	mov -616(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000db6d2:
	mov -608(%RBP),%RSP
	add $-816, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6df
	jmp uuid_00000000000db6e1
uuid_00000000000db6df:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6d9
	jmp uuid_00000000000db6db
uuid_00000000000db6d9:
	push %RBP
	jmp uuid_00000000000db6d6
	jmp uuid_00000000000db6d8
uuid_00000000000db6d6:
	push %RBP
	mov -832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db6d3
	jmp uuid_00000000000db6d5
uuid_00000000000db6d3:
	movb $1, -904(%rbp)
uuid_00000000000db6d5:
	mov -928(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000db6d8:
	mov -920(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000db6db:
	mov -912(%RBP),%RSP
	add $-936, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6dc
	jmp uuid_00000000000db6de
uuid_00000000000db6dc:
	movb $1, -504(%rbp)
uuid_00000000000db6de:
	mov -824(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000db6e1:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000db6e4:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db72a
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db703
	jmp uuid_00000000000db705
uuid_00000000000db703:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6f1
	jmp uuid_00000000000db6f3
uuid_00000000000db6f1:
	push %RBP
	mov -1104(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6e8
	jmp uuid_00000000000db6ea
uuid_00000000000db6e8:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000db6e5
	jmp uuid_00000000000db6e7
uuid_00000000000db6e5:
	movb $1, -1216(%rbp)
uuid_00000000000db6e7:
	mov -1232(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000db6ea:
	mov -1224(%RBP),%RSP
	add $-1256, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6ee
	jmp uuid_00000000000db6f0
uuid_00000000000db6ee:
	push %RBP
	mov -1096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db6eb
	jmp uuid_00000000000db6ed
uuid_00000000000db6eb:
	movb $1, -1120(%rbp)
uuid_00000000000db6ed:
	mov -1264(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000db6f0:
	mov -1136(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000db6f3:
	mov -1128(%RBP),%RSP
	add $-1336, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db700
	jmp uuid_00000000000db702
uuid_00000000000db700:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db6fa
	jmp uuid_00000000000db6fc
uuid_00000000000db6fa:
	push %RBP
	jmp uuid_00000000000db6f7
	jmp uuid_00000000000db6f9
uuid_00000000000db6f7:
	push %RBP
	mov -1352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db6f4
	jmp uuid_00000000000db6f6
uuid_00000000000db6f4:
	movb $1, -1424(%rbp)
uuid_00000000000db6f6:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000db6f9:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000db6fc:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db6fd
	jmp uuid_00000000000db6ff
uuid_00000000000db6fd:
	movb $1, -1024(%rbp)
uuid_00000000000db6ff:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000db702:
	mov -1040(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000db705:
	mov -1032(%RBP),%RSP
	add $-1456, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db727
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db70c
	jmp uuid_00000000000db70e
uuid_00000000000db70c:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db709
	jmp uuid_00000000000db70b
uuid_00000000000db709:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db706
	jmp uuid_00000000000db708
uuid_00000000000db706:
	movb $1, -1544(%rbp)
uuid_00000000000db708:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000db70b:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000db70e:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db724
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db719
	jmp uuid_00000000000db71b
uuid_00000000000db719:
	push %RBP
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	jmp uuid_00000000000db716
	jmp uuid_00000000000db718
uuid_00000000000db716:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db713
	jmp uuid_00000000000db715
uuid_00000000000db713:
	push %RBP
	mov -1752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db710
	jmp uuid_00000000000db712
uuid_00000000000db710:
	movb $1, -1800(%rbp)
uuid_00000000000db712:
	mov -1928(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000db715:
	mov -1848(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000db718:
	mov -1816(%RBP),%RSP
	add $-2000, %RSP
uuid_00000000000db71b:
	mov -1808(%RBP),%RSP
	add $-2000, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db721
	push %RBP
	jmp uuid_00000000000db71e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db71d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db720
uuid_00000000000db71e:
uuid_00000000000db720:
	mov -2008(%RBP),%RSP
	add $-2008, %RSP
	jmp uuid_00000000000db723
uuid_00000000000db721:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db71c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000db723:
	mov -1720(%RBP),%RSP
	add $-2000, %RSP
	jmp uuid_00000000000db726
uuid_00000000000db724:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db70f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000db726:
	mov -1464(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000db729
uuid_00000000000db727:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000db729:
	mov -944(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000db72c
uuid_00000000000db72a:
#call function to-s : Arrow<AST,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call to_SB_s_CL_ArrowSAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000db72c:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000db72f
uuid_00000000000db72d:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db6c3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -416(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000db72f:
	mov -304(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000db732
uuid_00000000000db730:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000db6b9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -296(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000db732:
	mov -184(%RBP),%RSP
	add $-296, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
domain_CL_ArrowTypeType:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
range_CL_ArrowTypeType:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
t1_CL_ArrowTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
t2_CL_ArrowTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
t3_CL_ArrowTypeConsTypeConsTypeString:
	pushq -8(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
p_CL_ArrowTypeConsU64Type:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db751
	jmp uuid_00000000000db753
uuid_00000000000db751:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db74e
	jmp uuid_00000000000db750
uuid_00000000000db74e:
	push %RBP
	jmp uuid_00000000000db74b
	jmp uuid_00000000000db74d
uuid_00000000000db74b:
	movb $1, -104(%rbp)
uuid_00000000000db74d:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000db750:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000db753:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db758
	push %RBP
	jmp uuid_00000000000db755
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db754
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db757
uuid_00000000000db755:
uuid_00000000000db757:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000db75a
uuid_00000000000db758:
#call function .nth : Arrow<Cons<Cons<List<Type>,U64>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -32(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_nth_CL_ArrowTypeConsTypeConsU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db75a:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
p1_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
p2_CL_ArrowTypeType:
#call function p : Arrow<Cons<Type,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $1
	mov %RBX, %RBP
	call p_CL_ArrowTypeConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
and_CL_ArrowTContextConsTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db761
	jmp uuid_00000000000db763
uuid_00000000000db761:
	push %RBP
	jmp uuid_00000000000db75e
	jmp uuid_00000000000db760
uuid_00000000000db75e:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db75b
	jmp uuid_00000000000db75d
uuid_00000000000db75b:
	movb $1, -760(%rbp)
uuid_00000000000db75d:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000db760:
	mov -776(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000db763:
	mov -768(%RBP),%RSP
	add $-904, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db774
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db76a
	jmp uuid_00000000000db76c
uuid_00000000000db76a:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db767
	jmp uuid_00000000000db769
uuid_00000000000db767:
	push %RBP
	jmp uuid_00000000000db764
	jmp uuid_00000000000db766
uuid_00000000000db764:
	movb $1, -1168(%rbp)
uuid_00000000000db766:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000db769:
	mov -1184(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000db76c:
	mov -1176(%RBP),%RSP
	add $-1312, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db771
	push %RBP
	jmp uuid_00000000000db76e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db76d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db770
uuid_00000000000db76e:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db770:
	mov -1320(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000db773
uuid_00000000000db771:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db773:
	mov -912(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000db776
uuid_00000000000db774:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db776:
	mov -504(%RBP),%RSP
	add $-904, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
and_CL_ArrowTypeConsTypeType:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
union_CL_ArrowTContextConsTContextTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db78d
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db78a
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db783
	jmp uuid_00000000000db785
uuid_00000000000db783:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000db780
	jmp uuid_00000000000db782
uuid_00000000000db780:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000db77d
	jmp uuid_00000000000db77f
uuid_00000000000db77d:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db77a
	jmp uuid_00000000000db77c
uuid_00000000000db77a:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db777
	jmp uuid_00000000000db779
uuid_00000000000db777:
	movb $1, -760(%rbp)
uuid_00000000000db779:
	mov -904(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000db77c:
	mov -888(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000db77f:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000db782:
	mov -776(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000db785:
	mov -768(%RBP),%RSP
	add $-1024, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db787
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db786
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db789
uuid_00000000000db787:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -896(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000db789:
	mov -632(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000db78c
uuid_00000000000db78a:
uuid_00000000000db78c:
	mov -504(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000db78f
uuid_00000000000db78d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000db78f:
	mov -376(%RBP),%RSP
	add $-496, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $248, %rsp
	ret
union_CL_ArrowContextConsContextContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db790
	jmp uuid_00000000000db792
uuid_00000000000db790:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000db792:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db7a6
	jmp uuid_00000000000db7a8
uuid_00000000000db7a6:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db79c
	jmp uuid_00000000000db79e
uuid_00000000000db79c:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000db799
	jmp uuid_00000000000db79b
uuid_00000000000db799:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db796
	jmp uuid_00000000000db798
uuid_00000000000db796:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db793
	jmp uuid_00000000000db795
uuid_00000000000db793:
	movb $1, -520(%rbp)
uuid_00000000000db795:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000db798:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000db79b:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000db79e:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7a3
	push %RBP
	jmp uuid_00000000000db7a0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db79f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db7a2
uuid_00000000000db7a0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000db7a2:
	mov -736(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000db7a5
uuid_00000000000db7a3:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -624(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq $0
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000db7a5:
	mov -416(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000db7a8:
	mov -312(%RBP),%RSP
	add $-728, %RSP
	subq $96, %rsp
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
union_CL_ArrowFContextConsTContextFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
uuid_00000000000db7c0:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db7c1
	jmp uuid_00000000000db7c2
uuid_00000000000db7c1:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7bd
	push %RBP
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7b5
	jmp uuid_00000000000db7b7
uuid_00000000000db7b5:
	push %RBP
	jmp uuid_00000000000db7b2
	jmp uuid_00000000000db7b4
uuid_00000000000db7b2:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000db7af
	jmp uuid_00000000000db7b1
uuid_00000000000db7af:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db7ac
	jmp uuid_00000000000db7ae
uuid_00000000000db7ac:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db7a9
	jmp uuid_00000000000db7ab
uuid_00000000000db7a9:
	movb $1, -912(%rbp)
uuid_00000000000db7ab:
	mov -984(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db7ae:
	mov -968(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db7b1:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db7b4:
	mov -928(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000db7b7:
	mov -920(%RBP),%RSP
	add $-1104, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7ba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db7b9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db7bc
uuid_00000000000db7ba:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $uuid_00000000000db7b8
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -976(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $0
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	movq -1104(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -208(%rbp)
uuid_00000000000db7bc:
	mov -784(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000db7bf
uuid_00000000000db7bd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
uuid_00000000000db7bf:
	mov -656(%RBP),%RSP
	add $-776, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000db7c0
uuid_00000000000db7c2:
	subq $200, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
tag_SB_of_CL_ArrowStringType:
	pushq $uuid_00000000000dab3d
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7c9
	jmp uuid_00000000000db7cb
uuid_00000000000db7c9:
	push %RBP
	jmp uuid_00000000000db7c6
	jmp uuid_00000000000db7c8
uuid_00000000000db7c6:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db7c3
	jmp uuid_00000000000db7c5
uuid_00000000000db7c3:
	movb $1, -104(%rbp)
uuid_00000000000db7c5:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000db7c8:
	mov -120(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000db7cb:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7d0
	push %RBP
	jmp uuid_00000000000db7cd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db7cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db7cf
uuid_00000000000db7cd:
uuid_00000000000db7cf:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000db7d2
uuid_00000000000db7d0:
	movq -136(%rbp), %r15
	movq %r15, -40(%rbp)
	mov -136(%rbp), %r15
	mov %r15, -40(%rbp)
uuid_00000000000db7d2:
	mov -72(%RBP),%RSP
	add $-136, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7e2
	jmp uuid_00000000000db7e4
uuid_00000000000db7e2:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7df
	jmp uuid_00000000000db7e1
uuid_00000000000db7df:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7dc
	jmp uuid_00000000000db7de
uuid_00000000000db7dc:
	movb $1, -288(%rbp)
uuid_00000000000db7de:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db7e1:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000db7e4:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db80d
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7fd
	jmp uuid_00000000000db7ff
uuid_00000000000db7fd:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7eb
	jmp uuid_00000000000db7ed
uuid_00000000000db7eb:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db7e8
	jmp uuid_00000000000db7ea
uuid_00000000000db7e8:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000db7e5
	jmp uuid_00000000000db7e7
uuid_00000000000db7e5:
	movb $1, -560(%rbp)
uuid_00000000000db7e7:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000db7ea:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000db7ed:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7fa
	jmp uuid_00000000000db7fc
uuid_00000000000db7fa:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db7f4
	jmp uuid_00000000000db7f6
uuid_00000000000db7f4:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db7f1
	jmp uuid_00000000000db7f3
uuid_00000000000db7f1:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000db7ee
	jmp uuid_00000000000db7f0
uuid_00000000000db7ee:
	movb $1, -704(%rbp)
uuid_00000000000db7f0:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000db7f3:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000db7f6:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db7f7
	jmp uuid_00000000000db7f9
uuid_00000000000db7f7:
	movb $1, -496(%rbp)
uuid_00000000000db7f9:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000db7fc:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000db7ff:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db80a
	push %RBP
	jmp uuid_00000000000db807
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db806
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db809
uuid_00000000000db807:
uuid_00000000000db809:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000db80c
uuid_00000000000db80a:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db803
	jmp uuid_00000000000db805
uuid_00000000000db803:
	push %RBP
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db800
	jmp uuid_00000000000db802
uuid_00000000000db800:
	movq $1, -96(%rbp)
uuid_00000000000db802:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000db805:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000db80c:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000db80f
uuid_00000000000db80d:
	movq $1, -96(%rbp)
uuid_00000000000db80f:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
can_SB_unify_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db816
	jmp uuid_00000000000db818
uuid_00000000000db816:
	push %RBP
	jmp uuid_00000000000db813
	jmp uuid_00000000000db815
uuid_00000000000db813:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db810
	jmp uuid_00000000000db812
uuid_00000000000db810:
	movb $1, -192(%rbp)
uuid_00000000000db812:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000db815:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000db818:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9ed
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db832
	jmp uuid_00000000000db834
uuid_00000000000db832:
	push %RBP
	jmp uuid_00000000000db82f
	jmp uuid_00000000000db831
uuid_00000000000db82f:
	push %RBP
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db829
	jmp uuid_00000000000db82b
uuid_00000000000db829:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db81f
	jmp uuid_00000000000db821
uuid_00000000000db81f:
	push %RBP
	jmp uuid_00000000000db81c
	jmp uuid_00000000000db81e
uuid_00000000000db81c:
	push %RBP
	jmp uuid_00000000000db819
	jmp uuid_00000000000db81b
uuid_00000000000db819:
	movb $1, -432(%rbp)
uuid_00000000000db81b:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000db81e:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000db821:
	mov -440(%RBP),%RSP
	add $-456, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db826
	jmp uuid_00000000000db828
uuid_00000000000db826:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $uuid_00000000000db822
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db823
	jmp uuid_00000000000db825
uuid_00000000000db823:
	movb $1, -368(%rbp)
uuid_00000000000db825:
	mov -464(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000db828:
	mov -384(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000db82b:
	mov -376(%RBP),%RSP
	add $-472, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db82c
	jmp uuid_00000000000db82e
uuid_00000000000db82c:
	movb $1, -312(%rbp)
uuid_00000000000db82e:
	mov -336(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000db831:
	mov -328(%RBP),%RSP
	add $-472, %RSP
uuid_00000000000db834:
	mov -320(%RBP),%RSP
	add $-472, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9ea
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db841
	jmp uuid_00000000000db843
uuid_00000000000db841:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000db83e
	jmp uuid_00000000000db840
uuid_00000000000db83e:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db838
	jmp uuid_00000000000db83a
uuid_00000000000db838:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db835
	jmp uuid_00000000000db837
uuid_00000000000db835:
	movb $1, -624(%rbp)
uuid_00000000000db837:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000db83a:
	mov -632(%RBP),%RSP
	add $-648, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db83b
	jmp uuid_00000000000db83d
uuid_00000000000db83b:
	movb $1, -544(%rbp)
uuid_00000000000db83d:
	mov -592(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000db840:
	mov -560(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000db843:
	mov -552(%RBP),%RSP
	add $-648, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9e7
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db853
	jmp uuid_00000000000db855
uuid_00000000000db853:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	jmp uuid_00000000000db850
	jmp uuid_00000000000db852
uuid_00000000000db850:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db84a
	jmp uuid_00000000000db84c
uuid_00000000000db84a:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db847
	jmp uuid_00000000000db849
uuid_00000000000db847:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db844
	jmp uuid_00000000000db846
uuid_00000000000db844:
	movb $1, -800(%rbp)
uuid_00000000000db846:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000db849:
	mov -816(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000db84c:
	mov -808(%RBP),%RSP
	add $-872, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db84d
	jmp uuid_00000000000db84f
uuid_00000000000db84d:
	movb $1, -720(%rbp)
uuid_00000000000db84f:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000db852:
	mov -736(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000db855:
	mov -728(%RBP),%RSP
	add $-872, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9e4
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db86b
	jmp uuid_00000000000db86d
uuid_00000000000db86b:
	push %RBP
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db862
	jmp uuid_00000000000db864
uuid_00000000000db862:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db85f
	jmp uuid_00000000000db861
uuid_00000000000db85f:
	push %RBP
	mov -968(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db85c
	jmp uuid_00000000000db85e
uuid_00000000000db85c:
	movb $1, -992(%rbp)
uuid_00000000000db85e:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000db861:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000db864:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db868
	jmp uuid_00000000000db86a
uuid_00000000000db868:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	jmp uuid_00000000000db865
	jmp uuid_00000000000db867
uuid_00000000000db865:
	movb $1, -944(%rbp)
uuid_00000000000db867:
	mov -1072(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000db86a:
	mov -960(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000db86d:
	mov -952(%RBP),%RSP
	add $-1096, %RSP
	mov -944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9e1
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8c2
	jmp uuid_00000000000db8c4
uuid_00000000000db8c2:
	push %RBP
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db88c
	jmp uuid_00000000000db88e
uuid_00000000000db88c:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db883
	jmp uuid_00000000000db885
uuid_00000000000db883:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db87a
	jmp uuid_00000000000db87c
uuid_00000000000db87a:
	push %RBP
	mov -1328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db877
	jmp uuid_00000000000db879
uuid_00000000000db877:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000db874
	jmp uuid_00000000000db876
uuid_00000000000db874:
	movb $1, -1344(%rbp)
uuid_00000000000db876:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000db879:
	mov -1360(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000db87c:
	mov -1352(%RBP),%RSP
	add $-1432, %RSP
	mov -1344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db880
	jmp uuid_00000000000db882
uuid_00000000000db880:
	push %RBP
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000db87d
	jmp uuid_00000000000db87f
uuid_00000000000db87d:
	movb $1, -1280(%rbp)
uuid_00000000000db87f:
	mov -1440(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000db882:
	mov -1296(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000db885:
	mov -1288(%RBP),%RSP
	add $-1464, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db889
	jmp uuid_00000000000db88b
uuid_00000000000db889:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db886
	jmp uuid_00000000000db888
uuid_00000000000db886:
	movb $1, -1216(%rbp)
uuid_00000000000db888:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000db88b:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000db88e:
	mov -1224(%RBP),%RSP
	add $-1480, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8bf
	jmp uuid_00000000000db8c1
uuid_00000000000db8bf:
	push %RBP
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8b9
	jmp uuid_00000000000db8bb
uuid_00000000000db8b9:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8b0
	jmp uuid_00000000000db8b2
uuid_00000000000db8b0:
	push %RBP
	mov -1568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db895
	jmp uuid_00000000000db897
uuid_00000000000db895:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db892
	jmp uuid_00000000000db894
uuid_00000000000db892:
	push %RBP
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	jmp uuid_00000000000db88f
	jmp uuid_00000000000db891
uuid_00000000000db88f:
	movb $1, -1648(%rbp)
uuid_00000000000db891:
	mov -1712(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000db894:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000db897:
	mov -1656(%RBP),%RSP
	add $-1736, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8ad
	jmp uuid_00000000000db8af
uuid_00000000000db8ad:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8a7
	jmp uuid_00000000000db8a9
uuid_00000000000db8a7:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db89e
	jmp uuid_00000000000db8a0
uuid_00000000000db89e:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db89b
	jmp uuid_00000000000db89d
uuid_00000000000db89b:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000db898
	jmp uuid_00000000000db89a
uuid_00000000000db898:
	movb $1, -1840(%rbp)
uuid_00000000000db89a:
	mov -1904(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000db89d:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000db8a0:
	mov -1848(%RBP),%RSP
	add $-1928, %RSP
	mov -1840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8a4
	jmp uuid_00000000000db8a6
uuid_00000000000db8a4:
	push %RBP
	mov -1752(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8a1
	jmp uuid_00000000000db8a3
uuid_00000000000db8a1:
	movb $1, -1776(%rbp)
uuid_00000000000db8a3:
	mov -1936(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000db8a6:
	mov -1792(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000db8a9:
	mov -1784(%RBP),%RSP
	add $-1944, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8aa
	jmp uuid_00000000000db8ac
uuid_00000000000db8aa:
	movb $1, -1584(%rbp)
uuid_00000000000db8ac:
	mov -1744(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000db8af:
	mov -1600(%RBP),%RSP
	add $-1944, %RSP
uuid_00000000000db8b2:
	mov -1592(%RBP),%RSP
	add $-1944, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8b6
	jmp uuid_00000000000db8b8
uuid_00000000000db8b6:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8b3
	jmp uuid_00000000000db8b5
uuid_00000000000db8b3:
	movb $1, -1520(%rbp)
uuid_00000000000db8b5:
	mov -1952(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000db8b8:
	mov -1536(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000db8bb:
	mov -1528(%RBP),%RSP
	add $-1960, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8bc
	jmp uuid_00000000000db8be
uuid_00000000000db8bc:
	movb $1, -1168(%rbp)
uuid_00000000000db8be:
	mov -1488(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000db8c1:
	mov -1184(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000db8c4:
	mov -1176(%RBP),%RSP
	add $-1960, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9de
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8fb
	jmp uuid_00000000000db8fd
uuid_00000000000db8fb:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	jmp uuid_00000000000db8f8
	jmp uuid_00000000000db8fa
uuid_00000000000db8f8:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8f2
	jmp uuid_00000000000db8f4
uuid_00000000000db8f2:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8e9
	jmp uuid_00000000000db8eb
uuid_00000000000db8e9:
	push %RBP
	mov -2160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8ce
	jmp uuid_00000000000db8d0
uuid_00000000000db8ce:
	push %RBP
	mov -2224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8cb
	jmp uuid_00000000000db8cd
uuid_00000000000db8cb:
	push %RBP
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000db8c8
	jmp uuid_00000000000db8ca
uuid_00000000000db8c8:
	movb $1, -2240(%rbp)
uuid_00000000000db8ca:
	mov -2304(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000db8cd:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000db8d0:
	mov -2248(%RBP),%RSP
	add $-2328, %RSP
	mov -2240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8e6
	jmp uuid_00000000000db8e8
uuid_00000000000db8e6:
	push %RBP
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq $0
	push %RBP
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8e0
	jmp uuid_00000000000db8e2
uuid_00000000000db8e0:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8d7
	jmp uuid_00000000000db8d9
uuid_00000000000db8d7:
	push %RBP
	mov -2416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db8d4
	jmp uuid_00000000000db8d6
uuid_00000000000db8d4:
	push %RBP
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	jmp uuid_00000000000db8d1
	jmp uuid_00000000000db8d3
uuid_00000000000db8d1:
	movb $1, -2432(%rbp)
uuid_00000000000db8d3:
	mov -2496(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000db8d6:
	mov -2448(%RBP),%RSP
	add $-2520, %RSP
uuid_00000000000db8d9:
	mov -2440(%RBP),%RSP
	add $-2520, %RSP
	mov -2432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8dd
	jmp uuid_00000000000db8df
uuid_00000000000db8dd:
	push %RBP
	mov -2344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2536(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8da
	jmp uuid_00000000000db8dc
uuid_00000000000db8da:
	movb $1, -2368(%rbp)
uuid_00000000000db8dc:
	mov -2528(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000db8df:
	mov -2384(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000db8e2:
	mov -2376(%RBP),%RSP
	add $-2536, %RSP
	mov -2368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8e3
	jmp uuid_00000000000db8e5
uuid_00000000000db8e3:
	movb $1, -2176(%rbp)
uuid_00000000000db8e5:
	mov -2336(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000db8e8:
	mov -2192(%RBP),%RSP
	add $-2536, %RSP
uuid_00000000000db8eb:
	mov -2184(%RBP),%RSP
	add $-2536, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8ef
	jmp uuid_00000000000db8f1
uuid_00000000000db8ef:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2552(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8ec
	jmp uuid_00000000000db8ee
uuid_00000000000db8ec:
	movb $1, -2112(%rbp)
uuid_00000000000db8ee:
	mov -2544(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000db8f1:
	mov -2128(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000db8f4:
	mov -2120(%RBP),%RSP
	add $-2552, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db8f5
	jmp uuid_00000000000db8f7
uuid_00000000000db8f5:
	movb $1, -2032(%rbp)
uuid_00000000000db8f7:
	mov -2080(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000db8fa:
	mov -2048(%RBP),%RSP
	add $-2552, %RSP
uuid_00000000000db8fd:
	mov -2040(%RBP),%RSP
	add $-2552, %RSP
	mov -2032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9db
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db934
	jmp uuid_00000000000db936
uuid_00000000000db934:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db919
	jmp uuid_00000000000db91b
uuid_00000000000db919:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db910
	jmp uuid_00000000000db912
uuid_00000000000db910:
	push %RBP
	mov -2720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db907
	jmp uuid_00000000000db909
uuid_00000000000db907:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db904
	jmp uuid_00000000000db906
uuid_00000000000db904:
	push %RBP
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000db901
	jmp uuid_00000000000db903
uuid_00000000000db901:
	movb $1, -2800(%rbp)
uuid_00000000000db903:
	mov -2864(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000db906:
	mov -2816(%RBP),%RSP
	add $-2888, %RSP
uuid_00000000000db909:
	mov -2808(%RBP),%RSP
	add $-2888, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db90d
	jmp uuid_00000000000db90f
uuid_00000000000db90d:
	push %RBP
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	jmp uuid_00000000000db90a
	jmp uuid_00000000000db90c
uuid_00000000000db90a:
	movb $1, -2736(%rbp)
uuid_00000000000db90c:
	mov -2896(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000db90f:
	mov -2752(%RBP),%RSP
	add $-2920, %RSP
uuid_00000000000db912:
	mov -2744(%RBP),%RSP
	add $-2920, %RSP
	mov -2736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db916
	jmp uuid_00000000000db918
uuid_00000000000db916:
	push %RBP
	mov -2648(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db913
	jmp uuid_00000000000db915
uuid_00000000000db913:
	movb $1, -2672(%rbp)
uuid_00000000000db915:
	mov -2928(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000db918:
	mov -2688(%RBP),%RSP
	add $-2936, %RSP
uuid_00000000000db91b:
	mov -2680(%RBP),%RSP
	add $-2936, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db931
	jmp uuid_00000000000db933
uuid_00000000000db931:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2968(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db92b
	jmp uuid_00000000000db92d
uuid_00000000000db92b:
	push %RBP
	mov -2960(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db922
	jmp uuid_00000000000db924
uuid_00000000000db922:
	push %RBP
	mov -3024(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db91f
	jmp uuid_00000000000db921
uuid_00000000000db91f:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	jmp uuid_00000000000db91c
	jmp uuid_00000000000db91e
uuid_00000000000db91c:
	movb $1, -3040(%rbp)
uuid_00000000000db91e:
	mov -3104(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000db921:
	mov -3056(%RBP),%RSP
	add $-3128, %RSP
uuid_00000000000db924:
	mov -3048(%RBP),%RSP
	add $-3128, %RSP
	mov -3040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db928
	jmp uuid_00000000000db92a
uuid_00000000000db928:
	push %RBP
	mov -2952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3144(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db925
	jmp uuid_00000000000db927
uuid_00000000000db925:
	movb $1, -2976(%rbp)
uuid_00000000000db927:
	mov -3136(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000db92a:
	mov -2992(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000db92d:
	mov -2984(%RBP),%RSP
	add $-3144, %RSP
	mov -2976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db92e
	jmp uuid_00000000000db930
uuid_00000000000db92e:
	movb $1, -2624(%rbp)
uuid_00000000000db930:
	mov -2944(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000db933:
	mov -2640(%RBP),%RSP
	add $-3144, %RSP
uuid_00000000000db936:
	mov -2632(%RBP),%RSP
	add $-3144, %RSP
	mov -2624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9d8
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db95b
	jmp uuid_00000000000db95d
uuid_00000000000db95b:
	push %RBP
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db940
	jmp uuid_00000000000db942
uuid_00000000000db940:
	push %RBP
	mov -3248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db93d
	jmp uuid_00000000000db93f
uuid_00000000000db93d:
	push %RBP
	mov -3240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3336(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db93a
	jmp uuid_00000000000db93c
uuid_00000000000db93a:
	movb $1, -3264(%rbp)
uuid_00000000000db93c:
	mov -3328(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000db93f:
	mov -3280(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000db942:
	mov -3272(%RBP),%RSP
	add $-3336, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db958
	jmp uuid_00000000000db95a
uuid_00000000000db958:
	push %RBP
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db952
	jmp uuid_00000000000db954
uuid_00000000000db952:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3432(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db949
	jmp uuid_00000000000db94b
uuid_00000000000db949:
	push %RBP
	mov -3424(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3496(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db946
	jmp uuid_00000000000db948
uuid_00000000000db946:
	push %RBP
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	jmp uuid_00000000000db943
	jmp uuid_00000000000db945
uuid_00000000000db943:
	movb $1, -3440(%rbp)
uuid_00000000000db945:
	mov -3504(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000db948:
	mov -3456(%RBP),%RSP
	add $-3528, %RSP
uuid_00000000000db94b:
	mov -3448(%RBP),%RSP
	add $-3528, %RSP
	mov -3440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db94f
	jmp uuid_00000000000db951
uuid_00000000000db94f:
	push %RBP
	mov -3352(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db94c
	jmp uuid_00000000000db94e
uuid_00000000000db94c:
	movb $1, -3376(%rbp)
uuid_00000000000db94e:
	mov -3536(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000db951:
	mov -3392(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000db954:
	mov -3384(%RBP),%RSP
	add $-3544, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db955
	jmp uuid_00000000000db957
uuid_00000000000db955:
	movb $1, -3216(%rbp)
uuid_00000000000db957:
	mov -3344(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000db95a:
	mov -3232(%RBP),%RSP
	add $-3544, %RSP
uuid_00000000000db95d:
	mov -3224(%RBP),%RSP
	add $-3544, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9d5
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db976
	jmp uuid_00000000000db978
uuid_00000000000db976:
	push %RBP
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	jmp uuid_00000000000db973
	jmp uuid_00000000000db975
uuid_00000000000db973:
	push %RBP
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db96d
	jmp uuid_00000000000db96f
uuid_00000000000db96d:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db964
	jmp uuid_00000000000db966
uuid_00000000000db964:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db961
	jmp uuid_00000000000db963
uuid_00000000000db961:
	push %RBP
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	jmp uuid_00000000000db95e
	jmp uuid_00000000000db960
uuid_00000000000db95e:
	movb $1, -3760(%rbp)
uuid_00000000000db960:
	mov -3824(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000db963:
	mov -3776(%RBP),%RSP
	add $-3848, %RSP
uuid_00000000000db966:
	mov -3768(%RBP),%RSP
	add $-3848, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db96a
	jmp uuid_00000000000db96c
uuid_00000000000db96a:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3864(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db967
	jmp uuid_00000000000db969
uuid_00000000000db967:
	movb $1, -3696(%rbp)
uuid_00000000000db969:
	mov -3856(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000db96c:
	mov -3712(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000db96f:
	mov -3704(%RBP),%RSP
	add $-3864, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db970
	jmp uuid_00000000000db972
uuid_00000000000db970:
	movb $1, -3616(%rbp)
uuid_00000000000db972:
	mov -3664(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000db975:
	mov -3632(%RBP),%RSP
	add $-3864, %RSP
uuid_00000000000db978:
	mov -3624(%RBP),%RSP
	add $-3864, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9d2
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9a4
	jmp uuid_00000000000db9a6
uuid_00000000000db9a4:
	push %RBP
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq $0
	push %RBP
	mov -3976(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db97f
	jmp uuid_00000000000db981
uuid_00000000000db97f:
	push %RBP
	mov -3968(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db97c
	jmp uuid_00000000000db97e
uuid_00000000000db97c:
	push %RBP
	mov -3960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db979
	jmp uuid_00000000000db97b
uuid_00000000000db979:
	movb $1, -3984(%rbp)
uuid_00000000000db97b:
	mov -4048(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000db97e:
	mov -4000(%RBP),%RSP
	add $-4056, %RSP
uuid_00000000000db981:
	mov -3992(%RBP),%RSP
	add $-4056, %RSP
	mov -3984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9a1
	jmp uuid_00000000000db9a3
uuid_00000000000db9a1:
	push %RBP
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq $0
	push %RBP
	mov -4088(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db99b
	jmp uuid_00000000000db99d
uuid_00000000000db99b:
	push %RBP
	mov -4080(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db991
	jmp uuid_00000000000db993
uuid_00000000000db991:
	push %RBP
	mov -4144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db98e
	jmp uuid_00000000000db990
uuid_00000000000db98e:
	push %RBP
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq $0
	push %RBP
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db988
	jmp uuid_00000000000db98a
uuid_00000000000db988:
	push %RBP
	mov -4240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db985
	jmp uuid_00000000000db987
uuid_00000000000db985:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db982
	jmp uuid_00000000000db984
uuid_00000000000db982:
	movb $1, -4256(%rbp)
uuid_00000000000db984:
	mov -4320(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000db987:
	mov -4272(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000db98a:
	mov -4264(%RBP),%RSP
	add $-4328, %RSP
	mov -4256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db98b
	jmp uuid_00000000000db98d
uuid_00000000000db98b:
	movb $1, -4160(%rbp)
uuid_00000000000db98d:
	mov -4224(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000db990:
	mov -4176(%RBP),%RSP
	add $-4328, %RSP
uuid_00000000000db993:
	mov -4168(%RBP),%RSP
	add $-4328, %RSP
	mov -4160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db998
	jmp uuid_00000000000db99a
uuid_00000000000db998:
	push %RBP
	mov -4072(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4344(%rbp)
	pushq $uuid_00000000000db994
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db995
	jmp uuid_00000000000db997
uuid_00000000000db995:
	movb $1, -4096(%rbp)
uuid_00000000000db997:
	mov -4336(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000db99a:
	mov -4112(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000db99d:
	mov -4104(%RBP),%RSP
	add $-4344, %RSP
	mov -4096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db99e
	jmp uuid_00000000000db9a0
uuid_00000000000db99e:
	movb $1, -3936(%rbp)
uuid_00000000000db9a0:
	mov -4064(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000db9a3:
	mov -3952(%RBP),%RSP
	add $-4344, %RSP
uuid_00000000000db9a6:
	mov -3944(%RBP),%RSP
	add $-4344, %RSP
	mov -3936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9cf
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9c2
	jmp uuid_00000000000db9c4
uuid_00000000000db9c2:
	push %RBP
	pushq -4384(%RBP)
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq $0
	push %RBP
	mov -4456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9b0
	jmp uuid_00000000000db9b2
uuid_00000000000db9b0:
	push %RBP
	mov -4448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db9ad
	jmp uuid_00000000000db9af
uuid_00000000000db9ad:
	push %RBP
	mov -4440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db9aa
	jmp uuid_00000000000db9ac
uuid_00000000000db9aa:
	movb $1, -4464(%rbp)
uuid_00000000000db9ac:
	mov -4528(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000db9af:
	mov -4480(%RBP),%RSP
	add $-4536, %RSP
uuid_00000000000db9b2:
	mov -4472(%RBP),%RSP
	add $-4536, %RSP
	mov -4464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9bf
	jmp uuid_00000000000db9c1
uuid_00000000000db9bf:
	push %RBP
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9b9
	jmp uuid_00000000000db9bb
uuid_00000000000db9b9:
	push %RBP
	mov -4560(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000db9b6
	jmp uuid_00000000000db9b8
uuid_00000000000db9b6:
	push %RBP
	mov -4552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db9b3
	jmp uuid_00000000000db9b5
uuid_00000000000db9b3:
	movb $1, -4576(%rbp)
uuid_00000000000db9b5:
	mov -4640(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000db9b8:
	mov -4592(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000db9bb:
	mov -4584(%RBP),%RSP
	add $-4648, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9bc
	jmp uuid_00000000000db9be
uuid_00000000000db9bc:
	movb $1, -4416(%rbp)
uuid_00000000000db9be:
	mov -4544(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000db9c1:
	mov -4432(%RBP),%RSP
	add $-4648, %RSP
uuid_00000000000db9c4:
	mov -4424(%RBP),%RSP
	add $-4648, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000db9cc
	push %RBP
	jmp uuid_00000000000db9c9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000db9c8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000db9cb
uuid_00000000000db9c9:
uuid_00000000000db9cb:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000db9ce
uuid_00000000000db9cc:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4648(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9c5
	jmp uuid_00000000000db9c7
uuid_00000000000db9c5:
#call function can-unify : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000db9c7:
	mov -4656(%RBP),%RSP
	add $-4656, %RSP
uuid_00000000000db9ce:
	mov -4352(%RBP),%RSP
	add $-4656, %RSP
	jmp uuid_00000000000db9d1
uuid_00000000000db9cf:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4056(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9a7
	jmp uuid_00000000000db9a9
uuid_00000000000db9a7:
	movq $1, -64(%rbp)
uuid_00000000000db9a9:
	mov -4352(%RBP),%RSP
	add $-4352, %RSP
uuid_00000000000db9d1:
	mov -3872(%RBP),%RSP
	add $-4352, %RSP
	jmp uuid_00000000000db9d4
uuid_00000000000db9d2:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000db9d4:
	mov -3552(%RBP),%RSP
	add $-3864, %RSP
	jmp uuid_00000000000db9d7
uuid_00000000000db9d5:
	movq $1, -64(%rbp)
uuid_00000000000db9d7:
	mov -3152(%RBP),%RSP
	add $-3544, %RSP
	jmp uuid_00000000000db9da
uuid_00000000000db9d8:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3112(%rbp)
	pushq -3120(%rbp)
	pushq -3128(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db937
	jmp uuid_00000000000db939
uuid_00000000000db937:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000db939:
	mov -3152(%RBP),%RSP
	add $-3152, %RSP
uuid_00000000000db9da:
	mov -2560(%RBP),%RSP
	add $-3152, %RSP
	jmp uuid_00000000000db9dd
uuid_00000000000db9db:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8fe
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000db900
uuid_00000000000db8fe:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000db900:
	mov -2560(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000db9dd:
	mov -1968(%RBP),%RSP
	add $-2560, %RSP
	jmp uuid_00000000000db9e0
uuid_00000000000db9de:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db8c5
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000db8c7
uuid_00000000000db8c5:
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000db8c7:
	mov -1968(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000db9e0:
	mov -1104(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000db9e3
uuid_00000000000db9e1:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db86e
	jmp uuid_00000000000db870
uuid_00000000000db86e:
	movq $1, -64(%rbp)
uuid_00000000000db870:
	mov -1104(%RBP),%RSP
	add $-1104, %RSP
	push %RBP
	mov -64(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000db871
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000db873
uuid_00000000000db871:
uuid_00000000000db873:
	mov -1112(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000db9e3:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000db9e6
uuid_00000000000db9e4:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db859
	jmp uuid_00000000000db85b
uuid_00000000000db859:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db856
	jmp uuid_00000000000db858
uuid_00000000000db856:
	movq $1, -64(%rbp)
uuid_00000000000db858:
	mov -888(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000db85b:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000db9e6:
	mov -656(%RBP),%RSP
	add $-888, %RSP
	jmp uuid_00000000000db9e9
uuid_00000000000db9e7:
	movq $1, -64(%rbp)
uuid_00000000000db9e9:
	mov -480(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000db9ec
uuid_00000000000db9ea:
	movq $1, -64(%rbp)
uuid_00000000000db9ec:
	mov -248(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000db9ef
uuid_00000000000db9ed:
	movq $1, -64(%rbp)
uuid_00000000000db9ef:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000db9f0
	jmp uuid_00000000000db9f2
uuid_00000000000db9f0:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000db9f2:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_inner_CL_ArrowTContextConsTypeType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9f9
	jmp uuid_00000000000db9fb
uuid_00000000000db9f9:
	push %RBP
	jmp uuid_00000000000db9f6
	jmp uuid_00000000000db9f8
uuid_00000000000db9f6:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9f3
	jmp uuid_00000000000db9f5
uuid_00000000000db9f3:
	movb $1, -304(%rbp)
uuid_00000000000db9f5:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000db9f8:
	mov -320(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000db9fb:
	mov -312(%RBP),%RSP
	add $-352, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc33
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba11
	jmp uuid_00000000000dba13
uuid_00000000000dba11:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba02
	jmp uuid_00000000000dba04
uuid_00000000000dba02:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000db9ff
	jmp uuid_00000000000dba01
uuid_00000000000db9ff:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000db9fc
	jmp uuid_00000000000db9fe
uuid_00000000000db9fc:
	movb $1, -472(%rbp)
uuid_00000000000db9fe:
	mov -536(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dba01:
	mov -488(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dba04:
	mov -480(%RBP),%RSP
	add $-544, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba0e
	jmp uuid_00000000000dba10
uuid_00000000000dba0e:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba08
	jmp uuid_00000000000dba0a
uuid_00000000000dba08:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dba05
	jmp uuid_00000000000dba07
uuid_00000000000dba05:
	movb $1, -584(%rbp)
uuid_00000000000dba07:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dba0a:
	mov -592(%RBP),%RSP
	add $-608, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba0b
	jmp uuid_00000000000dba0d
uuid_00000000000dba0b:
	movb $1, -424(%rbp)
uuid_00000000000dba0d:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dba10:
	mov -440(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dba13:
	mov -432(%RBP),%RSP
	add $-608, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc30
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba2c
	jmp uuid_00000000000dba2e
uuid_00000000000dba2c:
	push %RBP
	jmp uuid_00000000000dba29
	jmp uuid_00000000000dba2b
uuid_00000000000dba29:
	push %RBP
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba23
	jmp uuid_00000000000dba25
uuid_00000000000dba23:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba1a
	jmp uuid_00000000000dba1c
uuid_00000000000dba1a:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba17
	jmp uuid_00000000000dba19
uuid_00000000000dba17:
	push %RBP
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	jmp uuid_00000000000dba14
	jmp uuid_00000000000dba16
uuid_00000000000dba14:
	movb $1, -800(%rbp)
uuid_00000000000dba16:
	mov -864(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dba19:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dba1c:
	mov -808(%RBP),%RSP
	add $-888, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba20
	jmp uuid_00000000000dba22
uuid_00000000000dba20:
	push %RBP
	mov -712(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq $uuid_00000000000db822
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dba1d
	jmp uuid_00000000000dba1f
uuid_00000000000dba1d:
	movb $1, -736(%rbp)
uuid_00000000000dba1f:
	mov -896(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dba22:
	mov -752(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dba25:
	mov -744(%RBP),%RSP
	add $-904, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba26
	jmp uuid_00000000000dba28
uuid_00000000000dba26:
	movb $1, -680(%rbp)
uuid_00000000000dba28:
	mov -704(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dba2b:
	mov -696(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dba2e:
	mov -688(%RBP),%RSP
	add $-904, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc2d
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba3b
	jmp uuid_00000000000dba3d
uuid_00000000000dba3b:
	push %RBP
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	jmp uuid_00000000000dba38
	jmp uuid_00000000000dba3a
uuid_00000000000dba38:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba32
	jmp uuid_00000000000dba34
uuid_00000000000dba32:
	push %RBP
	mov -1040(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dba2f
	jmp uuid_00000000000dba31
uuid_00000000000dba2f:
	movb $1, -1056(%rbp)
uuid_00000000000dba31:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000dba34:
	mov -1064(%RBP),%RSP
	add $-1080, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba35
	jmp uuid_00000000000dba37
uuid_00000000000dba35:
	movb $1, -976(%rbp)
uuid_00000000000dba37:
	mov -1024(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000dba3a:
	mov -992(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000dba3d:
	mov -984(%RBP),%RSP
	add $-1080, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc2a
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba4d
	jmp uuid_00000000000dba4f
uuid_00000000000dba4d:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	jmp uuid_00000000000dba4a
	jmp uuid_00000000000dba4c
uuid_00000000000dba4a:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba44
	jmp uuid_00000000000dba46
uuid_00000000000dba44:
	push %RBP
	mov -1216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba41
	jmp uuid_00000000000dba43
uuid_00000000000dba41:
	push %RBP
	mov -1208(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba3e
	jmp uuid_00000000000dba40
uuid_00000000000dba3e:
	movb $1, -1232(%rbp)
uuid_00000000000dba40:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dba43:
	mov -1248(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dba46:
	mov -1240(%RBP),%RSP
	add $-1304, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba47
	jmp uuid_00000000000dba49
uuid_00000000000dba47:
	movb $1, -1152(%rbp)
uuid_00000000000dba49:
	mov -1200(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dba4c:
	mov -1168(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dba4f:
	mov -1160(%RBP),%RSP
	add $-1304, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc27
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba84
	jmp uuid_00000000000dba86
uuid_00000000000dba84:
	push %RBP
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba7b
	jmp uuid_00000000000dba7d
uuid_00000000000dba7b:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba78
	jmp uuid_00000000000dba7a
uuid_00000000000dba78:
	push %RBP
	mov -1400(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dba75
	jmp uuid_00000000000dba77
uuid_00000000000dba75:
	movb $1, -1424(%rbp)
uuid_00000000000dba77:
	mov -1472(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000dba7a:
	mov -1440(%RBP),%RSP
	add $-1496, %RSP
uuid_00000000000dba7d:
	mov -1432(%RBP),%RSP
	add $-1496, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba81
	jmp uuid_00000000000dba83
uuid_00000000000dba81:
	push %RBP
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	jmp uuid_00000000000dba7e
	jmp uuid_00000000000dba80
uuid_00000000000dba7e:
	movb $1, -1376(%rbp)
uuid_00000000000dba80:
	mov -1504(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dba83:
	mov -1392(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dba86:
	mov -1384(%RBP),%RSP
	add $-1528, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc24
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb06
	jmp uuid_00000000000dbb08
uuid_00000000000dbb06:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbad0
	jmp uuid_00000000000dbad2
uuid_00000000000dbad0:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbac7
	jmp uuid_00000000000dbac9
uuid_00000000000dbac7:
	push %RBP
	mov -1696(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbabe
	jmp uuid_00000000000dbac0
uuid_00000000000dbabe:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1832(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbabb
	jmp uuid_00000000000dbabd
uuid_00000000000dbabb:
	push %RBP
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000dbab8
	jmp uuid_00000000000dbaba
uuid_00000000000dbab8:
	movb $1, -1776(%rbp)
uuid_00000000000dbaba:
	mov -1840(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000dbabd:
	mov -1792(%RBP),%RSP
	add $-1864, %RSP
uuid_00000000000dbac0:
	mov -1784(%RBP),%RSP
	add $-1864, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbac4
	jmp uuid_00000000000dbac6
uuid_00000000000dbac4:
	push %RBP
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000dbac1
	jmp uuid_00000000000dbac3
uuid_00000000000dbac1:
	movb $1, -1712(%rbp)
uuid_00000000000dbac3:
	mov -1872(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dbac6:
	mov -1728(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dbac9:
	mov -1720(%RBP),%RSP
	add $-1896, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbacd
	jmp uuid_00000000000dbacf
uuid_00000000000dbacd:
	push %RBP
	mov -1624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1912(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbaca
	jmp uuid_00000000000dbacc
uuid_00000000000dbaca:
	movb $1, -1648(%rbp)
uuid_00000000000dbacc:
	mov -1904(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000dbacf:
	mov -1664(%RBP),%RSP
	add $-1912, %RSP
uuid_00000000000dbad2:
	mov -1656(%RBP),%RSP
	add $-1912, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb03
	jmp uuid_00000000000dbb05
uuid_00000000000dbb03:
	push %RBP
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1944(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbafd
	jmp uuid_00000000000dbaff
uuid_00000000000dbafd:
	push %RBP
	mov -1936(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaf4
	jmp uuid_00000000000dbaf6
uuid_00000000000dbaf4:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbad9
	jmp uuid_00000000000dbadb
uuid_00000000000dbad9:
	push %RBP
	mov -2064(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbad6
	jmp uuid_00000000000dbad8
uuid_00000000000dbad6:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	jmp uuid_00000000000dbad3
	jmp uuid_00000000000dbad5
uuid_00000000000dbad3:
	movb $1, -2080(%rbp)
uuid_00000000000dbad5:
	mov -2144(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dbad8:
	mov -2096(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dbadb:
	mov -2088(%RBP),%RSP
	add $-2168, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaf1
	jmp uuid_00000000000dbaf3
uuid_00000000000dbaf1:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaeb
	jmp uuid_00000000000dbaed
uuid_00000000000dbaeb:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbae2
	jmp uuid_00000000000dbae4
uuid_00000000000dbae2:
	push %RBP
	mov -2256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbadf
	jmp uuid_00000000000dbae1
uuid_00000000000dbadf:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	jmp uuid_00000000000dbadc
	jmp uuid_00000000000dbade
uuid_00000000000dbadc:
	movb $1, -2272(%rbp)
uuid_00000000000dbade:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000dbae1:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000dbae4:
	mov -2280(%RBP),%RSP
	add $-2360, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbae8
	jmp uuid_00000000000dbaea
uuid_00000000000dbae8:
	push %RBP
	mov -2184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2376(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbae5
	jmp uuid_00000000000dbae7
uuid_00000000000dbae5:
	movb $1, -2208(%rbp)
uuid_00000000000dbae7:
	mov -2368(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbaea:
	mov -2224(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbaed:
	mov -2216(%RBP),%RSP
	add $-2376, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaee
	jmp uuid_00000000000dbaf0
uuid_00000000000dbaee:
	movb $1, -2016(%rbp)
uuid_00000000000dbaf0:
	mov -2176(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbaf3:
	mov -2032(%RBP),%RSP
	add $-2376, %RSP
uuid_00000000000dbaf6:
	mov -2024(%RBP),%RSP
	add $-2376, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbafa
	jmp uuid_00000000000dbafc
uuid_00000000000dbafa:
	push %RBP
	mov -1928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2392(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbaf7
	jmp uuid_00000000000dbaf9
uuid_00000000000dbaf7:
	movb $1, -1952(%rbp)
uuid_00000000000dbaf9:
	mov -2384(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbafc:
	mov -1968(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbaff:
	mov -1960(%RBP),%RSP
	add $-2392, %RSP
	mov -1952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb00
	jmp uuid_00000000000dbb02
uuid_00000000000dbb00:
	movb $1, -1600(%rbp)
uuid_00000000000dbb02:
	mov -1920(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbb05:
	mov -1616(%RBP),%RSP
	add $-2392, %RSP
uuid_00000000000dbb08:
	mov -1608(%RBP),%RSP
	add $-2392, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc21
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -2456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb3f
	jmp uuid_00000000000dbb41
uuid_00000000000dbb3f:
	push %RBP
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	jmp uuid_00000000000dbb3c
	jmp uuid_00000000000dbb3e
uuid_00000000000dbb3c:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq $0
	push %RBP
	mov -2536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb36
	jmp uuid_00000000000dbb38
uuid_00000000000dbb36:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb2d
	jmp uuid_00000000000dbb2f
uuid_00000000000dbb2d:
	push %RBP
	mov -2592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb12
	jmp uuid_00000000000dbb14
uuid_00000000000dbb12:
	push %RBP
	mov -2656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2728(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb0f
	jmp uuid_00000000000dbb11
uuid_00000000000dbb0f:
	push %RBP
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	jmp uuid_00000000000dbb0c
	jmp uuid_00000000000dbb0e
uuid_00000000000dbb0c:
	movb $1, -2672(%rbp)
uuid_00000000000dbb0e:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dbb11:
	mov -2688(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dbb14:
	mov -2680(%RBP),%RSP
	add $-2760, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb2a
	jmp uuid_00000000000dbb2c
uuid_00000000000dbb2a:
	push %RBP
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb24
	jmp uuid_00000000000dbb26
uuid_00000000000dbb24:
	push %RBP
	mov -2784(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb1b
	jmp uuid_00000000000dbb1d
uuid_00000000000dbb1b:
	push %RBP
	mov -2848(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2920(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb18
	jmp uuid_00000000000dbb1a
uuid_00000000000dbb18:
	push %RBP
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	jmp uuid_00000000000dbb15
	jmp uuid_00000000000dbb17
uuid_00000000000dbb15:
	movb $1, -2864(%rbp)
uuid_00000000000dbb17:
	mov -2928(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000dbb1a:
	mov -2880(%RBP),%RSP
	add $-2952, %RSP
uuid_00000000000dbb1d:
	mov -2872(%RBP),%RSP
	add $-2952, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb21
	jmp uuid_00000000000dbb23
uuid_00000000000dbb21:
	push %RBP
	mov -2776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb1e
	jmp uuid_00000000000dbb20
uuid_00000000000dbb1e:
	movb $1, -2800(%rbp)
uuid_00000000000dbb20:
	mov -2960(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbb23:
	mov -2816(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbb26:
	mov -2808(%RBP),%RSP
	add $-2968, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb27
	jmp uuid_00000000000dbb29
uuid_00000000000dbb27:
	movb $1, -2608(%rbp)
uuid_00000000000dbb29:
	mov -2768(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbb2c:
	mov -2624(%RBP),%RSP
	add $-2968, %RSP
uuid_00000000000dbb2f:
	mov -2616(%RBP),%RSP
	add $-2968, %RSP
	mov -2608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb33
	jmp uuid_00000000000dbb35
uuid_00000000000dbb33:
	push %RBP
	mov -2520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2984(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb30
	jmp uuid_00000000000dbb32
uuid_00000000000dbb30:
	movb $1, -2544(%rbp)
uuid_00000000000dbb32:
	mov -2976(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbb35:
	mov -2560(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbb38:
	mov -2552(%RBP),%RSP
	add $-2984, %RSP
	mov -2544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb39
	jmp uuid_00000000000dbb3b
uuid_00000000000dbb39:
	movb $1, -2464(%rbp)
uuid_00000000000dbb3b:
	mov -2512(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbb3e:
	mov -2480(%RBP),%RSP
	add $-2984, %RSP
uuid_00000000000dbb41:
	mov -2472(%RBP),%RSP
	add $-2984, %RSP
	mov -2464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc1e
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb78
	jmp uuid_00000000000dbb7a
uuid_00000000000dbb78:
	push %RBP
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb5d
	jmp uuid_00000000000dbb5f
uuid_00000000000dbb5d:
	push %RBP
	mov -3088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb54
	jmp uuid_00000000000dbb56
uuid_00000000000dbb54:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb4b
	jmp uuid_00000000000dbb4d
uuid_00000000000dbb4b:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb48
	jmp uuid_00000000000dbb4a
uuid_00000000000dbb48:
	push %RBP
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	jmp uuid_00000000000dbb45
	jmp uuid_00000000000dbb47
uuid_00000000000dbb45:
	movb $1, -3232(%rbp)
uuid_00000000000dbb47:
	mov -3296(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000dbb4a:
	mov -3248(%RBP),%RSP
	add $-3320, %RSP
uuid_00000000000dbb4d:
	mov -3240(%RBP),%RSP
	add $-3320, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb51
	jmp uuid_00000000000dbb53
uuid_00000000000dbb51:
	push %RBP
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	jmp uuid_00000000000dbb4e
	jmp uuid_00000000000dbb50
uuid_00000000000dbb4e:
	movb $1, -3168(%rbp)
uuid_00000000000dbb50:
	mov -3328(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000dbb53:
	mov -3184(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000dbb56:
	mov -3176(%RBP),%RSP
	add $-3352, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb5a
	jmp uuid_00000000000dbb5c
uuid_00000000000dbb5a:
	push %RBP
	mov -3080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb57
	jmp uuid_00000000000dbb59
uuid_00000000000dbb57:
	movb $1, -3104(%rbp)
uuid_00000000000dbb59:
	mov -3360(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000dbb5c:
	mov -3120(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000dbb5f:
	mov -3112(%RBP),%RSP
	add $-3368, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb75
	jmp uuid_00000000000dbb77
uuid_00000000000dbb75:
	push %RBP
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq $0
	push %RBP
	mov -3400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb6f
	jmp uuid_00000000000dbb71
uuid_00000000000dbb6f:
	push %RBP
	mov -3392(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb66
	jmp uuid_00000000000dbb68
uuid_00000000000dbb66:
	push %RBP
	mov -3456(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb63
	jmp uuid_00000000000dbb65
uuid_00000000000dbb63:
	push %RBP
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	jmp uuid_00000000000dbb60
	jmp uuid_00000000000dbb62
uuid_00000000000dbb60:
	movb $1, -3472(%rbp)
uuid_00000000000dbb62:
	mov -3536(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000dbb65:
	mov -3488(%RBP),%RSP
	add $-3560, %RSP
uuid_00000000000dbb68:
	mov -3480(%RBP),%RSP
	add $-3560, %RSP
	mov -3472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb6c
	jmp uuid_00000000000dbb6e
uuid_00000000000dbb6c:
	push %RBP
	mov -3384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3576(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb69
	jmp uuid_00000000000dbb6b
uuid_00000000000dbb69:
	movb $1, -3408(%rbp)
uuid_00000000000dbb6b:
	mov -3568(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbb6e:
	mov -3424(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbb71:
	mov -3416(%RBP),%RSP
	add $-3576, %RSP
	mov -3408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb72
	jmp uuid_00000000000dbb74
uuid_00000000000dbb72:
	movb $1, -3056(%rbp)
uuid_00000000000dbb74:
	mov -3376(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbb77:
	mov -3072(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000dbb7a:
	mov -3064(%RBP),%RSP
	add $-3576, %RSP
	mov -3056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc1b
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -3640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb9f
	jmp uuid_00000000000dbba1
uuid_00000000000dbb9f:
	push %RBP
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq $0
	push %RBP
	mov -3688(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb84
	jmp uuid_00000000000dbb86
uuid_00000000000dbb84:
	push %RBP
	mov -3680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb81
	jmp uuid_00000000000dbb83
uuid_00000000000dbb81:
	push %RBP
	mov -3672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3768(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb7e
	jmp uuid_00000000000dbb80
uuid_00000000000dbb7e:
	movb $1, -3696(%rbp)
uuid_00000000000dbb80:
	mov -3760(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000dbb83:
	mov -3712(%RBP),%RSP
	add $-3768, %RSP
uuid_00000000000dbb86:
	mov -3704(%RBP),%RSP
	add $-3768, %RSP
	mov -3696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb9c
	jmp uuid_00000000000dbb9e
uuid_00000000000dbb9c:
	push %RBP
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq $0
	push %RBP
	mov -3800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb96
	jmp uuid_00000000000dbb98
uuid_00000000000dbb96:
	push %RBP
	mov -3792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb8d
	jmp uuid_00000000000dbb8f
uuid_00000000000dbb8d:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3928(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb8a
	jmp uuid_00000000000dbb8c
uuid_00000000000dbb8a:
	push %RBP
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	jmp uuid_00000000000dbb87
	jmp uuid_00000000000dbb89
uuid_00000000000dbb87:
	movb $1, -3872(%rbp)
uuid_00000000000dbb89:
	mov -3936(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000dbb8c:
	mov -3888(%RBP),%RSP
	add $-3960, %RSP
uuid_00000000000dbb8f:
	mov -3880(%RBP),%RSP
	add $-3960, %RSP
	mov -3872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb93
	jmp uuid_00000000000dbb95
uuid_00000000000dbb93:
	push %RBP
	mov -3784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3976(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb90
	jmp uuid_00000000000dbb92
uuid_00000000000dbb90:
	movb $1, -3808(%rbp)
uuid_00000000000dbb92:
	mov -3968(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbb95:
	mov -3824(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbb98:
	mov -3816(%RBP),%RSP
	add $-3976, %RSP
	mov -3808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbb99
	jmp uuid_00000000000dbb9b
uuid_00000000000dbb99:
	movb $1, -3648(%rbp)
uuid_00000000000dbb9b:
	mov -3776(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbb9e:
	mov -3664(%RBP),%RSP
	add $-3976, %RSP
uuid_00000000000dbba1:
	mov -3656(%RBP),%RSP
	add $-3976, %RSP
	mov -3648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc18
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbba
	jmp uuid_00000000000dbbbc
uuid_00000000000dbbba:
	push %RBP
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	jmp uuid_00000000000dbbb7
	jmp uuid_00000000000dbbb9
uuid_00000000000dbbb7:
	push %RBP
	pushq -3992(%RBP)
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq $0
	push %RBP
	mov -4120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbb1
	jmp uuid_00000000000dbbb3
uuid_00000000000dbbb1:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbba8
	jmp uuid_00000000000dbbaa
uuid_00000000000dbba8:
	push %RBP
	mov -4176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbba5
	jmp uuid_00000000000dbba7
uuid_00000000000dbba5:
	push %RBP
	pushq -4152(%RBP)
	pushq -4160(%RBP)
	pushq -4168(%RBP)
	jmp uuid_00000000000dbba2
	jmp uuid_00000000000dbba4
uuid_00000000000dbba2:
	movb $1, -4192(%rbp)
uuid_00000000000dbba4:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dbba7:
	mov -4208(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dbbaa:
	mov -4200(%RBP),%RSP
	add $-4280, %RSP
	mov -4192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbae
	jmp uuid_00000000000dbbb0
uuid_00000000000dbbae:
	push %RBP
	mov -4104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4296(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbbab
	jmp uuid_00000000000dbbad
uuid_00000000000dbbab:
	movb $1, -4128(%rbp)
uuid_00000000000dbbad:
	mov -4288(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbbb0:
	mov -4144(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbbb3:
	mov -4136(%RBP),%RSP
	add $-4296, %RSP
	mov -4128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbb4
	jmp uuid_00000000000dbbb6
uuid_00000000000dbbb4:
	movb $1, -4048(%rbp)
uuid_00000000000dbbb6:
	mov -4096(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbbb9:
	mov -4064(%RBP),%RSP
	add $-4296, %RSP
uuid_00000000000dbbbc:
	mov -4056(%RBP),%RSP
	add $-4296, %RSP
	mov -4048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc15
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbe7
	jmp uuid_00000000000dbbe9
uuid_00000000000dbbe7:
	push %RBP
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq $0
	push %RBP
	mov -4408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbc3
	jmp uuid_00000000000dbbc5
uuid_00000000000dbbc3:
	push %RBP
	mov -4400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbc0
	jmp uuid_00000000000dbbc2
uuid_00000000000dbbc0:
	push %RBP
	mov -4392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbbbd
	jmp uuid_00000000000dbbbf
uuid_00000000000dbbbd:
	movb $1, -4416(%rbp)
uuid_00000000000dbbbf:
	mov -4480(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000dbbc2:
	mov -4432(%RBP),%RSP
	add $-4488, %RSP
uuid_00000000000dbbc5:
	mov -4424(%RBP),%RSP
	add $-4488, %RSP
	mov -4416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbe4
	jmp uuid_00000000000dbbe6
uuid_00000000000dbbe4:
	push %RBP
	pushq -4312(%RBP)
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq $0
	push %RBP
	mov -4520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbde
	jmp uuid_00000000000dbbe0
uuid_00000000000dbbde:
	push %RBP
	mov -4512(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4584(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbd5
	jmp uuid_00000000000dbbd7
uuid_00000000000dbbd5:
	push %RBP
	mov -4576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbd2
	jmp uuid_00000000000dbbd4
uuid_00000000000dbbd2:
	push %RBP
	pushq -4552(%RBP)
	pushq -4560(%RBP)
	pushq -4568(%RBP)
	pushq $0
	push %RBP
	mov -4680(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbcc
	jmp uuid_00000000000dbbce
uuid_00000000000dbbcc:
	push %RBP
	mov -4672(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbc9
	jmp uuid_00000000000dbbcb
uuid_00000000000dbbc9:
	push %RBP
	mov -4664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbbc6
	jmp uuid_00000000000dbbc8
uuid_00000000000dbbc6:
	movb $1, -4688(%rbp)
uuid_00000000000dbbc8:
	mov -4752(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbbcb:
	mov -4704(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbbce:
	mov -4696(%RBP),%RSP
	add $-4760, %RSP
	mov -4688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbcf
	jmp uuid_00000000000dbbd1
uuid_00000000000dbbcf:
	movb $1, -4592(%rbp)
uuid_00000000000dbbd1:
	mov -4656(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbbd4:
	mov -4608(%RBP),%RSP
	add $-4760, %RSP
uuid_00000000000dbbd7:
	mov -4600(%RBP),%RSP
	add $-4760, %RSP
	mov -4592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbdb
	jmp uuid_00000000000dbbdd
uuid_00000000000dbbdb:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4776(%rbp)
	pushq $uuid_00000000000db994
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbbd8
	jmp uuid_00000000000dbbda
uuid_00000000000dbbd8:
	movb $1, -4528(%rbp)
uuid_00000000000dbbda:
	mov -4768(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbbdd:
	mov -4544(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbbe0:
	mov -4536(%RBP),%RSP
	add $-4776, %RSP
	mov -4528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbe1
	jmp uuid_00000000000dbbe3
uuid_00000000000dbbe1:
	movb $1, -4368(%rbp)
uuid_00000000000dbbe3:
	mov -4496(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbbe6:
	mov -4384(%RBP),%RSP
	add $-4776, %RSP
uuid_00000000000dbbe9:
	mov -4376(%RBP),%RSP
	add $-4776, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc12
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	push %RBP
	mov -4840(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc05
	jmp uuid_00000000000dbc07
uuid_00000000000dbc05:
	push %RBP
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq $0
	push %RBP
	mov -4888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbf3
	jmp uuid_00000000000dbbf5
uuid_00000000000dbbf3:
	push %RBP
	mov -4880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbbf0
	jmp uuid_00000000000dbbf2
uuid_00000000000dbbf0:
	push %RBP
	mov -4872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbbed
	jmp uuid_00000000000dbbef
uuid_00000000000dbbed:
	movb $1, -4896(%rbp)
uuid_00000000000dbbef:
	mov -4960(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000dbbf2:
	mov -4912(%RBP),%RSP
	add $-4968, %RSP
uuid_00000000000dbbf5:
	mov -4904(%RBP),%RSP
	add $-4968, %RSP
	mov -4896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc02
	jmp uuid_00000000000dbc04
uuid_00000000000dbc02:
	push %RBP
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq -4808(%RBP)
	pushq $0
	push %RBP
	mov -5000(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbfc
	jmp uuid_00000000000dbbfe
uuid_00000000000dbbfc:
	push %RBP
	mov -4992(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbbf9
	jmp uuid_00000000000dbbfb
uuid_00000000000dbbf9:
	push %RBP
	mov -4984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbbf6
	jmp uuid_00000000000dbbf8
uuid_00000000000dbbf6:
	movb $1, -5008(%rbp)
uuid_00000000000dbbf8:
	mov -5072(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbbfb:
	mov -5024(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbbfe:
	mov -5016(%RBP),%RSP
	add $-5080, %RSP
	mov -5008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbff
	jmp uuid_00000000000dbc01
uuid_00000000000dbbff:
	movb $1, -4848(%rbp)
uuid_00000000000dbc01:
	mov -4976(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbc04:
	mov -4864(%RBP),%RSP
	add $-5080, %RSP
uuid_00000000000dbc07:
	mov -4856(%RBP),%RSP
	add $-5080, %RSP
	mov -4848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc0f
	push %RBP
	jmp uuid_00000000000dbc0c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbc0b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbc0e
uuid_00000000000dbc0c:
uuid_00000000000dbc0e:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000dbc11
uuid_00000000000dbc0f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5080(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc08
	jmp uuid_00000000000dbc0a
uuid_00000000000dbc08:
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbc0a:
	mov -5088(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000dbc11:
	mov -4784(%RBP),%RSP
	add $-5088, %RSP
	jmp uuid_00000000000dbc14
uuid_00000000000dbc12:
	push %RBP
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4760(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4488(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbbea
	jmp uuid_00000000000dbbec
uuid_00000000000dbbea:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbbec:
	mov -4784(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000dbc14:
	mov -4304(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000dbc17
uuid_00000000000dbc15:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbc17:
	mov -3984(%RBP),%RSP
	add $-4296, %RSP
	jmp uuid_00000000000dbc1a
uuid_00000000000dbc18:
uuid_00000000000dbc1a:
	mov -3584(%RBP),%RSP
	add $-3976, %RSP
	jmp uuid_00000000000dbc1d
uuid_00000000000dbc1b:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb7b
	jmp uuid_00000000000dbb7d
uuid_00000000000dbb7b:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -3304(%rbp)
	pushq -3312(%rbp)
	pushq -3320(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3336(%rbp)
	pushq -3344(%rbp)
	pushq -3352(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbb7d:
	mov -3584(%RBP),%RSP
	add $-3584, %RSP
uuid_00000000000dbc1d:
	mov -2992(%RBP),%RSP
	add $-3584, %RSP
	jmp uuid_00000000000dbc20
uuid_00000000000dbc1e:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb42
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000dbb44
uuid_00000000000dbb42:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbb44:
	mov -2992(%RBP),%RSP
	add $-2992, %RSP
uuid_00000000000dbc20:
	mov -2400(%RBP),%RSP
	add $-2992, %RSP
	jmp uuid_00000000000dbc23
uuid_00000000000dbc21:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbb09
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000dbb0b
uuid_00000000000dbb09:
#call function and : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbb0b:
	mov -2400(%RBP),%RSP
	add $-2400, %RSP
uuid_00000000000dbc23:
	mov -1536(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000dbc26
uuid_00000000000dbc24:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba8d
	jmp uuid_00000000000dba8f
uuid_00000000000dba8d:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba8a
	jmp uuid_00000000000dba8c
uuid_00000000000dba8a:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba87
	jmp uuid_00000000000dba89
uuid_00000000000dba87:
	movb $1, -2040(%rbp)
uuid_00000000000dba89:
	mov -2184(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000dba8c:
	mov -2056(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000dba8f:
	mov -2048(%RBP),%RSP
	add $-2304, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbab5
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba96
	jmp uuid_00000000000dba98
uuid_00000000000dba96:
	push %RBP
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	mov -2704(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba93
	jmp uuid_00000000000dba95
uuid_00000000000dba93:
	push %RBP
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	jmp uuid_00000000000dba90
	jmp uuid_00000000000dba92
uuid_00000000000dba90:
	movb $1, -2568(%rbp)
uuid_00000000000dba92:
	mov -2712(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dba95:
	mov -2584(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000dba98:
	mov -2576(%RBP),%RSP
	add $-2832, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbab2
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3088(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba9f
	jmp uuid_00000000000dbaa1
uuid_00000000000dba9f:
	push %RBP
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	jmp uuid_00000000000dba9c
	jmp uuid_00000000000dba9e
uuid_00000000000dba9c:
	push %RBP
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	mov -3360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba99
	jmp uuid_00000000000dba9b
uuid_00000000000dba99:
	movb $1, -3096(%rbp)
uuid_00000000000dba9b:
	mov -3240(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000dba9e:
	mov -3112(%RBP),%RSP
	add $-3360, %RSP
uuid_00000000000dbaa1:
	mov -3104(%RBP),%RSP
	add $-3360, %RSP
	mov -3096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaaf
	push %RBP
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq $0
	push %RBP
	mov -3616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaa8
	jmp uuid_00000000000dbaaa
uuid_00000000000dbaa8:
	push %RBP
	pushq -3496(%RBP)
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq -3560(%RBP)
	pushq -3568(%RBP)
	pushq -3576(%RBP)
	pushq -3584(%RBP)
	pushq -3592(%RBP)
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	jmp uuid_00000000000dbaa5
	jmp uuid_00000000000dbaa7
uuid_00000000000dbaa5:
	push %RBP
	pushq -3376(%RBP)
	pushq -3384(%RBP)
	pushq -3392(%RBP)
	pushq -3400(%RBP)
	pushq -3408(%RBP)
	pushq -3416(%RBP)
	pushq -3424(%RBP)
	pushq -3432(%RBP)
	pushq -3440(%RBP)
	pushq -3448(%RBP)
	pushq -3456(%RBP)
	pushq -3464(%RBP)
	pushq -3472(%RBP)
	pushq -3480(%RBP)
	pushq -3488(%RBP)
	jmp uuid_00000000000dbaa2
	jmp uuid_00000000000dbaa4
uuid_00000000000dbaa2:
	movb $1, -3624(%rbp)
uuid_00000000000dbaa4:
	mov -3768(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000dbaa7:
	mov -3640(%RBP),%RSP
	add $-3888, %RSP
uuid_00000000000dbaaa:
	mov -3632(%RBP),%RSP
	add $-3888, %RSP
	mov -3624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbaac
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbaab
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbaae
uuid_00000000000dbaac:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbaae:
	mov -3368(%RBP),%RSP
	add $-3888, %RSP
	jmp uuid_00000000000dbab1
uuid_00000000000dbaaf:
	movq -3232(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -3224(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -3216(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -3208(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3200(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3192(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3184(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3176(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3168(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3160(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3152(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000dbab1:
	mov -2840(%RBP),%RSP
	add $-3360, %RSP
	jmp uuid_00000000000dbab4
uuid_00000000000dbab2:
	movq -2832(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2824(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2816(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2808(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2800(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2792(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2784(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2776(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2768(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000dbab4:
	mov -2312(%RBP),%RSP
	add $-2832, %RSP
	jmp uuid_00000000000dbab7
uuid_00000000000dbab5:
uuid_00000000000dbab7:
	mov -1784(%RBP),%RSP
	add $-2304, %RSP
uuid_00000000000dbc26:
	mov -1312(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000dbc29
uuid_00000000000dbc27:
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-inner : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call unify_SB_inner_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba56
	jmp uuid_00000000000dba58
uuid_00000000000dba56:
	push %RBP
	jmp uuid_00000000000dba53
	jmp uuid_00000000000dba55
uuid_00000000000dba53:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba50
	jmp uuid_00000000000dba52
uuid_00000000000dba50:
	movb $1, -1816(%rbp)
uuid_00000000000dba52:
	mov -1840(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dba55:
	mov -1832(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dba58:
	mov -1824(%RBP),%RSP
	add $-1960, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba72
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba5f
	jmp uuid_00000000000dba61
uuid_00000000000dba5f:
	push %RBP
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	mov -2360(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba5c
	jmp uuid_00000000000dba5e
uuid_00000000000dba5c:
	push %RBP
	jmp uuid_00000000000dba59
	jmp uuid_00000000000dba5b
uuid_00000000000dba59:
	movb $1, -2224(%rbp)
uuid_00000000000dba5b:
	mov -2368(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000dba5e:
	mov -2240(%RBP),%RSP
	add $-2368, %RSP
uuid_00000000000dba61:
	mov -2232(%RBP),%RSP
	add $-2368, %RSP
	mov -2224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba6f
	push %RBP
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dba68
	jmp uuid_00000000000dba6a
uuid_00000000000dba68:
	push %RBP
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	jmp uuid_00000000000dba65
	jmp uuid_00000000000dba67
uuid_00000000000dba65:
	push %RBP
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	jmp uuid_00000000000dba62
	jmp uuid_00000000000dba64
uuid_00000000000dba62:
	movb $1, -2632(%rbp)
uuid_00000000000dba64:
	mov -2776(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000dba67:
	mov -2648(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000dba6a:
	mov -2640(%RBP),%RSP
	add $-2896, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dba6c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dba6b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dba6e
uuid_00000000000dba6c:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dba6e:
	mov -2376(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000dba71
uuid_00000000000dba6f:
uuid_00000000000dba71:
	mov -1968(%RBP),%RSP
	add $-2368, %RSP
	jmp uuid_00000000000dba74
uuid_00000000000dba72:
uuid_00000000000dba74:
	mov -1560(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbc29:
	mov -1088(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000dbc2c
uuid_00000000000dbc2a:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1080(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbc2c:
	mov -912(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000dbc2f
uuid_00000000000dbc2d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbc2f:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000dbc32
uuid_00000000000dbc30:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -608(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -544(%rbp)
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $6
	pushq $0
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbc32:
	mov -360(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000dbc35
uuid_00000000000dbc33:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000dbc35:
	mov -240(%RBP),%RSP
	add $-352, %RSP
	subq $120, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_CL_ArrowTContextConsListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc45
	jmp uuid_00000000000dbc47
uuid_00000000000dbc45:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc42
	jmp uuid_00000000000dbc44
uuid_00000000000dbc42:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc3f
	jmp uuid_00000000000dbc41
uuid_00000000000dbc3f:
	movb $1, -400(%rbp)
uuid_00000000000dbc41:
	mov -464(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dbc44:
	mov -416(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dbc47:
	mov -408(%RBP),%RSP
	add $-504, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc6d
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc60
	jmp uuid_00000000000dbc62
uuid_00000000000dbc60:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc4e
	jmp uuid_00000000000dbc50
uuid_00000000000dbc4e:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbc4b
	jmp uuid_00000000000dbc4d
uuid_00000000000dbc4b:
	push %RBP
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	jmp uuid_00000000000dbc48
	jmp uuid_00000000000dbc4a
uuid_00000000000dbc48:
	movb $1, -672(%rbp)
uuid_00000000000dbc4a:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000dbc4d:
	mov -688(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000dbc50:
	mov -680(%RBP),%RSP
	add $-760, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc5d
	jmp uuid_00000000000dbc5f
uuid_00000000000dbc5d:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc57
	jmp uuid_00000000000dbc59
uuid_00000000000dbc57:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbc54
	jmp uuid_00000000000dbc56
uuid_00000000000dbc54:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	jmp uuid_00000000000dbc51
	jmp uuid_00000000000dbc53
uuid_00000000000dbc51:
	movb $1, -816(%rbp)
uuid_00000000000dbc53:
	mov -880(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbc56:
	mov -832(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbc59:
	mov -824(%RBP),%RSP
	add $-904, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc5a
	jmp uuid_00000000000dbc5c
uuid_00000000000dbc5a:
	movb $1, -608(%rbp)
uuid_00000000000dbc5c:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbc5f:
	mov -624(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dbc62:
	mov -616(%RBP),%RSP
	add $-904, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc6a
	push %RBP
	jmp uuid_00000000000dbc67
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbc66
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbc69
uuid_00000000000dbc67:
uuid_00000000000dbc69:
	mov -912(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000dbc6c
uuid_00000000000dbc6a:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	push %RBP
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc63
	jmp uuid_00000000000dbc65
uuid_00000000000dbc63:
#call function union : Arrow<Cons<TContext,TContext>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function unify : Arrow<Cons<List<Type>,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowTContextConsTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	push -272(%RSP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000dbc65:
	mov -912(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dbc6c:
	mov -512(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000dbc6f
uuid_00000000000dbc6d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
uuid_00000000000dbc6f:
	mov -304(%RBP),%RSP
	add $-504, %RSP
	subq $120, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
fields_SB_of_SB_type_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbca2
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc88
	jmp uuid_00000000000dbc8a
uuid_00000000000dbc88:
	push %RBP
	mov -112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc7f
	jmp uuid_00000000000dbc81
uuid_00000000000dbc7f:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc76
	jmp uuid_00000000000dbc78
uuid_00000000000dbc76:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc73
	jmp uuid_00000000000dbc75
uuid_00000000000dbc73:
	push %RBP
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	jmp uuid_00000000000dbc70
	jmp uuid_00000000000dbc72
uuid_00000000000dbc70:
	movb $1, -256(%rbp)
uuid_00000000000dbc72:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dbc75:
	mov -272(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dbc78:
	mov -264(%RBP),%RSP
	add $-344, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc7c
	jmp uuid_00000000000dbc7e
uuid_00000000000dbc7c:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000dbc79
	jmp uuid_00000000000dbc7b
uuid_00000000000dbc79:
	movb $1, -192(%rbp)
uuid_00000000000dbc7b:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dbc7e:
	mov -208(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dbc81:
	mov -200(%RBP),%RSP
	add $-376, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc85
	jmp uuid_00000000000dbc87
uuid_00000000000dbc85:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbc82
	jmp uuid_00000000000dbc84
uuid_00000000000dbc82:
	movb $1, -128(%rbp)
uuid_00000000000dbc84:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dbc87:
	mov -144(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dbc8a:
	mov -136(%RBP),%RSP
	add $-392, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbc9f
	push %RBP
	jmp uuid_00000000000dbc9c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbc9b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbc9e
uuid_00000000000dbc9c:
	pushq $uuid_00000000000daffe
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbc9e:
	mov -400(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dbca1
uuid_00000000000dbc9f:
	pushq $uuid_00000000000daffe
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fields-of-type : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_type_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbca1:
	mov -96(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dbca4
uuid_00000000000dbca2:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbca4:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_type_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd74
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbca8
	jmp uuid_00000000000dbcaa
uuid_00000000000dbca8:
	push %RBP
	jmp uuid_00000000000dbca5
	jmp uuid_00000000000dbca7
uuid_00000000000dbca5:
	movb $1, -136(%rbp)
uuid_00000000000dbca7:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000dbcaa:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd71
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcb1
	jmp uuid_00000000000dbcb3
uuid_00000000000dbcb1:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcae
	jmp uuid_00000000000dbcb0
uuid_00000000000dbcae:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbcab
	jmp uuid_00000000000dbcad
uuid_00000000000dbcab:
	movb $1, -192(%rbp)
uuid_00000000000dbcad:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dbcb0:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dbcb3:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd6e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbccc
	jmp uuid_00000000000dbcce
uuid_00000000000dbccc:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcc3
	jmp uuid_00000000000dbcc5
uuid_00000000000dbcc3:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcc0
	jmp uuid_00000000000dbcc2
uuid_00000000000dbcc0:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcba
	jmp uuid_00000000000dbcbc
uuid_00000000000dbcba:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcb7
	jmp uuid_00000000000dbcb9
uuid_00000000000dbcb7:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbcb4
	jmp uuid_00000000000dbcb6
uuid_00000000000dbcb4:
	movb $1, -464(%rbp)
uuid_00000000000dbcb6:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dbcb9:
	mov -480(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dbcbc:
	mov -472(%RBP),%RSP
	add $-536, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcbd
	jmp uuid_00000000000dbcbf
uuid_00000000000dbcbd:
	movb $1, -368(%rbp)
uuid_00000000000dbcbf:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dbcc2:
	mov -384(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dbcc5:
	mov -376(%RBP),%RSP
	add $-536, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcc9
	jmp uuid_00000000000dbccb
uuid_00000000000dbcc9:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq $uuid_00000000000db238
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbcc6
	jmp uuid_00000000000dbcc8
uuid_00000000000dbcc6:
	movb $1, -304(%rbp)
uuid_00000000000dbcc8:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dbccb:
	mov -320(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dbcce:
	mov -312(%RBP),%RSP
	add $-552, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd6b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbce7
	jmp uuid_00000000000dbce9
uuid_00000000000dbce7:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcde
	jmp uuid_00000000000dbce0
uuid_00000000000dbcde:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcd5
	jmp uuid_00000000000dbcd7
uuid_00000000000dbcd5:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcd2
	jmp uuid_00000000000dbcd4
uuid_00000000000dbcd2:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000dbccf
	jmp uuid_00000000000dbcd1
uuid_00000000000dbccf:
	movb $1, -720(%rbp)
uuid_00000000000dbcd1:
	mov -784(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dbcd4:
	mov -736(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dbcd7:
	mov -728(%RBP),%RSP
	add $-808, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcdb
	jmp uuid_00000000000dbcdd
uuid_00000000000dbcdb:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	mov -840(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcd8
	jmp uuid_00000000000dbcda
uuid_00000000000dbcd8:
	movb $1, -656(%rbp)
uuid_00000000000dbcda:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dbcdd:
	mov -672(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dbce0:
	mov -664(%RBP),%RSP
	add $-840, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbce4
	jmp uuid_00000000000dbce6
uuid_00000000000dbce4:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbce1
	jmp uuid_00000000000dbce3
uuid_00000000000dbce1:
	movb $1, -592(%rbp)
uuid_00000000000dbce3:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dbce6:
	mov -608(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dbce9:
	mov -600(%RBP),%RSP
	add $-856, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd68
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd02
	jmp uuid_00000000000dbd04
uuid_00000000000dbd02:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcf9
	jmp uuid_00000000000dbcfb
uuid_00000000000dbcf9:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcf0
	jmp uuid_00000000000dbcf2
uuid_00000000000dbcf0:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbced
	jmp uuid_00000000000dbcef
uuid_00000000000dbced:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000dbcea
	jmp uuid_00000000000dbcec
uuid_00000000000dbcea:
	movb $1, -1024(%rbp)
uuid_00000000000dbcec:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dbcef:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dbcf2:
	mov -1032(%RBP),%RSP
	add $-1112, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcf6
	jmp uuid_00000000000dbcf8
uuid_00000000000dbcf6:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000dbcf3
	jmp uuid_00000000000dbcf5
uuid_00000000000dbcf3:
	movb $1, -960(%rbp)
uuid_00000000000dbcf5:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dbcf8:
	mov -976(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dbcfb:
	mov -968(%RBP),%RSP
	add $-1144, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbcff
	jmp uuid_00000000000dbd01
uuid_00000000000dbcff:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbcfc
	jmp uuid_00000000000dbcfe
uuid_00000000000dbcfc:
	movb $1, -896(%rbp)
uuid_00000000000dbcfe:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000dbd01:
	mov -912(%RBP),%RSP
	add $-1160, %RSP
uuid_00000000000dbd04:
	mov -904(%RBP),%RSP
	add $-1160, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd65
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd26
	jmp uuid_00000000000dbd28
uuid_00000000000dbd26:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd1d
	jmp uuid_00000000000dbd1f
uuid_00000000000dbd1d:
	push %RBP
	mov -1248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd0b
	jmp uuid_00000000000dbd0d
uuid_00000000000dbd0b:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd08
	jmp uuid_00000000000dbd0a
uuid_00000000000dbd08:
	push %RBP
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	jmp uuid_00000000000dbd05
	jmp uuid_00000000000dbd07
uuid_00000000000dbd05:
	movb $1, -1328(%rbp)
uuid_00000000000dbd07:
	mov -1392(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dbd0a:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dbd0d:
	mov -1336(%RBP),%RSP
	add $-1416, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd1a
	jmp uuid_00000000000dbd1c
uuid_00000000000dbd1a:
	push %RBP
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd14
	jmp uuid_00000000000dbd16
uuid_00000000000dbd14:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd11
	jmp uuid_00000000000dbd13
uuid_00000000000dbd11:
	push %RBP
	mov -1432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbd0e
	jmp uuid_00000000000dbd10
uuid_00000000000dbd0e:
	movb $1, -1456(%rbp)
uuid_00000000000dbd10:
	mov -1520(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dbd13:
	mov -1472(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dbd16:
	mov -1464(%RBP),%RSP
	add $-1528, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd17
	jmp uuid_00000000000dbd19
uuid_00000000000dbd17:
	movb $1, -1264(%rbp)
uuid_00000000000dbd19:
	mov -1424(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dbd1c:
	mov -1280(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000dbd1f:
	mov -1272(%RBP),%RSP
	add $-1528, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd23
	jmp uuid_00000000000dbd25
uuid_00000000000dbd23:
	push %RBP
	mov -1176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000db52a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd20
	jmp uuid_00000000000dbd22
uuid_00000000000dbd20:
	movb $1, -1200(%rbp)
uuid_00000000000dbd22:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dbd25:
	mov -1216(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dbd28:
	mov -1208(%RBP),%RSP
	add $-1544, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd62
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1576(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd2f
	jmp uuid_00000000000dbd31
uuid_00000000000dbd2f:
	push %RBP
	jmp uuid_00000000000dbd2c
	jmp uuid_00000000000dbd2e
uuid_00000000000dbd2c:
	push %RBP
	mov -1560(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbd29
	jmp uuid_00000000000dbd2b
uuid_00000000000dbd29:
	movb $1, -1584(%rbp)
uuid_00000000000dbd2b:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dbd2e:
	mov -1600(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dbd31:
	mov -1592(%RBP),%RSP
	add $-1616, %RSP
	mov -1584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd5f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd51
	jmp uuid_00000000000dbd53
uuid_00000000000dbd51:
	push %RBP
	mov -1640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbd4e
	jmp uuid_00000000000dbd50
uuid_00000000000dbd4e:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbd4b
	jmp uuid_00000000000dbd4d
uuid_00000000000dbd4b:
	movb $1, -1656(%rbp)
uuid_00000000000dbd4d:
	mov -1704(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dbd50:
	mov -1672(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dbd53:
	mov -1664(%RBP),%RSP
	add $-1728, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd5c
	push %RBP
	jmp uuid_00000000000dbd59
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbd58
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbd5b
uuid_00000000000dbd59:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dbd57
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dbd5b:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000dbd5e
uuid_00000000000dbd5c:
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd54
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000dbd56
uuid_00000000000dbd54:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dbd56:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000dbd5e:
	mov -1624(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000dbd61
uuid_00000000000dbd5f:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Tuple<Type,Type>>,String>,Tuple<Type,Type>>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -1616(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd38
	jmp uuid_00000000000dbd3a
uuid_00000000000dbd38:
	push %RBP
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd35
	jmp uuid_00000000000dbd37
uuid_00000000000dbd35:
	push %RBP
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd32
	jmp uuid_00000000000dbd34
uuid_00000000000dbd32:
	movb $1, -1744(%rbp)
uuid_00000000000dbd34:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dbd37:
	mov -1760(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dbd3a:
	mov -1752(%RBP),%RSP
	add $-1816, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd48
	push %RBP
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq $0
	push %RBP
	mov -1880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd41
	jmp uuid_00000000000dbd43
uuid_00000000000dbd41:
	push %RBP
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	jmp uuid_00000000000dbd3e
	jmp uuid_00000000000dbd40
uuid_00000000000dbd3e:
	push %RBP
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000dbd3b
	jmp uuid_00000000000dbd3d
uuid_00000000000dbd3b:
	movb $1, -1888(%rbp)
uuid_00000000000dbd3d:
	mov -1936(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbd40:
	mov -1904(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dbd43:
	mov -1896(%RBP),%RSP
	add $-1960, %RSP
	mov -1888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd45
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbd44
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbd47
uuid_00000000000dbd45:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov $8, %RAX
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dbd47:
	mov -1824(%RBP),%RSP
	add $-2104, %RSP
	jmp uuid_00000000000dbd4a
uuid_00000000000dbd48:
uuid_00000000000dbd4a:
	mov -1680(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dbd61:
	mov -1552(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000dbd64
uuid_00000000000dbd62:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	mul %R14
	movq %RAX, -40(%rbp)
uuid_00000000000dbd64:
	mov -1168(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000dbd67
uuid_00000000000dbd65:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dbd67:
	mov -864(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000dbd6a
uuid_00000000000dbd68:
	movq $8, -40(%rbp)
uuid_00000000000dbd6a:
	mov -560(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000dbd6d
uuid_00000000000dbd6b:
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dbd6d:
	mov -272(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000dbd70
uuid_00000000000dbd6e:
#call function size-of-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call size_SB_of_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dbd70:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dbd73
uuid_00000000000dbd71:
uuid_00000000000dbd73:
	mov -104(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dbd76
uuid_00000000000dbd74:
uuid_00000000000dbd76:
	mov -72(%RBP),%RSP
	add $-96, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
sizeof_SB_aligned_CL_ArrowU64Type:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd77
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $8
	pushq -40(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	jmp uuid_00000000000dbd79
uuid_00000000000dbd77:
uuid_00000000000dbd79:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType:
	pushq $0
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd92
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd85
	jmp uuid_00000000000dbd87
uuid_00000000000dbd85:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbd82
	jmp uuid_00000000000dbd84
uuid_00000000000dbd82:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dbd7f
	jmp uuid_00000000000dbd81
uuid_00000000000dbd7f:
	movb $1, -248(%rbp)
uuid_00000000000dbd81:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dbd84:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dbd87:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd8f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbd8e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbd91
uuid_00000000000dbd8f:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd8b
	jmp uuid_00000000000dbd8d
uuid_00000000000dbd8b:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd88
	jmp uuid_00000000000dbd8a
uuid_00000000000dbd88:
	movq $1, -104(%rbp)
uuid_00000000000dbd8a:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dbd8d:
	mov -344(%RBP),%RSP
	add $-352, %RSP
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -104(%rbp)
uuid_00000000000dbd91:
	mov -200(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dbd94
uuid_00000000000dbd92:
uuid_00000000000dbd94:
	mov -152(%RBP),%RSP
	add $-192, %RSP
	mov -104(%rbp), %RAX
	mov %rbp, %rsp
	sub $96, %rsp
	ret
has_SB_infinite_CL_ArrowU64ConsTypeType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbd9b
	jmp uuid_00000000000dbd9d
uuid_00000000000dbd9b:
	push %RBP
	jmp uuid_00000000000dbd98
	jmp uuid_00000000000dbd9a
uuid_00000000000dbd98:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbd95
	jmp uuid_00000000000dbd97
uuid_00000000000dbd95:
	movb $1, -128(%rbp)
uuid_00000000000dbd97:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dbd9a:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dbd9d:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdf6
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdb6
	jmp uuid_00000000000dbdb8
uuid_00000000000dbdb6:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdad
	jmp uuid_00000000000dbdaf
uuid_00000000000dbdad:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbda4
	jmp uuid_00000000000dbda6
uuid_00000000000dbda4:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbda1
	jmp uuid_00000000000dbda3
uuid_00000000000dbda1:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	jmp uuid_00000000000dbd9e
	jmp uuid_00000000000dbda0
uuid_00000000000dbd9e:
	movb $1, -328(%rbp)
uuid_00000000000dbda0:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dbda3:
	mov -344(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dbda6:
	mov -336(%RBP),%RSP
	add $-416, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdaa
	jmp uuid_00000000000dbdac
uuid_00000000000dbdaa:
	push %RBP
	jmp uuid_00000000000dbda7
	jmp uuid_00000000000dbda9
uuid_00000000000dbda7:
	movb $1, -264(%rbp)
uuid_00000000000dbda9:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dbdac:
	mov -280(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dbdaf:
	mov -272(%RBP),%RSP
	add $-424, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdb3
	jmp uuid_00000000000dbdb5
uuid_00000000000dbdb3:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000db52a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbdb0
	jmp uuid_00000000000dbdb2
uuid_00000000000dbdb0:
	movb $1, -200(%rbp)
uuid_00000000000dbdb2:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dbdb5:
	mov -216(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dbdb8:
	mov -208(%RBP),%RSP
	add $-440, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdf3
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdd1
	jmp uuid_00000000000dbdd3
uuid_00000000000dbdd1:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdc8
	jmp uuid_00000000000dbdca
uuid_00000000000dbdc8:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdbf
	jmp uuid_00000000000dbdc1
uuid_00000000000dbdbf:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdbc
	jmp uuid_00000000000dbdbe
uuid_00000000000dbdbc:
	push %RBP
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	jmp uuid_00000000000dbdb9
	jmp uuid_00000000000dbdbb
uuid_00000000000dbdb9:
	movb $1, -608(%rbp)
uuid_00000000000dbdbb:
	mov -672(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000dbdbe:
	mov -624(%RBP),%RSP
	add $-696, %RSP
uuid_00000000000dbdc1:
	mov -616(%RBP),%RSP
	add $-696, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdc5
	jmp uuid_00000000000dbdc7
uuid_00000000000dbdc5:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000dbdc2
	jmp uuid_00000000000dbdc4
uuid_00000000000dbdc2:
	movb $1, -544(%rbp)
uuid_00000000000dbdc4:
	mov -704(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dbdc7:
	mov -560(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dbdca:
	mov -552(%RBP),%RSP
	add $-728, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdce
	jmp uuid_00000000000dbdd0
uuid_00000000000dbdce:
	push %RBP
	mov -456(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbdcb
	jmp uuid_00000000000dbdcd
uuid_00000000000dbdcb:
	movb $1, -480(%rbp)
uuid_00000000000dbdcd:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dbdd0:
	mov -496(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dbdd3:
	mov -488(%RBP),%RSP
	add $-744, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdf0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdda
	jmp uuid_00000000000dbddc
uuid_00000000000dbdda:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbdd7
	jmp uuid_00000000000dbdd9
uuid_00000000000dbdd7:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbdd4
	jmp uuid_00000000000dbdd6
uuid_00000000000dbdd4:
	movb $1, -784(%rbp)
uuid_00000000000dbdd6:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dbdd9:
	mov -800(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dbddc:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbded
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbde3
	jmp uuid_00000000000dbde5
uuid_00000000000dbde3:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbde0
	jmp uuid_00000000000dbde2
uuid_00000000000dbde0:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbddd
	jmp uuid_00000000000dbddf
uuid_00000000000dbddd:
	movb $1, -896(%rbp)
uuid_00000000000dbddf:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dbde2:
	mov -912(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dbde5:
	mov -904(%RBP),%RSP
	add $-968, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbdea
	push %RBP
	jmp uuid_00000000000dbde7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbde6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbde9
uuid_00000000000dbde7:
uuid_00000000000dbde9:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000dbdec
uuid_00000000000dbdea:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbdec:
	mov -864(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000dbdef
uuid_00000000000dbded:
#call function has-infinite : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq $1
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbdef:
	mov -752(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000dbdf2
uuid_00000000000dbdf0:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbdf2:
	mov -448(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000dbdf5
uuid_00000000000dbdf3:
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -64(%rbp)
uuid_00000000000dbdf5:
	mov -168(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000dbdf8
uuid_00000000000dbdf6:
uuid_00000000000dbdf8:
	mov -96(%RBP),%RSP
	add $-160, %RSP
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbdf9
	jmp uuid_00000000000dbdfb
uuid_00000000000dbdf9:
	movq $1, -64(%rbp)
uuid_00000000000dbdfb:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
has_SB_forward_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe0d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe06
	jmp uuid_00000000000dbe08
uuid_00000000000dbe06:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe03
	jmp uuid_00000000000dbe05
uuid_00000000000dbe03:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000dbe00
	jmp uuid_00000000000dbe02
uuid_00000000000dbe00:
	movb $1, -200(%rbp)
uuid_00000000000dbe02:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dbe05:
	mov -216(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dbe08:
	mov -208(%RBP),%RSP
	add $-288, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe0a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbe09
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbe0c
uuid_00000000000dbe0a:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -56(%rbp)
uuid_00000000000dbe0c:
	mov -152(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dbe0f
uuid_00000000000dbe0d:
uuid_00000000000dbe0f:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
has_SB_forward_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe16
	jmp uuid_00000000000dbe18
uuid_00000000000dbe16:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe13
	jmp uuid_00000000000dbe15
uuid_00000000000dbe13:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe10
	jmp uuid_00000000000dbe12
uuid_00000000000dbe10:
	movb $1, -104(%rbp)
uuid_00000000000dbe12:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbe15:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbe18:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe62
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe1f
	jmp uuid_00000000000dbe21
uuid_00000000000dbe1f:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe1c
	jmp uuid_00000000000dbe1e
uuid_00000000000dbe1c:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe19
	jmp uuid_00000000000dbe1b
uuid_00000000000dbe19:
	movb $1, -216(%rbp)
uuid_00000000000dbe1b:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dbe1e:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dbe21:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe5f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe3a
	jmp uuid_00000000000dbe3c
uuid_00000000000dbe3a:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe31
	jmp uuid_00000000000dbe33
uuid_00000000000dbe31:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe28
	jmp uuid_00000000000dbe2a
uuid_00000000000dbe28:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe25
	jmp uuid_00000000000dbe27
uuid_00000000000dbe25:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000dbe22
	jmp uuid_00000000000dbe24
uuid_00000000000dbe22:
	movb $1, -456(%rbp)
uuid_00000000000dbe24:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dbe27:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dbe2a:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe2e
	jmp uuid_00000000000dbe30
uuid_00000000000dbe2e:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	jmp uuid_00000000000dbe2b
	jmp uuid_00000000000dbe2d
uuid_00000000000dbe2b:
	movb $1, -392(%rbp)
uuid_00000000000dbe2d:
	mov -552(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000dbe30:
	mov -408(%RBP),%RSP
	add $-576, %RSP
uuid_00000000000dbe33:
	mov -400(%RBP),%RSP
	add $-576, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe37
	jmp uuid_00000000000dbe39
uuid_00000000000dbe37:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000db52a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe34
	jmp uuid_00000000000dbe36
uuid_00000000000dbe34:
	movb $1, -328(%rbp)
uuid_00000000000dbe36:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dbe39:
	mov -344(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dbe3c:
	mov -336(%RBP),%RSP
	add $-592, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe5c
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe43
	jmp uuid_00000000000dbe45
uuid_00000000000dbe43:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe40
	jmp uuid_00000000000dbe42
uuid_00000000000dbe40:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbe3d
	jmp uuid_00000000000dbe3f
uuid_00000000000dbe3d:
	movb $1, -632(%rbp)
uuid_00000000000dbe3f:
	mov -696(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dbe42:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dbe45:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe59
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe4f
	jmp uuid_00000000000dbe51
uuid_00000000000dbe4f:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe4c
	jmp uuid_00000000000dbe4e
uuid_00000000000dbe4c:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbe49
	jmp uuid_00000000000dbe4b
uuid_00000000000dbe49:
	movb $1, -744(%rbp)
uuid_00000000000dbe4b:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dbe4e:
	mov -760(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dbe51:
	mov -752(%RBP),%RSP
	add $-816, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe56
	push %RBP
	jmp uuid_00000000000dbe53
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbe52
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbe55
uuid_00000000000dbe53:
uuid_00000000000dbe55:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000dbe58
uuid_00000000000dbe56:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dbe58:
	mov -712(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000dbe5b
uuid_00000000000dbe59:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
	push %RBP
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -704(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbe46
	jmp uuid_00000000000dbe48
uuid_00000000000dbe46:
	movq $1, -40(%rbp)
uuid_00000000000dbe48:
	mov -712(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dbe5b:
	mov -600(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000dbe5e
uuid_00000000000dbe5c:
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dbe5e:
	mov -296(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000dbe61
uuid_00000000000dbe5f:
#call function has-forward : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dbe61:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dbe64
uuid_00000000000dbe62:
uuid_00000000000dbe64:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg8_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dbe65
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbea6
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dbe66
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbea3
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dbe67
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbea0
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dbe68
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe9d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dbe69
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe9a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dbe6a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe97
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dbe6b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe94
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dbe6c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe91
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dbe6d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe8e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dbe6e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe8b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dbe6f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe88
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dbe70
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe85
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dbe71
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe82
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dbe72
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe7f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dbe73
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe7c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dbe74
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbe79
	push %RBP
	jmp uuid_00000000000dbe76
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbe75
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbe78
uuid_00000000000dbe76:
uuid_00000000000dbe78:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dbe7b
uuid_00000000000dbe79:
	movq $1, -24(%rbp)
uuid_00000000000dbe7b:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dbe7e
uuid_00000000000dbe7c:
	movq $1, -24(%rbp)
uuid_00000000000dbe7e:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dbe81
uuid_00000000000dbe7f:
	movq $1, -24(%rbp)
uuid_00000000000dbe81:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbe84
uuid_00000000000dbe82:
	movq $1, -24(%rbp)
uuid_00000000000dbe84:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dbe87
uuid_00000000000dbe85:
	movq $1, -24(%rbp)
uuid_00000000000dbe87:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dbe8a
uuid_00000000000dbe88:
	movq $1, -24(%rbp)
uuid_00000000000dbe8a:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dbe8d
uuid_00000000000dbe8b:
	movq $1, -24(%rbp)
uuid_00000000000dbe8d:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dbe90
uuid_00000000000dbe8e:
	movq $1, -24(%rbp)
uuid_00000000000dbe90:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dbe93
uuid_00000000000dbe91:
	movq $1, -24(%rbp)
uuid_00000000000dbe93:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dbe96
uuid_00000000000dbe94:
	movq $1, -24(%rbp)
uuid_00000000000dbe96:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dbe99
uuid_00000000000dbe97:
	movq $1, -24(%rbp)
uuid_00000000000dbe99:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dbe9c
uuid_00000000000dbe9a:
	movq $1, -24(%rbp)
uuid_00000000000dbe9c:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dbe9f
uuid_00000000000dbe9d:
	movq $1, -24(%rbp)
uuid_00000000000dbe9f:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dbea2
uuid_00000000000dbea0:
	movq $1, -24(%rbp)
uuid_00000000000dbea2:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dbea5
uuid_00000000000dbea3:
	movq $1, -24(%rbp)
uuid_00000000000dbea5:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dbea8
uuid_00000000000dbea6:
	movq $1, -24(%rbp)
uuid_00000000000dbea8:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg8_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbeaf
	jmp uuid_00000000000dbeb1
uuid_00000000000dbeaf:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbeac
	jmp uuid_00000000000dbeae
uuid_00000000000dbeac:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbea9
	jmp uuid_00000000000dbeab
uuid_00000000000dbea9:
	movb $1, -104(%rbp)
uuid_00000000000dbeab:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbeae:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbeb1:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbec2
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbeb8
	jmp uuid_00000000000dbeba
uuid_00000000000dbeb8:
	push %RBP
	jmp uuid_00000000000dbeb5
	jmp uuid_00000000000dbeb7
uuid_00000000000dbeb5:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db10b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbeb2
	jmp uuid_00000000000dbeb4
uuid_00000000000dbeb2:
	movb $1, -216(%rbp)
uuid_00000000000dbeb4:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbeb7:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbeba:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbebf
	push %RBP
	jmp uuid_00000000000dbebc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbebb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbebe
uuid_00000000000dbebc:
uuid_00000000000dbebe:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbec1
uuid_00000000000dbebf:
	movq $1, -40(%rbp)
uuid_00000000000dbec1:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dbec4
uuid_00000000000dbec2:
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dbec4:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg16_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dbec5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf06
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dbec6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf03
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dbec7
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf00
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dbec8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbefd
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dbec9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbefa
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dbeca
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbef7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dbecb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbef4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dbecc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbef1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dbecd
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbeee
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dbece
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbeeb
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dbecf
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbee8
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dbed0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbee5
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dbed1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbee2
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dbed2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbedf
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dbed3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbedc
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dbed4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbed9
	push %RBP
	jmp uuid_00000000000dbed6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbed5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbed8
uuid_00000000000dbed6:
uuid_00000000000dbed8:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dbedb
uuid_00000000000dbed9:
	movq $1, -24(%rbp)
uuid_00000000000dbedb:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dbede
uuid_00000000000dbedc:
	movq $1, -24(%rbp)
uuid_00000000000dbede:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dbee1
uuid_00000000000dbedf:
	movq $1, -24(%rbp)
uuid_00000000000dbee1:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbee4
uuid_00000000000dbee2:
	movq $1, -24(%rbp)
uuid_00000000000dbee4:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dbee7
uuid_00000000000dbee5:
	movq $1, -24(%rbp)
uuid_00000000000dbee7:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dbeea
uuid_00000000000dbee8:
	movq $1, -24(%rbp)
uuid_00000000000dbeea:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dbeed
uuid_00000000000dbeeb:
	movq $1, -24(%rbp)
uuid_00000000000dbeed:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dbef0
uuid_00000000000dbeee:
	movq $1, -24(%rbp)
uuid_00000000000dbef0:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dbef3
uuid_00000000000dbef1:
	movq $1, -24(%rbp)
uuid_00000000000dbef3:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dbef6
uuid_00000000000dbef4:
	movq $1, -24(%rbp)
uuid_00000000000dbef6:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dbef9
uuid_00000000000dbef7:
	movq $1, -24(%rbp)
uuid_00000000000dbef9:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dbefc
uuid_00000000000dbefa:
	movq $1, -24(%rbp)
uuid_00000000000dbefc:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dbeff
uuid_00000000000dbefd:
	movq $1, -24(%rbp)
uuid_00000000000dbeff:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dbf02
uuid_00000000000dbf00:
	movq $1, -24(%rbp)
uuid_00000000000dbf02:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dbf05
uuid_00000000000dbf03:
	movq $1, -24(%rbp)
uuid_00000000000dbf05:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dbf08
uuid_00000000000dbf06:
	movq $1, -24(%rbp)
uuid_00000000000dbf08:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg16_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf0f
	jmp uuid_00000000000dbf11
uuid_00000000000dbf0f:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbf0c
	jmp uuid_00000000000dbf0e
uuid_00000000000dbf0c:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbf09
	jmp uuid_00000000000dbf0b
uuid_00000000000dbf09:
	movb $1, -104(%rbp)
uuid_00000000000dbf0b:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbf0e:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbf11:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf22
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf18
	jmp uuid_00000000000dbf1a
uuid_00000000000dbf18:
	push %RBP
	jmp uuid_00000000000dbf15
	jmp uuid_00000000000dbf17
uuid_00000000000dbf15:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db10f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf12
	jmp uuid_00000000000dbf14
uuid_00000000000dbf12:
	movb $1, -216(%rbp)
uuid_00000000000dbf14:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbf17:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbf1a:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf1f
	push %RBP
	jmp uuid_00000000000dbf1c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbf1b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbf1e
uuid_00000000000dbf1c:
uuid_00000000000dbf1e:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbf21
uuid_00000000000dbf1f:
	movq $1, -40(%rbp)
uuid_00000000000dbf21:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dbf24
uuid_00000000000dbf22:
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dbf24:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg32_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dbf25
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf66
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dbf26
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf63
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dbf27
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf60
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dbf28
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf5d
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dbf29
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf5a
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dbf2a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf57
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dbf2b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf54
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dbf2c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf51
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dbf2d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf4e
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dbf2e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf4b
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dbf2f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf48
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dbf30
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf45
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dbf31
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf42
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dbf32
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf3f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dbf33
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf3c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dbf34
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf39
	push %RBP
	jmp uuid_00000000000dbf36
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbf35
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbf38
uuid_00000000000dbf36:
uuid_00000000000dbf38:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dbf3b
uuid_00000000000dbf39:
	movq $1, -24(%rbp)
uuid_00000000000dbf3b:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dbf3e
uuid_00000000000dbf3c:
	movq $1, -24(%rbp)
uuid_00000000000dbf3e:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dbf41
uuid_00000000000dbf3f:
	movq $1, -24(%rbp)
uuid_00000000000dbf41:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbf44
uuid_00000000000dbf42:
	movq $1, -24(%rbp)
uuid_00000000000dbf44:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dbf47
uuid_00000000000dbf45:
	movq $1, -24(%rbp)
uuid_00000000000dbf47:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dbf4a
uuid_00000000000dbf48:
	movq $1, -24(%rbp)
uuid_00000000000dbf4a:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dbf4d
uuid_00000000000dbf4b:
	movq $1, -24(%rbp)
uuid_00000000000dbf4d:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dbf50
uuid_00000000000dbf4e:
	movq $1, -24(%rbp)
uuid_00000000000dbf50:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dbf53
uuid_00000000000dbf51:
	movq $1, -24(%rbp)
uuid_00000000000dbf53:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dbf56
uuid_00000000000dbf54:
	movq $1, -24(%rbp)
uuid_00000000000dbf56:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dbf59
uuid_00000000000dbf57:
	movq $1, -24(%rbp)
uuid_00000000000dbf59:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dbf5c
uuid_00000000000dbf5a:
	movq $1, -24(%rbp)
uuid_00000000000dbf5c:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dbf5f
uuid_00000000000dbf5d:
	movq $1, -24(%rbp)
uuid_00000000000dbf5f:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dbf62
uuid_00000000000dbf60:
	movq $1, -24(%rbp)
uuid_00000000000dbf62:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dbf65
uuid_00000000000dbf63:
	movq $1, -24(%rbp)
uuid_00000000000dbf65:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dbf68
uuid_00000000000dbf66:
	movq $1, -24(%rbp)
uuid_00000000000dbf68:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg32_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf6f
	jmp uuid_00000000000dbf71
uuid_00000000000dbf6f:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbf6c
	jmp uuid_00000000000dbf6e
uuid_00000000000dbf6c:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbf69
	jmp uuid_00000000000dbf6b
uuid_00000000000dbf69:
	movb $1, -104(%rbp)
uuid_00000000000dbf6b:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbf6e:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbf71:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf82
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf78
	jmp uuid_00000000000dbf7a
uuid_00000000000dbf78:
	push %RBP
	jmp uuid_00000000000dbf75
	jmp uuid_00000000000dbf77
uuid_00000000000dbf75:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db113
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf72
	jmp uuid_00000000000dbf74
uuid_00000000000dbf72:
	movb $1, -216(%rbp)
uuid_00000000000dbf74:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbf77:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbf7a:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbf7f
	push %RBP
	jmp uuid_00000000000dbf7c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbf7b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbf7e
uuid_00000000000dbf7c:
uuid_00000000000dbf7e:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbf81
uuid_00000000000dbf7f:
	movq $1, -40(%rbp)
uuid_00000000000dbf81:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dbf84
uuid_00000000000dbf82:
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dbf84:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_reg64_CL_ArrowU64String:
	pushq $0
	pushq -8(%rbp)
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq $uuid_00000000000dbf85
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfc6
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq $uuid_00000000000dbf86
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfc3
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000dbf87
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfc0
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dbf88
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfbd
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000dbf89
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfba
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dbf8a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfb7
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dbf8b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfb4
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000dbf8c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfb1
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000dbf8d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfae
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000dbf8e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfab
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dbf8f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfa8
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000dbf90
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfa5
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000dbf91
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfa2
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000dbf92
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf9f
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000dbf93
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf9c
	push %RBP
	pushq -32(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000dbf94
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbf99
	push %RBP
	jmp uuid_00000000000dbf96
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbf95
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbf98
uuid_00000000000dbf96:
uuid_00000000000dbf98:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dbf9b
uuid_00000000000dbf99:
	movq $1, -24(%rbp)
uuid_00000000000dbf9b:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000dbf9e
uuid_00000000000dbf9c:
	movq $1, -24(%rbp)
uuid_00000000000dbf9e:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dbfa1
uuid_00000000000dbf9f:
	movq $1, -24(%rbp)
uuid_00000000000dbfa1:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbfa4
uuid_00000000000dbfa2:
	movq $1, -24(%rbp)
uuid_00000000000dbfa4:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dbfa7
uuid_00000000000dbfa5:
	movq $1, -24(%rbp)
uuid_00000000000dbfa7:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000dbfaa
uuid_00000000000dbfa8:
	movq $1, -24(%rbp)
uuid_00000000000dbfaa:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dbfad
uuid_00000000000dbfab:
	movq $1, -24(%rbp)
uuid_00000000000dbfad:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000dbfb0
uuid_00000000000dbfae:
	movq $1, -24(%rbp)
uuid_00000000000dbfb0:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dbfb3
uuid_00000000000dbfb1:
	movq $1, -24(%rbp)
uuid_00000000000dbfb3:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000dbfb6
uuid_00000000000dbfb4:
	movq $1, -24(%rbp)
uuid_00000000000dbfb6:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dbfb9
uuid_00000000000dbfb7:
	movq $1, -24(%rbp)
uuid_00000000000dbfb9:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000dbfbc
uuid_00000000000dbfba:
	movq $1, -24(%rbp)
uuid_00000000000dbfbc:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000dbfbf
uuid_00000000000dbfbd:
	movq $1, -24(%rbp)
uuid_00000000000dbfbf:
	mov -88(%RBP),%RSP
	add $-96, %RSP
	jmp uuid_00000000000dbfc2
uuid_00000000000dbfc0:
	movq $1, -24(%rbp)
uuid_00000000000dbfc2:
	mov -72(%RBP),%RSP
	add $-80, %RSP
	jmp uuid_00000000000dbfc5
uuid_00000000000dbfc3:
	movq $1, -24(%rbp)
uuid_00000000000dbfc5:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dbfc8
uuid_00000000000dbfc6:
	movq $1, -24(%rbp)
uuid_00000000000dbfc8:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_reg64_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfcf
	jmp uuid_00000000000dbfd1
uuid_00000000000dbfcf:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbfcc
	jmp uuid_00000000000dbfce
uuid_00000000000dbfcc:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbfc9
	jmp uuid_00000000000dbfcb
uuid_00000000000dbfc9:
	movb $1, -104(%rbp)
uuid_00000000000dbfcb:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbfce:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dbfd1:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfe2
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfd8
	jmp uuid_00000000000dbfda
uuid_00000000000dbfd8:
	push %RBP
	jmp uuid_00000000000dbfd5
	jmp uuid_00000000000dbfd7
uuid_00000000000dbfd5:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db117
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbfd2
	jmp uuid_00000000000dbfd4
uuid_00000000000dbfd2:
	movb $1, -216(%rbp)
uuid_00000000000dbfd4:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbfd7:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dbfda:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfdf
	push %RBP
	jmp uuid_00000000000dbfdc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbfdb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbfde
uuid_00000000000dbfdc:
uuid_00000000000dbfde:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dbfe1
uuid_00000000000dbfdf:
	movq $1, -40(%rbp)
uuid_00000000000dbfe1:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dbfe4
uuid_00000000000dbfe2:
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dbfe4:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_tag_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dbff8
	jmp uuid_00000000000dbffa
uuid_00000000000dbff8:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dbfeb
	jmp uuid_00000000000dbfed
uuid_00000000000dbfeb:
	push %RBP
	mov -112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbfe8
	jmp uuid_00000000000dbfea
uuid_00000000000dbfe8:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dbfe5
	jmp uuid_00000000000dbfe7
uuid_00000000000dbfe5:
	movb $1, -128(%rbp)
uuid_00000000000dbfe7:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000dbfea:
	mov -144(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000dbfed:
	mov -136(%RBP),%RSP
	add $-200, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dbff5
	push %RBP
	jmp uuid_00000000000dbff2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dbff1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dbff4
uuid_00000000000dbff2:
uuid_00000000000dbff4:
	mov -208(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dbff7
uuid_00000000000dbff5:
#call function get-only-child : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	mov %RBX, %RBP
	call get_SB_only_SB_child_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -208(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dbfee
	jmp uuid_00000000000dbff0
uuid_00000000000dbfee:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ed
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dbff0:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dbff7:
	mov -96(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dbffa:
	mov -64(%RBP),%RSP
	add $-216, %RSP
#call function with-case-number : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_case_SB_number_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_case_SB_number_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc001
	jmp uuid_00000000000dc003
uuid_00000000000dc001:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbffe
	jmp uuid_00000000000dc000
uuid_00000000000dbffe:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dbffb
	jmp uuid_00000000000dbffd
uuid_00000000000dbffb:
	movb $1, -96(%rbp)
uuid_00000000000dbffd:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc000:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc003:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc02c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc022
	jmp uuid_00000000000dc024
uuid_00000000000dc022:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc019
	jmp uuid_00000000000dc01b
uuid_00000000000dc019:
	push %RBP
	jmp uuid_00000000000dc016
	jmp uuid_00000000000dc018
uuid_00000000000dc016:
	push %RBP
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc010
	jmp uuid_00000000000dc012
uuid_00000000000dc010:
	push %RBP
	jmp uuid_00000000000dc00d
	jmp uuid_00000000000dc00f
uuid_00000000000dc00d:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc00a
	jmp uuid_00000000000dc00c
uuid_00000000000dc00a:
	movb $1, -328(%rbp)
uuid_00000000000dc00c:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc00f:
	mov -344(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc012:
	mov -336(%RBP),%RSP
	add $-360, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc013
	jmp uuid_00000000000dc015
uuid_00000000000dc013:
	movb $1, -272(%rbp)
uuid_00000000000dc015:
	mov -296(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc018:
	mov -288(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc01b:
	mov -280(%RBP),%RSP
	add $-360, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc01f
	jmp uuid_00000000000dc021
uuid_00000000000dc01f:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq $uuid_00000000000db3ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc01c
	jmp uuid_00000000000dc01e
uuid_00000000000dc01c:
	movb $1, -208(%rbp)
uuid_00000000000dc01e:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc021:
	mov -224(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc024:
	mov -216(%RBP),%RSP
	add $-376, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc029
	push %RBP
	jmp uuid_00000000000dc026
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc025
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc028
uuid_00000000000dc026:
uuid_00000000000dc028:
	mov -384(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc02b
uuid_00000000000dc029:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db237
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc02b:
	mov -176(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dc02e
uuid_00000000000dc02c:
#call function with-case-number : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call with_SB_case_SB_number_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
#call function with-case-number : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call with_SB_case_SB_number_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc007
	movq -136(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -120(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc009
uuid_00000000000dc007:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc004
	movq -168(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -160(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc006
uuid_00000000000dc004:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc006:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc009:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc02e:
	mov -64(%RBP),%RSP
	add $-184, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowTypeType:
	push %RBP
#call function is-sized : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_sized_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc02f
	jmp uuid_00000000000dc031
uuid_00000000000dc02f:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db238
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc031:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc04a
	jmp uuid_00000000000dc04c
uuid_00000000000dc04a:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc041
	jmp uuid_00000000000dc043
uuid_00000000000dc041:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc038
	jmp uuid_00000000000dc03a
uuid_00000000000dc038:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc035
	jmp uuid_00000000000dc037
uuid_00000000000dc035:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000dc032
	jmp uuid_00000000000dc034
uuid_00000000000dc032:
	movb $1, -240(%rbp)
uuid_00000000000dc034:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dc037:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dc03a:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc03e
	jmp uuid_00000000000dc040
uuid_00000000000dc03e:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000dc03b
	jmp uuid_00000000000dc03d
uuid_00000000000dc03b:
	movb $1, -176(%rbp)
uuid_00000000000dc03d:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc040:
	mov -192(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc043:
	mov -184(%RBP),%RSP
	add $-360, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc047
	jmp uuid_00000000000dc049
uuid_00000000000dc047:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc044
	jmp uuid_00000000000dc046
uuid_00000000000dc044:
	movb $1, -112(%rbp)
uuid_00000000000dc046:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc049:
	mov -128(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc04c:
	mov -120(%RBP),%RSP
	add $-376, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc051
	push %RBP
	jmp uuid_00000000000dc04e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc04d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc050
uuid_00000000000dc04e:
uuid_00000000000dc050:
	mov -384(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc053
uuid_00000000000dc051:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc053:
	mov -80(%RBP),%RSP
	add $-376, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc065
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc05e
	jmp uuid_00000000000dc060
uuid_00000000000dc05e:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc05b
	jmp uuid_00000000000dc05d
uuid_00000000000dc05b:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000dc058
	jmp uuid_00000000000dc05a
uuid_00000000000dc058:
	movb $1, -192(%rbp)
uuid_00000000000dc05a:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc05d:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc060:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc062
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc061
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc064
uuid_00000000000dc062:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc064:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc067
uuid_00000000000dc065:
uuid_00000000000dc067:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_size_SB_recurse_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc06e
	jmp uuid_00000000000dc070
uuid_00000000000dc06e:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc06b
	jmp uuid_00000000000dc06d
uuid_00000000000dc06b:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc068
	jmp uuid_00000000000dc06a
uuid_00000000000dc068:
	movb $1, -96(%rbp)
uuid_00000000000dc06a:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc06d:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc070:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0bd
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc077
	jmp uuid_00000000000dc079
uuid_00000000000dc077:
	push %RBP
	jmp uuid_00000000000dc074
	jmp uuid_00000000000dc076
uuid_00000000000dc074:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db3ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc071
	jmp uuid_00000000000dc073
uuid_00000000000dc071:
	movb $1, -208(%rbp)
uuid_00000000000dc073:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc076:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc079:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ba
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc080
	jmp uuid_00000000000dc082
uuid_00000000000dc080:
	push %RBP
	jmp uuid_00000000000dc07d
	jmp uuid_00000000000dc07f
uuid_00000000000dc07d:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db238
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc07a
	jmp uuid_00000000000dc07c
uuid_00000000000dc07a:
	movb $1, -280(%rbp)
uuid_00000000000dc07c:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc07f:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc082:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0b7
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc089
	jmp uuid_00000000000dc08b
uuid_00000000000dc089:
	push %RBP
	jmp uuid_00000000000dc086
	jmp uuid_00000000000dc088
uuid_00000000000dc086:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db237
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc083
	jmp uuid_00000000000dc085
uuid_00000000000dc083:
	movb $1, -352(%rbp)
uuid_00000000000dc085:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc088:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc08b:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0b4
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc092
	jmp uuid_00000000000dc094
uuid_00000000000dc092:
	push %RBP
	jmp uuid_00000000000dc08f
	jmp uuid_00000000000dc091
uuid_00000000000dc08f:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000db418
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc08c
	jmp uuid_00000000000dc08e
uuid_00000000000dc08c:
	movb $1, -424(%rbp)
uuid_00000000000dc08e:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc091:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc094:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0b1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc09b
	jmp uuid_00000000000dc09d
uuid_00000000000dc09b:
	push %RBP
	jmp uuid_00000000000dc098
	jmp uuid_00000000000dc09a
uuid_00000000000dc098:
	push %RBP
	mov -472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000db239
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc095
	jmp uuid_00000000000dc097
uuid_00000000000dc095:
	movb $1, -496(%rbp)
uuid_00000000000dc097:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc09a:
	mov -512(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc09d:
	mov -504(%RBP),%RSP
	add $-528, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ae
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0a4
	jmp uuid_00000000000dc0a6
uuid_00000000000dc0a4:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc0a1
	jmp uuid_00000000000dc0a3
uuid_00000000000dc0a1:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc09e
	jmp uuid_00000000000dc0a0
uuid_00000000000dc09e:
	movb $1, -568(%rbp)
uuid_00000000000dc0a0:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc0a3:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc0a6:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ab
	push %RBP
	jmp uuid_00000000000dc0a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc0a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc0aa
uuid_00000000000dc0a8:
uuid_00000000000dc0aa:
	mov -648(%RBP),%RSP
	add $-648, %RSP
	jmp uuid_00000000000dc0ad
uuid_00000000000dc0ab:
	pushq -640(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc0ad:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dc0b0
uuid_00000000000dc0ae:
uuid_00000000000dc0b0:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000dc0b3
uuid_00000000000dc0b1:
uuid_00000000000dc0b3:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dc0b6
uuid_00000000000dc0b4:
uuid_00000000000dc0b6:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc0b9
uuid_00000000000dc0b7:
uuid_00000000000dc0b9:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc0bc
uuid_00000000000dc0ba:
uuid_00000000000dc0bc:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc0bf
uuid_00000000000dc0bd:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-size-recurse : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call with_SB_size_SB_recurse_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc0bf:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_fields_CL_ArrowTypeType:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000db418
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0c6
	jmp uuid_00000000000dc0c8
uuid_00000000000dc0c6:
	push %RBP
	jmp uuid_00000000000dc0c3
	jmp uuid_00000000000dc0c5
uuid_00000000000dc0c3:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000db418
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc0c0
	jmp uuid_00000000000dc0c2
uuid_00000000000dc0c0:
	movb $1, -96(%rbp)
uuid_00000000000dc0c2:
	mov -120(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000dc0c5:
	mov -112(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000dc0c8:
	mov -104(%RBP),%RSP
	add $-128, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0d0
	push %RBP
	jmp uuid_00000000000dc0cd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc0cc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc0cf
uuid_00000000000dc0cd:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0c9
	jmp uuid_00000000000dc0cb
uuid_00000000000dc0c9:
#call function fields-of-tag : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call fields_SB_of_SB_tag_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc0cb:
	mov -192(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dc0cf:
	mov -136(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000dc0d2
uuid_00000000000dc0d0:
uuid_00000000000dc0d2:
	mov -64(%RBP),%RSP
	add $-128, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_platform_SB_props_CL_ArrowTypeType:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc0e7
	jmp uuid_00000000000dc0e9
uuid_00000000000dc0e7:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0d9
	jmp uuid_00000000000dc0db
uuid_00000000000dc0d9:
	push %RBP
	jmp uuid_00000000000dc0d6
	jmp uuid_00000000000dc0d8
uuid_00000000000dc0d6:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc0d3
	jmp uuid_00000000000dc0d5
uuid_00000000000dc0d3:
	movb $1, -128(%rbp)
uuid_00000000000dc0d5:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dc0d8:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000dc0db:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0e4
	push %RBP
	jmp uuid_00000000000dc0e1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc0e0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc0e3
uuid_00000000000dc0e1:
uuid_00000000000dc0e3:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000dc0e6
uuid_00000000000dc0e4:
	push %RBP
#call function is-lm-struct : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call is_SB_lm_SB_struct_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc0dd
	jmp uuid_00000000000dc0df
uuid_00000000000dc0dd:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc0dc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc0df:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc0e6:
	mov -96(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc0e9:
	mov -64(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0f0
	jmp uuid_00000000000dc0f2
uuid_00000000000dc0f0:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc0ed
	jmp uuid_00000000000dc0ef
uuid_00000000000dc0ed:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc0ea
	jmp uuid_00000000000dc0ec
uuid_00000000000dc0ea:
	movb $1, -96(%rbp)
uuid_00000000000dc0ec:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc0ef:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc0f2:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc158
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc11e
	jmp uuid_00000000000dc120
uuid_00000000000dc11e:
	push %RBP
	jmp uuid_00000000000dc11b
	jmp uuid_00000000000dc11d
uuid_00000000000dc11b:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db236
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc118
	jmp uuid_00000000000dc11a
uuid_00000000000dc118:
	movb $1, -208(%rbp)
uuid_00000000000dc11a:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc11d:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc120:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc155
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc127
	jmp uuid_00000000000dc129
uuid_00000000000dc127:
	push %RBP
	jmp uuid_00000000000dc124
	jmp uuid_00000000000dc126
uuid_00000000000dc124:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db3ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc121
	jmp uuid_00000000000dc123
uuid_00000000000dc121:
	movb $1, -280(%rbp)
uuid_00000000000dc123:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc126:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc129:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc152
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc130
	jmp uuid_00000000000dc132
uuid_00000000000dc130:
	push %RBP
	jmp uuid_00000000000dc12d
	jmp uuid_00000000000dc12f
uuid_00000000000dc12d:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db237
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc12a
	jmp uuid_00000000000dc12c
uuid_00000000000dc12a:
	movb $1, -352(%rbp)
uuid_00000000000dc12c:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc12f:
	mov -368(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc132:
	mov -360(%RBP),%RSP
	add $-384, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc14f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc139
	jmp uuid_00000000000dc13b
uuid_00000000000dc139:
	push %RBP
	jmp uuid_00000000000dc136
	jmp uuid_00000000000dc138
uuid_00000000000dc136:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq $uuid_00000000000db418
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc133
	jmp uuid_00000000000dc135
uuid_00000000000dc133:
	movb $1, -424(%rbp)
uuid_00000000000dc135:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc138:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc13b:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc14c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc142
	jmp uuid_00000000000dc144
uuid_00000000000dc142:
	push %RBP
	jmp uuid_00000000000dc13f
	jmp uuid_00000000000dc141
uuid_00000000000dc13f:
	push %RBP
	mov -472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000db239
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc13c
	jmp uuid_00000000000dc13e
uuid_00000000000dc13c:
	movb $1, -496(%rbp)
uuid_00000000000dc13e:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc141:
	mov -512(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc144:
	mov -504(%RBP),%RSP
	add $-528, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc149
	push %RBP
	jmp uuid_00000000000dc146
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc145
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc148
uuid_00000000000dc146:
uuid_00000000000dc148:
	mov -536(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000dc14b
uuid_00000000000dc149:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc14b:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000dc14e
uuid_00000000000dc14c:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc14e:
	mov -392(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dc151
uuid_00000000000dc14f:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc151:
	mov -320(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dc154
uuid_00000000000dc152:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc154:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc157
uuid_00000000000dc155:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc157:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc15a
uuid_00000000000dc158:
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0f9
	jmp uuid_00000000000dc0fb
uuid_00000000000dc0f9:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000dc0f6
	jmp uuid_00000000000dc0f8
uuid_00000000000dc0f6:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0f3
	jmp uuid_00000000000dc0f5
uuid_00000000000dc0f3:
	movb $1, -344(%rbp)
uuid_00000000000dc0f5:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc0f8:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc0fb:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc115
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc102
	jmp uuid_00000000000dc104
uuid_00000000000dc102:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc0ff
	jmp uuid_00000000000dc101
uuid_00000000000dc0ff:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000dc0fc
	jmp uuid_00000000000dc0fe
uuid_00000000000dc0fc:
	movb $1, -488(%rbp)
uuid_00000000000dc0fe:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dc101:
	mov -504(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dc104:
	mov -496(%RBP),%RSP
	add $-560, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc112
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc10b
	jmp uuid_00000000000dc10d
uuid_00000000000dc10b:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	jmp uuid_00000000000dc108
	jmp uuid_00000000000dc10a
uuid_00000000000dc108:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000dc105
	jmp uuid_00000000000dc107
uuid_00000000000dc105:
	movb $1, -632(%rbp)
uuid_00000000000dc107:
	mov -680(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dc10a:
	mov -648(%RBP),%RSP
	add $-704, %RSP
uuid_00000000000dc10d:
	mov -640(%RBP),%RSP
	add $-704, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc10f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc10e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc111
uuid_00000000000dc10f:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc111:
	mov -568(%RBP),%RSP
	add $-704, %RSP
	jmp uuid_00000000000dc114
uuid_00000000000dc112:
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc114:
	mov -424(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dc117
uuid_00000000000dc115:
	movq -384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc117:
	mov -280(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc15a:
	mov -64(%RBP),%RSP
	add $-416, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_tag_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc165
	jmp uuid_00000000000dc167
uuid_00000000000dc165:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc162
	jmp uuid_00000000000dc164
uuid_00000000000dc162:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc15f
	jmp uuid_00000000000dc161
uuid_00000000000dc15f:
	movb $1, -144(%rbp)
uuid_00000000000dc161:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc164:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc167:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc16c
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc169
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc168
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc16b
uuid_00000000000dc169:
uuid_00000000000dc16b:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc16e
uuid_00000000000dc16c:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-tag : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc16e:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_constructor_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc175
	jmp uuid_00000000000dc177
uuid_00000000000dc175:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc172
	jmp uuid_00000000000dc174
uuid_00000000000dc172:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc16f
	jmp uuid_00000000000dc171
uuid_00000000000dc16f:
	movb $1, -96(%rbp)
uuid_00000000000dc171:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc174:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc177:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc19a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc184
	jmp uuid_00000000000dc186
uuid_00000000000dc184:
	push %RBP
	jmp uuid_00000000000dc181
	jmp uuid_00000000000dc183
uuid_00000000000dc181:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db236
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc17e
	jmp uuid_00000000000dc180
uuid_00000000000dc17e:
	movb $1, -208(%rbp)
uuid_00000000000dc180:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc183:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc186:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc197
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc18d
	jmp uuid_00000000000dc18f
uuid_00000000000dc18d:
	push %RBP
	jmp uuid_00000000000dc18a
	jmp uuid_00000000000dc18c
uuid_00000000000dc18a:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db237
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc187
	jmp uuid_00000000000dc189
uuid_00000000000dc187:
	movb $1, -280(%rbp)
uuid_00000000000dc189:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc18c:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc18f:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc194
	push %RBP
	jmp uuid_00000000000dc191
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc190
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc193
uuid_00000000000dc191:
uuid_00000000000dc193:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000dc196
uuid_00000000000dc194:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc196:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc199
uuid_00000000000dc197:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc199:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc19c
uuid_00000000000dc19a:
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc17b
	movq -136(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -120(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc17d
uuid_00000000000dc17b:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc178
	movq -168(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -160(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -152(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc17a
uuid_00000000000dc178:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc17a:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc17d:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dc19c:
	mov -64(%RBP),%RSP
	add $-184, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1a7
	jmp uuid_00000000000dc1a9
uuid_00000000000dc1a7:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1a4
	jmp uuid_00000000000dc1a6
uuid_00000000000dc1a4:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc1a1
	jmp uuid_00000000000dc1a3
uuid_00000000000dc1a1:
	movb $1, -144(%rbp)
uuid_00000000000dc1a3:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc1a6:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc1a9:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1ae
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc1aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc1ad
uuid_00000000000dc1ab:
uuid_00000000000dc1ad:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc1b0
uuid_00000000000dc1ae:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc1b0:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1b7
	jmp uuid_00000000000dc1b9
uuid_00000000000dc1b7:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1b4
	jmp uuid_00000000000dc1b6
uuid_00000000000dc1b4:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc1b1
	jmp uuid_00000000000dc1b3
uuid_00000000000dc1b1:
	movb $1, -96(%rbp)
uuid_00000000000dc1b3:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc1b6:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc1b9:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc249
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1c9
	jmp uuid_00000000000dc1cb
uuid_00000000000dc1c9:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1c6
	jmp uuid_00000000000dc1c8
uuid_00000000000dc1c6:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000db5ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1c3
	jmp uuid_00000000000dc1c5
uuid_00000000000dc1c3:
	movb $1, -208(%rbp)
uuid_00000000000dc1c5:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc1c8:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc1cb:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc246
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1d3
	jmp uuid_00000000000dc1d5
uuid_00000000000dc1d3:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1d0
	jmp uuid_00000000000dc1d2
uuid_00000000000dc1d0:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000dc1cc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1cd
	jmp uuid_00000000000dc1cf
uuid_00000000000dc1cd:
	movb $1, -320(%rbp)
uuid_00000000000dc1cf:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc1d2:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc1d5:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc243
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1dc
	jmp uuid_00000000000dc1de
uuid_00000000000dc1dc:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1d9
	jmp uuid_00000000000dc1db
uuid_00000000000dc1d9:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1d6
	jmp uuid_00000000000dc1d8
uuid_00000000000dc1d6:
	movb $1, -432(%rbp)
uuid_00000000000dc1d8:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc1db:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc1de:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc240
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1e5
	jmp uuid_00000000000dc1e7
uuid_00000000000dc1e5:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1e2
	jmp uuid_00000000000dc1e4
uuid_00000000000dc1e2:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000db45d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1df
	jmp uuid_00000000000dc1e1
uuid_00000000000dc1df:
	movb $1, -544(%rbp)
uuid_00000000000dc1e1:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc1e4:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc1e7:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc23d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1ee
	jmp uuid_00000000000dc1f0
uuid_00000000000dc1ee:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1eb
	jmp uuid_00000000000dc1ed
uuid_00000000000dc1eb:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq $uuid_00000000000daffc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1e8
	jmp uuid_00000000000dc1ea
uuid_00000000000dc1e8:
	movb $1, -656(%rbp)
uuid_00000000000dc1ea:
	mov -720(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dc1ed:
	mov -672(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dc1f0:
	mov -664(%RBP),%RSP
	add $-728, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc23a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1f7
	jmp uuid_00000000000dc1f9
uuid_00000000000dc1f7:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1f4
	jmp uuid_00000000000dc1f6
uuid_00000000000dc1f4:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq $uuid_00000000000db10b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1f1
	jmp uuid_00000000000dc1f3
uuid_00000000000dc1f1:
	movb $1, -768(%rbp)
uuid_00000000000dc1f3:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc1f6:
	mov -784(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc1f9:
	mov -776(%RBP),%RSP
	add $-840, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc237
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc200
	jmp uuid_00000000000dc202
uuid_00000000000dc200:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc1fd
	jmp uuid_00000000000dc1ff
uuid_00000000000dc1fd:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000db10f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1fa
	jmp uuid_00000000000dc1fc
uuid_00000000000dc1fa:
	movb $1, -880(%rbp)
uuid_00000000000dc1fc:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc1ff:
	mov -896(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc202:
	mov -888(%RBP),%RSP
	add $-952, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc234
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -984(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc209
	jmp uuid_00000000000dc20b
uuid_00000000000dc209:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc206
	jmp uuid_00000000000dc208
uuid_00000000000dc206:
	push %RBP
	mov -968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000db113
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc203
	jmp uuid_00000000000dc205
uuid_00000000000dc203:
	movb $1, -992(%rbp)
uuid_00000000000dc205:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dc208:
	mov -1008(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dc20b:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
	mov -992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc231
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc212
	jmp uuid_00000000000dc214
uuid_00000000000dc212:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc20f
	jmp uuid_00000000000dc211
uuid_00000000000dc20f:
	push %RBP
	mov -1080(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000db117
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc20c
	jmp uuid_00000000000dc20e
uuid_00000000000dc20c:
	movb $1, -1104(%rbp)
uuid_00000000000dc20e:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000dc211:
	mov -1120(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000dc214:
	mov -1112(%RBP),%RSP
	add $-1176, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc22e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc21b
	jmp uuid_00000000000dc21d
uuid_00000000000dc21b:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc218
	jmp uuid_00000000000dc21a
uuid_00000000000dc218:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc215
	jmp uuid_00000000000dc217
uuid_00000000000dc215:
	movb $1, -1216(%rbp)
uuid_00000000000dc217:
	mov -1280(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dc21a:
	mov -1232(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dc21d:
	mov -1224(%RBP),%RSP
	add $-1288, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc22b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc228
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc221
	jmp uuid_00000000000dc223
uuid_00000000000dc221:
	push %RBP
	jmp uuid_00000000000dc21e
	jmp uuid_00000000000dc220
uuid_00000000000dc21e:
	movb $1, -1360(%rbp)
uuid_00000000000dc220:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000dc223:
	mov -1368(%RBP),%RSP
	add $-1376, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc225
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc224
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc227
uuid_00000000000dc225:
uuid_00000000000dc227:
	mov -1328(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000dc22a
uuid_00000000000dc228:
uuid_00000000000dc22a:
	mov -1296(%RBP),%RSP
	add $-1320, %RSP
	jmp uuid_00000000000dc22d
uuid_00000000000dc22b:
	pushq -1288(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc22d:
	mov -1184(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000dc230
uuid_00000000000dc22e:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc230:
	mov -1072(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000dc233
uuid_00000000000dc231:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc233:
	mov -960(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000dc236
uuid_00000000000dc234:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc236:
	mov -848(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000dc239
uuid_00000000000dc237:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc239:
	mov -736(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dc23c
uuid_00000000000dc23a:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc23c:
	mov -624(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000dc23f
uuid_00000000000dc23d:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc23f:
	mov -512(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000dc242
uuid_00000000000dc240:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc242:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dc245
uuid_00000000000dc243:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc245:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc248
uuid_00000000000dc246:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc248:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc24b
uuid_00000000000dc249:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1c0
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1bd
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc1bf
uuid_00000000000dc1bd:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc1bf:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc1c2
uuid_00000000000dc1c0:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc1ba
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc1bc
uuid_00000000000dc1ba:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc1bc:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc1c2:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc24b:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc256
	jmp uuid_00000000000dc258
uuid_00000000000dc256:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc253
	jmp uuid_00000000000dc255
uuid_00000000000dc253:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc250
	jmp uuid_00000000000dc252
uuid_00000000000dc250:
	movb $1, -144(%rbp)
uuid_00000000000dc252:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc255:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc258:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc25d
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc25a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc259
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc25c
uuid_00000000000dc25a:
uuid_00000000000dc25c:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc25f
uuid_00000000000dc25d:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc25f:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_SB_unless_SB_class_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc266
	jmp uuid_00000000000dc268
uuid_00000000000dc266:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc263
	jmp uuid_00000000000dc265
uuid_00000000000dc263:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc260
	jmp uuid_00000000000dc262
uuid_00000000000dc260:
	movb $1, -96(%rbp)
uuid_00000000000dc262:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc265:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc268:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc28b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc278
	jmp uuid_00000000000dc27a
uuid_00000000000dc278:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc275
	jmp uuid_00000000000dc277
uuid_00000000000dc275:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc272
	jmp uuid_00000000000dc274
uuid_00000000000dc272:
	movb $1, -208(%rbp)
uuid_00000000000dc274:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc277:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc27a:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc288
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc285
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc27e
	jmp uuid_00000000000dc280
uuid_00000000000dc27e:
	push %RBP
	jmp uuid_00000000000dc27b
	jmp uuid_00000000000dc27d
uuid_00000000000dc27b:
	movb $1, -352(%rbp)
uuid_00000000000dc27d:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc280:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc282
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc281
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc284
uuid_00000000000dc282:
uuid_00000000000dc284:
	mov -320(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000dc287
uuid_00000000000dc285:
uuid_00000000000dc287:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc28a
uuid_00000000000dc288:
	pushq -280(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc28a:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc28d
uuid_00000000000dc28b:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc26f
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc26c
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc26e
uuid_00000000000dc26c:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc26e:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc271
uuid_00000000000dc26f:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc269
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc26b
uuid_00000000000dc269:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc26b:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc271:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc28d:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc294
	jmp uuid_00000000000dc296
uuid_00000000000dc294:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc291
	jmp uuid_00000000000dc293
uuid_00000000000dc291:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc28e
	jmp uuid_00000000000dc290
uuid_00000000000dc28e:
	movb $1, -96(%rbp)
uuid_00000000000dc290:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc293:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc296:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2d1
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2a6
	jmp uuid_00000000000dc2a8
uuid_00000000000dc2a6:
	push %RBP
	jmp uuid_00000000000dc2a3
	jmp uuid_00000000000dc2a5
uuid_00000000000dc2a3:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000db239
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2a0
	jmp uuid_00000000000dc2a2
uuid_00000000000dc2a0:
	movb $1, -208(%rbp)
uuid_00000000000dc2a2:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc2a5:
	mov -224(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc2a8:
	mov -216(%RBP),%RSP
	add $-240, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2ce
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2af
	jmp uuid_00000000000dc2b1
uuid_00000000000dc2af:
	push %RBP
	jmp uuid_00000000000dc2ac
	jmp uuid_00000000000dc2ae
uuid_00000000000dc2ac:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq $uuid_00000000000db238
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2a9
	jmp uuid_00000000000dc2ab
uuid_00000000000dc2a9:
	movb $1, -280(%rbp)
uuid_00000000000dc2ab:
	mov -304(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc2ae:
	mov -296(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc2b1:
	mov -288(%RBP),%RSP
	add $-312, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2cb
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2b8
	jmp uuid_00000000000dc2ba
uuid_00000000000dc2b8:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc2b5
	jmp uuid_00000000000dc2b7
uuid_00000000000dc2b5:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc2b2
	jmp uuid_00000000000dc2b4
uuid_00000000000dc2b2:
	movb $1, -352(%rbp)
uuid_00000000000dc2b4:
	mov -416(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dc2b7:
	mov -368(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dc2ba:
	mov -360(%RBP),%RSP
	add $-424, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2c8
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2c5
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2be
	jmp uuid_00000000000dc2c0
uuid_00000000000dc2be:
	push %RBP
	jmp uuid_00000000000dc2bb
	jmp uuid_00000000000dc2bd
uuid_00000000000dc2bb:
	movb $1, -496(%rbp)
uuid_00000000000dc2bd:
	mov -512(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dc2c0:
	mov -504(%RBP),%RSP
	add $-512, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2c2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc2c1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc2c4
uuid_00000000000dc2c2:
uuid_00000000000dc2c4:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000dc2c7
uuid_00000000000dc2c5:
uuid_00000000000dc2c7:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dc2ca
uuid_00000000000dc2c8:
	pushq -424(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size-unless-class : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc2ca:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000dc2cd
uuid_00000000000dc2cb:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc2cd:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc2d0
uuid_00000000000dc2ce:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc2d0:
	mov -176(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dc2d3
uuid_00000000000dc2d1:
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size-unless-class-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc29d
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc29a
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc29c
uuid_00000000000dc29a:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc29c:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc29f
uuid_00000000000dc29d:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc297
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc299
uuid_00000000000dc297:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc299:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc29f:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc2d3:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_size_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2de
	jmp uuid_00000000000dc2e0
uuid_00000000000dc2de:
	push %RBP
	mov -128(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc2db
	jmp uuid_00000000000dc2dd
uuid_00000000000dc2db:
	push %RBP
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	jmp uuid_00000000000dc2d8
	jmp uuid_00000000000dc2da
uuid_00000000000dc2d8:
	movb $1, -144(%rbp)
uuid_00000000000dc2da:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc2dd:
	mov -160(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc2e0:
	mov -152(%RBP),%RSP
	add $-232, %RSP
	mov -144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2e5
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2e2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc2e1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc2e4
uuid_00000000000dc2e2:
uuid_00000000000dc2e4:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc2e7
uuid_00000000000dc2e5:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc2e7:
	mov -96(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
without_SB_size_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc2ee
	jmp uuid_00000000000dc2f0
uuid_00000000000dc2ee:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc2eb
	jmp uuid_00000000000dc2ed
uuid_00000000000dc2eb:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc2e8
	jmp uuid_00000000000dc2ea
uuid_00000000000dc2e8:
	movb $1, -96(%rbp)
uuid_00000000000dc2ea:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc2ed:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc2f0:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc32b
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc300
	jmp uuid_00000000000dc302
uuid_00000000000dc300:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc2fd
	jmp uuid_00000000000dc2ff
uuid_00000000000dc2fd:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000db238
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2fa
	jmp uuid_00000000000dc2fc
uuid_00000000000dc2fa:
	movb $1, -208(%rbp)
uuid_00000000000dc2fc:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc2ff:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc302:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc328
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc309
	jmp uuid_00000000000dc30b
uuid_00000000000dc309:
	push %RBP
	mov -304(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc306
	jmp uuid_00000000000dc308
uuid_00000000000dc306:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq $uuid_00000000000db239
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc303
	jmp uuid_00000000000dc305
uuid_00000000000dc303:
	movb $1, -320(%rbp)
uuid_00000000000dc305:
	mov -384(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc308:
	mov -336(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dc30b:
	mov -328(%RBP),%RSP
	add $-392, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc325
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc312
	jmp uuid_00000000000dc314
uuid_00000000000dc312:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc30f
	jmp uuid_00000000000dc311
uuid_00000000000dc30f:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc30c
	jmp uuid_00000000000dc30e
uuid_00000000000dc30c:
	movb $1, -432(%rbp)
uuid_00000000000dc30e:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc311:
	mov -448(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc314:
	mov -440(%RBP),%RSP
	add $-504, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc322
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc31f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc318
	jmp uuid_00000000000dc31a
uuid_00000000000dc318:
	push %RBP
	jmp uuid_00000000000dc315
	jmp uuid_00000000000dc317
uuid_00000000000dc315:
	movb $1, -576(%rbp)
uuid_00000000000dc317:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc31a:
	mov -584(%RBP),%RSP
	add $-592, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc31c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc31b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc31e
uuid_00000000000dc31c:
uuid_00000000000dc31e:
	mov -544(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000dc321
uuid_00000000000dc31f:
uuid_00000000000dc321:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000dc324
uuid_00000000000dc322:
	pushq -504(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-size : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc324:
	mov -400(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dc327
uuid_00000000000dc325:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc327:
	mov -288(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc32a
uuid_00000000000dc328:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc32a:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc32d
uuid_00000000000dc32b:
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2f7
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2f4
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc2f6
uuid_00000000000dc2f4:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc2f6:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc2f9
uuid_00000000000dc2f7:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc2f1
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc2f3
uuid_00000000000dc2f1:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc2f3:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc2f9:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc32d:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
without_SB_platform_SB_props_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc334
	jmp uuid_00000000000dc336
uuid_00000000000dc334:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc331
	jmp uuid_00000000000dc333
uuid_00000000000dc331:
	push %RBP
	mov -72(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc32e
	jmp uuid_00000000000dc330
uuid_00000000000dc32e:
	movb $1, -96(%rbp)
uuid_00000000000dc330:
	mov -144(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc333:
	mov -112(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc336:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc365
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc346
	jmp uuid_00000000000dc348
uuid_00000000000dc346:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc343
	jmp uuid_00000000000dc345
uuid_00000000000dc343:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq $uuid_00000000000dc0dc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc340
	jmp uuid_00000000000dc342
uuid_00000000000dc340:
	movb $1, -208(%rbp)
uuid_00000000000dc342:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc345:
	mov -224(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc348:
	mov -216(%RBP),%RSP
	add $-280, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc362
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc34f
	jmp uuid_00000000000dc351
uuid_00000000000dc34f:
	push %RBP
	jmp uuid_00000000000dc34c
	jmp uuid_00000000000dc34e
uuid_00000000000dc34c:
	push %RBP
	jmp uuid_00000000000dc349
	jmp uuid_00000000000dc34b
uuid_00000000000dc349:
	movb $1, -320(%rbp)
uuid_00000000000dc34b:
	mov -344(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc34e:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc351:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc35f
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc35c
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc355
	jmp uuid_00000000000dc357
uuid_00000000000dc355:
	push %RBP
	jmp uuid_00000000000dc352
	jmp uuid_00000000000dc354
uuid_00000000000dc352:
	movb $1, -416(%rbp)
uuid_00000000000dc354:
	mov -432(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dc357:
	mov -424(%RBP),%RSP
	add $-432, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc359
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc358
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc35b
uuid_00000000000dc359:
uuid_00000000000dc35b:
	mov -384(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dc35e
uuid_00000000000dc35c:
uuid_00000000000dc35e:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dc361
uuid_00000000000dc35f:
uuid_00000000000dc361:
	mov -288(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000dc364
uuid_00000000000dc362:
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc364:
	mov -176(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc367
uuid_00000000000dc365:
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc33d
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc33a
	pushq $0
	pushq $0
	pushq $3
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dc33c
uuid_00000000000dc33a:
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc33c:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dc33f
uuid_00000000000dc33d:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc337
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc339
uuid_00000000000dc337:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc339:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc33f:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dc367:
	mov -64(%RBP),%RSP
	add $-232, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_tag_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc36e
	jmp uuid_00000000000dc370
uuid_00000000000dc36e:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc36b
	jmp uuid_00000000000dc36d
uuid_00000000000dc36b:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc368
	jmp uuid_00000000000dc36a
uuid_00000000000dc368:
	movb $1, -120(%rbp)
uuid_00000000000dc36a:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc36d:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc370:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc387
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc37d
	jmp uuid_00000000000dc37f
uuid_00000000000dc37d:
	push %RBP
	jmp uuid_00000000000dc37a
	jmp uuid_00000000000dc37c
uuid_00000000000dc37a:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000db3ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc377
	jmp uuid_00000000000dc379
uuid_00000000000dc377:
	movb $1, -232(%rbp)
uuid_00000000000dc379:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc37c:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc37f:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc384
	push %RBP
	jmp uuid_00000000000dc381
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc380
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc383
uuid_00000000000dc381:
uuid_00000000000dc383:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc386
uuid_00000000000dc384:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc386:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dc389
uuid_00000000000dc387:
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc374
#call function with-only-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc371
	jmp uuid_00000000000dc373
uuid_00000000000dc371:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc373:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc376
uuid_00000000000dc374:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc376:
	mov -224(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000dc389:
	mov -88(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_class_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc390
	jmp uuid_00000000000dc392
uuid_00000000000dc390:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc38d
	jmp uuid_00000000000dc38f
uuid_00000000000dc38d:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc38a
	jmp uuid_00000000000dc38c
uuid_00000000000dc38a:
	movb $1, -120(%rbp)
uuid_00000000000dc38c:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc38f:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc392:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3af
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc39f
	jmp uuid_00000000000dc3a1
uuid_00000000000dc39f:
	push %RBP
	jmp uuid_00000000000dc39c
	jmp uuid_00000000000dc39e
uuid_00000000000dc39c:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc399
	jmp uuid_00000000000dc39b
uuid_00000000000dc399:
	movb $1, -232(%rbp)
uuid_00000000000dc39b:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc39e:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc3a1:
	mov -240(%RBP),%RSP
	add $-264, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3ac
	push %RBP
	jmp uuid_00000000000dc3a9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc3a8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc3ab
uuid_00000000000dc3a9:
uuid_00000000000dc3ab:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dc3ae
uuid_00000000000dc3ac:
	push %RBP
#call function is-class : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_class_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3a5
	jmp uuid_00000000000dc3a7
uuid_00000000000dc3a5:
	push %RBP
#call function is-fragment : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call is_SB_fragment_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3a2
	jmp uuid_00000000000dc3a4
uuid_00000000000dc3a2:
	movq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc3a4:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc3a7:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dc3ae:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dc3b1
uuid_00000000000dc3af:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc393
	jmp uuid_00000000000dc395
uuid_00000000000dc393:
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc395:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc396
	jmp uuid_00000000000dc398
uuid_00000000000dc396:
	movq -248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc398:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dc3b1:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowListTypeListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3bc
	jmp uuid_00000000000dc3be
uuid_00000000000dc3bc:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc3b9
	jmp uuid_00000000000dc3bb
uuid_00000000000dc3b9:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dc3b6
	jmp uuid_00000000000dc3b8
uuid_00000000000dc3b6:
	movb $1, -184(%rbp)
uuid_00000000000dc3b8:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dc3bb:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dc3be:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3c3
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3c0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc3bf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc3c2
uuid_00000000000dc3c0:
uuid_00000000000dc3c2:
	mov -280(%RBP),%RSP
	add $-320, %RSP
	jmp uuid_00000000000dc3c5
uuid_00000000000dc3c3:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dc3c5:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
with_SB_only_SB_representation_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3cc
	jmp uuid_00000000000dc3ce
uuid_00000000000dc3cc:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc3c9
	jmp uuid_00000000000dc3cb
uuid_00000000000dc3c9:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc3c6
	jmp uuid_00000000000dc3c8
uuid_00000000000dc3c6:
	movb $1, -120(%rbp)
uuid_00000000000dc3c8:
	mov -168(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc3cb:
	mov -136(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dc3ce:
	mov -128(%RBP),%RSP
	add $-192, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc45d
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3de
	jmp uuid_00000000000dc3e0
uuid_00000000000dc3de:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3db
	jmp uuid_00000000000dc3dd
uuid_00000000000dc3db:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $uuid_00000000000db5ed
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3d8
	jmp uuid_00000000000dc3da
uuid_00000000000dc3d8:
	movb $1, -232(%rbp)
uuid_00000000000dc3da:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc3dd:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc3e0:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc45a
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3e7
	jmp uuid_00000000000dc3e9
uuid_00000000000dc3e7:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3e4
	jmp uuid_00000000000dc3e6
uuid_00000000000dc3e4:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq $uuid_00000000000dc1cc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3e1
	jmp uuid_00000000000dc3e3
uuid_00000000000dc3e1:
	movb $1, -344(%rbp)
uuid_00000000000dc3e3:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc3e6:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc3e9:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc457
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3f0
	jmp uuid_00000000000dc3f2
uuid_00000000000dc3f0:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3ed
	jmp uuid_00000000000dc3ef
uuid_00000000000dc3ed:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3ea
	jmp uuid_00000000000dc3ec
uuid_00000000000dc3ea:
	movb $1, -456(%rbp)
uuid_00000000000dc3ec:
	mov -520(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc3ef:
	mov -472(%RBP),%RSP
	add $-528, %RSP
uuid_00000000000dc3f2:
	mov -464(%RBP),%RSP
	add $-528, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc454
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3f9
	jmp uuid_00000000000dc3fb
uuid_00000000000dc3f9:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3f6
	jmp uuid_00000000000dc3f8
uuid_00000000000dc3f6:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000db45d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3f3
	jmp uuid_00000000000dc3f5
uuid_00000000000dc3f3:
	movb $1, -568(%rbp)
uuid_00000000000dc3f5:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc3f8:
	mov -584(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dc3fb:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc451
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc402
	jmp uuid_00000000000dc404
uuid_00000000000dc402:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc3ff
	jmp uuid_00000000000dc401
uuid_00000000000dc3ff:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -752(%rbp)
	pushq $uuid_00000000000daffc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3fc
	jmp uuid_00000000000dc3fe
uuid_00000000000dc3fc:
	movb $1, -680(%rbp)
uuid_00000000000dc3fe:
	mov -744(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000dc401:
	mov -696(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000dc404:
	mov -688(%RBP),%RSP
	add $-752, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc44e
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc40b
	jmp uuid_00000000000dc40d
uuid_00000000000dc40b:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc408
	jmp uuid_00000000000dc40a
uuid_00000000000dc408:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq $uuid_00000000000db10b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc405
	jmp uuid_00000000000dc407
uuid_00000000000dc405:
	movb $1, -792(%rbp)
uuid_00000000000dc407:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dc40a:
	mov -808(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dc40d:
	mov -800(%RBP),%RSP
	add $-864, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc44b
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc414
	jmp uuid_00000000000dc416
uuid_00000000000dc414:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc411
	jmp uuid_00000000000dc413
uuid_00000000000dc411:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000db10f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc40e
	jmp uuid_00000000000dc410
uuid_00000000000dc40e:
	movb $1, -904(%rbp)
uuid_00000000000dc410:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000dc413:
	mov -920(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000dc416:
	mov -912(%RBP),%RSP
	add $-976, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc448
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc41d
	jmp uuid_00000000000dc41f
uuid_00000000000dc41d:
	push %RBP
	mov -1000(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc41a
	jmp uuid_00000000000dc41c
uuid_00000000000dc41a:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000db113
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc417
	jmp uuid_00000000000dc419
uuid_00000000000dc417:
	movb $1, -1016(%rbp)
uuid_00000000000dc419:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dc41c:
	mov -1032(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dc41f:
	mov -1024(%RBP),%RSP
	add $-1088, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc445
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc426
	jmp uuid_00000000000dc428
uuid_00000000000dc426:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc423
	jmp uuid_00000000000dc425
uuid_00000000000dc423:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq $uuid_00000000000db117
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc420
	jmp uuid_00000000000dc422
uuid_00000000000dc420:
	movb $1, -1128(%rbp)
uuid_00000000000dc422:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc425:
	mov -1144(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc428:
	mov -1136(%RBP),%RSP
	add $-1200, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc442
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc42f
	jmp uuid_00000000000dc431
uuid_00000000000dc42f:
	push %RBP
	mov -1224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc42c
	jmp uuid_00000000000dc42e
uuid_00000000000dc42c:
	push %RBP
	mov -1216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc429
	jmp uuid_00000000000dc42b
uuid_00000000000dc429:
	movb $1, -1240(%rbp)
uuid_00000000000dc42b:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000dc42e:
	mov -1256(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000dc431:
	mov -1248(%RBP),%RSP
	add $-1312, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc43f
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov -1344(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc43c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc435
	jmp uuid_00000000000dc437
uuid_00000000000dc435:
	push %RBP
	jmp uuid_00000000000dc432
	jmp uuid_00000000000dc434
uuid_00000000000dc432:
	movb $1, -1384(%rbp)
uuid_00000000000dc434:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
uuid_00000000000dc437:
	mov -1392(%RBP),%RSP
	add $-1400, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc439
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc438
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc43b
uuid_00000000000dc439:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dc43b:
	mov -1352(%RBP),%RSP
	add $-1400, %RSP
	jmp uuid_00000000000dc43e
uuid_00000000000dc43c:
uuid_00000000000dc43e:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000dc441
uuid_00000000000dc43f:
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dc441:
	mov -1208(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000dc444
uuid_00000000000dc442:
uuid_00000000000dc444:
	mov -1096(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000dc447
uuid_00000000000dc445:
uuid_00000000000dc447:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
	jmp uuid_00000000000dc44a
uuid_00000000000dc448:
uuid_00000000000dc44a:
	mov -872(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000dc44d
uuid_00000000000dc44b:
uuid_00000000000dc44d:
	mov -760(%RBP),%RSP
	add $-864, %RSP
	jmp uuid_00000000000dc450
uuid_00000000000dc44e:
uuid_00000000000dc450:
	mov -648(%RBP),%RSP
	add $-752, %RSP
	jmp uuid_00000000000dc453
uuid_00000000000dc451:
uuid_00000000000dc453:
	mov -536(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dc456
uuid_00000000000dc454:
uuid_00000000000dc456:
	mov -424(%RBP),%RSP
	add $-528, %RSP
	jmp uuid_00000000000dc459
uuid_00000000000dc457:
uuid_00000000000dc459:
	mov -312(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000dc45c
uuid_00000000000dc45a:
uuid_00000000000dc45c:
	mov -200(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000dc45f
uuid_00000000000dc45d:
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function with-only-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3d5
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3d2
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000dc3d4
uuid_00000000000dc3d2:
	movq -240(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc3d4:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dc3d7
uuid_00000000000dc3d5:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc3cf
	movq -216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -40(%rbp)
	jmp uuid_00000000000dc3d1
uuid_00000000000dc3cf:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000dc3d1:
	mov -256(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dc3d7:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dc45f:
	mov -88(%RBP),%RSP
	add $-256, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
#call function without-size-unless-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call without_SB_size_SB_unless_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
normalize_CL_ArrowTContextTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc476
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc473
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc46c
	jmp uuid_00000000000dc46e
uuid_00000000000dc46c:
	push %RBP
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000dc469
	jmp uuid_00000000000dc46b
uuid_00000000000dc469:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000dc466
	jmp uuid_00000000000dc468
uuid_00000000000dc466:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc463
	jmp uuid_00000000000dc465
uuid_00000000000dc463:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc460
	jmp uuid_00000000000dc462
uuid_00000000000dc460:
	movb $1, -640(%rbp)
uuid_00000000000dc462:
	mov -784(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc465:
	mov -768(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc468:
	mov -736(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc46b:
	mov -656(%RBP),%RSP
	add $-904, %RSP
uuid_00000000000dc46e:
	mov -648(%RBP),%RSP
	add $-904, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc470
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc46f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc472
uuid_00000000000dc470:
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -776(%rbp)
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc472:
	mov -512(%RBP),%RSP
	add $-904, %RSP
	jmp uuid_00000000000dc475
uuid_00000000000dc473:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc475:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dc478
uuid_00000000000dc476:
uuid_00000000000dc478:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
denormalize_CL_ArrowTypeType:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-tag : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_tag_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-fields : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_fields_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function with-platform-props : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call with_SB_platform_SB_props_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
enrich_CL_ArrowTypeConsTypeType:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc479
	jmp uuid_00000000000dc47b
uuid_00000000000dc479:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc47b:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
type_SB_of_SB_s_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc482
	jmp uuid_00000000000dc484
uuid_00000000000dc482:
	push %RBP
	jmp uuid_00000000000dc47f
	jmp uuid_00000000000dc481
uuid_00000000000dc47f:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc47c
	jmp uuid_00000000000dc47e
uuid_00000000000dc47c:
	movb $1, -264(%rbp)
uuid_00000000000dc47e:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dc481:
	mov -280(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dc484:
	mov -272(%RBP),%RSP
	add $-296, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4b4
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc48b
	jmp uuid_00000000000dc48d
uuid_00000000000dc48b:
	push %RBP
	jmp uuid_00000000000dc488
	jmp uuid_00000000000dc48a
uuid_00000000000dc488:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc485
	jmp uuid_00000000000dc487
uuid_00000000000dc485:
	movb $1, -384(%rbp)
uuid_00000000000dc487:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc48a:
	mov -400(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc48d:
	mov -392(%RBP),%RSP
	add $-416, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4b1
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4a6
	jmp uuid_00000000000dc4a8
uuid_00000000000dc4a6:
	push %RBP
	mov -488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc4a3
	jmp uuid_00000000000dc4a5
uuid_00000000000dc4a3:
	push %RBP
	mov -480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc49d
	jmp uuid_00000000000dc49f
uuid_00000000000dc49d:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc494
	jmp uuid_00000000000dc496
uuid_00000000000dc494:
	push %RBP
	jmp uuid_00000000000dc491
	jmp uuid_00000000000dc493
uuid_00000000000dc491:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq $uuid_00000000000daeae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc48e
	jmp uuid_00000000000dc490
uuid_00000000000dc48e:
	movb $1, -776(%rbp)
uuid_00000000000dc490:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc493:
	mov -792(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc496:
	mov -784(%RBP),%RSP
	add $-808, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc49a
	jmp uuid_00000000000dc49c
uuid_00000000000dc49a:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc497
	jmp uuid_00000000000dc499
uuid_00000000000dc497:
	movb $1, -680(%rbp)
uuid_00000000000dc499:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc49c:
	mov -696(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc49f:
	mov -688(%RBP),%RSP
	add $-888, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4a0
	jmp uuid_00000000000dc4a2
uuid_00000000000dc4a0:
	movb $1, -504(%rbp)
uuid_00000000000dc4a2:
	mov -600(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc4a5:
	mov -520(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dc4a8:
	mov -512(%RBP),%RSP
	add $-888, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4ae
	push %RBP
	jmp uuid_00000000000dc4ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc4aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc4ad
uuid_00000000000dc4ab:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc4a9
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc4ad:
	mov -896(%RBP),%RSP
	add $-896, %RSP
	jmp uuid_00000000000dc4b0
uuid_00000000000dc4ae:
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dc4b0:
	mov -424(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000dc4b3
uuid_00000000000dc4b1:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dc4b3:
	mov -304(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000dc4b6
uuid_00000000000dc4b4:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dc4b6:
	mov -184(%RBP),%RSP
	add $-320, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4bd
	jmp uuid_00000000000dc4bf
uuid_00000000000dc4bd:
	push %RBP
	jmp uuid_00000000000dc4ba
	jmp uuid_00000000000dc4bc
uuid_00000000000dc4ba:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc4b7
	jmp uuid_00000000000dc4b9
uuid_00000000000dc4b7:
	movb $1, -304(%rbp)
uuid_00000000000dc4b9:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc4bc:
	mov -320(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc4bf:
	mov -312(%RBP),%RSP
	add $-336, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc521
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4e0
	jmp uuid_00000000000dc4e2
uuid_00000000000dc4e0:
	push %RBP
	jmp uuid_00000000000dc4dd
	jmp uuid_00000000000dc4df
uuid_00000000000dc4dd:
	push %RBP
	mov -352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc4da
	jmp uuid_00000000000dc4dc
uuid_00000000000dc4da:
	movb $1, -424(%rbp)
uuid_00000000000dc4dc:
	mov -448(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc4df:
	mov -440(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dc4e2:
	mov -432(%RBP),%RSP
	add $-456, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc51e
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc514
	jmp uuid_00000000000dc516
uuid_00000000000dc514:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc511
	jmp uuid_00000000000dc513
uuid_00000000000dc511:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -712(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc50b
	jmp uuid_00000000000dc50d
uuid_00000000000dc50b:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc502
	jmp uuid_00000000000dc504
uuid_00000000000dc502:
	push %RBP
	jmp uuid_00000000000dc4ff
	jmp uuid_00000000000dc501
uuid_00000000000dc4ff:
	push %RBP
	mov -744(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -848(%rbp)
	pushq $uuid_00000000000daeae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4fc
	jmp uuid_00000000000dc4fe
uuid_00000000000dc4fc:
	movb $1, -816(%rbp)
uuid_00000000000dc4fe:
	mov -840(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000dc501:
	mov -832(%RBP),%RSP
	add $-848, %RSP
uuid_00000000000dc504:
	mov -824(%RBP),%RSP
	add $-848, %RSP
	mov -816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc508
	jmp uuid_00000000000dc50a
uuid_00000000000dc508:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc505
	jmp uuid_00000000000dc507
uuid_00000000000dc505:
	movb $1, -720(%rbp)
uuid_00000000000dc507:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc50a:
	mov -736(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc50d:
	mov -728(%RBP),%RSP
	add $-928, %RSP
	mov -720(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc50e
	jmp uuid_00000000000dc510
uuid_00000000000dc50e:
	movb $1, -544(%rbp)
uuid_00000000000dc510:
	mov -640(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc513:
	mov -560(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dc516:
	mov -552(%RBP),%RSP
	add $-928, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc51b
	push %RBP
	jmp uuid_00000000000dc518
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc517
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc51a
uuid_00000000000dc518:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc4a9
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc51a:
	mov -936(%RBP),%RSP
	add $-936, %RSP
	jmp uuid_00000000000dc51d
uuid_00000000000dc51b:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dc51d:
	mov -464(%RBP),%RSP
	add $-976, %RSP
	jmp uuid_00000000000dc520
uuid_00000000000dc51e:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4e9
	jmp uuid_00000000000dc4eb
uuid_00000000000dc4e9:
	push %RBP
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000dc4e6
	jmp uuid_00000000000dc4e8
uuid_00000000000dc4e6:
	push %RBP
	mov -536(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq $uuid_00000000000dab3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4e3
	jmp uuid_00000000000dc4e5
uuid_00000000000dc4e3:
	movb $1, -576(%rbp)
uuid_00000000000dc4e5:
	mov -624(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000dc4e8:
	mov -592(%RBP),%RSP
	add $-632, %RSP
uuid_00000000000dc4eb:
	mov -584(%RBP),%RSP
	add $-632, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4f9
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4f2
	jmp uuid_00000000000dc4f4
uuid_00000000000dc4f2:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000dc4ef
	jmp uuid_00000000000dc4f1
uuid_00000000000dc4ef:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc4ec
	jmp uuid_00000000000dc4ee
uuid_00000000000dc4ec:
	movb $1, -688(%rbp)
uuid_00000000000dc4ee:
	mov -736(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dc4f1:
	mov -704(%RBP),%RSP
	add $-744, %RSP
uuid_00000000000dc4f4:
	mov -696(%RBP),%RSP
	add $-744, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4f6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc4f5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc4f8
uuid_00000000000dc4f6:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dade1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -744(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dade1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db279
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -728(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000dc4f8:
	mov -640(%RBP),%RSP
	add $-744, %RSP
	jmp uuid_00000000000dc4fb
uuid_00000000000dc4f9:
	movq -616(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -464(%rbp)
uuid_00000000000dc4fb:
	mov -528(%RBP),%RSP
	add $-632, %RSP
	movq -480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000dc520:
	mov -344(%RBP),%RSP
	add $-632, %RSP
	jmp uuid_00000000000dc523
uuid_00000000000dc521:
	pushq $0
	pushq $0
	pushq $3
#call function parse-field-of : Arrow<String,Tuple<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	mov %RBX, %RBP
	call parse_SB_field_SB_of_CL_ArrowTupleTypeStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4c6
	jmp uuid_00000000000dc4c8
uuid_00000000000dc4c6:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000dc4c3
	jmp uuid_00000000000dc4c5
uuid_00000000000dc4c3:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000dab3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc4c0
	jmp uuid_00000000000dc4c2
uuid_00000000000dc4c0:
	movb $1, -456(%rbp)
uuid_00000000000dc4c2:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dc4c5:
	mov -472(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dc4c8:
	mov -464(%RBP),%RSP
	add $-512, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4d7
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4cf
	jmp uuid_00000000000dc4d1
uuid_00000000000dc4cf:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000dc4cc
	jmp uuid_00000000000dc4ce
uuid_00000000000dc4cc:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc4c9
	jmp uuid_00000000000dc4cb
uuid_00000000000dc4c9:
	movb $1, -568(%rbp)
uuid_00000000000dc4cb:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc4ce:
	mov -584(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc4d1:
	mov -576(%RBP),%RSP
	add $-624, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc4d4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc4d3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc4d6
uuid_00000000000dc4d4:
#call function add-alias : Arrow<Cons<Cons<String,String>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dade1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -624(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dade1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db279
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call add_SB_alias_CL_ArrowNilConsTypeConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc4d2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -608(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000dc4d6:
	mov -520(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dc4d9
uuid_00000000000dc4d7:
	movq -496(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -344(%rbp)
uuid_00000000000dc4d9:
	mov -408(%RBP),%RSP
	add $-512, %RSP
	movq -360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -128(%rbp)
uuid_00000000000dc523:
	mov -224(%RBP),%RSP
	add $-512, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $120, %rsp
	ret
typeof_SB_lhs_CL_ArrowTypeAST:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc542
	jmp uuid_00000000000dc544
uuid_00000000000dc542:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc530
	jmp uuid_00000000000dc532
uuid_00000000000dc530:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc527
	jmp uuid_00000000000dc529
uuid_00000000000dc527:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000dc524
	jmp uuid_00000000000dc526
uuid_00000000000dc524:
	movb $1, -456(%rbp)
uuid_00000000000dc526:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dc529:
	mov -464(%RBP),%RSP
	add $-496, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc52d
	jmp uuid_00000000000dc52f
uuid_00000000000dc52d:
	push %RBP
	jmp uuid_00000000000dc52a
	jmp uuid_00000000000dc52c
uuid_00000000000dc52a:
	movb $1, -360(%rbp)
uuid_00000000000dc52c:
	mov -504(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc52f:
	mov -376(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc532:
	mov -368(%RBP),%RSP
	add $-504, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc53f
	jmp uuid_00000000000dc541
uuid_00000000000dc53f:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -584(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc539
	jmp uuid_00000000000dc53b
uuid_00000000000dc539:
	push %RBP
	jmp uuid_00000000000dc536
	jmp uuid_00000000000dc538
uuid_00000000000dc536:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc533
	jmp uuid_00000000000dc535
uuid_00000000000dc533:
	movb $1, -592(%rbp)
uuid_00000000000dc535:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc538:
	mov -608(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc53b:
	mov -600(%RBP),%RSP
	add $-624, %RSP
	mov -592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc53c
	jmp uuid_00000000000dc53e
uuid_00000000000dc53c:
	movb $1, -264(%rbp)
uuid_00000000000dc53e:
	mov -512(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc541:
	mov -280(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc544:
	mov -272(%RBP),%RSP
	add $-624, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc57a
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc56c
	jmp uuid_00000000000dc56e
uuid_00000000000dc56c:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc563
	jmp uuid_00000000000dc565
uuid_00000000000dc563:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc551
	jmp uuid_00000000000dc553
uuid_00000000000dc551:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc548
	jmp uuid_00000000000dc54a
uuid_00000000000dc548:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000dc545
	jmp uuid_00000000000dc547
uuid_00000000000dc545:
	movb $1, -1000(%rbp)
uuid_00000000000dc547:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dc54a:
	mov -1008(%RBP),%RSP
	add $-1040, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc54e
	jmp uuid_00000000000dc550
uuid_00000000000dc54e:
	push %RBP
	jmp uuid_00000000000dc54b
	jmp uuid_00000000000dc54d
uuid_00000000000dc54b:
	movb $1, -904(%rbp)
uuid_00000000000dc54d:
	mov -1048(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dc550:
	mov -920(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dc553:
	mov -912(%RBP),%RSP
	add $-1048, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc560
	jmp uuid_00000000000dc562
uuid_00000000000dc560:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc55a
	jmp uuid_00000000000dc55c
uuid_00000000000dc55a:
	push %RBP
	jmp uuid_00000000000dc557
	jmp uuid_00000000000dc559
uuid_00000000000dc557:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1168(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc554
	jmp uuid_00000000000dc556
uuid_00000000000dc554:
	movb $1, -1136(%rbp)
uuid_00000000000dc556:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc559:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc55c:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc55d
	jmp uuid_00000000000dc55f
uuid_00000000000dc55d:
	movb $1, -808(%rbp)
uuid_00000000000dc55f:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc562:
	mov -824(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dc565:
	mov -816(%RBP),%RSP
	add $-1168, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc569
	jmp uuid_00000000000dc56b
uuid_00000000000dc569:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc566
	jmp uuid_00000000000dc568
uuid_00000000000dc566:
	movb $1, -712(%rbp)
uuid_00000000000dc568:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc56b:
	mov -728(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc56e:
	mov -720(%RBP),%RSP
	add $-1248, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc577
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -1328(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc574
	push %RBP
	jmp uuid_00000000000dc571
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc570
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc573
uuid_00000000000dc571:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc56f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc573:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
	jmp uuid_00000000000dc576
uuid_00000000000dc574:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dc576:
	mov -1256(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000dc579
uuid_00000000000dc577:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dc579:
	mov -632(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000dc57c
uuid_00000000000dc57a:
	movq -496(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dc57c:
	mov -184(%RBP),%RSP
	add $-624, %RSP
	subq $24, %rsp
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
typeof_SB_tag_CL_ArrowTypeString:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
cons_SB_head_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc595
	jmp uuid_00000000000dc597
uuid_00000000000dc595:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc58c
	jmp uuid_00000000000dc58e
uuid_00000000000dc58c:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc583
	jmp uuid_00000000000dc585
uuid_00000000000dc583:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc580
	jmp uuid_00000000000dc582
uuid_00000000000dc580:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dc57d
	jmp uuid_00000000000dc57f
uuid_00000000000dc57d:
	movb $1, -248(%rbp)
uuid_00000000000dc57f:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc582:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc585:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc589
	jmp uuid_00000000000dc58b
uuid_00000000000dc589:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dc586
	jmp uuid_00000000000dc588
uuid_00000000000dc586:
	movb $1, -184(%rbp)
uuid_00000000000dc588:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc58b:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc58e:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc592
	jmp uuid_00000000000dc594
uuid_00000000000dc592:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc58f
	jmp uuid_00000000000dc591
uuid_00000000000dc58f:
	movb $1, -120(%rbp)
uuid_00000000000dc591:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc594:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc597:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc59c
	push %RBP
	jmp uuid_00000000000dc599
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc598
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc59b
uuid_00000000000dc599:
uuid_00000000000dc59b:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc59e
uuid_00000000000dc59c:
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc59e:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_tail_CL_ArrowTypeType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5b7
	jmp uuid_00000000000dc5b9
uuid_00000000000dc5b7:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ae
	jmp uuid_00000000000dc5b0
uuid_00000000000dc5ae:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5a5
	jmp uuid_00000000000dc5a7
uuid_00000000000dc5a5:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5a2
	jmp uuid_00000000000dc5a4
uuid_00000000000dc5a2:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dc59f
	jmp uuid_00000000000dc5a1
uuid_00000000000dc59f:
	movb $1, -248(%rbp)
uuid_00000000000dc5a1:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc5a4:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dc5a7:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ab
	jmp uuid_00000000000dc5ad
uuid_00000000000dc5ab:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dc5a8
	jmp uuid_00000000000dc5aa
uuid_00000000000dc5a8:
	movb $1, -184(%rbp)
uuid_00000000000dc5aa:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc5ad:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc5b0:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5b4
	jmp uuid_00000000000dc5b6
uuid_00000000000dc5b4:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc5b1
	jmp uuid_00000000000dc5b3
uuid_00000000000dc5b1:
	movb $1, -120(%rbp)
uuid_00000000000dc5b3:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc5b6:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dc5b9:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5be
	push %RBP
	jmp uuid_00000000000dc5bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc5ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc5bd
uuid_00000000000dc5bb:
uuid_00000000000dc5bd:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dc5c0
uuid_00000000000dc5be:
	movq -368(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000dc5c0:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	subq $24, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsStringType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5c7
	jmp uuid_00000000000dc5c9
uuid_00000000000dc5c7:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc5c4
	jmp uuid_00000000000dc5c6
uuid_00000000000dc5c4:
	push %RBP
	jmp uuid_00000000000dc5c1
	jmp uuid_00000000000dc5c3
uuid_00000000000dc5c1:
	movb $1, -112(%rbp)
uuid_00000000000dc5c3:
	mov -176(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc5c6:
	mov -128(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dc5c9:
	mov -120(%RBP),%RSP
	add $-176, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ce
	push %RBP
	jmp uuid_00000000000dc5cb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc5ca
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc5cd
uuid_00000000000dc5cb:
uuid_00000000000dc5cd:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000dc5d0
uuid_00000000000dc5ce:
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -32(%rbp)
	pushq $1
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
uuid_00000000000dc5d0:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5e3
	jmp uuid_00000000000dc5e5
uuid_00000000000dc5e3:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc5e0
	jmp uuid_00000000000dc5e2
uuid_00000000000dc5e0:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5da
	jmp uuid_00000000000dc5dc
uuid_00000000000dc5da:
	push %RBP
	mov -248(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc5d7
	jmp uuid_00000000000dc5d9
uuid_00000000000dc5d7:
	movb $1, -264(%rbp)
uuid_00000000000dc5d9:
	mov -280(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc5dc:
	mov -272(%RBP),%RSP
	add $-288, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5dd
	jmp uuid_00000000000dc5df
uuid_00000000000dc5dd:
	movb $1, -168(%rbp)
uuid_00000000000dc5df:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc5e2:
	mov -184(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dc5e5:
	mov -176(%RBP),%RSP
	add $-288, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5ed
	push %RBP
	jmp uuid_00000000000dc5ea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc5e9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc5ec
uuid_00000000000dc5ea:
uuid_00000000000dc5ec:
	mov -296(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dc5ef
uuid_00000000000dc5ed:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc5e6
#call function parameter-number : Arrow<Cons<Cons<List<Type>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -48(%rbp)
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsU64ConsStringListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -72(%rbp)
	jmp uuid_00000000000dc5e8
uuid_00000000000dc5e6:
	movq -56(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -56(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000dc5e8:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dc5ef:
	mov -120(%RBP),%RSP
	add $-296, %RSP
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,U64>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $1
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
apply_CL_ArrowTupleTypeTypeConsU64ConsASTConsU64ConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5f0
	jmp uuid_00000000000dc5f2
uuid_00000000000dc5f0:
#call function reduce-plural : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call reduce_SB_plural_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc5f2:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	push %RBP
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc5f6
	jmp uuid_00000000000dc5f8
uuid_00000000000dc5f6:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc5f3
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc5f4
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc5f5
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc5f8:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc60c
	jmp uuid_00000000000dc60e
uuid_00000000000dc60c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc5f9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc5fa
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000dc609:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc60a
	jmp uuid_00000000000dc60b
uuid_00000000000dc60a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc5fb
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc602
	jmp uuid_00000000000dc604
uuid_00000000000dc602:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc5ff
	jmp uuid_00000000000dc601
uuid_00000000000dc5ff:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	jmp uuid_00000000000dc5fc
	jmp uuid_00000000000dc5fe
uuid_00000000000dc5fc:
	movb $1, -376(%rbp)
uuid_00000000000dc5fe:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dc601:
	mov -392(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dc604:
	mov -384(%RBP),%RSP
	add $-464, %RSP
	mov -376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc606
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc605
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc608
uuid_00000000000dc606:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -432(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -248(%rbp)
uuid_00000000000dc608:
	mov -328(%RBP),%RSP
	add $-464, %RSP
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc609
uuid_00000000000dc60b:
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc60e:
	mov -240(%RBP),%RSP
	add $-280, %RSP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
uuid_00000000000dc648:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc649
	jmp uuid_00000000000dc64a
uuid_00000000000dc649:
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc615
	jmp uuid_00000000000dc617
uuid_00000000000dc615:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc612
	jmp uuid_00000000000dc614
uuid_00000000000dc612:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dc60f
	jmp uuid_00000000000dc611
uuid_00000000000dc60f:
	movb $1, -416(%rbp)
uuid_00000000000dc611:
	mov -480(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc614:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dc617:
	mov -424(%RBP),%RSP
	add $-504, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc645
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc644
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc647
uuid_00000000000dc645:
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	push %RBP
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc630
	jmp uuid_00000000000dc632
uuid_00000000000dc630:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc627
	jmp uuid_00000000000dc629
uuid_00000000000dc627:
	push %RBP
	mov -616(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc61e
	jmp uuid_00000000000dc620
uuid_00000000000dc61e:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc61b
	jmp uuid_00000000000dc61d
uuid_00000000000dc61b:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000dc618
	jmp uuid_00000000000dc61a
uuid_00000000000dc618:
	movb $1, -696(%rbp)
uuid_00000000000dc61a:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dc61d:
	mov -712(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dc620:
	mov -704(%RBP),%RSP
	add $-784, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc624
	jmp uuid_00000000000dc626
uuid_00000000000dc624:
	push %RBP
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000dc621
	jmp uuid_00000000000dc623
uuid_00000000000dc621:
	movb $1, -632(%rbp)
uuid_00000000000dc623:
	mov -792(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc626:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc629:
	mov -640(%RBP),%RSP
	add $-816, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc62d
	jmp uuid_00000000000dc62f
uuid_00000000000dc62d:
	push %RBP
	mov -544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc62a
	jmp uuid_00000000000dc62c
uuid_00000000000dc62a:
	movb $1, -568(%rbp)
uuid_00000000000dc62c:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dc62f:
	mov -584(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dc632:
	mov -576(%RBP),%RSP
	add $-832, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc641
	push %RBP
	jmp uuid_00000000000dc63e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc63d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc640
uuid_00000000000dc63e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc63c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc640:
	mov -840(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dc643
uuid_00000000000dc641:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	movq -976(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -16(%rbp)
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc639
	jmp uuid_00000000000dc63b
uuid_00000000000dc639:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc636
	jmp uuid_00000000000dc638
uuid_00000000000dc636:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc633
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc634
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc635
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<SourceLocation,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc638:
	mov -992(%RBP),%RSP
	add $-992, %RSP
#call function try-specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc63b:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dc643:
	mov -536(%RBP),%RSP
	add $-992, %RSP
	movq -472(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -288(%rbp)
uuid_00000000000dc647:
	mov -368(%RBP),%RSP
	add $-992, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $120, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc648
uuid_00000000000dc64a:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
apply_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6c8
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6c5
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc651
	jmp uuid_00000000000dc653
uuid_00000000000dc651:
	push %RBP
	jmp uuid_00000000000dc64e
	jmp uuid_00000000000dc650
uuid_00000000000dc64e:
	push %RBP
	jmp uuid_00000000000dc64b
	jmp uuid_00000000000dc64d
uuid_00000000000dc64b:
	movb $1, -568(%rbp)
uuid_00000000000dc64d:
	mov -592(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc650:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dc653:
	mov -576(%RBP),%RSP
	add $-592, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6c2
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc657
	jmp uuid_00000000000dc659
uuid_00000000000dc657:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000dc654
	jmp uuid_00000000000dc656
uuid_00000000000dc654:
	movb $1, -680(%rbp)
uuid_00000000000dc656:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000dc659:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6bf
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc660
	jmp uuid_00000000000dc662
uuid_00000000000dc660:
	push %RBP
	jmp uuid_00000000000dc65d
	jmp uuid_00000000000dc65f
uuid_00000000000dc65d:
	push %RBP
	mov -736(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc65a
	jmp uuid_00000000000dc65c
uuid_00000000000dc65a:
	movb $1, -808(%rbp)
uuid_00000000000dc65c:
	mov -832(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc65f:
	mov -824(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc662:
	mov -816(%RBP),%RSP
	add $-840, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6bc
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc682
	jmp uuid_00000000000dc684
uuid_00000000000dc682:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc67f
	jmp uuid_00000000000dc681
uuid_00000000000dc67f:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc67c
	jmp uuid_00000000000dc67e
uuid_00000000000dc67c:
	movb $1, -928(%rbp)
uuid_00000000000dc67e:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dc681:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dc684:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6b9
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc68e
	jmp uuid_00000000000dc690
uuid_00000000000dc68e:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000dc68b
	jmp uuid_00000000000dc68d
uuid_00000000000dc68b:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc688
	jmp uuid_00000000000dc68a
uuid_00000000000dc688:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc685
	jmp uuid_00000000000dc687
uuid_00000000000dc685:
	movb $1, -1184(%rbp)
uuid_00000000000dc687:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dc68a:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dc68d:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dc690:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6b6
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc697
	jmp uuid_00000000000dc699
uuid_00000000000dc697:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc694
	jmp uuid_00000000000dc696
uuid_00000000000dc694:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc691
	jmp uuid_00000000000dc693
uuid_00000000000dc691:
	movb $1, -1472(%rbp)
uuid_00000000000dc693:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dc696:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dc699:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6b3
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6a0
	jmp uuid_00000000000dc6a2
uuid_00000000000dc6a0:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc69d
	jmp uuid_00000000000dc69f
uuid_00000000000dc69d:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc69a
	jmp uuid_00000000000dc69c
uuid_00000000000dc69a:
	movb $1, -1728(%rbp)
uuid_00000000000dc69c:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dc69f:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dc6a2:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6b0
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6a9
	jmp uuid_00000000000dc6ab
uuid_00000000000dc6a9:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6a6
	jmp uuid_00000000000dc6a8
uuid_00000000000dc6a6:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000dc6a3
	jmp uuid_00000000000dc6a5
uuid_00000000000dc6a3:
	movb $1, -1984(%rbp)
uuid_00000000000dc6a5:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dc6a8:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dc6ab:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6ad
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc6ac
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc6af
uuid_00000000000dc6ad:
#call function substitute : Arrow<Cons<Context,Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTokenConsTokenContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
	push -184(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc6af:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000dc6b2
uuid_00000000000dc6b0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc6b2:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000dc6b5
uuid_00000000000dc6b3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc6b5:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000dc6b8
uuid_00000000000dc6b6:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc6b8:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000dc6bb
uuid_00000000000dc6b9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc6bb:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000dc6be
uuid_00000000000dc6bc:
uuid_00000000000dc679:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc67a
	jmp uuid_00000000000dc67b
uuid_00000000000dc67a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc66c
	jmp uuid_00000000000dc66e
uuid_00000000000dc66c:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000dc669
	jmp uuid_00000000000dc66b
uuid_00000000000dc669:
	push %RBP
	mov -960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc666
	jmp uuid_00000000000dc668
uuid_00000000000dc666:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc663
	jmp uuid_00000000000dc665
uuid_00000000000dc663:
	movb $1, -1048(%rbp)
uuid_00000000000dc665:
	mov -1160(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000dc668:
	mov -1144(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000dc66b:
	mov -1064(%RBP),%RSP
	add $-1256, %RSP
uuid_00000000000dc66e:
	mov -1056(%RBP),%RSP
	add $-1256, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc676
	push %RBP
	jmp uuid_00000000000dc673
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc672
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc675
uuid_00000000000dc673:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc675:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
	jmp uuid_00000000000dc678
uuid_00000000000dc676:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc66f
	movq -1256(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc671
uuid_00000000000dc66f:
	movq -1136(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -184(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc671:
	mov -1264(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dc678:
	mov -944(%RBP),%RSP
	add $-1264, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc679
uuid_00000000000dc67b:
uuid_00000000000dc6be:
	mov -728(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dc6c1
uuid_00000000000dc6bf:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	pushq $4
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000dc6c1:
	mov -600(%RBP),%RSP
	add $-720, %RSP
	jmp uuid_00000000000dc6c4
uuid_00000000000dc6c2:
uuid_00000000000dc6c4:
	mov -488(%RBP),%RSP
	add $-592, %RSP
	jmp uuid_00000000000dc6c7
uuid_00000000000dc6c5:
uuid_00000000000dc6c7:
	mov -408(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000dc6ca
uuid_00000000000dc6c8:
uuid_00000000000dc6ca:
	mov -328(%RBP),%RSP
	add $-400, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
apply_SB_and_SB_specialize_CL_ArrowTypeConsASTConsTypeConsTypeString:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6d5
	jmp uuid_00000000000dc6d7
uuid_00000000000dc6d5:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6d2
	jmp uuid_00000000000dc6d4
uuid_00000000000dc6d2:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc6cf
	jmp uuid_00000000000dc6d1
uuid_00000000000dc6cf:
	movb $1, -240(%rbp)
uuid_00000000000dc6d1:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc6d4:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc6d7:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6fd
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6f0
	jmp uuid_00000000000dc6f2
uuid_00000000000dc6f0:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6e7
	jmp uuid_00000000000dc6e9
uuid_00000000000dc6e7:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6de
	jmp uuid_00000000000dc6e0
uuid_00000000000dc6de:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6db
	jmp uuid_00000000000dc6dd
uuid_00000000000dc6db:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000dc6d8
	jmp uuid_00000000000dc6da
uuid_00000000000dc6d8:
	movb $1, -480(%rbp)
uuid_00000000000dc6da:
	mov -544(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dc6dd:
	mov -496(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dc6e0:
	mov -488(%RBP),%RSP
	add $-568, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6e4
	jmp uuid_00000000000dc6e6
uuid_00000000000dc6e4:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dc6e1
	jmp uuid_00000000000dc6e3
uuid_00000000000dc6e1:
	movb $1, -416(%rbp)
uuid_00000000000dc6e3:
	mov -576(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dc6e6:
	mov -432(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dc6e9:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6ed
	jmp uuid_00000000000dc6ef
uuid_00000000000dc6ed:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6ea
	jmp uuid_00000000000dc6ec
uuid_00000000000dc6ea:
	movb $1, -352(%rbp)
uuid_00000000000dc6ec:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc6ef:
	mov -368(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc6f2:
	mov -360(%RBP),%RSP
	add $-616, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc6fa
	push %RBP
	jmp uuid_00000000000dc6f7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc6f6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc6f9
uuid_00000000000dc6f7:
uuid_00000000000dc6f9:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dc6fc
uuid_00000000000dc6fa:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc6f3
	jmp uuid_00000000000dc6f5
uuid_00000000000dc6f3:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dc6f5:
	mov -624(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000dc6fc:
	mov -320(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dc6ff
uuid_00000000000dc6fd:
#call function + : Arrow<Cons<List<Type>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
#call function apply-plural : Arrow<Cons<Cons<Cons<String,Type>,Type>,AST>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_SB_plural_CL_ArrowListTypeConsASTConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowListTypeConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	push -112(%RSP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dc6ff:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	subq $40, %rsp
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
reduce_SB_plural_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
uuid_00000000000dc718:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc719
	jmp uuid_00000000000dc71a
uuid_00000000000dc719:
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc70e
	jmp uuid_00000000000dc710
uuid_00000000000dc70e:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc70b
	jmp uuid_00000000000dc70d
uuid_00000000000dc70b:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000dc708
	jmp uuid_00000000000dc70a
uuid_00000000000dc708:
	movb $1, -224(%rbp)
uuid_00000000000dc70a:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc70d:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc710:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc715
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc714
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc717
uuid_00000000000dc715:
	push %RBP
#call function is-constructor : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_constructor_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc711
	jmp uuid_00000000000dc713
uuid_00000000000dc711:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dc713:
	mov -320(%RBP),%RSP
	add $-320, %RSP
	movq -280(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -96(%rbp)
uuid_00000000000dc717:
	mov -176(%RBP),%RSP
	add $-320, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc718
uuid_00000000000dc71a:
	push %RBP
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc71b
	jmp uuid_00000000000dc71d
uuid_00000000000dc71b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc71d:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dc744:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc745
	jmp uuid_00000000000dc746
uuid_00000000000dc745:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc724
	jmp uuid_00000000000dc726
uuid_00000000000dc724:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc721
	jmp uuid_00000000000dc723
uuid_00000000000dc721:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dc71e
	jmp uuid_00000000000dc720
uuid_00000000000dc71e:
	movb $1, -232(%rbp)
uuid_00000000000dc720:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dc723:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dc726:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc741
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc740
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc743
uuid_00000000000dc741:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000dc73a:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc73b
	jmp uuid_00000000000dc73c
uuid_00000000000dc73b:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc72d
	jmp uuid_00000000000dc72f
uuid_00000000000dc72d:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc72a
	jmp uuid_00000000000dc72c
uuid_00000000000dc72a:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000dc727
	jmp uuid_00000000000dc729
uuid_00000000000dc727:
	movb $1, -456(%rbp)
uuid_00000000000dc729:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dc72c:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dc72f:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc737
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc736
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc739
uuid_00000000000dc737:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc733
	jmp uuid_00000000000dc735
uuid_00000000000dc733:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc730
	jmp uuid_00000000000dc732
uuid_00000000000dc730:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dc732:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dc735:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000dc739:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc73a
uuid_00000000000dc73c:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc73d
	jmp uuid_00000000000dc73f
uuid_00000000000dc73d:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dc73f:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc743:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc744
uuid_00000000000dc746:
	movq -88(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -80(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -72(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dc76d:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc76e
	jmp uuid_00000000000dc76f
uuid_00000000000dc76e:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc74d
	jmp uuid_00000000000dc74f
uuid_00000000000dc74d:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc74a
	jmp uuid_00000000000dc74c
uuid_00000000000dc74a:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dc747
	jmp uuid_00000000000dc749
uuid_00000000000dc747:
	movb $1, -232(%rbp)
uuid_00000000000dc749:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dc74c:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dc74f:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc76a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc769
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc76c
uuid_00000000000dc76a:
	movq -288(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -8(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
uuid_00000000000dc763:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc764
	jmp uuid_00000000000dc765
uuid_00000000000dc764:
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	push %RBP
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc756
	jmp uuid_00000000000dc758
uuid_00000000000dc756:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc753
	jmp uuid_00000000000dc755
uuid_00000000000dc753:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000dc750
	jmp uuid_00000000000dc752
uuid_00000000000dc750:
	movb $1, -456(%rbp)
uuid_00000000000dc752:
	mov -520(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dc755:
	mov -472(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dc758:
	mov -464(%RBP),%RSP
	add $-544, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc760
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc75f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc762
uuid_00000000000dc760:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc75c
	jmp uuid_00000000000dc75e
uuid_00000000000dc75c:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc759
	jmp uuid_00000000000dc75b
uuid_00000000000dc759:
	pushq $0
	pushq $0
	pushq $3
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dc75b:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dc75e:
	mov -552(%RBP),%RSP
	add $-560, %RSP
	movq -512(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -328(%rbp)
uuid_00000000000dc762:
	mov -408(%RBP),%RSP
	add $-560, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc763
uuid_00000000000dc765:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc766
	jmp uuid_00000000000dc768
uuid_00000000000dc766:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dc768:
	mov -368(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc76c:
	mov -184(%RBP),%RSP
	add $-368, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc76d
uuid_00000000000dc76f:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
apply_SB_or_SB_cons_SB_and_SB_specialize_CL_ArrowTupleTypeTypeConsASTConsTypeConsTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc773
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc770
	jmp uuid_00000000000dc772
uuid_00000000000dc770:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $0
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dc772:
	mov -208(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000dc775
uuid_00000000000dc773:
#call function apply : Arrow<Cons<Cons<Cons<Cons<String,Type>,Type>,U64>,AST>,Tuple<Type,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $1
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowTupleTypeTypeConsASTConsU64ConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
uuid_00000000000dc775:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	subq $56, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
try_SB_specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dc7bc:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7bd
	jmp uuid_00000000000dc7be
uuid_00000000000dc7bd:
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7b9
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	push %RBP
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc782
	jmp uuid_00000000000dc784
uuid_00000000000dc782:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000dc77f
	jmp uuid_00000000000dc781
uuid_00000000000dc77f:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	jmp uuid_00000000000dc77c
	jmp uuid_00000000000dc77e
uuid_00000000000dc77c:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc779
	jmp uuid_00000000000dc77b
uuid_00000000000dc779:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc776
	jmp uuid_00000000000dc778
uuid_00000000000dc776:
	movb $1, -688(%rbp)
uuid_00000000000dc778:
	mov -832(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc77b:
	mov -816(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc77e:
	mov -784(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc781:
	mov -704(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc784:
	mov -696(%RBP),%RSP
	add $-952, %RSP
	mov -688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7b6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc7b5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc7b8
uuid_00000000000dc7b6:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7b2
	jmp uuid_00000000000dc7b4
uuid_00000000000dc7b2:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc785
#call function normalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	jmp uuid_00000000000dc787
uuid_00000000000dc785:
uuid_00000000000dc787:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7af
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7ac
	jmp uuid_00000000000dc7ae
uuid_00000000000dc7ac:
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	push %RBP
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc79a
	jmp uuid_00000000000dc79c
uuid_00000000000dc79a:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc791
	jmp uuid_00000000000dc793
uuid_00000000000dc791:
	push %RBP
	jmp uuid_00000000000dc78e
	jmp uuid_00000000000dc790
uuid_00000000000dc78e:
	push %RBP
	jmp uuid_00000000000dc78b
	jmp uuid_00000000000dc78d
uuid_00000000000dc78b:
	push %RBP
	jmp uuid_00000000000dc788
	jmp uuid_00000000000dc78a
uuid_00000000000dc788:
	movb $1, -1264(%rbp)
uuid_00000000000dc78a:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000dc78d:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000dc790:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000dc793:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc797
	jmp uuid_00000000000dc799
uuid_00000000000dc797:
	push %RBP
	jmp uuid_00000000000dc794
	jmp uuid_00000000000dc796
uuid_00000000000dc794:
	movb $1, -1168(%rbp)
uuid_00000000000dc796:
	mov -1304(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dc799:
	mov -1184(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dc79c:
	mov -1176(%RBP),%RSP
	add $-1304, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7a9
	push %RBP
	jmp uuid_00000000000dc7a6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc7a5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc7a8
uuid_00000000000dc7a6:
uuid_00000000000dc7a8:
	mov -1312(%RBP),%RSP
	add $-1312, %RSP
	jmp uuid_00000000000dc7ab
uuid_00000000000dc7a9:
#call function cons : Arrow<Cons<StackToSpecialize,List<StackToSpecialize>>,List<StackToSpecialize>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dc7ab:
	mov -1088(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dc7ae:
	mov -1008(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000dc7b1
uuid_00000000000dc7af:
uuid_00000000000dc7b1:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dc7b4:
	mov -960(%RBP),%RSP
	add $-1000, %RSP
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -192(%rbp)
uuid_00000000000dc7b8:
	mov -560(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000dc7bb
uuid_00000000000dc7b9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000dc7bb:
	mov -432(%RBP),%RSP
	add $-552, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dc7bc
uuid_00000000000dc7be:
	mov %rbp, %rsp
	sub $184, %rsp
	ret
unify_SB_hint_CL_ArrowTypeConsTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7d7
	jmp uuid_00000000000dc7d9
uuid_00000000000dc7d7:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7c5
	jmp uuid_00000000000dc7c7
uuid_00000000000dc7c5:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc7c2
	jmp uuid_00000000000dc7c4
uuid_00000000000dc7c2:
	push %RBP
	mov -208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc7bf
	jmp uuid_00000000000dc7c1
uuid_00000000000dc7bf:
	movb $1, -232(%rbp)
uuid_00000000000dc7c1:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc7c4:
	mov -248(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc7c7:
	mov -240(%RBP),%RSP
	add $-304, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7d4
	jmp uuid_00000000000dc7d6
uuid_00000000000dc7d4:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7ce
	jmp uuid_00000000000dc7d0
uuid_00000000000dc7ce:
	push %RBP
	mov -328(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc7cb
	jmp uuid_00000000000dc7cd
uuid_00000000000dc7cb:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc7c8
	jmp uuid_00000000000dc7ca
uuid_00000000000dc7c8:
	movb $1, -344(%rbp)
uuid_00000000000dc7ca:
	mov -408(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc7cd:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc7d0:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7d1
	jmp uuid_00000000000dc7d3
uuid_00000000000dc7d1:
	movb $1, -184(%rbp)
uuid_00000000000dc7d3:
	mov -312(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc7d6:
	mov -200(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dc7d9:
	mov -192(%RBP),%RSP
	add $-416, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7f6
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7ec
	jmp uuid_00000000000dc7ee
uuid_00000000000dc7ec:
	push %RBP
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7e3
	jmp uuid_00000000000dc7e5
uuid_00000000000dc7e3:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc7e0
	jmp uuid_00000000000dc7e2
uuid_00000000000dc7e0:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc7dd
	jmp uuid_00000000000dc7df
uuid_00000000000dc7dd:
	movb $1, -536(%rbp)
uuid_00000000000dc7df:
	mov -584(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dc7e2:
	mov -552(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dc7e5:
	mov -544(%RBP),%RSP
	add $-608, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7e9
	jmp uuid_00000000000dc7eb
uuid_00000000000dc7e9:
	push %RBP
	jmp uuid_00000000000dc7e6
	jmp uuid_00000000000dc7e8
uuid_00000000000dc7e6:
	movb $1, -488(%rbp)
uuid_00000000000dc7e8:
	mov -616(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc7eb:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dc7ee:
	mov -496(%RBP),%RSP
	add $-616, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc7f3
	push %RBP
	jmp uuid_00000000000dc7f0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc7ef
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc7f2
uuid_00000000000dc7f0:
uuid_00000000000dc7f2:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dc7f5
uuid_00000000000dc7f3:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000dc7f5:
	mov -424(%RBP),%RSP
	add $-616, %RSP
	jmp uuid_00000000000dc7f8
uuid_00000000000dc7f6:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -416(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc7da
	pushq -304(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	jmp uuid_00000000000dc7dc
uuid_00000000000dc7da:
	movq -24(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000dc7dc:
	mov -424(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dc7f8:
	mov -120(%RBP),%RSP
	add $-424, %RSP
	subq $24, %rsp
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
unify_SB_hint_CL_ArrowListTypeConsListTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc80d
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc803
	jmp uuid_00000000000dc805
uuid_00000000000dc803:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc800
	jmp uuid_00000000000dc802
uuid_00000000000dc800:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	jmp uuid_00000000000dc7fd
	jmp uuid_00000000000dc7ff
uuid_00000000000dc7fd:
	movb $1, -216(%rbp)
uuid_00000000000dc7ff:
	mov -280(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc802:
	mov -232(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dc805:
	mov -224(%RBP),%RSP
	add $-304, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc80a
	push %RBP
	jmp uuid_00000000000dc807
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc806
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc809
uuid_00000000000dc807:
uuid_00000000000dc809:
	mov -312(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dc80c
uuid_00000000000dc80a:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function unify-hint : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function unify-hint : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call unify_SB_hint_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000dc80c:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000dc80f
uuid_00000000000dc80d:
uuid_00000000000dc80f:
	mov -120(%RBP),%RSP
	add $-160, %RSP
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType:
#call function mark-class-exists : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_class_SB_exists_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-is-lm-struct : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_is_SB_lm_SB_struct_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc829
	jmp uuid_00000000000dc82b
uuid_00000000000dc829:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc826
	jmp uuid_00000000000dc828
uuid_00000000000dc826:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc820
	jmp uuid_00000000000dc822
uuid_00000000000dc820:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc817
	jmp uuid_00000000000dc819
uuid_00000000000dc817:
	push %RBP
	jmp uuid_00000000000dc814
	jmp uuid_00000000000dc816
uuid_00000000000dc814:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000dc810
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc811
	jmp uuid_00000000000dc813
uuid_00000000000dc811:
	movb $1, -552(%rbp)
uuid_00000000000dc813:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dc816:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dc819:
	mov -560(%RBP),%RSP
	add $-584, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc81d
	jmp uuid_00000000000dc81f
uuid_00000000000dc81d:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc81a
	jmp uuid_00000000000dc81c
uuid_00000000000dc81a:
	movb $1, -456(%rbp)
uuid_00000000000dc81c:
	mov -592(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dc81f:
	mov -472(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dc822:
	mov -464(%RBP),%RSP
	add $-664, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc823
	jmp uuid_00000000000dc825
uuid_00000000000dc823:
	movb $1, -280(%rbp)
uuid_00000000000dc825:
	mov -376(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dc828:
	mov -296(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dc82b:
	mov -288(%RBP),%RSP
	add $-664, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc868
	push %RBP
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	jmp uuid_00000000000dc865
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc864
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc867
uuid_00000000000dc865:
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
	push %RBP
	mov -104(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc861
	jmp uuid_00000000000dc863
uuid_00000000000dc861:
	pushq $uuid_00000000000dab3d
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc832
	jmp uuid_00000000000dc834
uuid_00000000000dc832:
	push %RBP
	jmp uuid_00000000000dc82f
	jmp uuid_00000000000dc831
uuid_00000000000dc82f:
	push %RBP
	mov -848(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc82c
	jmp uuid_00000000000dc82e
uuid_00000000000dc82c:
	movb $1, -920(%rbp)
uuid_00000000000dc82e:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc831:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dc834:
	mov -928(%RBP),%RSP
	add $-952, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc84e
	push %RBP
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc844
	jmp uuid_00000000000dc846
uuid_00000000000dc844:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc841
	jmp uuid_00000000000dc843
uuid_00000000000dc841:
	push %RBP
	mov -1016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc83b
	jmp uuid_00000000000dc83d
uuid_00000000000dc83b:
	push %RBP
	jmp uuid_00000000000dc838
	jmp uuid_00000000000dc83a
uuid_00000000000dc838:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc835
	jmp uuid_00000000000dc837
uuid_00000000000dc835:
	movb $1, -1216(%rbp)
uuid_00000000000dc837:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc83a:
	mov -1232(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc83d:
	mov -1224(%RBP),%RSP
	add $-1248, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc83e
	jmp uuid_00000000000dc840
uuid_00000000000dc83e:
	movb $1, -1040(%rbp)
uuid_00000000000dc840:
	mov -1136(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc843:
	mov -1056(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000dc846:
	mov -1048(%RBP),%RSP
	add $-1248, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc84b
	push %RBP
	jmp uuid_00000000000dc848
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc847
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc84a
uuid_00000000000dc848:
uuid_00000000000dc84a:
	mov -1256(%RBP),%RSP
	add $-1256, %RSP
	jmp uuid_00000000000dc84d
uuid_00000000000dc84b:
	movq -1248(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -1248(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000dc84d:
	mov -960(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000dc850
uuid_00000000000dc84e:
	movq -952(%rbp), %r15
	movq %r15, -760(%rbp)
	mov -952(%rbp), %r15
	mov %r15, -760(%rbp)
uuid_00000000000dc850:
	mov -840(%RBP),%RSP
	add $-952, %RSP
	push %RBP
	mov -760(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dc85e
	jmp uuid_00000000000dc860
uuid_00000000000dc85e:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc857
	jmp uuid_00000000000dc859
uuid_00000000000dc857:
	push %RBP
	jmp uuid_00000000000dc854
	jmp uuid_00000000000dc856
uuid_00000000000dc854:
	push %RBP
	mov -1000(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc851
	jmp uuid_00000000000dc853
uuid_00000000000dc851:
	movb $1, -1024(%rbp)
uuid_00000000000dc853:
	mov -1048(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dc856:
	mov -1040(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dc859:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc85b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc85a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc85d
uuid_00000000000dc85b:
#call function has-only-child : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1056(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call has_SB_only_SB_child_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc85d:
	mov -992(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dc860:
	mov -960(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dc863:
	mov -752(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000dc867:
	mov -672(%RBP),%RSP
	add $-1056, %RSP
	jmp uuid_00000000000dc86a
uuid_00000000000dc868:
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function infer-type-constructor : Arrow<Cons<Type,AST>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -120(%rbp)
uuid_00000000000dc86a:
	mov -200(%RBP),%RSP
	add $-680, %RSP
	mov -120(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
arity_CL_ArrowU64ListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc87c
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc875
	jmp uuid_00000000000dc877
uuid_00000000000dc875:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc872
	jmp uuid_00000000000dc874
uuid_00000000000dc872:
	push %RBP
	jmp uuid_00000000000dc86f
	jmp uuid_00000000000dc871
uuid_00000000000dc86f:
	movb $1, -200(%rbp)
uuid_00000000000dc871:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc874:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dc877:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc879
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc878
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc87b
uuid_00000000000dc879:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000dc87b:
	mov -152(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dc87e
uuid_00000000000dc87c:
uuid_00000000000dc87e:
	mov -104(%RBP),%RSP
	add $-144, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
arity_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc885
	jmp uuid_00000000000dc887
uuid_00000000000dc885:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc882
	jmp uuid_00000000000dc884
uuid_00000000000dc882:
	push %RBP
	jmp uuid_00000000000dc87f
	jmp uuid_00000000000dc881
uuid_00000000000dc87f:
	movb $1, -104(%rbp)
uuid_00000000000dc881:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc884:
	mov -120(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dc887:
	mov -112(%RBP),%RSP
	add $-168, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc88c
	push %RBP
	jmp uuid_00000000000dc889
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc888
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc88b
uuid_00000000000dc889:
uuid_00000000000dc88b:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000dc88e
uuid_00000000000dc88c:
#call function arity : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -40(%rbp)
uuid_00000000000dc88e:
	mov -72(%RBP),%RSP
	add $-168, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_SB_arity_CL_ArrowU64Type:
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8a7
	jmp uuid_00000000000dc8a9
uuid_00000000000dc8a7:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc89e
	jmp uuid_00000000000dc8a0
uuid_00000000000dc89e:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc895
	jmp uuid_00000000000dc897
uuid_00000000000dc895:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc892
	jmp uuid_00000000000dc894
uuid_00000000000dc892:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dc88f
	jmp uuid_00000000000dc891
uuid_00000000000dc88f:
	movb $1, -232(%rbp)
uuid_00000000000dc891:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dc894:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dc897:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc89b
	jmp uuid_00000000000dc89d
uuid_00000000000dc89b:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	jmp uuid_00000000000dc898
	jmp uuid_00000000000dc89a
uuid_00000000000dc898:
	movb $1, -168(%rbp)
uuid_00000000000dc89a:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dc89d:
	mov -184(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dc8a0:
	mov -176(%RBP),%RSP
	add $-352, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8a4
	jmp uuid_00000000000dc8a6
uuid_00000000000dc8a4:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8a1
	jmp uuid_00000000000dc8a3
uuid_00000000000dc8a1:
	movb $1, -104(%rbp)
uuid_00000000000dc8a3:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc8a6:
	mov -120(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dc8a9:
	mov -112(%RBP),%RSP
	add $-368, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8ae
	push %RBP
	jmp uuid_00000000000dc8ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc8aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc8ad
uuid_00000000000dc8ab:
uuid_00000000000dc8ad:
	mov -376(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dc8b0
uuid_00000000000dc8ae:
#call function cons-arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call cons_SB_arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dc8b0:
	mov -72(%RBP),%RSP
	add $-368, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
parse_SB_field_SB_of_CL_ArrowTupleTypeStringString:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $uuid_00000000000dab3d
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dc8b4:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8b5
	jmp uuid_00000000000dc8b6
uuid_00000000000dc8b5:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8b1
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000dc8b3
uuid_00000000000dc8b1:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -48(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	inc %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	movq $uuid_00000000000dab3d, -8(%rbp)
uuid_00000000000dc8b3:
	mov -80(%RBP),%RSP
	add $-80, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc8b4
uuid_00000000000dc8b6:
	pushq -48(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	subq $40, %rsp
	pushq 40(%rsp)
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
implicit_SB_tail_CL_ArrowTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8cf
	jmp uuid_00000000000dc8d1
uuid_00000000000dc8cf:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8c6
	jmp uuid_00000000000dc8c8
uuid_00000000000dc8c6:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8bd
	jmp uuid_00000000000dc8bf
uuid_00000000000dc8bd:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8ba
	jmp uuid_00000000000dc8bc
uuid_00000000000dc8ba:
	push %RBP
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	jmp uuid_00000000000dc8b7
	jmp uuid_00000000000dc8b9
uuid_00000000000dc8b7:
	movb $1, -224(%rbp)
uuid_00000000000dc8b9:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc8bc:
	mov -240(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dc8bf:
	mov -232(%RBP),%RSP
	add $-312, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8c3
	jmp uuid_00000000000dc8c5
uuid_00000000000dc8c3:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000dc8c0
	jmp uuid_00000000000dc8c2
uuid_00000000000dc8c0:
	movb $1, -160(%rbp)
uuid_00000000000dc8c2:
	mov -320(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc8c5:
	mov -176(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000dc8c8:
	mov -168(%RBP),%RSP
	add $-344, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8cc
	jmp uuid_00000000000dc8ce
uuid_00000000000dc8cc:
	push %RBP
	mov -72(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8c9
	jmp uuid_00000000000dc8cb
uuid_00000000000dc8c9:
	movb $1, -96(%rbp)
uuid_00000000000dc8cb:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc8ce:
	mov -112(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dc8d1:
	mov -104(%RBP),%RSP
	add $-360, %RSP
	mov -96(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8d6
	push %RBP
	jmp uuid_00000000000dc8d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc8d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc8d5
uuid_00000000000dc8d3:
uuid_00000000000dc8d5:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000dc8d8
uuid_00000000000dc8d6:
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc8d8:
	mov -64(%RBP),%RSP
	add $-360, %RSP
	subq $24, %rsp
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
typeof_SB_var_CL_ArrowTypeConsStringConsTContextAST:
#call function typeof-var-raw : Arrow<Cons<Cons<AST,TContext>,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8da
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc8d9
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc8dc
uuid_00000000000dc8da:
uuid_00000000000dc8dc:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typeof_SB_var_SB_raw_CL_ArrowTypeConsStringConsTContextAST:
#call function find-alias-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000dc8ff:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc900
	jmp uuid_00000000000dc901
uuid_00000000000dc900:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8fc
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8e9
	jmp uuid_00000000000dc8eb
uuid_00000000000dc8e9:
	push %RBP
	jmp uuid_00000000000dc8e6
	jmp uuid_00000000000dc8e8
uuid_00000000000dc8e6:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	jmp uuid_00000000000dc8e3
	jmp uuid_00000000000dc8e5
uuid_00000000000dc8e3:
	push %RBP
	mov -504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc8e0
	jmp uuid_00000000000dc8e2
uuid_00000000000dc8e0:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc8dd
	jmp uuid_00000000000dc8df
uuid_00000000000dc8dd:
	movb $1, -616(%rbp)
uuid_00000000000dc8df:
	mov -688(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc8e2:
	mov -672(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc8e5:
	mov -640(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc8e8:
	mov -632(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dc8eb:
	mov -624(%RBP),%RSP
	add $-808, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc8f9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc8f8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc8fb
uuid_00000000000dc8f9:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8f5
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
	jmp uuid_00000000000dc8f7
uuid_00000000000dc8f5:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8ef
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000dc8f1
uuid_00000000000dc8ef:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8ec
	movq -664(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -216(%rbp)
	jmp uuid_00000000000dc8ee
uuid_00000000000dc8ec:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
uuid_00000000000dc8ee:
	mov -832(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dc8f1:
	mov -824(%RBP),%RSP
	add $-832, %RSP
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc8f2
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	jmp uuid_00000000000dc8f4
uuid_00000000000dc8f2:
	movq -808(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -80(%rbp)
uuid_00000000000dc8f4:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc8f7:
	mov -816(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dc8fb:
	mov -488(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dc8fe
uuid_00000000000dc8fc:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
uuid_00000000000dc8fe:
	mov -360(%RBP),%RSP
	add $-480, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dc8ff
uuid_00000000000dc901:
	subq $24, %rsp
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
typecheck_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000dc90f:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc910
	jmp uuid_00000000000dc911
uuid_00000000000dc910:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc908
	jmp uuid_00000000000dc90a
uuid_00000000000dc908:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc905
	jmp uuid_00000000000dc907
uuid_00000000000dc905:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc902
	jmp uuid_00000000000dc904
uuid_00000000000dc902:
	movb $1, -312(%rbp)
uuid_00000000000dc904:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dc907:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dc90a:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc90c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc90b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc90e
uuid_00000000000dc90c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dc90e:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc90f
uuid_00000000000dc911:
uuid_00000000000dc91f:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc920
	jmp uuid_00000000000dc921
uuid_00000000000dc920:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc918
	jmp uuid_00000000000dc91a
uuid_00000000000dc918:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc915
	jmp uuid_00000000000dc917
uuid_00000000000dc915:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc912
	jmp uuid_00000000000dc914
uuid_00000000000dc912:
	movb $1, -312(%rbp)
uuid_00000000000dc914:
	mov -408(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dc917:
	mov -328(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dc91a:
	mov -320(%RBP),%RSP
	add $-480, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc91c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc91b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc91e
uuid_00000000000dc91c:
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -480(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dc91e:
	mov -232(%RBP),%RSP
	add $-480, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc91f
uuid_00000000000dc921:
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc94e:
#call function non-zero : Arrow<List<StackToSpecialize>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc94f
	jmp uuid_00000000000dc950
uuid_00000000000dc94f:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc947
	jmp uuid_00000000000dc949
uuid_00000000000dc947:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc944
	jmp uuid_00000000000dc946
uuid_00000000000dc944:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc93e
	jmp uuid_00000000000dc940
uuid_00000000000dc93e:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000dc93b
	jmp uuid_00000000000dc93d
uuid_00000000000dc93b:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000dc938
	jmp uuid_00000000000dc93a
uuid_00000000000dc938:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000dc935
	jmp uuid_00000000000dc937
uuid_00000000000dc935:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc932
	jmp uuid_00000000000dc934
uuid_00000000000dc932:
	movb $1, -984(%rbp)
uuid_00000000000dc934:
	mov -1192(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc937:
	mov -1160(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc93a:
	mov -1032(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc93d:
	mov -1000(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc940:
	mov -992(%RBP),%RSP
	add $-1200, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc941
	jmp uuid_00000000000dc943
uuid_00000000000dc941:
	movb $1, -568(%rbp)
uuid_00000000000dc943:
	mov -792(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc946:
	mov -584(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000dc949:
	mov -576(%RBP),%RSP
	add $-1200, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc94b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc94a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc94d
uuid_00000000000dc94b:
	mov $stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize, %r14
	movq -784(%rbp), %r15
	movq %r15, 0(%r14)
	movq -776(%rbp), %r15
	movq %r15, 8(%r14)
	movq -768(%rbp), %r15
	movq %r15, 16(%r14)
	movq -760(%rbp), %r15
	movq %r15, 24(%r14)
	movq -752(%rbp), %r15
	movq %r15, 32(%r14)
	movq -744(%rbp), %r15
	movq %r15, 40(%r14)
	movq -736(%rbp), %r15
	movq %r15, 48(%r14)
	movq -728(%rbp), %r15
	movq %r15, 56(%r14)
	movq -720(%rbp), %r15
	movq %r15, 64(%r14)
	movq -712(%rbp), %r15
	movq %r15, 72(%r14)
	movq -704(%rbp), %r15
	movq %r15, 80(%r14)
	movq -696(%rbp), %r15
	movq %r15, 88(%r14)
	movq -688(%rbp), %r15
	movq %r15, 96(%r14)
	movq -680(%rbp), %r15
	movq %r15, 104(%r14)
	movq -672(%rbp), %r15
	movq %r15, 112(%r14)
	movq -664(%rbp), %r15
	movq %r15, 120(%r14)
	movq -656(%rbp), %r15
	movq %r15, 128(%r14)
	movq -648(%rbp), %r15
	movq %r15, 136(%r14)
	movq -640(%rbp), %r15
	movq %r15, 144(%r14)
	movq -632(%rbp), %r15
	movq %r15, 152(%r14)
	movq -624(%rbp), %r15
	movq %r15, 160(%r14)
	movq -616(%rbp), %r15
	movq %r15, 168(%r14)
	movq -608(%rbp), %r15
	movq %r15, 176(%r14)
	movq -600(%rbp), %r15
	movq %r15, 184(%r14)
	movq -592(%rbp), %r15
	movq %r15, 192(%r14)
#call function specialize : Arrow<Cons<Cons<Cons<String,Type>,TContext>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1200(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call specialize_CL_ArrowNilConsTypeConsTContextConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dc94d:
	mov -360(%RBP),%RSP
	add $-1200, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $200, %rsp
	add $184, %rsp
	add $8, %rsp
	add $24, %rsp
	add $120, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dc94e
uuid_00000000000dc950:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_CL_ArrowTokenConsTokenContext:
	mov -104(%RBP), %RAX
	push %RAX
uuid_00000000000dc99a:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc99b
	jmp uuid_00000000000dc99c
uuid_00000000000dc99b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc997
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc963
	jmp uuid_00000000000dc965
uuid_00000000000dc963:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq $0
	push %RBP
	mov -568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc957
	jmp uuid_00000000000dc959
uuid_00000000000dc957:
	push %RBP
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000dc954
	jmp uuid_00000000000dc956
uuid_00000000000dc954:
	push %RBP
	jmp uuid_00000000000dc951
	jmp uuid_00000000000dc953
uuid_00000000000dc951:
	movb $1, -576(%rbp)
uuid_00000000000dc953:
	mov -656(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dc956:
	mov -592(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dc959:
	mov -584(%RBP),%RSP
	add $-656, %RSP
	mov -576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc960
	jmp uuid_00000000000dc962
uuid_00000000000dc960:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc95d
	jmp uuid_00000000000dc95f
uuid_00000000000dc95d:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc95a
	jmp uuid_00000000000dc95c
uuid_00000000000dc95a:
	movb $1, -480(%rbp)
uuid_00000000000dc95c:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dc95f:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dc962:
	mov -496(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dc965:
	mov -488(%RBP),%RSP
	add $-776, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc994
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc97b
	jmp uuid_00000000000dc97d
uuid_00000000000dc97b:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc96f
	jmp uuid_00000000000dc971
uuid_00000000000dc96f:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000dc96c
	jmp uuid_00000000000dc96e
uuid_00000000000dc96c:
	push %RBP
	jmp uuid_00000000000dc969
	jmp uuid_00000000000dc96b
uuid_00000000000dc969:
	movb $1, -984(%rbp)
uuid_00000000000dc96b:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dc96e:
	mov -1000(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dc971:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc978
	jmp uuid_00000000000dc97a
uuid_00000000000dc978:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc975
	jmp uuid_00000000000dc977
uuid_00000000000dc975:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc972
	jmp uuid_00000000000dc974
uuid_00000000000dc972:
	movb $1, -888(%rbp)
uuid_00000000000dc974:
	mov -1088(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000dc977:
	mov -1072(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000dc97a:
	mov -904(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000dc97d:
	mov -896(%RBP),%RSP
	add $-1184, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc991
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc98a
	jmp uuid_00000000000dc98c
uuid_00000000000dc98a:
	push %RBP
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	jmp uuid_00000000000dc987
	jmp uuid_00000000000dc989
uuid_00000000000dc987:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc984
	jmp uuid_00000000000dc986
uuid_00000000000dc984:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc981
	jmp uuid_00000000000dc983
uuid_00000000000dc981:
	movb $1, -1296(%rbp)
uuid_00000000000dc983:
	mov -1408(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dc986:
	mov -1392(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dc989:
	mov -1312(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dc98c:
	mov -1304(%RBP),%RSP
	add $-1504, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc98e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc98d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc990
uuid_00000000000dc98e:
	movq -1504(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dc990:
	mov -1192(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000dc993
uuid_00000000000dc991:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc97e
	movq -1184(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc980
uuid_00000000000dc97e:
	movq -1056(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc980:
	mov -1192(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000dc993:
	mov -784(%RBP),%RSP
	add $-1192, %RSP
	jmp uuid_00000000000dc996
uuid_00000000000dc994:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc966
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc968
uuid_00000000000dc966:
	movq -648(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -104(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc968:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dc996:
	mov -376(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dc999
uuid_00000000000dc997:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc999:
	mov -272(%RBP),%RSP
	add $-368, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000dc99a
uuid_00000000000dc99c:
	subq $56, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $160, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ae
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9a7
	jmp uuid_00000000000dc9a9
uuid_00000000000dc9a7:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9a4
	jmp uuid_00000000000dc9a6
uuid_00000000000dc9a4:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000dc9a1
	jmp uuid_00000000000dc9a3
uuid_00000000000dc9a1:
	movb $1, -312(%rbp)
uuid_00000000000dc9a3:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dc9a6:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dc9a9:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ab
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc9aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc9ad
uuid_00000000000dc9ab:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dc9ad:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dc9b0
uuid_00000000000dc9ae:
uuid_00000000000dc9b0:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $40, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
substitute_CL_ArrowTypeConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9b4
	jmp uuid_00000000000dc9b6
uuid_00000000000dc9b4:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc9b1
	jmp uuid_00000000000dc9b3
uuid_00000000000dc9b1:
	movb $1, -216(%rbp)
uuid_00000000000dc9b3:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dc9b6:
	mov -224(%RBP),%RSP
	add $-240, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ef
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9d9
	jmp uuid_00000000000dc9db
uuid_00000000000dc9d9:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9d6
	jmp uuid_00000000000dc9d8
uuid_00000000000dc9d6:
	push %RBP
	mov -256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc9d3
	jmp uuid_00000000000dc9d5
uuid_00000000000dc9d3:
	movb $1, -280(%rbp)
uuid_00000000000dc9d5:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dc9d8:
	mov -296(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dc9db:
	mov -288(%RBP),%RSP
	add $-352, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ec
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9e2
	jmp uuid_00000000000dc9e4
uuid_00000000000dc9e2:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9df
	jmp uuid_00000000000dc9e1
uuid_00000000000dc9df:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9dc
	jmp uuid_00000000000dc9de
uuid_00000000000dc9dc:
	movb $1, -392(%rbp)
uuid_00000000000dc9de:
	mov -440(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dc9e1:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000dc9e4:
	mov -400(%RBP),%RSP
	add $-464, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9e9
	push %RBP
	jmp uuid_00000000000dc9e6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc9e5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc9e8
uuid_00000000000dc9e6:
uuid_00000000000dc9e8:
	mov -472(%RBP),%RSP
	add $-472, %RSP
	jmp uuid_00000000000dc9eb
uuid_00000000000dc9e9:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dc9eb:
	mov -360(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000dc9ee
uuid_00000000000dc9ec:
	pushq -352(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dc9ee:
	mov -248(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dc9f1
uuid_00000000000dc9ef:
uuid_00000000000dc9d0:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc9d1
	jmp uuid_00000000000dc9d2
uuid_00000000000dc9d1:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9cd
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9c3
	jmp uuid_00000000000dc9c5
uuid_00000000000dc9c3:
	push %RBP
	jmp uuid_00000000000dc9c0
	jmp uuid_00000000000dc9c2
uuid_00000000000dc9c0:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000dc9bd
	jmp uuid_00000000000dc9bf
uuid_00000000000dc9bd:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dc9ba
	jmp uuid_00000000000dc9bc
uuid_00000000000dc9ba:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9b7
	jmp uuid_00000000000dc9b9
uuid_00000000000dc9b7:
	movb $1, -624(%rbp)
uuid_00000000000dc9b9:
	mov -696(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc9bc:
	mov -680(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc9bf:
	mov -648(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc9c2:
	mov -640(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dc9c5:
	mov -632(%RBP),%RSP
	add $-816, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9ca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc9c9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dc9cc
uuid_00000000000dc9ca:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dc9c6
	movq -816(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dc9c8
uuid_00000000000dc9c6:
	movq -672(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -128(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc9c8:
	mov -824(%RBP),%RSP
	add $-824, %RSP
uuid_00000000000dc9cc:
	mov -496(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000dc9cf
uuid_00000000000dc9cd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dc9cf:
	mov -368(%RBP),%RSP
	add $-488, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dc9d0
uuid_00000000000dc9d2:
uuid_00000000000dc9f1:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	subq $24, %rsp
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
substitute_CL_ArrowListTypeConsListTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca03
	push %RBP
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dc9fc
	jmp uuid_00000000000dc9fe
uuid_00000000000dc9fc:
	push %RBP
	mov -272(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dc9f9
	jmp uuid_00000000000dc9fb
uuid_00000000000dc9f9:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000dc9f6
	jmp uuid_00000000000dc9f8
uuid_00000000000dc9f6:
	movb $1, -288(%rbp)
uuid_00000000000dc9f8:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc9fb:
	mov -304(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dc9fe:
	mov -296(%RBP),%RSP
	add $-376, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca00
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dc9ff
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dca02
uuid_00000000000dca00:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000dca02:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000dca05
uuid_00000000000dca03:
uuid_00000000000dca05:
	mov -192(%RBP),%RSP
	add $-232, %RSP
	subq $40, %rsp
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $144, %rsp
	ret
substitute_CL_ArrowTypeConsTypeContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca09
	jmp uuid_00000000000dca0b
uuid_00000000000dca09:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca06
	jmp uuid_00000000000dca08
uuid_00000000000dca06:
	movb $1, -192(%rbp)
uuid_00000000000dca08:
	mov -208(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000dca0b:
	mov -200(%RBP),%RSP
	add $-216, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca74
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca5e
	jmp uuid_00000000000dca60
uuid_00000000000dca5e:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca5b
	jmp uuid_00000000000dca5d
uuid_00000000000dca5b:
	push %RBP
	mov -232(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca58
	jmp uuid_00000000000dca5a
uuid_00000000000dca58:
	movb $1, -256(%rbp)
uuid_00000000000dca5a:
	mov -320(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dca5d:
	mov -272(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dca60:
	mov -264(%RBP),%RSP
	add $-328, %RSP
	mov -256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca71
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca67
	jmp uuid_00000000000dca69
uuid_00000000000dca67:
	push %RBP
	mov -352(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca64
	jmp uuid_00000000000dca66
uuid_00000000000dca64:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca61
	jmp uuid_00000000000dca63
uuid_00000000000dca61:
	movb $1, -368(%rbp)
uuid_00000000000dca63:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dca66:
	mov -384(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000dca69:
	mov -376(%RBP),%RSP
	add $-440, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca6e
	push %RBP
	jmp uuid_00000000000dca6b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dca6a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dca6d
uuid_00000000000dca6b:
uuid_00000000000dca6d:
	mov -448(%RBP),%RSP
	add $-448, %RSP
	jmp uuid_00000000000dca70
uuid_00000000000dca6e:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000dca70:
	mov -336(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000dca73
uuid_00000000000dca71:
	pushq -328(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<Context,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowListTypeConsListTypeContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	push -168(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
uuid_00000000000dca73:
	mov -224(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000dca76
uuid_00000000000dca74:
uuid_00000000000dca55:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca56
	jmp uuid_00000000000dca57
uuid_00000000000dca56:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca52
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca1e
	jmp uuid_00000000000dca20
uuid_00000000000dca1e:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca12
	jmp uuid_00000000000dca14
uuid_00000000000dca12:
	push %RBP
	jmp uuid_00000000000dca0f
	jmp uuid_00000000000dca11
uuid_00000000000dca0f:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca0c
	jmp uuid_00000000000dca0e
uuid_00000000000dca0c:
	movb $1, -624(%rbp)
uuid_00000000000dca0e:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dca11:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dca14:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca1b
	jmp uuid_00000000000dca1d
uuid_00000000000dca1b:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca18
	jmp uuid_00000000000dca1a
uuid_00000000000dca18:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca15
	jmp uuid_00000000000dca17
uuid_00000000000dca15:
	movb $1, -528(%rbp)
uuid_00000000000dca17:
	mov -680(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dca1a:
	mov -664(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dca1d:
	mov -544(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dca20:
	mov -536(%RBP),%RSP
	add $-776, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca4f
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca36
	jmp uuid_00000000000dca38
uuid_00000000000dca36:
	push %RBP
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca2a
	jmp uuid_00000000000dca2c
uuid_00000000000dca2a:
	push %RBP
	jmp uuid_00000000000dca27
	jmp uuid_00000000000dca29
uuid_00000000000dca27:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca24
	jmp uuid_00000000000dca26
uuid_00000000000dca24:
	movb $1, -984(%rbp)
uuid_00000000000dca26:
	mov -1008(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000dca29:
	mov -1000(%RBP),%RSP
	add $-1016, %RSP
uuid_00000000000dca2c:
	mov -992(%RBP),%RSP
	add $-1016, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca33
	jmp uuid_00000000000dca35
uuid_00000000000dca33:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca30
	jmp uuid_00000000000dca32
uuid_00000000000dca30:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca2d
	jmp uuid_00000000000dca2f
uuid_00000000000dca2d:
	movb $1, -888(%rbp)
uuid_00000000000dca2f:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dca32:
	mov -1024(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dca35:
	mov -904(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000dca38:
	mov -896(%RBP),%RSP
	add $-1136, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca4c
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -1240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca45
	jmp uuid_00000000000dca47
uuid_00000000000dca45:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	jmp uuid_00000000000dca42
	jmp uuid_00000000000dca44
uuid_00000000000dca42:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca3f
	jmp uuid_00000000000dca41
uuid_00000000000dca3f:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dca3c
	jmp uuid_00000000000dca3e
uuid_00000000000dca3c:
	movb $1, -1248(%rbp)
uuid_00000000000dca3e:
	mov -1360(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dca41:
	mov -1344(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dca44:
	mov -1264(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dca47:
	mov -1256(%RBP),%RSP
	add $-1456, %RSP
	mov -1248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca49
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dca48
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dca4b
uuid_00000000000dca49:
	movq -1456(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dca4b:
	mov -1144(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000dca4e
uuid_00000000000dca4c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca39
	movq -1136(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dca3b
uuid_00000000000dca39:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dca3b:
	mov -1144(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dca4e:
	mov -784(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000dca51
uuid_00000000000dca4f:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca21
	movq -776(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dca23
uuid_00000000000dca21:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dca23:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dca51:
	mov -424(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dca54
uuid_00000000000dca52:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dca54:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	jmp uuid_00000000000dca55
uuid_00000000000dca57:
uuid_00000000000dca76:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	subq $24, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $128, %rsp
	ret
substitute_SB_lhs_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaa7
	jmp uuid_00000000000dcaa9
uuid_00000000000dcaa7:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca9e
	jmp uuid_00000000000dcaa0
uuid_00000000000dca9e:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca8c
	jmp uuid_00000000000dca8e
uuid_00000000000dca8c:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca7a
	jmp uuid_00000000000dca7c
uuid_00000000000dca7a:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000dca77
	jmp uuid_00000000000dca79
uuid_00000000000dca77:
	movb $1, -648(%rbp)
uuid_00000000000dca79:
	mov -664(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dca7c:
	mov -656(%RBP),%RSP
	add $-688, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca89
	jmp uuid_00000000000dca8b
uuid_00000000000dca89:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca83
	jmp uuid_00000000000dca85
uuid_00000000000dca83:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	jmp uuid_00000000000dca80
	jmp uuid_00000000000dca82
uuid_00000000000dca80:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dca7d
	jmp uuid_00000000000dca7f
uuid_00000000000dca7d:
	movb $1, -776(%rbp)
uuid_00000000000dca7f:
	mov -856(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dca82:
	mov -792(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dca85:
	mov -784(%RBP),%RSP
	add $-864, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca86
	jmp uuid_00000000000dca88
uuid_00000000000dca86:
	movb $1, -552(%rbp)
uuid_00000000000dca88:
	mov -696(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dca8b:
	mov -568(%RBP),%RSP
	add $-864, %RSP
uuid_00000000000dca8e:
	mov -560(%RBP),%RSP
	add $-864, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca9b
	jmp uuid_00000000000dca9d
uuid_00000000000dca9b:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dca95
	jmp uuid_00000000000dca97
uuid_00000000000dca95:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000dca92
	jmp uuid_00000000000dca94
uuid_00000000000dca92:
	push %RBP
	mov -880(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dca8f
	jmp uuid_00000000000dca91
uuid_00000000000dca8f:
	movb $1, -952(%rbp)
uuid_00000000000dca91:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dca94:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dca97:
	mov -960(%RBP),%RSP
	add $-1040, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dca98
	jmp uuid_00000000000dca9a
uuid_00000000000dca98:
	movb $1, -456(%rbp)
uuid_00000000000dca9a:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dca9d:
	mov -472(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dcaa0:
	mov -464(%RBP),%RSP
	add $-1040, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaa4
	jmp uuid_00000000000dcaa6
uuid_00000000000dcaa4:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcaa1
	jmp uuid_00000000000dcaa3
uuid_00000000000dcaa1:
	movb $1, -360(%rbp)
uuid_00000000000dcaa3:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000dcaa6:
	mov -376(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000dcaa9:
	mov -368(%RBP),%RSP
	add $-1120, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb00
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcad1
	jmp uuid_00000000000dcad3
uuid_00000000000dcad1:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcabf
	jmp uuid_00000000000dcac1
uuid_00000000000dcabf:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaad
	jmp uuid_00000000000dcaaf
uuid_00000000000dcaad:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000dcaaa
	jmp uuid_00000000000dcaac
uuid_00000000000dcaaa:
	movb $1, -1400(%rbp)
uuid_00000000000dcaac:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000dcaaf:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcabc
	jmp uuid_00000000000dcabe
uuid_00000000000dcabc:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcab6
	jmp uuid_00000000000dcab8
uuid_00000000000dcab6:
	push %RBP
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	jmp uuid_00000000000dcab3
	jmp uuid_00000000000dcab5
uuid_00000000000dcab3:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcab0
	jmp uuid_00000000000dcab2
uuid_00000000000dcab0:
	movb $1, -1528(%rbp)
uuid_00000000000dcab2:
	mov -1608(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dcab5:
	mov -1544(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dcab8:
	mov -1536(%RBP),%RSP
	add $-1616, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcab9
	jmp uuid_00000000000dcabb
uuid_00000000000dcab9:
	movb $1, -1304(%rbp)
uuid_00000000000dcabb:
	mov -1448(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dcabe:
	mov -1320(%RBP),%RSP
	add $-1616, %RSP
uuid_00000000000dcac1:
	mov -1312(%RBP),%RSP
	add $-1616, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcace
	jmp uuid_00000000000dcad0
uuid_00000000000dcace:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcac8
	jmp uuid_00000000000dcaca
uuid_00000000000dcac8:
	push %RBP
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	jmp uuid_00000000000dcac5
	jmp uuid_00000000000dcac7
uuid_00000000000dcac5:
	push %RBP
	mov -1632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1792(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcac2
	jmp uuid_00000000000dcac4
uuid_00000000000dcac2:
	movb $1, -1704(%rbp)
uuid_00000000000dcac4:
	mov -1784(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dcac7:
	mov -1720(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dcaca:
	mov -1712(%RBP),%RSP
	add $-1792, %RSP
	mov -1704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcacb
	jmp uuid_00000000000dcacd
uuid_00000000000dcacb:
	movb $1, -1208(%rbp)
uuid_00000000000dcacd:
	mov -1624(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dcad0:
	mov -1224(%RBP),%RSP
	add $-1792, %RSP
uuid_00000000000dcad3:
	mov -1216(%RBP),%RSP
	add $-1792, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcafd
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcae3
	jmp uuid_00000000000dcae5
uuid_00000000000dcae3:
	push %RBP
	mov -1864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcada
	jmp uuid_00000000000dcadc
uuid_00000000000dcada:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000dcad7
	jmp uuid_00000000000dcad9
uuid_00000000000dcad7:
	push %RBP
	mov -1904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcad4
	jmp uuid_00000000000dcad6
uuid_00000000000dcad4:
	movb $1, -1976(%rbp)
uuid_00000000000dcad6:
	mov -2056(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000dcad9:
	mov -1992(%RBP),%RSP
	add $-2064, %RSP
uuid_00000000000dcadc:
	mov -1984(%RBP),%RSP
	add $-2064, %RSP
	mov -1976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcae0
	jmp uuid_00000000000dcae2
uuid_00000000000dcae0:
	push %RBP
	mov -1856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcadd
	jmp uuid_00000000000dcadf
uuid_00000000000dcadd:
	movb $1, -1880(%rbp)
uuid_00000000000dcadf:
	mov -2072(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000dcae2:
	mov -1896(%RBP),%RSP
	add $-2144, %RSP
uuid_00000000000dcae5:
	mov -1888(%RBP),%RSP
	add $-2144, %RSP
	mov -1880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcafa
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2224(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaec
	jmp uuid_00000000000dcaee
uuid_00000000000dcaec:
	push %RBP
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	jmp uuid_00000000000dcae9
	jmp uuid_00000000000dcaeb
uuid_00000000000dcae9:
	push %RBP
	mov -2160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcae6
	jmp uuid_00000000000dcae8
uuid_00000000000dcae6:
	movb $1, -2232(%rbp)
uuid_00000000000dcae8:
	mov -2312(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000dcaeb:
	mov -2248(%RBP),%RSP
	add $-2320, %RSP
uuid_00000000000dcaee:
	mov -2240(%RBP),%RSP
	add $-2320, %RSP
	mov -2232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaf7
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcaf4
	push %RBP
	jmp uuid_00000000000dcaf1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcaf0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcaf3
uuid_00000000000dcaf1:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcaef
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcaf3:
	mov -2408(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000dcaf6
uuid_00000000000dcaf4:
uuid_00000000000dcaf6:
	mov -2328(%RBP),%RSP
	add $-2400, %RSP
	jmp uuid_00000000000dcaf9
uuid_00000000000dcaf7:
	pushq -2320(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcaf9:
	mov -2152(%RBP),%RSP
	add $-2320, %RSP
	jmp uuid_00000000000dcafc
uuid_00000000000dcafa:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcafc:
	mov -1800(%RBP),%RSP
	add $-2144, %RSP
	jmp uuid_00000000000dcaff
uuid_00000000000dcafd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1616(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcaff:
	mov -1128(%RBP),%RSP
	add $-1792, %RSP
	jmp uuid_00000000000dcb02
uuid_00000000000dcb00:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcb02:
	mov -280(%RBP),%RSP
	add $-1120, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowASTConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbfd
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbfa
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb2a
	jmp uuid_00000000000dcb2c
uuid_00000000000dcb2a:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -608(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb18
	jmp uuid_00000000000dcb1a
uuid_00000000000dcb18:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb06
	jmp uuid_00000000000dcb08
uuid_00000000000dcb06:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	jmp uuid_00000000000dcb03
	jmp uuid_00000000000dcb05
uuid_00000000000dcb03:
	movb $1, -712(%rbp)
uuid_00000000000dcb05:
	mov -728(%RBP),%RSP
	add $-752, %RSP
uuid_00000000000dcb08:
	mov -720(%RBP),%RSP
	add $-752, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb15
	jmp uuid_00000000000dcb17
uuid_00000000000dcb15:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb0f
	jmp uuid_00000000000dcb11
uuid_00000000000dcb0f:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000dcb0c
	jmp uuid_00000000000dcb0e
uuid_00000000000dcb0c:
	push %RBP
	mov -768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb09
	jmp uuid_00000000000dcb0b
uuid_00000000000dcb09:
	movb $1, -840(%rbp)
uuid_00000000000dcb0b:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dcb0e:
	mov -856(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dcb11:
	mov -848(%RBP),%RSP
	add $-928, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb12
	jmp uuid_00000000000dcb14
uuid_00000000000dcb12:
	movb $1, -616(%rbp)
uuid_00000000000dcb14:
	mov -760(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dcb17:
	mov -632(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dcb1a:
	mov -624(%RBP),%RSP
	add $-928, %RSP
	mov -616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb27
	jmp uuid_00000000000dcb29
uuid_00000000000dcb27:
	push %RBP
	mov -496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb21
	jmp uuid_00000000000dcb23
uuid_00000000000dcb21:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000dcb1e
	jmp uuid_00000000000dcb20
uuid_00000000000dcb1e:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1104(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb1b
	jmp uuid_00000000000dcb1d
uuid_00000000000dcb1b:
	movb $1, -1016(%rbp)
uuid_00000000000dcb1d:
	mov -1096(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dcb20:
	mov -1032(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dcb23:
	mov -1024(%RBP),%RSP
	add $-1104, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb24
	jmp uuid_00000000000dcb26
uuid_00000000000dcb24:
	movb $1, -520(%rbp)
uuid_00000000000dcb26:
	mov -936(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dcb29:
	mov -536(%RBP),%RSP
	add $-1104, %RSP
uuid_00000000000dcb2c:
	mov -528(%RBP),%RSP
	add $-1104, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbf7
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb70
	jmp uuid_00000000000dcb72
uuid_00000000000dcb70:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb5e
	jmp uuid_00000000000dcb60
uuid_00000000000dcb5e:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb4c
	jmp uuid_00000000000dcb4e
uuid_00000000000dcb4c:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	jmp uuid_00000000000dcb49
	jmp uuid_00000000000dcb4b
uuid_00000000000dcb49:
	movb $1, -1384(%rbp)
uuid_00000000000dcb4b:
	mov -1400(%RBP),%RSP
	add $-1424, %RSP
uuid_00000000000dcb4e:
	mov -1392(%RBP),%RSP
	add $-1424, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb5b
	jmp uuid_00000000000dcb5d
uuid_00000000000dcb5b:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb55
	jmp uuid_00000000000dcb57
uuid_00000000000dcb55:
	push %RBP
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000dcb52
	jmp uuid_00000000000dcb54
uuid_00000000000dcb52:
	push %RBP
	mov -1440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb4f
	jmp uuid_00000000000dcb51
uuid_00000000000dcb4f:
	movb $1, -1512(%rbp)
uuid_00000000000dcb51:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcb54:
	mov -1528(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcb57:
	mov -1520(%RBP),%RSP
	add $-1600, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb58
	jmp uuid_00000000000dcb5a
uuid_00000000000dcb58:
	movb $1, -1288(%rbp)
uuid_00000000000dcb5a:
	mov -1432(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcb5d:
	mov -1304(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcb60:
	mov -1296(%RBP),%RSP
	add $-1600, %RSP
	mov -1288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb6d
	jmp uuid_00000000000dcb6f
uuid_00000000000dcb6d:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb67
	jmp uuid_00000000000dcb69
uuid_00000000000dcb67:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	jmp uuid_00000000000dcb64
	jmp uuid_00000000000dcb66
uuid_00000000000dcb64:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb61
	jmp uuid_00000000000dcb63
uuid_00000000000dcb61:
	movb $1, -1688(%rbp)
uuid_00000000000dcb63:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcb66:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcb69:
	mov -1696(%RBP),%RSP
	add $-1776, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb6a
	jmp uuid_00000000000dcb6c
uuid_00000000000dcb6a:
	movb $1, -1192(%rbp)
uuid_00000000000dcb6c:
	mov -1608(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcb6f:
	mov -1208(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000dcb72:
	mov -1200(%RBP),%RSP
	add $-1776, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbf4
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb95
	jmp uuid_00000000000dcb97
uuid_00000000000dcb95:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	jmp uuid_00000000000dcb92
	jmp uuid_00000000000dcb94
uuid_00000000000dcb92:
	push %RBP
	mov -1792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb8f
	jmp uuid_00000000000dcb91
uuid_00000000000dcb8f:
	movb $1, -1864(%rbp)
uuid_00000000000dcb91:
	mov -1944(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dcb94:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dcb97:
	mov -1872(%RBP),%RSP
	add $-1952, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbf1
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb9e
	jmp uuid_00000000000dcba0
uuid_00000000000dcb9e:
	push %RBP
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	jmp uuid_00000000000dcb9b
	jmp uuid_00000000000dcb9d
uuid_00000000000dcb9b:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb98
	jmp uuid_00000000000dcb9a
uuid_00000000000dcb98:
	movb $1, -2040(%rbp)
uuid_00000000000dcb9a:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dcb9d:
	mov -2056(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000dcba0:
	mov -2048(%RBP),%RSP
	add $-2128, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbee
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbaa
	jmp uuid_00000000000dcbac
uuid_00000000000dcbaa:
	push %RBP
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	jmp uuid_00000000000dcba7
	jmp uuid_00000000000dcba9
uuid_00000000000dcba7:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcba4
	jmp uuid_00000000000dcba6
uuid_00000000000dcba4:
	push %RBP
	mov -2168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcba1
	jmp uuid_00000000000dcba3
uuid_00000000000dcba1:
	movb $1, -2216(%rbp)
uuid_00000000000dcba3:
	mov -2344(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000dcba6:
	mov -2264(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000dcba9:
	mov -2232(%RBP),%RSP
	add $-2416, %RSP
uuid_00000000000dcbac:
	mov -2224(%RBP),%RSP
	add $-2416, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbeb
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2496(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbb0
	jmp uuid_00000000000dcbb2
uuid_00000000000dcbb0:
	push %RBP
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	jmp uuid_00000000000dcbad
	jmp uuid_00000000000dcbaf
uuid_00000000000dcbad:
	movb $1, -2504(%rbp)
uuid_00000000000dcbaf:
	mov -2520(%RBP),%RSP
	add $-2544, %RSP
uuid_00000000000dcbb2:
	mov -2512(%RBP),%RSP
	add $-2544, %RSP
	mov -2504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbe8
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbb9
	jmp uuid_00000000000dcbbb
uuid_00000000000dcbb9:
	push %RBP
	mov -2616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbb6
	jmp uuid_00000000000dcbb8
uuid_00000000000dcbb6:
	push %RBP
	mov -2608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbb3
	jmp uuid_00000000000dcbb5
uuid_00000000000dcbb3:
	movb $1, -2632(%rbp)
uuid_00000000000dcbb5:
	mov -2728(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000dcbb8:
	mov -2648(%RBP),%RSP
	add $-2800, %RSP
uuid_00000000000dcbbb:
	mov -2640(%RBP),%RSP
	add $-2800, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbe5
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbc2
	jmp uuid_00000000000dcbc4
uuid_00000000000dcbc2:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbbf
	jmp uuid_00000000000dcbc1
uuid_00000000000dcbbf:
	push %RBP
	mov -2864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbbc
	jmp uuid_00000000000dcbbe
uuid_00000000000dcbbc:
	movb $1, -2888(%rbp)
uuid_00000000000dcbbe:
	mov -2984(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000dcbc1:
	mov -2904(%RBP),%RSP
	add $-3056, %RSP
uuid_00000000000dcbc4:
	mov -2896(%RBP),%RSP
	add $-3056, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbe2
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3136(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbcb
	jmp uuid_00000000000dcbcd
uuid_00000000000dcbcb:
	push %RBP
	mov -3128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbc8
	jmp uuid_00000000000dcbca
uuid_00000000000dcbc8:
	push %RBP
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	jmp uuid_00000000000dcbc5
	jmp uuid_00000000000dcbc7
uuid_00000000000dcbc5:
	movb $1, -3144(%rbp)
uuid_00000000000dcbc7:
	mov -3240(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000dcbca:
	mov -3160(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000dcbcd:
	mov -3152(%RBP),%RSP
	add $-3296, %RSP
	mov -3144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbdf
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbd4
	jmp uuid_00000000000dcbd6
uuid_00000000000dcbd4:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbd1
	jmp uuid_00000000000dcbd3
uuid_00000000000dcbd1:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcbce
	jmp uuid_00000000000dcbd0
uuid_00000000000dcbce:
	movb $1, -3384(%rbp)
uuid_00000000000dcbd0:
	mov -3480(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dcbd3:
	mov -3400(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000dcbd6:
	mov -3392(%RBP),%RSP
	add $-3552, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcbdc
	push %RBP
	jmp uuid_00000000000dcbd9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcbd8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcbdb
uuid_00000000000dcbd9:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcbd7
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcbdb:
	mov -3560(%RBP),%RSP
	add $-3560, %RSP
	jmp uuid_00000000000dcbde
uuid_00000000000dcbdc:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3488(%rbp)
	pushq -3496(%rbp)
	pushq -3504(%rbp)
	pushq -3512(%rbp)
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -3456(%rbp)
	pushq -3464(%rbp)
	pushq -3472(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbde:
	mov -3304(%RBP),%RSP
	add $-3552, %RSP
	jmp uuid_00000000000dcbe1
uuid_00000000000dcbdf:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -3168(%rbp)
	pushq -3176(%rbp)
	pushq -3184(%rbp)
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbe1:
	mov -3064(%RBP),%RSP
	add $-3296, %RSP
	jmp uuid_00000000000dcbe4
uuid_00000000000dcbe2:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	pushq -3040(%rbp)
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	pushq -2952(%rbp)
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbe4:
	mov -2808(%RBP),%RSP
	add $-3056, %RSP
	jmp uuid_00000000000dcbe7
uuid_00000000000dcbe5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq -2776(%rbp)
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	pushq -2696(%rbp)
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbe7:
	mov -2552(%RBP),%RSP
	add $-2800, %RSP
	jmp uuid_00000000000dcbea
uuid_00000000000dcbe8:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbea:
	mov -2424(%RBP),%RSP
	add $-2544, %RSP
	jmp uuid_00000000000dcbed
uuid_00000000000dcbeb:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-lhs : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	mov %RBX, %RBP
	call substitute_SB_lhs_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $5
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbed:
	mov -2136(%RBP),%RSP
	add $-2416, %RSP
	jmp uuid_00000000000dcbf0
uuid_00000000000dcbee:
	pushq -2128(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbf0:
	mov -1960(%RBP),%RSP
	add $-2128, %RSP
	jmp uuid_00000000000dcbf3
uuid_00000000000dcbf1:
	pushq -1952(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcbf3:
	mov -1784(%RBP),%RSP
	add $-1952, %RSP
	jmp uuid_00000000000dcbf6
uuid_00000000000dcbf4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcb8c:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb8d
	jmp uuid_00000000000dcb8e
uuid_00000000000dcb8d:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov -2024(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb89
	push %RBP
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb7f
	jmp uuid_00000000000dcb81
uuid_00000000000dcb7f:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	jmp uuid_00000000000dcb7c
	jmp uuid_00000000000dcb7e
uuid_00000000000dcb7c:
	push %RBP
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	jmp uuid_00000000000dcb79
	jmp uuid_00000000000dcb7b
uuid_00000000000dcb79:
	push %RBP
	mov -2048(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb76
	jmp uuid_00000000000dcb78
uuid_00000000000dcb76:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcb73
	jmp uuid_00000000000dcb75
uuid_00000000000dcb73:
	movb $1, -2160(%rbp)
uuid_00000000000dcb75:
	mov -2304(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcb78:
	mov -2288(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcb7b:
	mov -2256(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcb7e:
	mov -2176(%RBP),%RSP
	add $-2424, %RSP
uuid_00000000000dcb81:
	mov -2168(%RBP),%RSP
	add $-2424, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb86
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcb85
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcb88
uuid_00000000000dcb86:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -1600(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb82
	movq -2424(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2408(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2400(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2392(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2384(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcb84
uuid_00000000000dcb82:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcb84:
	mov -2432(%RBP),%RSP
	add $-2432, %RSP
uuid_00000000000dcb88:
	mov -2032(%RBP),%RSP
	add $-2432, %RSP
	jmp uuid_00000000000dcb8b
uuid_00000000000dcb89:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcb8b:
	mov -1904(%RBP),%RSP
	add $-2024, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcb8c
uuid_00000000000dcb8e:
uuid_00000000000dcbf6:
	mov -1112(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000dcbf9
uuid_00000000000dcbf7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
uuid_00000000000dcb46:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb47
	jmp uuid_00000000000dcb48
uuid_00000000000dcb47:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb43
	push %RBP
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb39
	jmp uuid_00000000000dcb3b
uuid_00000000000dcb39:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000dcb36
	jmp uuid_00000000000dcb38
uuid_00000000000dcb36:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000dcb33
	jmp uuid_00000000000dcb35
uuid_00000000000dcb33:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcb30
	jmp uuid_00000000000dcb32
uuid_00000000000dcb30:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcb2d
	jmp uuid_00000000000dcb2f
uuid_00000000000dcb2d:
	movb $1, -1488(%rbp)
uuid_00000000000dcb2f:
	mov -1632(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcb32:
	mov -1616(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcb35:
	mov -1584(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcb38:
	mov -1504(%RBP),%RSP
	add $-1752, %RSP
uuid_00000000000dcb3b:
	mov -1496(%RBP),%RSP
	add $-1752, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcb40
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcb3f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcb42
uuid_00000000000dcb40:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1624(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcb3c
	movq -1752(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dcb3e
uuid_00000000000dcb3c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcb3e:
	mov -1760(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000dcb42:
	mov -1360(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000dcb45
uuid_00000000000dcb43:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcb45:
	mov -1232(%RBP),%RSP
	add $-1352, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcb46
uuid_00000000000dcb48:
uuid_00000000000dcbf9:
	mov -440(%RBP),%RSP
	add $-1104, %RSP
	jmp uuid_00000000000dcbfc
uuid_00000000000dcbfa:
uuid_00000000000dcbfc:
	mov -360(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dcbff
uuid_00000000000dcbfd:
uuid_00000000000dcbff:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
substitute_CL_ArrowSConsSStringSList:
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc2c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc03
	jmp uuid_00000000000dcc05
uuid_00000000000dcc03:
	push %RBP
	mov -160(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcc00
	jmp uuid_00000000000dcc02
uuid_00000000000dcc00:
	movb $1, -176(%rbp)
uuid_00000000000dcc02:
	mov -192(%RBP),%RSP
	add $-200, %RSP
uuid_00000000000dcc05:
	mov -184(%RBP),%RSP
	add $-200, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc29
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc22
	jmp uuid_00000000000dcc24
uuid_00000000000dcc22:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc1f
	jmp uuid_00000000000dcc21
uuid_00000000000dcc1f:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc1c
	jmp uuid_00000000000dcc1e
uuid_00000000000dcc1c:
	movb $1, -240(%rbp)
uuid_00000000000dcc1e:
	mov -288(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcc21:
	mov -256(%RBP),%RSP
	add $-312, %RSP
uuid_00000000000dcc24:
	mov -248(%RBP),%RSP
	add $-312, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc26
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcc25
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc28
uuid_00000000000dcc26:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute : Arrow<Cons<StringSList,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowSConsSStringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcc28:
	mov -208(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dcc2b
uuid_00000000000dcc29:
uuid_00000000000dcc19:
#call function non-zero : Arrow<StringSList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringSList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc1a
	jmp uuid_00000000000dcc1b
uuid_00000000000dcc1a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc0f
	jmp uuid_00000000000dcc11
uuid_00000000000dcc0f:
	push %RBP
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	jmp uuid_00000000000dcc0c
	jmp uuid_00000000000dcc0e
uuid_00000000000dcc0c:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcc09
	jmp uuid_00000000000dcc0b
uuid_00000000000dcc09:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc06
	jmp uuid_00000000000dcc08
uuid_00000000000dcc06:
	movb $1, -312(%rbp)
uuid_00000000000dcc08:
	mov -376(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dcc0b:
	mov -360(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dcc0e:
	mov -328(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dcc11:
	mov -320(%RBP),%RSP
	add $-424, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc16
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcc15
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc18
uuid_00000000000dcc16:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc12
	jmp uuid_00000000000dcc14
uuid_00000000000dcc12:
	movq -352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000dcc14:
	mov -432(%RBP),%RSP
	add $-432, %RSP
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dcc18:
	mov -256(%RBP),%RSP
	add $-432, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcc19
uuid_00000000000dcc1b:
uuid_00000000000dcc2b:
	mov -144(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000dcc2e
uuid_00000000000dcc2c:
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dcc2e:
	mov -112(%RBP),%RSP
	add $-136, %RSP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	subq $24, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
specialize_CL_ArrowNilConsTypeConsTContextConsTypeString:
	push %RBP
#call function is-special : Arrow<Cons<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_special_CL_ArrowU64ConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc6d
#call function normalize : Arrow<TContext,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call normalize_CL_ArrowTContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	push -152(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dcc67:
#call function non-zero : Arrow<TContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64TContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc68
	jmp uuid_00000000000dcc69
uuid_00000000000dcc68:
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc64
	push %RBP
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc3b
	jmp uuid_00000000000dcc3d
uuid_00000000000dcc3b:
	push %RBP
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	jmp uuid_00000000000dcc38
	jmp uuid_00000000000dcc3a
uuid_00000000000dcc38:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000dcc35
	jmp uuid_00000000000dcc37
uuid_00000000000dcc35:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcc32
	jmp uuid_00000000000dcc34
uuid_00000000000dcc32:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc2f
	jmp uuid_00000000000dcc31
uuid_00000000000dcc2f:
	movb $1, -768(%rbp)
uuid_00000000000dcc31:
	mov -912(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcc34:
	mov -896(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcc37:
	mov -864(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcc3a:
	mov -784(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dcc3d:
	mov -776(%RBP),%RSP
	add $-1032, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc61
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcc60
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc63
uuid_00000000000dcc61:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc5d
	jmp uuid_00000000000dcc5f
uuid_00000000000dcc5d:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc5a
	jmp uuid_00000000000dcc5c
uuid_00000000000dcc5a:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc50
	jmp uuid_00000000000dcc52
uuid_00000000000dcc50:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc47
	jmp uuid_00000000000dcc49
uuid_00000000000dcc47:
	push %RBP
	jmp uuid_00000000000dcc44
	jmp uuid_00000000000dcc46
uuid_00000000000dcc44:
	push %RBP
	jmp uuid_00000000000dcc41
	jmp uuid_00000000000dcc43
uuid_00000000000dcc41:
	push %RBP
	jmp uuid_00000000000dcc3e
	jmp uuid_00000000000dcc40
uuid_00000000000dcc3e:
	movb $1, -1304(%rbp)
uuid_00000000000dcc40:
	mov -1336(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dcc43:
	mov -1328(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dcc46:
	mov -1320(%RBP),%RSP
	add $-1336, %RSP
uuid_00000000000dcc49:
	mov -1312(%RBP),%RSP
	add $-1336, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc4d
	jmp uuid_00000000000dcc4f
uuid_00000000000dcc4d:
	push %RBP
	jmp uuid_00000000000dcc4a
	jmp uuid_00000000000dcc4c
uuid_00000000000dcc4a:
	movb $1, -1208(%rbp)
uuid_00000000000dcc4c:
	mov -1344(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcc4f:
	mov -1224(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcc52:
	mov -1216(%RBP),%RSP
	add $-1344, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc57
	push %RBP
	jmp uuid_00000000000dcc54
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcc53
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc56
uuid_00000000000dcc54:
uuid_00000000000dcc56:
	mov -1352(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000dcc59
uuid_00000000000dcc57:
	movq -856(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -200(%rbp)
uuid_00000000000dcc59:
	mov -1128(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcc5c:
	mov -1048(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcc5f:
	mov -1040(%RBP),%RSP
	add $-1344, %RSP
	movq -1032(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -272(%rbp)
uuid_00000000000dcc63:
	mov -640(%RBP),%RSP
	add $-1344, %RSP
	jmp uuid_00000000000dcc66
uuid_00000000000dcc64:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
uuid_00000000000dcc66:
	mov -512(%RBP),%RSP
	add $-632, %RSP
	add $120, %rsp
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dcc67
uuid_00000000000dcc69:
#call function mark-as-special : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mark_SB_as_SB_special_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc6a
	jmp uuid_00000000000dcc6c
uuid_00000000000dcc6a:
#call function substitute : Arrow<Cons<TContext,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowASTConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
#call function infer-global-context : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call infer_SB_global_SB_context_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function infer-expr : Arrow<Cons<Cons<Cons<Cons<TContext,AST>,IsScoped>,Type>,IsUsed>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $4
	mov %RBX, %RBP
	call infer_SB_expr_CL_ArrowTContextConsIsUsedConsTypeConsIsScopedConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000dcc6c:
	mov -392(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000dcc6f
uuid_00000000000dcc6d:
uuid_00000000000dcc6f:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov %rbp, %rsp
	sub $184, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType:
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc85
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc7b
	jmp uuid_00000000000dcc7d
uuid_00000000000dcc7b:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcc78
	jmp uuid_00000000000dcc7a
uuid_00000000000dcc78:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	jmp uuid_00000000000dcc75
	jmp uuid_00000000000dcc77
uuid_00000000000dcc75:
	movb $1, -240(%rbp)
uuid_00000000000dcc77:
	mov -304(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dcc7a:
	mov -256(%RBP),%RSP
	add $-328, %RSP
uuid_00000000000dcc7d:
	mov -248(%RBP),%RSP
	add $-328, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc82
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcc81
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcc84
uuid_00000000000dcc82:
	push %RBP
#call function is-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_SB_parameter_SB_flat_CL_ArrowU64ConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc7e
	jmp uuid_00000000000dcc80
uuid_00000000000dcc7e:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcc80:
	mov -336(%RBP),%RSP
	add $-336, %RSP
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcc84:
	mov -192(%RBP),%RSP
	add $-336, %RSP
	jmp uuid_00000000000dcc87
uuid_00000000000dcc85:
uuid_00000000000dcc87:
	mov -144(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $96, %rsp
	ret
mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcca0
	jmp uuid_00000000000dcca2
uuid_00000000000dcca0:
	push %RBP
	mov -104(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc97
	jmp uuid_00000000000dcc99
uuid_00000000000dcc97:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc8e
	jmp uuid_00000000000dcc90
uuid_00000000000dcc8e:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc8b
	jmp uuid_00000000000dcc8d
uuid_00000000000dcc8b:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000dcc88
	jmp uuid_00000000000dcc8a
uuid_00000000000dcc88:
	movb $1, -248(%rbp)
uuid_00000000000dcc8a:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dcc8d:
	mov -264(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000dcc90:
	mov -256(%RBP),%RSP
	add $-336, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc94
	jmp uuid_00000000000dcc96
uuid_00000000000dcc94:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000dcc91
	jmp uuid_00000000000dcc93
uuid_00000000000dcc91:
	movb $1, -184(%rbp)
uuid_00000000000dcc93:
	mov -344(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dcc96:
	mov -200(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dcc99:
	mov -192(%RBP),%RSP
	add $-368, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcc9d
	jmp uuid_00000000000dcc9f
uuid_00000000000dcc9d:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcc9a
	jmp uuid_00000000000dcc9c
uuid_00000000000dcc9a:
	movb $1, -120(%rbp)
uuid_00000000000dcc9c:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dcc9f:
	mov -136(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dcca2:
	mov -128(%RBP),%RSP
	add $-384, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccbc
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcca9
	jmp uuid_00000000000dccab
uuid_00000000000dcca9:
	push %RBP
	mov -408(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcca6
	jmp uuid_00000000000dcca8
uuid_00000000000dcca6:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcca3
	jmp uuid_00000000000dcca5
uuid_00000000000dcca3:
	movb $1, -424(%rbp)
uuid_00000000000dcca5:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dcca8:
	mov -440(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dccab:
	mov -432(%RBP),%RSP
	add $-496, %RSP
	mov -424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccb9
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccaf
	jmp uuid_00000000000dccb1
uuid_00000000000dccaf:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dccac
	jmp uuid_00000000000dccae
uuid_00000000000dccac:
	movb $1, -536(%rbp)
uuid_00000000000dccae:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dccb1:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccb6
	push %RBP
	jmp uuid_00000000000dccb3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dccb2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dccb5
uuid_00000000000dccb3:
uuid_00000000000dccb5:
	mov -568(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000dccb8
uuid_00000000000dccb6:
#call function mark-parameter-flat : Arrow<Cons<Cons<String,U64>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function parameter-number : Arrow<Cons<Type,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parameter_SB_number_CL_ArrowU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call mark_SB_parameter_SB_flat_CL_ArrowNilConsU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dccb8:
	mov -504(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dccbb
uuid_00000000000dccb9:
#call function mark-constructor-flat-parameters : Arrow<Cons<Cons<Cons<Cons<Type,String>,U64>,List<Type>>,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -496(%rbp)
#call function arity : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call arity_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsU64ConsListTypeConsU64ConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dccbb:
	mov -392(%RBP),%RSP
	add $-496, %RSP
	jmp uuid_00000000000dccbe
uuid_00000000000dccbc:
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dccbe:
	mov -88(%RBP),%RSP
	add $-384, %RSP
	mov %rbp, %rsp
	sub $56, %rsp
	ret
infer_SB_type_SB_constructor_CL_ArrowU64ConsASTType:
	pushq $0
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccc5
	jmp uuid_00000000000dccc7
uuid_00000000000dccc5:
	push %RBP
	jmp uuid_00000000000dccc2
	jmp uuid_00000000000dccc4
uuid_00000000000dccc2:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dccbf
	jmp uuid_00000000000dccc1
uuid_00000000000dccbf:
	movb $1, -272(%rbp)
uuid_00000000000dccc1:
	mov -296(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dccc4:
	mov -288(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000dccc7:
	mov -280(%RBP),%RSP
	add $-304, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcce9
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccd7
	jmp uuid_00000000000dccd9
uuid_00000000000dccd7:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dccd4
	jmp uuid_00000000000dccd6
uuid_00000000000dccd4:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccce
	jmp uuid_00000000000dccd0
uuid_00000000000dccce:
	push %RBP
	jmp uuid_00000000000dcccb
	jmp uuid_00000000000dcccd
uuid_00000000000dcccb:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dccc8
	jmp uuid_00000000000dccca
uuid_00000000000dccc8:
	movb $1, -568(%rbp)
uuid_00000000000dccca:
	mov -592(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dcccd:
	mov -584(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dccd0:
	mov -576(%RBP),%RSP
	add $-600, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccd1
	jmp uuid_00000000000dccd3
uuid_00000000000dccd1:
	movb $1, -392(%rbp)
uuid_00000000000dccd3:
	mov -488(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dccd6:
	mov -408(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dccd9:
	mov -400(%RBP),%RSP
	add $-600, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcce6
	push %RBP
	jmp uuid_00000000000dcce3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcce2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcce5
uuid_00000000000dcce3:
uuid_00000000000dcce5:
	mov -608(%RBP),%RSP
	add $-608, %RSP
	jmp uuid_00000000000dcce8
uuid_00000000000dcce6:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -600(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $1
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
#call function add-concrete-type-instance : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call add_SB_concrete_SB_type_SB_instance_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function mark-constructor-flat-parameters : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call mark_SB_constructor_SB_flat_SB_parameters_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
#call function has-forward : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_forward_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dccdb
	jmp uuid_00000000000dccdd
uuid_00000000000dccdb:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dccda
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dccdd:
	mov -632(%RBP),%RSP
	add $-632, %RSP
	push %RBP
#call function has-infinite : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call has_SB_infinite_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dccdf
	jmp uuid_00000000000dcce1
uuid_00000000000dccdf:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dccde
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcce1:
	mov -640(%RBP),%RSP
	add $-640, %RSP
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ed
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function set-type-fields : Arrow<Cons<Type,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call set_SB_type_SB_fields_CL_ArrowNilConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -600(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db279
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -112(%rbp)
	mov -112(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db236
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -600(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000dcce8:
	mov -312(%RBP),%RSP
	add $-688, %RSP
	jmp uuid_00000000000dcceb
uuid_00000000000dcce9:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ed
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5ed
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db236
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db237
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db239
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daac1
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function index-class-of-tag : Arrow<Cons<String,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call index_SB_class_SB_of_SB_tag_CL_ArrowNilConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-fields-of-tag : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call index_SB_fields_SB_of_SB_tag_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,Type>,String>,Type>,HashtableEq<String,Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $type_SB_constructors_SB_index_CL_HashtableEqTypeString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	movq $8, -112(%rbp)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db236
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
uuid_00000000000dcceb:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	mov -112(%rbp), %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
infer_SB_global_SB_context_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccfb
	jmp uuid_00000000000dccfd
uuid_00000000000dccfb:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dccf8
	jmp uuid_00000000000dccfa
uuid_00000000000dccf8:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dccf2
	jmp uuid_00000000000dccf4
uuid_00000000000dccf2:
	push %RBP
	jmp uuid_00000000000dccef
	jmp uuid_00000000000dccf1
uuid_00000000000dccef:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dccec
	jmp uuid_00000000000dccee
uuid_00000000000dccec:
	movb $1, -416(%rbp)
uuid_00000000000dccee:
	mov -440(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dccf1:
	mov -432(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dccf4:
	mov -424(%RBP),%RSP
	add $-448, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dccf5
	jmp uuid_00000000000dccf7
uuid_00000000000dccf5:
	movb $1, -240(%rbp)
uuid_00000000000dccf7:
	mov -336(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dccfa:
	mov -256(%RBP),%RSP
	add $-448, %RSP
uuid_00000000000dccfd:
	mov -248(%RBP),%RSP
	add $-448, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcda4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd4d
	jmp uuid_00000000000dcd4f
uuid_00000000000dcd4d:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd38
	jmp uuid_00000000000dcd3a
uuid_00000000000dcd38:
	push %RBP
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000dcd35
	jmp uuid_00000000000dcd37
uuid_00000000000dcd35:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd2c
	jmp uuid_00000000000dcd2e
uuid_00000000000dcd2c:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd1a
	jmp uuid_00000000000dcd1c
uuid_00000000000dcd1a:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd11
	jmp uuid_00000000000dcd13
uuid_00000000000dcd11:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000dcd0e
	jmp uuid_00000000000dcd10
uuid_00000000000dcd0e:
	movb $1, -1024(%rbp)
uuid_00000000000dcd10:
	mov -1040(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dcd13:
	mov -1032(%RBP),%RSP
	add $-1064, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd17
	jmp uuid_00000000000dcd19
uuid_00000000000dcd17:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd14
	jmp uuid_00000000000dcd16
uuid_00000000000dcd14:
	movb $1, -928(%rbp)
uuid_00000000000dcd16:
	mov -1072(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dcd19:
	mov -944(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dcd1c:
	mov -936(%RBP),%RSP
	add $-1144, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd29
	jmp uuid_00000000000dcd2b
uuid_00000000000dcd29:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1224(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd23
	jmp uuid_00000000000dcd25
uuid_00000000000dcd23:
	push %RBP
	jmp uuid_00000000000dcd20
	jmp uuid_00000000000dcd22
uuid_00000000000dcd20:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1264(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd1d
	jmp uuid_00000000000dcd1f
uuid_00000000000dcd1d:
	movb $1, -1232(%rbp)
uuid_00000000000dcd1f:
	mov -1256(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dcd22:
	mov -1248(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dcd25:
	mov -1240(%RBP),%RSP
	add $-1264, %RSP
	mov -1232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd26
	jmp uuid_00000000000dcd28
uuid_00000000000dcd26:
	movb $1, -832(%rbp)
uuid_00000000000dcd28:
	mov -1152(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dcd2b:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000dcd2e:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd32
	jmp uuid_00000000000dcd34
uuid_00000000000dcd32:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd2f
	jmp uuid_00000000000dcd31
uuid_00000000000dcd2f:
	movb $1, -704(%rbp)
uuid_00000000000dcd31:
	mov -1272(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcd34:
	mov -752(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcd37:
	mov -720(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000dcd3a:
	mov -712(%RBP),%RSP
	add $-1344, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd4a
	jmp uuid_00000000000dcd4c
uuid_00000000000dcd4a:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd44
	jmp uuid_00000000000dcd46
uuid_00000000000dcd44:
	push %RBP
	jmp uuid_00000000000dcd41
	jmp uuid_00000000000dcd43
uuid_00000000000dcd41:
	push %RBP
	jmp uuid_00000000000dcd3e
	jmp uuid_00000000000dcd40
uuid_00000000000dcd3e:
	push %RBP
	mov -1360(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd3b
	jmp uuid_00000000000dcd3d
uuid_00000000000dcd3b:
	movb $1, -1416(%rbp)
uuid_00000000000dcd3d:
	mov -1448(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcd40:
	mov -1440(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcd43:
	mov -1432(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcd46:
	mov -1424(%RBP),%RSP
	add $-1456, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd47
	jmp uuid_00000000000dcd49
uuid_00000000000dcd47:
	movb $1, -536(%rbp)
uuid_00000000000dcd49:
	mov -1352(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcd4c:
	mov -552(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000dcd4f:
	mov -544(%RBP),%RSP
	add $-1456, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcda1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd8a
	jmp uuid_00000000000dcd8c
uuid_00000000000dcd8a:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd75
	jmp uuid_00000000000dcd77
uuid_00000000000dcd75:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd63
	jmp uuid_00000000000dcd65
uuid_00000000000dcd63:
	push %RBP
	mov -1720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd5a
	jmp uuid_00000000000dcd5c
uuid_00000000000dcd5a:
	push %RBP
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000dcd57
	jmp uuid_00000000000dcd59
uuid_00000000000dcd57:
	movb $1, -1832(%rbp)
uuid_00000000000dcd59:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000dcd5c:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd60
	jmp uuid_00000000000dcd62
uuid_00000000000dcd60:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcd5d
	jmp uuid_00000000000dcd5f
uuid_00000000000dcd5d:
	movb $1, -1736(%rbp)
uuid_00000000000dcd5f:
	mov -1880(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dcd62:
	mov -1752(%RBP),%RSP
	add $-1952, %RSP
uuid_00000000000dcd65:
	mov -1744(%RBP),%RSP
	add $-1952, %RSP
	mov -1736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd72
	jmp uuid_00000000000dcd74
uuid_00000000000dcd72:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2032(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd6c
	jmp uuid_00000000000dcd6e
uuid_00000000000dcd6c:
	push %RBP
	jmp uuid_00000000000dcd69
	jmp uuid_00000000000dcd6b
uuid_00000000000dcd69:
	push %RBP
	mov -1968(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2072(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd66
	jmp uuid_00000000000dcd68
uuid_00000000000dcd66:
	movb $1, -2040(%rbp)
uuid_00000000000dcd68:
	mov -2064(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dcd6b:
	mov -2056(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dcd6e:
	mov -2048(%RBP),%RSP
	add $-2072, %RSP
	mov -2040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd6f
	jmp uuid_00000000000dcd71
uuid_00000000000dcd6f:
	movb $1, -1640(%rbp)
uuid_00000000000dcd71:
	mov -1960(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dcd74:
	mov -1656(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000dcd77:
	mov -1648(%RBP),%RSP
	add $-2072, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd87
	jmp uuid_00000000000dcd89
uuid_00000000000dcd87:
	push %RBP
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq $0
	push %RBP
	mov -2136(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd81
	jmp uuid_00000000000dcd83
uuid_00000000000dcd81:
	push %RBP
	jmp uuid_00000000000dcd7e
	jmp uuid_00000000000dcd80
uuid_00000000000dcd7e:
	push %RBP
	jmp uuid_00000000000dcd7b
	jmp uuid_00000000000dcd7d
uuid_00000000000dcd7b:
	push %RBP
	mov -2088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcd78
	jmp uuid_00000000000dcd7a
uuid_00000000000dcd78:
	movb $1, -2144(%rbp)
uuid_00000000000dcd7a:
	mov -2176(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dcd7d:
	mov -2168(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dcd80:
	mov -2160(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dcd83:
	mov -2152(%RBP),%RSP
	add $-2184, %RSP
	mov -2144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd84
	jmp uuid_00000000000dcd86
uuid_00000000000dcd84:
	movb $1, -1544(%rbp)
uuid_00000000000dcd86:
	mov -2080(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dcd89:
	mov -1560(%RBP),%RSP
	add $-2184, %RSP
uuid_00000000000dcd8c:
	mov -1552(%RBP),%RSP
	add $-2184, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd9e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2264(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd93
	jmp uuid_00000000000dcd95
uuid_00000000000dcd93:
	push %RBP
	jmp uuid_00000000000dcd90
	jmp uuid_00000000000dcd92
uuid_00000000000dcd90:
	push %RBP
	jmp uuid_00000000000dcd8d
	jmp uuid_00000000000dcd8f
uuid_00000000000dcd8d:
	movb $1, -2272(%rbp)
uuid_00000000000dcd8f:
	mov -2296(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000dcd92:
	mov -2288(%RBP),%RSP
	add $-2296, %RSP
uuid_00000000000dcd95:
	mov -2280(%RBP),%RSP
	add $-2296, %RSP
	mov -2272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd9b
	push %RBP
	jmp uuid_00000000000dcd98
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcd97
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcd9a
uuid_00000000000dcd98:
uuid_00000000000dcd9a:
	mov -2304(%RBP),%RSP
	add $-2304, %RSP
	jmp uuid_00000000000dcd9d
uuid_00000000000dcd9b:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcd96
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcd9d:
	mov -2192(%RBP),%RSP
	add $-2296, %RSP
	jmp uuid_00000000000dcda0
uuid_00000000000dcd9e:
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcda0:
	mov -1464(%RBP),%RSP
	add $-2208, %RSP
	jmp uuid_00000000000dcda3
uuid_00000000000dcda1:
#call function typeof-lhs : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call typeof_SB_lhs_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcd50
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	jmp uuid_00000000000dcd52
uuid_00000000000dcd50:
uuid_00000000000dcd52:
	mov -1512(%RBP),%RSP
	add $-1512, %RSP
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db279
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function enrich : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call enrich_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	push %RBP
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd54
	jmp uuid_00000000000dcd56
uuid_00000000000dcd54:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcd53
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcd56:
	mov -1544(%RBP),%RSP
	add $-1544, %RSP
#call function mark-global-as-seen : Arrow<Cons<Cons<String,Type>,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call mark_SB_global_SB_as_SB_seen_CL_ArrowNilConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1456(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	mov $global_SB_type_SB_context_CL_TContextTContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
uuid_00000000000dcda3:
	mov -456(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000dcda6
uuid_00000000000dcda4:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function infer-type-definition : Arrow<Cons<Cons<Type,AST>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	mov %RBX, %RBP
	call infer_SB_type_SB_definition_CL_ArrowU64ConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd04
	jmp uuid_00000000000dcd06
uuid_00000000000dcd04:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd01
	jmp uuid_00000000000dcd03
uuid_00000000000dcd01:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dccfe
	jmp uuid_00000000000dcd00
uuid_00000000000dccfe:
	movb $1, -544(%rbp)
uuid_00000000000dcd00:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dcd03:
	mov -560(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dcd06:
	mov -552(%RBP),%RSP
	add $-616, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcd0b
	push %RBP
	jmp uuid_00000000000dcd08
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcd07
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcd0a
uuid_00000000000dcd08:
uuid_00000000000dcd0a:
	mov -624(%RBP),%RSP
	add $-624, %RSP
	jmp uuid_00000000000dcd0d
uuid_00000000000dcd0b:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcd0d:
	mov -512(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dcda6:
	mov -160(%RBP),%RSP
	add $-616, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_well_SB_typed_CL_ArrowNilAST:
uuid_00000000000dcdb4:
#call function is-seq : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call is_SB_seq_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcdb5
	jmp uuid_00000000000dcdb6
uuid_00000000000dcdb5:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdad
	jmp uuid_00000000000dcdaf
uuid_00000000000dcdad:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcdaa
	jmp uuid_00000000000dcdac
uuid_00000000000dcdaa:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcda7
	jmp uuid_00000000000dcda9
uuid_00000000000dcda7:
	movb $1, -240(%rbp)
uuid_00000000000dcda9:
	mov -336(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dcdac:
	mov -256(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dcdaf:
	mov -248(%RBP),%RSP
	add $-408, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdb1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcdb0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcdb3
uuid_00000000000dcdb1:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dcdb3:
	mov -160(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dcdb4
uuid_00000000000dcdb6:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf37
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf34
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdbd
	jmp uuid_00000000000dcdbf
uuid_00000000000dcdbd:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcdba
	jmp uuid_00000000000dcdbc
uuid_00000000000dcdba:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	jmp uuid_00000000000dcdb7
	jmp uuid_00000000000dcdb9
uuid_00000000000dcdb7:
	movb $1, -400(%rbp)
uuid_00000000000dcdb9:
	mov -496(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dcdbc:
	mov -416(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dcdbf:
	mov -408(%RBP),%RSP
	add $-552, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf31
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdc9
	jmp uuid_00000000000dcdcb
uuid_00000000000dcdc9:
	push %RBP
	jmp uuid_00000000000dcdc6
	jmp uuid_00000000000dcdc8
uuid_00000000000dcdc6:
	push %RBP
	jmp uuid_00000000000dcdc3
	jmp uuid_00000000000dcdc5
uuid_00000000000dcdc3:
	movb $1, -640(%rbp)
uuid_00000000000dcdc5:
	mov -664(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dcdc8:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dcdcb:
	mov -648(%RBP),%RSP
	add $-664, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf2e
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcde7
	jmp uuid_00000000000dcde9
uuid_00000000000dcde7:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcde4
	jmp uuid_00000000000dcde6
uuid_00000000000dcde4:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdde
	jmp uuid_00000000000dcde0
uuid_00000000000dcdde:
	push %RBP
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	jmp uuid_00000000000dcddb
	jmp uuid_00000000000dcddd
uuid_00000000000dcddb:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdd8
	jmp uuid_00000000000dcdda
uuid_00000000000dcdd8:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdd2
	jmp uuid_00000000000dcdd4
uuid_00000000000dcdd2:
	push %RBP
	jmp uuid_00000000000dcdcf
	jmp uuid_00000000000dcdd1
uuid_00000000000dcdcf:
	push %RBP
	mov -1064(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcdcc
	jmp uuid_00000000000dcdce
uuid_00000000000dcdcc:
	movb $1, -1136(%rbp)
uuid_00000000000dcdce:
	mov -1160(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dcdd1:
	mov -1152(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dcdd4:
	mov -1144(%RBP),%RSP
	add $-1168, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdd5
	jmp uuid_00000000000dcdd7
uuid_00000000000dcdd5:
	movb $1, -928(%rbp)
uuid_00000000000dcdd7:
	mov -1056(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dcdda:
	mov -976(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dcddd:
	mov -944(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dcde0:
	mov -936(%RBP),%RSP
	add $-1168, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcde1
	jmp uuid_00000000000dcde3
uuid_00000000000dcde1:
	movb $1, -752(%rbp)
uuid_00000000000dcde3:
	mov -848(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dcde6:
	mov -768(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000dcde9:
	mov -760(%RBP),%RSP
	add $-1168, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf2b
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdf9
	jmp uuid_00000000000dcdfb
uuid_00000000000dcdf9:
	push %RBP
	jmp uuid_00000000000dcdf6
	jmp uuid_00000000000dcdf8
uuid_00000000000dcdf6:
	push %RBP
	mov -1232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdf0
	jmp uuid_00000000000dcdf2
uuid_00000000000dcdf0:
	push %RBP
	jmp uuid_00000000000dcded
	jmp uuid_00000000000dcdef
uuid_00000000000dcded:
	push %RBP
	mov -1288(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq $uuid_00000000000db089
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcdea
	jmp uuid_00000000000dcdec
uuid_00000000000dcdea:
	movb $1, -1360(%rbp)
uuid_00000000000dcdec:
	mov -1384(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dcdef:
	mov -1376(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dcdf2:
	mov -1368(%RBP),%RSP
	add $-1392, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcdf3
	jmp uuid_00000000000dcdf5
uuid_00000000000dcdf3:
	movb $1, -1256(%rbp)
uuid_00000000000dcdf5:
	mov -1280(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dcdf8:
	mov -1272(%RBP),%RSP
	add $-1392, %RSP
uuid_00000000000dcdfb:
	mov -1264(%RBP),%RSP
	add $-1392, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf28
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce14
	jmp uuid_00000000000dce16
uuid_00000000000dce14:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1568(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce02
	jmp uuid_00000000000dce04
uuid_00000000000dce02:
	push %RBP
	jmp uuid_00000000000dcdff
	jmp uuid_00000000000dce01
uuid_00000000000dcdff:
	push %RBP
	jmp uuid_00000000000dcdfc
	jmp uuid_00000000000dcdfe
uuid_00000000000dcdfc:
	movb $1, -1576(%rbp)
uuid_00000000000dcdfe:
	mov -1600(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dce01:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dce04:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
	mov -1576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce11
	jmp uuid_00000000000dce13
uuid_00000000000dce11:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1680(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce0b
	jmp uuid_00000000000dce0d
uuid_00000000000dce0b:
	push %RBP
	jmp uuid_00000000000dce08
	jmp uuid_00000000000dce0a
uuid_00000000000dce08:
	push %RBP
	mov -1616(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq $uuid_00000000000db0a6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce05
	jmp uuid_00000000000dce07
uuid_00000000000dce05:
	movb $1, -1688(%rbp)
uuid_00000000000dce07:
	mov -1712(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dce0a:
	mov -1704(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dce0d:
	mov -1696(%RBP),%RSP
	add $-1720, %RSP
	mov -1688(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce0e
	jmp uuid_00000000000dce10
uuid_00000000000dce0e:
	movb $1, -1480(%rbp)
uuid_00000000000dce10:
	mov -1608(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dce13:
	mov -1496(%RBP),%RSP
	add $-1720, %RSP
uuid_00000000000dce16:
	mov -1488(%RBP),%RSP
	add $-1720, %RSP
	mov -1480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf25
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1800(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce35
	jmp uuid_00000000000dce37
uuid_00000000000dce35:
	push %RBP
	mov -1792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce23
	jmp uuid_00000000000dce25
uuid_00000000000dce23:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce1a
	jmp uuid_00000000000dce1c
uuid_00000000000dce1a:
	push %RBP
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	jmp uuid_00000000000dce17
	jmp uuid_00000000000dce19
uuid_00000000000dce17:
	movb $1, -2000(%rbp)
uuid_00000000000dce19:
	mov -2016(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000dce1c:
	mov -2008(%RBP),%RSP
	add $-2040, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce20
	jmp uuid_00000000000dce22
uuid_00000000000dce20:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce1d
	jmp uuid_00000000000dce1f
uuid_00000000000dce1d:
	movb $1, -1904(%rbp)
uuid_00000000000dce1f:
	mov -2048(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000dce22:
	mov -1920(%RBP),%RSP
	add $-2120, %RSP
uuid_00000000000dce25:
	mov -1912(%RBP),%RSP
	add $-2120, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce32
	jmp uuid_00000000000dce34
uuid_00000000000dce32:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2200(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce2c
	jmp uuid_00000000000dce2e
uuid_00000000000dce2c:
	push %RBP
	jmp uuid_00000000000dce29
	jmp uuid_00000000000dce2b
uuid_00000000000dce29:
	push %RBP
	mov -2136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2240(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce26
	jmp uuid_00000000000dce28
uuid_00000000000dce26:
	movb $1, -2208(%rbp)
uuid_00000000000dce28:
	mov -2232(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dce2b:
	mov -2224(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dce2e:
	mov -2216(%RBP),%RSP
	add $-2240, %RSP
	mov -2208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce2f
	jmp uuid_00000000000dce31
uuid_00000000000dce2f:
	movb $1, -1808(%rbp)
uuid_00000000000dce31:
	mov -2128(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dce34:
	mov -1824(%RBP),%RSP
	add $-2240, %RSP
uuid_00000000000dce37:
	mov -1816(%RBP),%RSP
	add $-2240, %RSP
	mov -1808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf22
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce56
	jmp uuid_00000000000dce58
uuid_00000000000dce56:
	push %RBP
	mov -2312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2416(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce44
	jmp uuid_00000000000dce46
uuid_00000000000dce44:
	push %RBP
	mov -2408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce3b
	jmp uuid_00000000000dce3d
uuid_00000000000dce3b:
	push %RBP
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	jmp uuid_00000000000dce38
	jmp uuid_00000000000dce3a
uuid_00000000000dce38:
	movb $1, -2520(%rbp)
uuid_00000000000dce3a:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000dce3d:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce41
	jmp uuid_00000000000dce43
uuid_00000000000dce41:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce3e
	jmp uuid_00000000000dce40
uuid_00000000000dce3e:
	movb $1, -2424(%rbp)
uuid_00000000000dce40:
	mov -2568(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000dce43:
	mov -2440(%RBP),%RSP
	add $-2640, %RSP
uuid_00000000000dce46:
	mov -2432(%RBP),%RSP
	add $-2640, %RSP
	mov -2424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce53
	jmp uuid_00000000000dce55
uuid_00000000000dce53:
	push %RBP
	mov -2304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2720(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce4d
	jmp uuid_00000000000dce4f
uuid_00000000000dce4d:
	push %RBP
	jmp uuid_00000000000dce4a
	jmp uuid_00000000000dce4c
uuid_00000000000dce4a:
	push %RBP
	mov -2656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2760(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce47
	jmp uuid_00000000000dce49
uuid_00000000000dce47:
	movb $1, -2728(%rbp)
uuid_00000000000dce49:
	mov -2752(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dce4c:
	mov -2744(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dce4f:
	mov -2736(%RBP),%RSP
	add $-2760, %RSP
	mov -2728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce50
	jmp uuid_00000000000dce52
uuid_00000000000dce50:
	movb $1, -2328(%rbp)
uuid_00000000000dce52:
	mov -2648(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dce55:
	mov -2344(%RBP),%RSP
	add $-2760, %RSP
uuid_00000000000dce58:
	mov -2336(%RBP),%RSP
	add $-2760, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf1f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce7a
	jmp uuid_00000000000dce7c
uuid_00000000000dce7a:
	push %RBP
	mov -2832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce77
	jmp uuid_00000000000dce79
uuid_00000000000dce77:
	push %RBP
	mov -2824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce71
	jmp uuid_00000000000dce73
uuid_00000000000dce71:
	push %RBP
	mov -3008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce6e
	jmp uuid_00000000000dce70
uuid_00000000000dce6e:
	push %RBP
	mov -3000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce68
	jmp uuid_00000000000dce6a
uuid_00000000000dce68:
	push %RBP
	mov -3184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce65
	jmp uuid_00000000000dce67
uuid_00000000000dce65:
	push %RBP
	mov -3176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce5f
	jmp uuid_00000000000dce61
uuid_00000000000dce5f:
	push %RBP
	jmp uuid_00000000000dce5c
	jmp uuid_00000000000dce5e
uuid_00000000000dce5c:
	push %RBP
	mov -3304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3408(%rbp)
	pushq $uuid_00000000000db0b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce59
	jmp uuid_00000000000dce5b
uuid_00000000000dce59:
	movb $1, -3376(%rbp)
uuid_00000000000dce5b:
	mov -3400(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce5e:
	mov -3392(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce61:
	mov -3384(%RBP),%RSP
	add $-3408, %RSP
	mov -3376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce62
	jmp uuid_00000000000dce64
uuid_00000000000dce62:
	movb $1, -3200(%rbp)
uuid_00000000000dce64:
	mov -3296(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce67:
	mov -3216(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce6a:
	mov -3208(%RBP),%RSP
	add $-3408, %RSP
	mov -3200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce6b
	jmp uuid_00000000000dce6d
uuid_00000000000dce6b:
	movb $1, -3024(%rbp)
uuid_00000000000dce6d:
	mov -3120(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce70:
	mov -3040(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce73:
	mov -3032(%RBP),%RSP
	add $-3408, %RSP
	mov -3024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce74
	jmp uuid_00000000000dce76
uuid_00000000000dce74:
	movb $1, -2848(%rbp)
uuid_00000000000dce76:
	mov -2944(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce79:
	mov -2864(%RBP),%RSP
	add $-3408, %RSP
uuid_00000000000dce7c:
	mov -2856(%RBP),%RSP
	add $-3408, %RSP
	mov -2848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf1c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce96
	jmp uuid_00000000000dce98
uuid_00000000000dce96:
	push %RBP
	mov -3480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce93
	jmp uuid_00000000000dce95
uuid_00000000000dce93:
	push %RBP
	mov -3472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce8d
	jmp uuid_00000000000dce8f
uuid_00000000000dce8d:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dce8a
	jmp uuid_00000000000dce8c
uuid_00000000000dce8a:
	push %RBP
	mov -3648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3840(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce84
	jmp uuid_00000000000dce86
uuid_00000000000dce84:
	push %RBP
	jmp uuid_00000000000dce81
	jmp uuid_00000000000dce83
uuid_00000000000dce81:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3880(%rbp)
	pushq $uuid_00000000000dce7d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce7e
	jmp uuid_00000000000dce80
uuid_00000000000dce7e:
	movb $1, -3848(%rbp)
uuid_00000000000dce80:
	mov -3872(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dce83:
	mov -3864(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dce86:
	mov -3856(%RBP),%RSP
	add $-3880, %RSP
	mov -3848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce87
	jmp uuid_00000000000dce89
uuid_00000000000dce87:
	movb $1, -3672(%rbp)
uuid_00000000000dce89:
	mov -3768(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dce8c:
	mov -3688(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dce8f:
	mov -3680(%RBP),%RSP
	add $-3880, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dce90
	jmp uuid_00000000000dce92
uuid_00000000000dce90:
	movb $1, -3496(%rbp)
uuid_00000000000dce92:
	mov -3592(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dce95:
	mov -3512(%RBP),%RSP
	add $-3880, %RSP
uuid_00000000000dce98:
	mov -3504(%RBP),%RSP
	add $-3880, %RSP
	mov -3496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf19
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -3960(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dce9c
	jmp uuid_00000000000dce9e
uuid_00000000000dce9c:
	push %RBP
	jmp uuid_00000000000dce99
	jmp uuid_00000000000dce9b
uuid_00000000000dce99:
	movb $1, -3968(%rbp)
uuid_00000000000dce9b:
	mov -3984(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000dce9e:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
	mov -3968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf16
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dceae
	jmp uuid_00000000000dceb0
uuid_00000000000dceae:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dceab
	jmp uuid_00000000000dcead
uuid_00000000000dceab:
	push %RBP
	mov -4048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcea5
	jmp uuid_00000000000dcea7
uuid_00000000000dcea5:
	push %RBP
	jmp uuid_00000000000dcea2
	jmp uuid_00000000000dcea4
uuid_00000000000dcea2:
	push %RBP
	mov -4176(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4280(%rbp)
	pushq $uuid_00000000000db164
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dce9f
	jmp uuid_00000000000dcea1
uuid_00000000000dce9f:
	movb $1, -4248(%rbp)
uuid_00000000000dcea1:
	mov -4272(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dcea4:
	mov -4264(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dcea7:
	mov -4256(%RBP),%RSP
	add $-4280, %RSP
	mov -4248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcea8
	jmp uuid_00000000000dceaa
uuid_00000000000dcea8:
	movb $1, -4072(%rbp)
uuid_00000000000dceaa:
	mov -4168(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dcead:
	mov -4088(%RBP),%RSP
	add $-4280, %RSP
uuid_00000000000dceb0:
	mov -4080(%RBP),%RSP
	add $-4280, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf13
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcec0
	jmp uuid_00000000000dcec2
uuid_00000000000dcec0:
	push %RBP
	mov -4352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcebd
	jmp uuid_00000000000dcebf
uuid_00000000000dcebd:
	push %RBP
	mov -4344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4536(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dceb7
	jmp uuid_00000000000dceb9
uuid_00000000000dceb7:
	push %RBP
	jmp uuid_00000000000dceb4
	jmp uuid_00000000000dceb6
uuid_00000000000dceb4:
	push %RBP
	mov -4472(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq $uuid_00000000000db151
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dceb1
	jmp uuid_00000000000dceb3
uuid_00000000000dceb1:
	movb $1, -4544(%rbp)
uuid_00000000000dceb3:
	mov -4568(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dceb6:
	mov -4560(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dceb9:
	mov -4552(%RBP),%RSP
	add $-4576, %RSP
	mov -4544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dceba
	jmp uuid_00000000000dcebc
uuid_00000000000dceba:
	movb $1, -4368(%rbp)
uuid_00000000000dcebc:
	mov -4464(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dcebf:
	mov -4384(%RBP),%RSP
	add $-4576, %RSP
uuid_00000000000dcec2:
	mov -4376(%RBP),%RSP
	add $-4576, %RSP
	mov -4368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf10
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4656(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcec9
	jmp uuid_00000000000dcecb
uuid_00000000000dcec9:
	push %RBP
	jmp uuid_00000000000dcec6
	jmp uuid_00000000000dcec8
uuid_00000000000dcec6:
	push %RBP
	mov -4592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcec3
	jmp uuid_00000000000dcec5
uuid_00000000000dcec3:
	movb $1, -4664(%rbp)
uuid_00000000000dcec5:
	mov -4688(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000dcec8:
	mov -4680(%RBP),%RSP
	add $-4696, %RSP
uuid_00000000000dcecb:
	mov -4672(%RBP),%RSP
	add $-4696, %RSP
	mov -4664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf0d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dced2
	jmp uuid_00000000000dced4
uuid_00000000000dced2:
	push %RBP
	jmp uuid_00000000000dcecf
	jmp uuid_00000000000dced1
uuid_00000000000dcecf:
	push %RBP
	mov -4712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcecc
	jmp uuid_00000000000dcece
uuid_00000000000dcecc:
	movb $1, -4784(%rbp)
uuid_00000000000dcece:
	mov -4808(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000dced1:
	mov -4800(%RBP),%RSP
	add $-4816, %RSP
uuid_00000000000dced4:
	mov -4792(%RBP),%RSP
	add $-4816, %RSP
	mov -4784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf0a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -4896(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcede
	jmp uuid_00000000000dcee0
uuid_00000000000dcede:
	push %RBP
	pushq -4872(%RBP)
	pushq -4880(%RBP)
	pushq -4888(%RBP)
	jmp uuid_00000000000dcedb
	jmp uuid_00000000000dcedd
uuid_00000000000dcedb:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dced8
	jmp uuid_00000000000dceda
uuid_00000000000dced8:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dced5
	jmp uuid_00000000000dced7
uuid_00000000000dced5:
	movb $1, -4904(%rbp)
uuid_00000000000dced7:
	mov -5032(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000dceda:
	mov -4952(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000dcedd:
	mov -4920(%RBP),%RSP
	add $-5104, %RSP
uuid_00000000000dcee0:
	mov -4912(%RBP),%RSP
	add $-5104, %RSP
	mov -4904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf07
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5184(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcee7
	jmp uuid_00000000000dcee9
uuid_00000000000dcee7:
	push %RBP
	mov -5176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcee4
	jmp uuid_00000000000dcee6
uuid_00000000000dcee4:
	push %RBP
	mov -5168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcee1
	jmp uuid_00000000000dcee3
uuid_00000000000dcee1:
	movb $1, -5192(%rbp)
uuid_00000000000dcee3:
	mov -5288(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000dcee6:
	mov -5208(%RBP),%RSP
	add $-5360, %RSP
uuid_00000000000dcee9:
	mov -5200(%RBP),%RSP
	add $-5360, %RSP
	mov -5192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf04
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcef0
	jmp uuid_00000000000dcef2
uuid_00000000000dcef0:
	push %RBP
	mov -5432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dceed
	jmp uuid_00000000000dceef
uuid_00000000000dceed:
	push %RBP
	mov -5424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dceea
	jmp uuid_00000000000dceec
uuid_00000000000dceea:
	movb $1, -5448(%rbp)
uuid_00000000000dceec:
	mov -5544(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000dceef:
	mov -5464(%RBP),%RSP
	add $-5616, %RSP
uuid_00000000000dcef2:
	mov -5456(%RBP),%RSP
	add $-5616, %RSP
	mov -5448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf01
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -5696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcef6
	jmp uuid_00000000000dcef8
uuid_00000000000dcef6:
	push %RBP
	jmp uuid_00000000000dcef3
	jmp uuid_00000000000dcef5
uuid_00000000000dcef3:
	movb $1, -5704(%rbp)
uuid_00000000000dcef5:
	mov -5720(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000dcef8:
	mov -5712(%RBP),%RSP
	add $-5720, %RSP
	mov -5704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcefe
	push %RBP
	jmp uuid_00000000000dcefb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcefa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcefd
uuid_00000000000dcefb:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcef9
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcefd:
	mov -5728(%RBP),%RSP
	add $-5728, %RSP
	jmp uuid_00000000000dcf00
uuid_00000000000dcefe:
uuid_00000000000dcf00:
	mov -5624(%RBP),%RSP
	add $-5720, %RSP
	jmp uuid_00000000000dcf03
uuid_00000000000dcf01:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf03:
	mov -5368(%RBP),%RSP
	add $-5616, %RSP
	jmp uuid_00000000000dcf06
uuid_00000000000dcf04:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf06:
	mov -5112(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000dcf09
uuid_00000000000dcf07:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf09:
	mov -4824(%RBP),%RSP
	add $-5104, %RSP
	jmp uuid_00000000000dcf0c
uuid_00000000000dcf0a:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf0c:
	mov -4704(%RBP),%RSP
	add $-4816, %RSP
	jmp uuid_00000000000dcf0f
uuid_00000000000dcf0d:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf0f:
	mov -4584(%RBP),%RSP
	add $-4696, %RSP
	jmp uuid_00000000000dcf12
uuid_00000000000dcf10:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf12:
	mov -4288(%RBP),%RSP
	add $-4576, %RSP
	jmp uuid_00000000000dcf15
uuid_00000000000dcf13:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf15:
	mov -3992(%RBP),%RSP
	add $-4280, %RSP
	jmp uuid_00000000000dcf18
uuid_00000000000dcf16:
uuid_00000000000dcf18:
	mov -3888(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000dcf1b
uuid_00000000000dcf19:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3520(%rbp)
	pushq -3528(%rbp)
	pushq -3536(%rbp)
	pushq -3544(%rbp)
	pushq -3552(%rbp)
	pushq -3560(%rbp)
	pushq -3568(%rbp)
	pushq -3576(%rbp)
	pushq -3584(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf1b:
	mov -3416(%RBP),%RSP
	add $-3880, %RSP
	jmp uuid_00000000000dcf1e
uuid_00000000000dcf1c:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	pushq -3264(%rbp)
	pushq -3272(%rbp)
	pushq -3280(%rbp)
	pushq -3288(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq -3056(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	pushq -3088(%rbp)
	pushq -3096(%rbp)
	pushq -3104(%rbp)
	pushq -3112(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf1e:
	mov -2768(%RBP),%RSP
	add $-3408, %RSP
	jmp uuid_00000000000dcf21
uuid_00000000000dcf1f:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq -2616(%rbp)
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf21:
	mov -2248(%RBP),%RSP
	add $-2760, %RSP
	jmp uuid_00000000000dcf24
uuid_00000000000dcf22:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf24:
	mov -1728(%RBP),%RSP
	add $-2240, %RSP
	jmp uuid_00000000000dcf27
uuid_00000000000dcf25:
uuid_00000000000dcf27:
	mov -1400(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000dcf2a
uuid_00000000000dcf28:
uuid_00000000000dcf2a:
	mov -1176(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000dcf2d
uuid_00000000000dcf2b:
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf2d:
	mov -672(%RBP),%RSP
	add $-1168, %RSP
	jmp uuid_00000000000dcf30
uuid_00000000000dcf2e:
uuid_00000000000dcf30:
	mov -560(%RBP),%RSP
	add $-664, %RSP
	jmp uuid_00000000000dcf33
uuid_00000000000dcf31:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcdc0
#call function assert-well-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call assert_SB_well_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcdc2
uuid_00000000000dcdc0:
uuid_00000000000dcdc2:
	mov -560(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dcf33:
	mov -320(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dcf36
uuid_00000000000dcf34:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf36:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dcf39
uuid_00000000000dcf37:
#call function assert-one-typed : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call assert_SB_one_SB_typed_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf39:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
assert_SB_one_SB_typed_CL_ArrowNilAST:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcf3a
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1de
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcf3c
uuid_00000000000dcf3a:
uuid_00000000000dcf3c:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
infer_SB_ctx_CL_ArrowTContextConsASTTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf64
	jmp uuid_00000000000dcf66
uuid_00000000000dcf64:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf52
	jmp uuid_00000000000dcf54
uuid_00000000000dcf52:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf40
	jmp uuid_00000000000dcf42
uuid_00000000000dcf40:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000dcf3d
	jmp uuid_00000000000dcf3f
uuid_00000000000dcf3d:
	movb $1, -552(%rbp)
uuid_00000000000dcf3f:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dcf42:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf4f
	jmp uuid_00000000000dcf51
uuid_00000000000dcf4f:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf49
	jmp uuid_00000000000dcf4b
uuid_00000000000dcf49:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000dcf46
	jmp uuid_00000000000dcf48
uuid_00000000000dcf46:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcf43
	jmp uuid_00000000000dcf45
uuid_00000000000dcf43:
	movb $1, -680(%rbp)
uuid_00000000000dcf45:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dcf48:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dcf4b:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf4c
	jmp uuid_00000000000dcf4e
uuid_00000000000dcf4c:
	movb $1, -456(%rbp)
uuid_00000000000dcf4e:
	mov -600(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dcf51:
	mov -472(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dcf54:
	mov -464(%RBP),%RSP
	add $-768, %RSP
	mov -456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf61
	jmp uuid_00000000000dcf63
uuid_00000000000dcf61:
	push %RBP
	mov -336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf5b
	jmp uuid_00000000000dcf5d
uuid_00000000000dcf5b:
	push %RBP
	jmp uuid_00000000000dcf58
	jmp uuid_00000000000dcf5a
uuid_00000000000dcf58:
	push %RBP
	mov -784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcf55
	jmp uuid_00000000000dcf57
uuid_00000000000dcf55:
	movb $1, -856(%rbp)
uuid_00000000000dcf57:
	mov -880(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dcf5a:
	mov -872(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dcf5d:
	mov -864(%RBP),%RSP
	add $-888, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf5e
	jmp uuid_00000000000dcf60
uuid_00000000000dcf5e:
	movb $1, -360(%rbp)
uuid_00000000000dcf60:
	mov -776(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dcf63:
	mov -376(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000dcf66:
	mov -368(%RBP),%RSP
	add $-888, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfa5
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf97
	jmp uuid_00000000000dcf99
uuid_00000000000dcf97:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf8e
	jmp uuid_00000000000dcf90
uuid_00000000000dcf8e:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf7c
	jmp uuid_00000000000dcf7e
uuid_00000000000dcf7c:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf6a
	jmp uuid_00000000000dcf6c
uuid_00000000000dcf6a:
	push %RBP
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	jmp uuid_00000000000dcf67
	jmp uuid_00000000000dcf69
uuid_00000000000dcf67:
	movb $1, -1264(%rbp)
uuid_00000000000dcf69:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dcf6c:
	mov -1272(%RBP),%RSP
	add $-1304, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf79
	jmp uuid_00000000000dcf7b
uuid_00000000000dcf79:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf73
	jmp uuid_00000000000dcf75
uuid_00000000000dcf73:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000dcf70
	jmp uuid_00000000000dcf72
uuid_00000000000dcf70:
	push %RBP
	mov -1320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcf6d
	jmp uuid_00000000000dcf6f
uuid_00000000000dcf6d:
	movb $1, -1392(%rbp)
uuid_00000000000dcf6f:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dcf72:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dcf75:
	mov -1400(%RBP),%RSP
	add $-1480, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf76
	jmp uuid_00000000000dcf78
uuid_00000000000dcf76:
	movb $1, -1168(%rbp)
uuid_00000000000dcf78:
	mov -1312(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dcf7b:
	mov -1184(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dcf7e:
	mov -1176(%RBP),%RSP
	add $-1480, %RSP
	mov -1168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf8b
	jmp uuid_00000000000dcf8d
uuid_00000000000dcf8b:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf85
	jmp uuid_00000000000dcf87
uuid_00000000000dcf85:
	push %RBP
	jmp uuid_00000000000dcf82
	jmp uuid_00000000000dcf84
uuid_00000000000dcf82:
	push %RBP
	mov -1496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1600(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcf7f
	jmp uuid_00000000000dcf81
uuid_00000000000dcf7f:
	movb $1, -1568(%rbp)
uuid_00000000000dcf81:
	mov -1592(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcf84:
	mov -1584(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcf87:
	mov -1576(%RBP),%RSP
	add $-1600, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf88
	jmp uuid_00000000000dcf8a
uuid_00000000000dcf88:
	movb $1, -1072(%rbp)
uuid_00000000000dcf8a:
	mov -1488(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcf8d:
	mov -1088(%RBP),%RSP
	add $-1600, %RSP
uuid_00000000000dcf90:
	mov -1080(%RBP),%RSP
	add $-1600, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf94
	jmp uuid_00000000000dcf96
uuid_00000000000dcf94:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcf91
	jmp uuid_00000000000dcf93
uuid_00000000000dcf91:
	movb $1, -976(%rbp)
uuid_00000000000dcf93:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dcf96:
	mov -992(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dcf99:
	mov -984(%RBP),%RSP
	add $-1680, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfa2
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov -1760(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcf9f
	push %RBP
	jmp uuid_00000000000dcf9c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcf9b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcf9e
uuid_00000000000dcf9c:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dcf9a
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dcf9e:
	mov -1768(%RBP),%RSP
	add $-1768, %RSP
	jmp uuid_00000000000dcfa1
uuid_00000000000dcf9f:
uuid_00000000000dcfa1:
	mov -1688(%RBP),%RSP
	add $-1760, %RSP
	jmp uuid_00000000000dcfa4
uuid_00000000000dcfa2:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1480(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1480(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-ctx : Arrow<Cons<TContext,AST>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	mov %RBX, %RBP
	call infer_SB_ctx_CL_ArrowTContextConsASTTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcfa4:
	mov -896(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000dcfa7
uuid_00000000000dcfa5:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -768(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -768(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $7
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcfa7:
	mov -280(%RBP),%RSP
	add $-888, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $200, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsListTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfb9
	push %RBP
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfb2
	jmp uuid_00000000000dcfb4
uuid_00000000000dcfb2:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfaf
	jmp uuid_00000000000dcfb1
uuid_00000000000dcfaf:
	push %RBP
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000dcfac
	jmp uuid_00000000000dcfae
uuid_00000000000dcfac:
	movb $1, -312(%rbp)
uuid_00000000000dcfae:
	mov -376(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dcfb1:
	mov -328(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000dcfb4:
	mov -320(%RBP),%RSP
	add $-400, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfb6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcfb5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcfb8
uuid_00000000000dcfb6:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcfb8:
	mov -264(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000dcfbb
uuid_00000000000dcfb9:
uuid_00000000000dcfbb:
	mov -216(%RBP),%RSP
	add $-256, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
infer_SB_tctx_CL_ArrowTContextConsTypeTContext:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfc2
	jmp uuid_00000000000dcfc4
uuid_00000000000dcfc2:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfbf
	jmp uuid_00000000000dcfc1
uuid_00000000000dcfbf:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfbc
	jmp uuid_00000000000dcfbe
uuid_00000000000dcfbc:
	movb $1, -216(%rbp)
uuid_00000000000dcfbe:
	mov -264(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dcfc1:
	mov -232(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000dcfc4:
	mov -224(%RBP),%RSP
	add $-288, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfde
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfc8
	jmp uuid_00000000000dcfca
uuid_00000000000dcfc8:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dcfc5
	jmp uuid_00000000000dcfc7
uuid_00000000000dcfc5:
	movb $1, -328(%rbp)
uuid_00000000000dcfc7:
	mov -344(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dcfca:
	mov -336(%RBP),%RSP
	add $-352, %RSP
	mov -328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfdb
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfd1
	jmp uuid_00000000000dcfd3
uuid_00000000000dcfd1:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dcfce
	jmp uuid_00000000000dcfd0
uuid_00000000000dcfce:
	push %RBP
	jmp uuid_00000000000dcfcb
	jmp uuid_00000000000dcfcd
uuid_00000000000dcfcb:
	movb $1, -392(%rbp)
uuid_00000000000dcfcd:
	mov -456(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dcfd0:
	mov -408(%RBP),%RSP
	add $-456, %RSP
uuid_00000000000dcfd3:
	mov -400(%RBP),%RSP
	add $-456, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfd8
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dcfd5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcfd4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dcfd7
uuid_00000000000dcfd5:
uuid_00000000000dcfd7:
	mov -464(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000dcfda
uuid_00000000000dcfd8:
#call function infer-tctx : Arrow<Cons<TContext,List<Type>>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsListTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcfda:
	mov -360(%RBP),%RSP
	add $-456, %RSP
	jmp uuid_00000000000dcfdd
uuid_00000000000dcfdb:
#call function close : Arrow<TContext,Array<TContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TContextTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -352(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5ed
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcfdd:
	mov -296(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000dcfe0
uuid_00000000000dcfde:
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function infer-tctx : Arrow<Cons<TContext,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call infer_SB_tctx_CL_ArrowTContextConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dcfe0:
	mov -184(%RBP),%RSP
	add $-288, %RSP
	subq $120, %rsp
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	addq $120, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
compile_SB_exit_SB_cleanup_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_data_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dcfea
	jmp uuid_00000000000dcfec
uuid_00000000000dcfea:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe8
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfe9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dcfec:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dcfef
	jmp uuid_00000000000dcff1
uuid_00000000000dcfef:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfed
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcfee
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dcff1:
	mov -48(%RBP),%RSP
	add $-48, %RSP
	push %RBP
	mov $main_SB_with_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dcffc
	jmp uuid_00000000000dcffe
uuid_00000000000dcffc:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcff2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcff3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
	mov $main_SB_with_SB_argv_CL_U8, %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dcff6
	jmp uuid_00000000000dcff8
uuid_00000000000dcff6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcff4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcff5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dcff8:
	mov -64(%RBP),%RSP
	add $-64, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcff9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcffa
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcffb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dcffe:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd006
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd003
	push %RBP
	pushq -16(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd000
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dcfff
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd002
uuid_00000000000dd000:
#call function compile-c : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_c_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd002:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dd005
uuid_00000000000dd003:
#call function compile-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd005:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000dd008
uuid_00000000000dd006:
#call function compile-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd008:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000dd053:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd054
	jmp uuid_00000000000dd055
uuid_00000000000dd054:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd024
	jmp uuid_00000000000dd026
uuid_00000000000dd024:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd01b
	jmp uuid_00000000000dd01d
uuid_00000000000dd01b:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd018
	jmp uuid_00000000000dd01a
uuid_00000000000dd018:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd012
	jmp uuid_00000000000dd014
uuid_00000000000dd012:
	push %RBP
	jmp uuid_00000000000dd00f
	jmp uuid_00000000000dd011
uuid_00000000000dd00f:
	push %RBP
	jmp uuid_00000000000dd00c
	jmp uuid_00000000000dd00e
uuid_00000000000dd00c:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd009
	jmp uuid_00000000000dd00b
uuid_00000000000dd009:
	movb $1, -568(%rbp)
uuid_00000000000dd00b:
	mov -600(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd00e:
	mov -592(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd011:
	mov -584(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd014:
	mov -576(%RBP),%RSP
	add $-608, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd015
	jmp uuid_00000000000dd017
uuid_00000000000dd015:
	movb $1, -408(%rbp)
uuid_00000000000dd017:
	mov -504(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd01a:
	mov -424(%RBP),%RSP
	add $-608, %RSP
uuid_00000000000dd01d:
	mov -416(%RBP),%RSP
	add $-608, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd021
	jmp uuid_00000000000dd023
uuid_00000000000dd021:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd01e
	jmp uuid_00000000000dd020
uuid_00000000000dd01e:
	movb $1, -312(%rbp)
uuid_00000000000dd020:
	mov -616(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd023:
	mov -328(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd026:
	mov -320(%RBP),%RSP
	add $-688, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd050
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd03d
	jmp uuid_00000000000dd03f
uuid_00000000000dd03d:
	push %RBP
	mov -760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd03a
	jmp uuid_00000000000dd03c
uuid_00000000000dd03a:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd037
	jmp uuid_00000000000dd039
uuid_00000000000dd037:
	movb $1, -776(%rbp)
uuid_00000000000dd039:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000dd03c:
	mov -792(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000dd03f:
	mov -784(%RBP),%RSP
	add $-944, %RSP
	mov -776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd04d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd046
	jmp uuid_00000000000dd048
uuid_00000000000dd046:
	push %RBP
	jmp uuid_00000000000dd043
	jmp uuid_00000000000dd045
uuid_00000000000dd043:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd040
	jmp uuid_00000000000dd042
uuid_00000000000dd040:
	movb $1, -1032(%rbp)
uuid_00000000000dd042:
	mov -1056(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd045:
	mov -1048(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd048:
	mov -1040(%RBP),%RSP
	add $-1128, %RSP
	mov -1032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd04a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd049
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd04c
uuid_00000000000dd04a:
	movq -1128(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd04c:
	mov -952(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000dd04f
uuid_00000000000dd04d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -944(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd04f:
	mov -696(%RBP),%RSP
	add $-944, %RSP
	jmp uuid_00000000000dd052
uuid_00000000000dd050:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd028
	jmp uuid_00000000000dd02a
uuid_00000000000dd028:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000dd02a:
	mov -696(%RBP),%RSP
	add $-696, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd034
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd031
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000dd02b
	pushq $0
	pushq $uuid_00000000000dd02c
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd02e
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
	pushq -952(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -608(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000dd030
uuid_00000000000dd02e:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -608(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd030:
	mov -896(%RBP),%RSP
	add $-896, %RSP
	jmp uuid_00000000000dd033
uuid_00000000000dd031:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -608(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd033:
	mov -888(%RBP),%RSP
	add $-888, %RSP
	jmp uuid_00000000000dd036
uuid_00000000000dd034:
uuid_00000000000dd036:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	movq -688(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -680(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -672(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd052:
	mov -232(%RBP),%RSP
	add $-880, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd053
uuid_00000000000dd055:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
uuid_00000000000dd075:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd076
	jmp uuid_00000000000dd077
uuid_00000000000dd076:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd06e
	jmp uuid_00000000000dd070
uuid_00000000000dd06e:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd065
	jmp uuid_00000000000dd067
uuid_00000000000dd065:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd062
	jmp uuid_00000000000dd064
uuid_00000000000dd062:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd05c
	jmp uuid_00000000000dd05e
uuid_00000000000dd05c:
	push %RBP
	jmp uuid_00000000000dd059
	jmp uuid_00000000000dd05b
uuid_00000000000dd059:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd056
	jmp uuid_00000000000dd058
uuid_00000000000dd056:
	movb $1, -656(%rbp)
uuid_00000000000dd058:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd05b:
	mov -672(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd05e:
	mov -664(%RBP),%RSP
	add $-688, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd05f
	jmp uuid_00000000000dd061
uuid_00000000000dd05f:
	movb $1, -480(%rbp)
uuid_00000000000dd061:
	mov -576(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd064:
	mov -496(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd067:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd06b
	jmp uuid_00000000000dd06d
uuid_00000000000dd06b:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd068
	jmp uuid_00000000000dd06a
uuid_00000000000dd068:
	movb $1, -384(%rbp)
uuid_00000000000dd06a:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd06d:
	mov -400(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd070:
	mov -392(%RBP),%RSP
	add $-768, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd072
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd071
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd074
uuid_00000000000dd072:
#call function compile-c-typedef-ordinal : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_ordinal_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -768(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000dd074:
	mov -304(%RBP),%RSP
	add $-768, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd075
uuid_00000000000dd077:
uuid_00000000000dd097:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd098
	jmp uuid_00000000000dd099
uuid_00000000000dd098:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd090
	jmp uuid_00000000000dd092
uuid_00000000000dd090:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd087
	jmp uuid_00000000000dd089
uuid_00000000000dd087:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd084
	jmp uuid_00000000000dd086
uuid_00000000000dd084:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd07e
	jmp uuid_00000000000dd080
uuid_00000000000dd07e:
	push %RBP
	jmp uuid_00000000000dd07b
	jmp uuid_00000000000dd07d
uuid_00000000000dd07b:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd078
	jmp uuid_00000000000dd07a
uuid_00000000000dd078:
	movb $1, -656(%rbp)
uuid_00000000000dd07a:
	mov -680(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd07d:
	mov -672(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd080:
	mov -664(%RBP),%RSP
	add $-688, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd081
	jmp uuid_00000000000dd083
uuid_00000000000dd081:
	movb $1, -480(%rbp)
uuid_00000000000dd083:
	mov -576(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd086:
	mov -496(%RBP),%RSP
	add $-688, %RSP
uuid_00000000000dd089:
	mov -488(%RBP),%RSP
	add $-688, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd08d
	jmp uuid_00000000000dd08f
uuid_00000000000dd08d:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd08a
	jmp uuid_00000000000dd08c
uuid_00000000000dd08a:
	movb $1, -384(%rbp)
uuid_00000000000dd08c:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd08f:
	mov -400(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd092:
	mov -392(%RBP),%RSP
	add $-768, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd094
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd093
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd096
uuid_00000000000dd094:
#call function compile-c-typedef : Arrow<Cons<Type,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_CL_ArrowNilConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -768(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dd096:
	mov -304(%RBP),%RSP
	add $-768, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd097
uuid_00000000000dd099:
#call function try-continue-compile-c-typedefs : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call try_SB_continue_SB_compile_SB_c_SB_typedefs_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_blob_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dd0f1:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd0f2
	jmp uuid_00000000000dd0f3
uuid_00000000000dd0f2:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0a9
	jmp uuid_00000000000dd0ab
uuid_00000000000dd0a9:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0a0
	jmp uuid_00000000000dd0a2
uuid_00000000000dd0a0:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd09d
	jmp uuid_00000000000dd09f
uuid_00000000000dd09d:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd09a
	jmp uuid_00000000000dd09c
uuid_00000000000dd09a:
	movb $1, -336(%rbp)
uuid_00000000000dd09c:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd09f:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd0a2:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0a6
	jmp uuid_00000000000dd0a8
uuid_00000000000dd0a6:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0a3
	jmp uuid_00000000000dd0a5
uuid_00000000000dd0a3:
	movb $1, -240(%rbp)
uuid_00000000000dd0a5:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dd0a8:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dd0ab:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0ee
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0c7
	jmp uuid_00000000000dd0c9
uuid_00000000000dd0c7:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0be
	jmp uuid_00000000000dd0c0
uuid_00000000000dd0be:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0bb
	jmp uuid_00000000000dd0bd
uuid_00000000000dd0bb:
	push %RBP
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0b5
	jmp uuid_00000000000dd0b7
uuid_00000000000dd0b5:
	push %RBP
	jmp uuid_00000000000dd0b2
	jmp uuid_00000000000dd0b4
uuid_00000000000dd0b2:
	push %RBP
	jmp uuid_00000000000dd0af
	jmp uuid_00000000000dd0b1
uuid_00000000000dd0af:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd0ac
	jmp uuid_00000000000dd0ae
uuid_00000000000dd0ac:
	movb $1, -928(%rbp)
uuid_00000000000dd0ae:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd0b1:
	mov -952(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd0b4:
	mov -944(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd0b7:
	mov -936(%RBP),%RSP
	add $-968, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0b8
	jmp uuid_00000000000dd0ba
uuid_00000000000dd0b8:
	movb $1, -768(%rbp)
uuid_00000000000dd0ba:
	mov -864(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd0bd:
	mov -784(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd0c0:
	mov -776(%RBP),%RSP
	add $-968, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0c4
	jmp uuid_00000000000dd0c6
uuid_00000000000dd0c4:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0c1
	jmp uuid_00000000000dd0c3
uuid_00000000000dd0c1:
	movb $1, -672(%rbp)
uuid_00000000000dd0c3:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd0c6:
	mov -688(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd0c9:
	mov -680(%RBP),%RSP
	add $-1048, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0eb
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0e4
	jmp uuid_00000000000dd0e6
uuid_00000000000dd0e4:
	push %RBP
	mov -1120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0e1
	jmp uuid_00000000000dd0e3
uuid_00000000000dd0e1:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd0de
	jmp uuid_00000000000dd0e0
uuid_00000000000dd0de:
	movb $1, -1136(%rbp)
uuid_00000000000dd0e0:
	mov -1232(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dd0e3:
	mov -1152(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000dd0e6:
	mov -1144(%RBP),%RSP
	add $-1304, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd0e7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd0ea
uuid_00000000000dd0e8:
	movq -1304(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd0ea:
	mov -1056(%RBP),%RSP
	add $-1304, %RSP
	jmp uuid_00000000000dd0ed
uuid_00000000000dd0eb:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	push %RBP
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0d3
	jmp uuid_00000000000dd0d5
uuid_00000000000dd0d3:
	push %RBP
	jmp uuid_00000000000dd0d0
	jmp uuid_00000000000dd0d2
uuid_00000000000dd0d0:
	push %RBP
	jmp uuid_00000000000dd0cd
	jmp uuid_00000000000dd0cf
uuid_00000000000dd0cd:
	push %RBP
	jmp uuid_00000000000dd0ca
	jmp uuid_00000000000dd0cc
uuid_00000000000dd0ca:
	movb $1, -1208(%rbp)
uuid_00000000000dd0cc:
	mov -1240(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dd0cf:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dd0d2:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dd0d5:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0db
	push %RBP
	jmp uuid_00000000000dd0d8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd0d7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd0da
uuid_00000000000dd0d8:
uuid_00000000000dd0da:
	mov -1248(%RBP),%RSP
	add $-1248, %RSP
	jmp uuid_00000000000dd0dd
uuid_00000000000dd0db:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $uuid_00000000000dd02b
	pushq $0
	pushq $uuid_00000000000dd0d6
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1392(%RBP)
	popq -1384(%RBP)
	popq -1376(%RBP)
	popq -1368(%RBP)
	popq -1360(%RBP)
	popq -1352(%RBP)
	popq -1344(%RBP)
	popq -1336(%RBP)
	popq -1328(%RBP)
	popq -1320(%RBP)
	popq -1312(%RBP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
	popq -1280(%RBP)
	popq -1272(%RBP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -968(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd0dd:
	mov -1128(%RBP),%RSP
	add $-1392, %RSP
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd0ed:
	mov -592(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000dd0f0
uuid_00000000000dd0ee:
	movq -584(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd0f0:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd0f1
uuid_00000000000dd0f3:
	pushq $0
	pushq $0
	pushq $3
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r14
	movq 0(%r14), %r15
	movq %r15, -80(%rbp)
	movq 8(%r14), %r15
	movq %r15, -72(%rbp)
	movq 16(%r14), %r15
	movq %r15, -64(%rbp)
	movq 24(%r14), %r15
	movq %r15, -56(%rbp)
	movq 32(%r14), %r15
	movq %r15, -48(%rbp)
	movq 40(%r14), %r15
	movq %r15, -40(%rbp)
	movq 48(%r14), %r15
	movq %r15, -32(%rbp)
	movq 56(%r14), %r15
	movq %r15, -24(%rbp)
	movq 64(%r14), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd149:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd14a
	jmp uuid_00000000000dd14b
uuid_00000000000dd14a:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd10f
	jmp uuid_00000000000dd111
uuid_00000000000dd10f:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd106
	jmp uuid_00000000000dd108
uuid_00000000000dd106:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd103
	jmp uuid_00000000000dd105
uuid_00000000000dd103:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd0fd
	jmp uuid_00000000000dd0ff
uuid_00000000000dd0fd:
	push %RBP
	jmp uuid_00000000000dd0fa
	jmp uuid_00000000000dd0fc
uuid_00000000000dd0fa:
	push %RBP
	jmp uuid_00000000000dd0f7
	jmp uuid_00000000000dd0f9
uuid_00000000000dd0f7:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd0f4
	jmp uuid_00000000000dd0f6
uuid_00000000000dd0f4:
	movb $1, -520(%rbp)
uuid_00000000000dd0f6:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd0f9:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd0fc:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd0ff:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd100
	jmp uuid_00000000000dd102
uuid_00000000000dd100:
	movb $1, -360(%rbp)
uuid_00000000000dd102:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd105:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd108:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd10c
	jmp uuid_00000000000dd10e
uuid_00000000000dd10c:
	push %RBP
	mov -240(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd109
	jmp uuid_00000000000dd10b
uuid_00000000000dd109:
	movb $1, -264(%rbp)
uuid_00000000000dd10b:
	mov -568(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd10e:
	mov -280(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd111:
	mov -272(%RBP),%RSP
	add $-640, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd146
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd121
	jmp uuid_00000000000dd123
uuid_00000000000dd121:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd118
	jmp uuid_00000000000dd11a
uuid_00000000000dd118:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd115
	jmp uuid_00000000000dd117
uuid_00000000000dd115:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd112
	jmp uuid_00000000000dd114
uuid_00000000000dd112:
	movb $1, -824(%rbp)
uuid_00000000000dd114:
	mov -920(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dd117:
	mov -840(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dd11a:
	mov -832(%RBP),%RSP
	add $-992, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd11e
	jmp uuid_00000000000dd120
uuid_00000000000dd11e:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd11b
	jmp uuid_00000000000dd11d
uuid_00000000000dd11b:
	movb $1, -728(%rbp)
uuid_00000000000dd11d:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd120:
	mov -744(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd123:
	mov -736(%RBP),%RSP
	add $-1072, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd143
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd130
	jmp uuid_00000000000dd132
uuid_00000000000dd130:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd127
	jmp uuid_00000000000dd129
uuid_00000000000dd127:
	push %RBP
	jmp uuid_00000000000dd124
	jmp uuid_00000000000dd126
uuid_00000000000dd124:
	movb $1, -1256(%rbp)
uuid_00000000000dd126:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000dd129:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd12d
	jmp uuid_00000000000dd12f
uuid_00000000000dd12d:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd12a
	jmp uuid_00000000000dd12c
uuid_00000000000dd12a:
	movb $1, -1160(%rbp)
uuid_00000000000dd12c:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000dd12f:
	mov -1176(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000dd132:
	mov -1168(%RBP),%RSP
	add $-1352, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd140
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -1432(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd139
	jmp uuid_00000000000dd13b
uuid_00000000000dd139:
	push %RBP
	mov -1424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd136
	jmp uuid_00000000000dd138
uuid_00000000000dd136:
	push %RBP
	mov -1416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd133
	jmp uuid_00000000000dd135
uuid_00000000000dd133:
	movb $1, -1440(%rbp)
uuid_00000000000dd135:
	mov -1536(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000dd138:
	mov -1456(%RBP),%RSP
	add $-1608, %RSP
uuid_00000000000dd13b:
	mov -1448(%RBP),%RSP
	add $-1608, %RSP
	mov -1440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd13d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd13c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd13f
uuid_00000000000dd13d:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000dd02d
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq $0
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1608(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd13f:
	mov -1360(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000dd142
uuid_00000000000dd140:
	movq -1352(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd142:
	mov -1080(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000dd145
uuid_00000000000dd143:
	movq -1072(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd145:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000dd148
uuid_00000000000dd146:
	movq -640(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd148:
	mov -184(%RBP),%RSP
	add $-640, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd149
uuid_00000000000dd14b:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_gnu_CL_ArrowNilNil:
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dd19b:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd19c
	jmp uuid_00000000000dd19d
uuid_00000000000dd19c:
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd167
	jmp uuid_00000000000dd169
uuid_00000000000dd167:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd15e
	jmp uuid_00000000000dd160
uuid_00000000000dd15e:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd15b
	jmp uuid_00000000000dd15d
uuid_00000000000dd15b:
	push %RBP
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd155
	jmp uuid_00000000000dd157
uuid_00000000000dd155:
	push %RBP
	jmp uuid_00000000000dd152
	jmp uuid_00000000000dd154
uuid_00000000000dd152:
	push %RBP
	jmp uuid_00000000000dd14f
	jmp uuid_00000000000dd151
uuid_00000000000dd14f:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd14c
	jmp uuid_00000000000dd14e
uuid_00000000000dd14c:
	movb $1, -496(%rbp)
uuid_00000000000dd14e:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd151:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd154:
	mov -512(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd157:
	mov -504(%RBP),%RSP
	add $-536, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd158
	jmp uuid_00000000000dd15a
uuid_00000000000dd158:
	movb $1, -336(%rbp)
uuid_00000000000dd15a:
	mov -432(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd15d:
	mov -352(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dd160:
	mov -344(%RBP),%RSP
	add $-536, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd164
	jmp uuid_00000000000dd166
uuid_00000000000dd164:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd161
	jmp uuid_00000000000dd163
uuid_00000000000dd161:
	movb $1, -240(%rbp)
uuid_00000000000dd163:
	mov -544(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dd166:
	mov -256(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dd169:
	mov -248(%RBP),%RSP
	add $-616, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd198
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd185
	jmp uuid_00000000000dd187
uuid_00000000000dd185:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -792(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd17c
	jmp uuid_00000000000dd17e
uuid_00000000000dd17c:
	push %RBP
	mov -784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd179
	jmp uuid_00000000000dd17b
uuid_00000000000dd179:
	push %RBP
	mov -776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd176
	jmp uuid_00000000000dd178
uuid_00000000000dd176:
	movb $1, -800(%rbp)
uuid_00000000000dd178:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd17b:
	mov -816(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dd17e:
	mov -808(%RBP),%RSP
	add $-968, %RSP
	mov -800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd182
	jmp uuid_00000000000dd184
uuid_00000000000dd182:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd17f
	jmp uuid_00000000000dd181
uuid_00000000000dd17f:
	movb $1, -704(%rbp)
uuid_00000000000dd181:
	mov -976(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd184:
	mov -720(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dd187:
	mov -712(%RBP),%RSP
	add $-1048, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd195
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd18e
	jmp uuid_00000000000dd190
uuid_00000000000dd18e:
	push %RBP
	jmp uuid_00000000000dd18b
	jmp uuid_00000000000dd18d
uuid_00000000000dd18b:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd188
	jmp uuid_00000000000dd18a
uuid_00000000000dd188:
	movb $1, -1136(%rbp)
uuid_00000000000dd18a:
	mov -1160(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000dd18d:
	mov -1152(%RBP),%RSP
	add $-1232, %RSP
uuid_00000000000dd190:
	mov -1144(%RBP),%RSP
	add $-1232, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd192
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd191
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd194
uuid_00000000000dd192:
	movq -1232(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd194:
	mov -1056(%RBP),%RSP
	add $-1232, %RSP
	jmp uuid_00000000000dd197
uuid_00000000000dd195:
	movq -1048(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd197:
	mov -624(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000dd19a
uuid_00000000000dd198:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd16a
	jmp uuid_00000000000dd16c
uuid_00000000000dd16a:
	mov $assemble_SB_argv_SB_referenced_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000dd16c:
	mov -624(%RBP),%RSP
	add $-624, %RSP
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd173
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd170
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000dd02b
	pushq $0
	pushq $uuid_00000000000dd02c
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd16d
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
	pushq -880(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
#call function without-constructor : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call without_SB_constructor_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	jmp uuid_00000000000dd16f
uuid_00000000000dd16d:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd16f:
	mov -824(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000dd172
uuid_00000000000dd170:
#call function fragment::set-term : Arrow<Cons<Fragment,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	push -256(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -536(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	mov $global_SB_ctx_CL_FContextFContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
uuid_00000000000dd172:
	mov -816(%RBP),%RSP
	add $-816, %RSP
	jmp uuid_00000000000dd175
uuid_00000000000dd173:
uuid_00000000000dd175:
	mov -808(%RBP),%RSP
	add $-808, %RSP
	movq -616(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -16(%rbp)
uuid_00000000000dd19a:
	mov -160(%RBP),%RSP
	add $-808, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd19b
uuid_00000000000dd19d:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-finish : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-write : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_write_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_CL_ArrowNilNil:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -16(%rbp)
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1a5
	push %RBP
	pushq -16(%rbp)
	mov -48(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1a2
	push %RBP
	pushq -16(%rbp)
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd19f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd19e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd1a1
uuid_00000000000dd19f:
#call function compile-finish-gnu : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_gnu_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd1a1:
	mov -56(%RBP),%RSP
	add $-64, %RSP
	jmp uuid_00000000000dd1a4
uuid_00000000000dd1a2:
#call function compile-finish-blob : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_blob_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd1a4:
	mov -40(%RBP),%RSP
	add $-48, %RSP
	jmp uuid_00000000000dd1a7
uuid_00000000000dd1a5:
#call function compile-finish-c : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_finish_SB_c_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd1a7:
	mov -24(%RBP),%RSP
	add $-32, %RSP
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_c_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_c_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_gnu_CL_ArrowNilNil:
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-text-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_text_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-exit-cleanup : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_exit_SB_cleanup_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd1a8
	jmp uuid_00000000000dd1aa
uuid_00000000000dd1a8:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-data-header : Arrow<Nil,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_SB_data_SB_header_CL_ArrowSNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
uuid_00000000000dd1aa:
	mov -40(%RBP),%RSP
	add $-40, %RSP
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-string : Arrow<S,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call escape_SB_string_CL_ArrowSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, %r15
	movq $assemble_SB_final_CL_String, %r14
	movq %r15, 0(%r14)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_finish_SB_blob_CL_ArrowNilNil:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd1ab
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext:
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq $0
	push %RBP
	mov -440(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1b2
	jmp uuid_00000000000dd1b4
uuid_00000000000dd1b2:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd1af
	jmp uuid_00000000000dd1b1
uuid_00000000000dd1af:
	push %RBP
	jmp uuid_00000000000dd1ac
	jmp uuid_00000000000dd1ae
uuid_00000000000dd1ac:
	movb $1, -448(%rbp)
uuid_00000000000dd1ae:
	mov -544(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dd1b1:
	mov -464(%RBP),%RSP
	add $-544, %RSP
uuid_00000000000dd1b4:
	mov -456(%RBP),%RSP
	add $-544, %RSP
	mov -448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1bc
	push %RBP
	jmp uuid_00000000000dd1b9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd1b8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd1bb
uuid_00000000000dd1b9:
uuid_00000000000dd1bb:
	mov -552(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000dd1be
uuid_00000000000dd1bc:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd1b5
	jmp uuid_00000000000dd1b7
uuid_00000000000dd1b5:
	movq $1, -288(%rbp)
uuid_00000000000dd1b7:
	mov -552(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dd1be:
	mov -368(%RBP),%RSP
	add $-552, %RSP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1da
	jmp uuid_00000000000dd1dc
uuid_00000000000dd1da:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1d1
	jmp uuid_00000000000dd1d3
uuid_00000000000dd1d1:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd1ce
	jmp uuid_00000000000dd1d0
uuid_00000000000dd1ce:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1c8
	jmp uuid_00000000000dd1ca
uuid_00000000000dd1c8:
	push %RBP
	jmp uuid_00000000000dd1c5
	jmp uuid_00000000000dd1c7
uuid_00000000000dd1c5:
	push %RBP
	jmp uuid_00000000000dd1c2
	jmp uuid_00000000000dd1c4
uuid_00000000000dd1c2:
	push %RBP
	mov -912(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd1bf
	jmp uuid_00000000000dd1c1
uuid_00000000000dd1bf:
	movb $1, -968(%rbp)
uuid_00000000000dd1c1:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd1c4:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd1c7:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd1ca:
	mov -976(%RBP),%RSP
	add $-1008, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1cb
	jmp uuid_00000000000dd1cd
uuid_00000000000dd1cb:
	movb $1, -808(%rbp)
uuid_00000000000dd1cd:
	mov -904(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd1d0:
	mov -824(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000dd1d3:
	mov -816(%RBP),%RSP
	add $-1008, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1d7
	jmp uuid_00000000000dd1d9
uuid_00000000000dd1d7:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd1d4
	jmp uuid_00000000000dd1d6
uuid_00000000000dd1d4:
	movb $1, -712(%rbp)
uuid_00000000000dd1d6:
	mov -1016(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dd1d9:
	mov -728(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000dd1dc:
	mov -720(%RBP),%RSP
	add $-1088, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1f0
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1e6
	jmp uuid_00000000000dd1e8
uuid_00000000000dd1e6:
	push %RBP
	jmp uuid_00000000000dd1e3
	jmp uuid_00000000000dd1e5
uuid_00000000000dd1e3:
	push %RBP
	mov -1152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd1e0
	jmp uuid_00000000000dd1e2
uuid_00000000000dd1e0:
	movb $1, -1176(%rbp)
uuid_00000000000dd1e2:
	mov -1200(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000dd1e5:
	mov -1192(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000dd1e8:
	mov -1184(%RBP),%RSP
	add $-1272, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ed
	push %RBP
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd1e9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd1ec
uuid_00000000000dd1ea:
uuid_00000000000dd1ec:
	mov -1280(%RBP),%RSP
	add $-1352, %RSP
	jmp uuid_00000000000dd1ef
uuid_00000000000dd1ed:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd1ef:
	mov -1096(%RBP),%RSP
	add $-1272, %RSP
	jmp uuid_00000000000dd1f2
uuid_00000000000dd1f0:
#call function compile-program-ordered : Arrow<Cons<FContext,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	mov %RBX, %RBP
	call compile_SB_program_SB_ordered_CL_ArrowNilConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RBP
	mov -288(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1dd
#call function compile-global : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd1df
uuid_00000000000dd1dd:
uuid_00000000000dd1df:
	mov -1096(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dd1f2:
	mov -632(%RBP),%RSP
	add $-1096, %RSP
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_write_CL_ArrowNilNil:
#call function write-file : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	mov $assemble_SB_final_CL_String, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call write_SB_file_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd223
	jmp uuid_00000000000dd225
uuid_00000000000dd223:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd21a
	jmp uuid_00000000000dd21c
uuid_00000000000dd21a:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd208
	jmp uuid_00000000000dd20a
uuid_00000000000dd208:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1f6
	jmp uuid_00000000000dd1f8
uuid_00000000000dd1f6:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	jmp uuid_00000000000dd1f3
	jmp uuid_00000000000dd1f5
uuid_00000000000dd1f3:
	movb $1, -752(%rbp)
uuid_00000000000dd1f5:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dd1f8:
	mov -760(%RBP),%RSP
	add $-792, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd205
	jmp uuid_00000000000dd207
uuid_00000000000dd205:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd1ff
	jmp uuid_00000000000dd201
uuid_00000000000dd1ff:
	push %RBP
	jmp uuid_00000000000dd1fc
	jmp uuid_00000000000dd1fe
uuid_00000000000dd1fc:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd1f9
	jmp uuid_00000000000dd1fb
uuid_00000000000dd1f9:
	movb $1, -880(%rbp)
uuid_00000000000dd1fb:
	mov -904(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd1fe:
	mov -896(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd201:
	mov -888(%RBP),%RSP
	add $-912, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd202
	jmp uuid_00000000000dd204
uuid_00000000000dd202:
	movb $1, -656(%rbp)
uuid_00000000000dd204:
	mov -800(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd207:
	mov -672(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000dd20a:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	mov -656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd217
	jmp uuid_00000000000dd219
uuid_00000000000dd217:
	push %RBP
	mov -536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd211
	jmp uuid_00000000000dd213
uuid_00000000000dd211:
	push %RBP
	jmp uuid_00000000000dd20e
	jmp uuid_00000000000dd210
uuid_00000000000dd20e:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd20b
	jmp uuid_00000000000dd20d
uuid_00000000000dd20b:
	movb $1, -1000(%rbp)
uuid_00000000000dd20d:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd210:
	mov -1016(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd213:
	mov -1008(%RBP),%RSP
	add $-1032, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd214
	jmp uuid_00000000000dd216
uuid_00000000000dd214:
	movb $1, -560(%rbp)
uuid_00000000000dd216:
	mov -920(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd219:
	mov -576(%RBP),%RSP
	add $-1032, %RSP
uuid_00000000000dd21c:
	mov -568(%RBP),%RSP
	add $-1032, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd220
	jmp uuid_00000000000dd222
uuid_00000000000dd220:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd21d
	jmp uuid_00000000000dd21f
uuid_00000000000dd21d:
	movb $1, -464(%rbp)
uuid_00000000000dd21f:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dd222:
	mov -480(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dd225:
	mov -472(%RBP),%RSP
	add $-1112, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd257
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd24d
	jmp uuid_00000000000dd24f
uuid_00000000000dd24d:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd23b
	jmp uuid_00000000000dd23d
uuid_00000000000dd23b:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd229
	jmp uuid_00000000000dd22b
uuid_00000000000dd229:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	jmp uuid_00000000000dd226
	jmp uuid_00000000000dd228
uuid_00000000000dd226:
	movb $1, -1392(%rbp)
uuid_00000000000dd228:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dd22b:
	mov -1400(%RBP),%RSP
	add $-1432, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd238
	jmp uuid_00000000000dd23a
uuid_00000000000dd238:
	push %RBP
	mov -1272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1512(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd232
	jmp uuid_00000000000dd234
uuid_00000000000dd232:
	push %RBP
	jmp uuid_00000000000dd22f
	jmp uuid_00000000000dd231
uuid_00000000000dd22f:
	push %RBP
	mov -1448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd22c
	jmp uuid_00000000000dd22e
uuid_00000000000dd22c:
	movb $1, -1520(%rbp)
uuid_00000000000dd22e:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd231:
	mov -1536(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd234:
	mov -1528(%RBP),%RSP
	add $-1552, %RSP
	mov -1520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd235
	jmp uuid_00000000000dd237
uuid_00000000000dd235:
	movb $1, -1296(%rbp)
uuid_00000000000dd237:
	mov -1440(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd23a:
	mov -1312(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dd23d:
	mov -1304(%RBP),%RSP
	add $-1552, %RSP
	mov -1296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd24a
	jmp uuid_00000000000dd24c
uuid_00000000000dd24a:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd244
	jmp uuid_00000000000dd246
uuid_00000000000dd244:
	push %RBP
	jmp uuid_00000000000dd241
	jmp uuid_00000000000dd243
uuid_00000000000dd241:
	push %RBP
	mov -1568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd23e
	jmp uuid_00000000000dd240
uuid_00000000000dd23e:
	movb $1, -1640(%rbp)
uuid_00000000000dd240:
	mov -1664(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd243:
	mov -1656(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd246:
	mov -1648(%RBP),%RSP
	add $-1672, %RSP
	mov -1640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd247
	jmp uuid_00000000000dd249
uuid_00000000000dd247:
	movb $1, -1200(%rbp)
uuid_00000000000dd249:
	mov -1560(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd24c:
	mov -1216(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd24f:
	mov -1208(%RBP),%RSP
	add $-1672, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd254
	push %RBP
	jmp uuid_00000000000dd251
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd250
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd253
uuid_00000000000dd251:
uuid_00000000000dd253:
	mov -1680(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000dd256
uuid_00000000000dd254:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1552(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
uuid_00000000000dd256:
	mov -1120(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dd259
uuid_00000000000dd257:
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000daeae
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -912(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
uuid_00000000000dd259:
	mov -384(%RBP),%RSP
	add $-1264, %RSP
	subq $24, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $280, %rsp
	ret
compile_SB_c_SB_text_SB_header_CL_ArrowSNil:
	pushq $0
	pushq $uuid_00000000000dd25a
	pushq $2
	subq $24, %rsp
	pushq 24(%rsp)
	pushq 40(%rsp)
	pushq 56(%rsp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
compile_SB_c_SB_typedef_SB_concrete_SB_ordinal_CL_ArrowNilType:
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function .bind : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,HashtableEq<Type,String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqStringTypeConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd25b
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd25c
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -40(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -40(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd25d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	mov %rbp, %rsp
	sub $32, %rsp
	ret
compile_SB_c_SB_typedef_SB_ordinal_CL_ArrowNilType:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd25e
#call function compile-c-typedef-concrete-ordinal : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_SB_ordinal_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd260
uuid_00000000000dd25e:
uuid_00000000000dd260:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd267
	jmp uuid_00000000000dd269
uuid_00000000000dd267:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd264
	jmp uuid_00000000000dd266
uuid_00000000000dd264:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd261
	jmp uuid_00000000000dd263
uuid_00000000000dd261:
	movb $1, -104(%rbp)
uuid_00000000000dd263:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd266:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd269:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd283
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd282
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd285
uuid_00000000000dd283:
	pushq -176(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
uuid_00000000000dd27f:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd280
	jmp uuid_00000000000dd281
uuid_00000000000dd280:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd278
	jmp uuid_00000000000dd27a
uuid_00000000000dd278:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd275
	jmp uuid_00000000000dd277
uuid_00000000000dd275:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000dd272
	jmp uuid_00000000000dd274
uuid_00000000000dd272:
	movb $1, -336(%rbp)
uuid_00000000000dd274:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dd277:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000dd27a:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd27c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd27b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd27e
uuid_00000000000dd27c:
#call function compile-c-typedef-concrete-ordinal : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_SB_ordinal_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -392(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -208(%rbp)
uuid_00000000000dd27e:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd27f
uuid_00000000000dd281:
uuid_00000000000dd285:
	mov -72(%RBP),%RSP
	add $-240, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
try_SB_continue_SB_compile_SB_c_SB_typedefs_CL_ArrowNilNil:
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r15
	pushq 240(%r15)
	pushq 232(%r15)
	pushq 224(%r15)
	pushq 216(%r15)
	pushq 208(%r15)
	pushq 200(%r15)
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	popq 200(%R15)
	popq 208(%R15)
	popq 216(%R15)
	popq 224(%R15)
	popq 232(%R15)
	popq 240(%R15)
uuid_00000000000dd2d0:
#call function non-zero : Arrow<List<Tuple<Tuple<TContext,Type>,AST>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd2d1
	jmp uuid_00000000000dd2d2
uuid_00000000000dd2d1:
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %r14
	movq %r15, 0(%r14)
	push %RBP
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $100, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2ab
	jmp uuid_00000000000dd2ad
uuid_00000000000dd2ab:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd2aa
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd2ad:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
uuid_00000000000dd2cd:
#call function non-zero : Arrow<List<Tuple<Tuple<TContext,Type>,AST>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd2ce
	jmp uuid_00000000000dd2cf
uuid_00000000000dd2ce:
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2c6
	jmp uuid_00000000000dd2c8
uuid_00000000000dd2c6:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 240(%RAX)
	pushq 232(%RAX)
	pushq 224(%RAX)
	pushq 216(%RAX)
	pushq 208(%RAX)
	pushq 200(%RAX)
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd2c3
	jmp uuid_00000000000dd2c5
uuid_00000000000dd2c3:
	push %RBP
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq $0
	push %RBP
	mov -1528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2bd
	jmp uuid_00000000000dd2bf
uuid_00000000000dd2bd:
	push %RBP
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	jmp uuid_00000000000dd2ba
	jmp uuid_00000000000dd2bc
uuid_00000000000dd2ba:
	push %RBP
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2b4
	jmp uuid_00000000000dd2b6
uuid_00000000000dd2b4:
	push %RBP
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	jmp uuid_00000000000dd2b1
	jmp uuid_00000000000dd2b3
uuid_00000000000dd2b1:
	push %RBP
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000dd2ae
	jmp uuid_00000000000dd2b0
uuid_00000000000dd2ae:
	movb $1, -1792(%rbp)
uuid_00000000000dd2b0:
	mov -1840(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd2b3:
	mov -1808(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd2b6:
	mov -1800(%RBP),%RSP
	add $-1960, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2b7
	jmp uuid_00000000000dd2b9
uuid_00000000000dd2b7:
	movb $1, -1536(%rbp)
uuid_00000000000dd2b9:
	mov -1632(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd2bc:
	mov -1552(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd2bf:
	mov -1544(%RBP),%RSP
	add $-1960, %RSP
	mov -1536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2c0
	jmp uuid_00000000000dd2c2
uuid_00000000000dd2c0:
	movb $1, -1024(%rbp)
uuid_00000000000dd2c2:
	mov -1296(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd2c5:
	mov -1040(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000dd2c8:
	mov -1032(%RBP),%RSP
	add $-1960, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2ca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd2c9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd2cc
uuid_00000000000dd2ca:
#call function compile-c-typedef-concrete : Arrow<Cons<Cons<TContext,Type>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1288(%rbp), %r15
	movq %r15, -512(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -504(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -496(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -488(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -472(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -464(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -456(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -448(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -440(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -432(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -424(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -416(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -408(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -400(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -392(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -272(%rbp)
uuid_00000000000dd2cc:
	mov -768(%RBP),%RSP
	add $-1960, %RSP
	add $248, %rsp
	add $248, %rsp
	add $8, %rsp
	add $248, %rsp
	add $232, %rsp
	add $8, %rsp
	add $72, %rsp
	add $152, %rsp
	add $8, %rsp
	add $24, %rsp
	add $120, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd2cd
uuid_00000000000dd2cf:
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r14
	movq 0(%r14), %r15
	movq %r15, -256(%rbp)
	movq 8(%r14), %r15
	movq %r15, -248(%rbp)
	movq 16(%r14), %r15
	movq %r15, -240(%rbp)
	movq 24(%r14), %r15
	movq %r15, -232(%rbp)
	movq 32(%r14), %r15
	movq %r15, -224(%rbp)
	movq 40(%r14), %r15
	movq %r15, -216(%rbp)
	movq 48(%r14), %r15
	movq %r15, -208(%rbp)
	movq 56(%r14), %r15
	movq %r15, -200(%rbp)
	movq 64(%r14), %r15
	movq %r15, -192(%rbp)
	movq 72(%r14), %r15
	movq %r15, -184(%rbp)
	movq 80(%r14), %r15
	movq %r15, -176(%rbp)
	movq 88(%r14), %r15
	movq %r15, -168(%rbp)
	movq 96(%r14), %r15
	movq %r15, -160(%rbp)
	movq 104(%r14), %r15
	movq %r15, -152(%rbp)
	movq 112(%r14), %r15
	movq %r15, -144(%rbp)
	movq 120(%r14), %r15
	movq %r15, -136(%rbp)
	movq 128(%r14), %r15
	movq %r15, -128(%rbp)
	movq 136(%r14), %r15
	movq %r15, -120(%rbp)
	movq 144(%r14), %r15
	movq %r15, -112(%rbp)
	movq 152(%r14), %r15
	movq %r15, -104(%rbp)
	movq 160(%r14), %r15
	movq %r15, -96(%rbp)
	movq 168(%r14), %r15
	movq %r15, -88(%rbp)
	movq 176(%r14), %r15
	movq %r15, -80(%rbp)
	movq 184(%r14), %r15
	movq %r15, -72(%rbp)
	movq 192(%r14), %r15
	movq %r15, -64(%rbp)
	movq 200(%r14), %r15
	movq %r15, -56(%rbp)
	movq 208(%r14), %r15
	movq %r15, -48(%rbp)
	movq 216(%r14), %r15
	movq %r15, -40(%rbp)
	movq 224(%r14), %r15
	movq %r15, -32(%rbp)
	movq 232(%r14), %r15
	movq %r15, -24(%rbp)
	movq 240(%r14), %r15
	movq %r15, -16(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
	popq 72(%R15)
	popq 80(%R15)
	popq 88(%R15)
	popq 96(%R15)
	popq 104(%R15)
	popq 112(%R15)
	popq 120(%R15)
	popq 128(%R15)
	popq 136(%R15)
	popq 144(%R15)
	popq 152(%R15)
	popq 160(%R15)
	popq 168(%R15)
	popq 176(%R15)
	popq 184(%R15)
	popq 192(%R15)
	popq 200(%R15)
	popq 208(%R15)
	popq 216(%R15)
	popq 224(%R15)
	popq 232(%R15)
	popq 240(%R15)
	add $8, %RSP
	add $248, %rsp
	jmp uuid_00000000000dd2d0
uuid_00000000000dd2d2:
	mov %rbp, %rsp
	sub $8, %rsp
	ret
is_SB_incomplete_SB_typedef_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2eb
	jmp uuid_00000000000dd2ed
uuid_00000000000dd2eb:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2e2
	jmp uuid_00000000000dd2e4
uuid_00000000000dd2e2:
	push %RBP
	mov -152(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2d9
	jmp uuid_00000000000dd2db
uuid_00000000000dd2d9:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2d6
	jmp uuid_00000000000dd2d8
uuid_00000000000dd2d6:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	jmp uuid_00000000000dd2d3
	jmp uuid_00000000000dd2d5
uuid_00000000000dd2d3:
	movb $1, -232(%rbp)
uuid_00000000000dd2d5:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dd2d8:
	mov -248(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dd2db:
	mov -240(%RBP),%RSP
	add $-320, %RSP
	mov -232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2df
	jmp uuid_00000000000dd2e1
uuid_00000000000dd2df:
	push %RBP
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	jmp uuid_00000000000dd2dc
	jmp uuid_00000000000dd2de
uuid_00000000000dd2dc:
	movb $1, -168(%rbp)
uuid_00000000000dd2de:
	mov -328(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd2e1:
	mov -184(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd2e4:
	mov -176(%RBP),%RSP
	add $-352, %RSP
	mov -168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2e8
	jmp uuid_00000000000dd2ea
uuid_00000000000dd2e8:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd2e5
	jmp uuid_00000000000dd2e7
uuid_00000000000dd2e5:
	movb $1, -104(%rbp)
uuid_00000000000dd2e7:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd2ea:
	mov -120(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd2ed:
	mov -112(%RBP),%RSP
	add $-368, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3b2
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2f4
	jmp uuid_00000000000dd2f6
uuid_00000000000dd2f4:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd2f1
	jmp uuid_00000000000dd2f3
uuid_00000000000dd2f1:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd2ee
	jmp uuid_00000000000dd2f0
uuid_00000000000dd2ee:
	movb $1, -408(%rbp)
uuid_00000000000dd2f0:
	mov -456(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dd2f3:
	mov -424(%RBP),%RSP
	add $-480, %RSP
uuid_00000000000dd2f6:
	mov -416(%RBP),%RSP
	add $-480, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3af
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3ac
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd2fa
	jmp uuid_00000000000dd2fc
uuid_00000000000dd2fa:
	push %RBP
	jmp uuid_00000000000dd2f7
	jmp uuid_00000000000dd2f9
uuid_00000000000dd2f7:
	movb $1, -552(%rbp)
uuid_00000000000dd2f9:
	mov -568(%RBP),%RSP
	add $-568, %RSP
uuid_00000000000dd2fc:
	mov -560(%RBP),%RSP
	add $-568, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3a9
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd303
	jmp uuid_00000000000dd305
uuid_00000000000dd303:
	push %RBP
	jmp uuid_00000000000dd300
	jmp uuid_00000000000dd302
uuid_00000000000dd300:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd2fd
	jmp uuid_00000000000dd2ff
uuid_00000000000dd2fd:
	movb $1, -608(%rbp)
uuid_00000000000dd2ff:
	mov -632(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd302:
	mov -624(%RBP),%RSP
	add $-640, %RSP
uuid_00000000000dd305:
	mov -616(%RBP),%RSP
	add $-640, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3a6
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd30c
	jmp uuid_00000000000dd30e
uuid_00000000000dd30c:
	push %RBP
	jmp uuid_00000000000dd309
	jmp uuid_00000000000dd30b
uuid_00000000000dd309:
	push %RBP
	mov -656(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq $uuid_00000000000dac51
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd306
	jmp uuid_00000000000dd308
uuid_00000000000dd306:
	movb $1, -680(%rbp)
uuid_00000000000dd308:
	mov -704(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dd30b:
	mov -696(%RBP),%RSP
	add $-712, %RSP
uuid_00000000000dd30e:
	mov -688(%RBP),%RSP
	add $-712, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3a3
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd315
	jmp uuid_00000000000dd317
uuid_00000000000dd315:
	push %RBP
	jmp uuid_00000000000dd312
	jmp uuid_00000000000dd314
uuid_00000000000dd312:
	push %RBP
	mov -728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq $uuid_00000000000dac5b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd30f
	jmp uuid_00000000000dd311
uuid_00000000000dd30f:
	movb $1, -752(%rbp)
uuid_00000000000dd311:
	mov -776(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dd314:
	mov -768(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dd317:
	mov -760(%RBP),%RSP
	add $-784, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3a0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd31e
	jmp uuid_00000000000dd320
uuid_00000000000dd31e:
	push %RBP
	jmp uuid_00000000000dd31b
	jmp uuid_00000000000dd31d
uuid_00000000000dd31b:
	push %RBP
	mov -800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq $uuid_00000000000dac66
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd318
	jmp uuid_00000000000dd31a
uuid_00000000000dd318:
	movb $1, -824(%rbp)
uuid_00000000000dd31a:
	mov -848(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dd31d:
	mov -840(%RBP),%RSP
	add $-856, %RSP
uuid_00000000000dd320:
	mov -832(%RBP),%RSP
	add $-856, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd39d
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd327
	jmp uuid_00000000000dd329
uuid_00000000000dd327:
	push %RBP
	jmp uuid_00000000000dd324
	jmp uuid_00000000000dd326
uuid_00000000000dd324:
	push %RBP
	mov -872(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq $uuid_00000000000dac71
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd321
	jmp uuid_00000000000dd323
uuid_00000000000dd321:
	movb $1, -896(%rbp)
uuid_00000000000dd323:
	mov -920(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dd326:
	mov -912(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000dd329:
	mov -904(%RBP),%RSP
	add $-928, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd39a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd330
	jmp uuid_00000000000dd332
uuid_00000000000dd330:
	push %RBP
	jmp uuid_00000000000dd32d
	jmp uuid_00000000000dd32f
uuid_00000000000dd32d:
	push %RBP
	mov -944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000dac7c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd32a
	jmp uuid_00000000000dd32c
uuid_00000000000dd32a:
	movb $1, -968(%rbp)
uuid_00000000000dd32c:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dd32f:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000dd332:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd397
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd339
	jmp uuid_00000000000dd33b
uuid_00000000000dd339:
	push %RBP
	jmp uuid_00000000000dd336
	jmp uuid_00000000000dd338
uuid_00000000000dd336:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq $uuid_00000000000dac87
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd333
	jmp uuid_00000000000dd335
uuid_00000000000dd333:
	movb $1, -1040(%rbp)
uuid_00000000000dd335:
	mov -1064(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd338:
	mov -1056(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd33b:
	mov -1048(%RBP),%RSP
	add $-1072, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd394
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd342
	jmp uuid_00000000000dd344
uuid_00000000000dd342:
	push %RBP
	jmp uuid_00000000000dd33f
	jmp uuid_00000000000dd341
uuid_00000000000dd33f:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000dac92
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd33c
	jmp uuid_00000000000dd33e
uuid_00000000000dd33c:
	movb $1, -1112(%rbp)
uuid_00000000000dd33e:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dd341:
	mov -1128(%RBP),%RSP
	add $-1144, %RSP
uuid_00000000000dd344:
	mov -1120(%RBP),%RSP
	add $-1144, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd391
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd34b
	jmp uuid_00000000000dd34d
uuid_00000000000dd34b:
	push %RBP
	jmp uuid_00000000000dd348
	jmp uuid_00000000000dd34a
uuid_00000000000dd348:
	push %RBP
	mov -1160(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1216(%rbp)
	pushq $uuid_00000000000dac9d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd345
	jmp uuid_00000000000dd347
uuid_00000000000dd345:
	movb $1, -1184(%rbp)
uuid_00000000000dd347:
	mov -1208(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000dd34a:
	mov -1200(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000dd34d:
	mov -1192(%RBP),%RSP
	add $-1216, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd38e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd354
	jmp uuid_00000000000dd356
uuid_00000000000dd354:
	push %RBP
	jmp uuid_00000000000dd351
	jmp uuid_00000000000dd353
uuid_00000000000dd351:
	push %RBP
	mov -1232(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq $uuid_00000000000daca8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd34e
	jmp uuid_00000000000dd350
uuid_00000000000dd34e:
	movb $1, -1256(%rbp)
uuid_00000000000dd350:
	mov -1280(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dd353:
	mov -1272(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dd356:
	mov -1264(%RBP),%RSP
	add $-1288, %RSP
	mov -1256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd38b
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd35d
	jmp uuid_00000000000dd35f
uuid_00000000000dd35d:
	push %RBP
	jmp uuid_00000000000dd35a
	jmp uuid_00000000000dd35c
uuid_00000000000dd35a:
	push %RBP
	mov -1304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq $uuid_00000000000dacb3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd357
	jmp uuid_00000000000dd359
uuid_00000000000dd357:
	movb $1, -1328(%rbp)
uuid_00000000000dd359:
	mov -1352(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dd35c:
	mov -1344(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dd35f:
	mov -1336(%RBP),%RSP
	add $-1360, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd388
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd366
	jmp uuid_00000000000dd368
uuid_00000000000dd366:
	push %RBP
	jmp uuid_00000000000dd363
	jmp uuid_00000000000dd365
uuid_00000000000dd363:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq $uuid_00000000000dacbe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd360
	jmp uuid_00000000000dd362
uuid_00000000000dd360:
	movb $1, -1400(%rbp)
uuid_00000000000dd362:
	mov -1424(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dd365:
	mov -1416(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000dd368:
	mov -1408(%RBP),%RSP
	add $-1432, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd385
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd36f
	jmp uuid_00000000000dd371
uuid_00000000000dd36f:
	push %RBP
	jmp uuid_00000000000dd36c
	jmp uuid_00000000000dd36e
uuid_00000000000dd36c:
	push %RBP
	mov -1448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1504(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd369
	jmp uuid_00000000000dd36b
uuid_00000000000dd369:
	movb $1, -1472(%rbp)
uuid_00000000000dd36b:
	mov -1496(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dd36e:
	mov -1488(%RBP),%RSP
	add $-1504, %RSP
uuid_00000000000dd371:
	mov -1480(%RBP),%RSP
	add $-1504, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd382
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd378
	jmp uuid_00000000000dd37a
uuid_00000000000dd378:
	push %RBP
	jmp uuid_00000000000dd375
	jmp uuid_00000000000dd377
uuid_00000000000dd375:
	push %RBP
	jmp uuid_00000000000dd372
	jmp uuid_00000000000dd374
uuid_00000000000dd372:
	movb $1, -1544(%rbp)
uuid_00000000000dd374:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000dd377:
	mov -1560(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000dd37a:
	mov -1552(%RBP),%RSP
	add $-1568, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd37f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd37e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd381
uuid_00000000000dd37f:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $uuid_00000000000dacef
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1576(%rbp)
	pushq $uuid_00000000000dacef
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd37b
	movq $1, -40(%rbp)
	jmp uuid_00000000000dd37d
uuid_00000000000dd37b:
uuid_00000000000dd37d:
	mov -1584(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd381:
	mov -1512(%RBP),%RSP
	add $-1584, %RSP
	jmp uuid_00000000000dd384
uuid_00000000000dd382:
uuid_00000000000dd384:
	mov -1440(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000dd387
uuid_00000000000dd385:
uuid_00000000000dd387:
	mov -1368(%RBP),%RSP
	add $-1432, %RSP
	jmp uuid_00000000000dd38a
uuid_00000000000dd388:
uuid_00000000000dd38a:
	mov -1296(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000dd38d
uuid_00000000000dd38b:
uuid_00000000000dd38d:
	mov -1224(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000dd390
uuid_00000000000dd38e:
uuid_00000000000dd390:
	mov -1152(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000dd393
uuid_00000000000dd391:
uuid_00000000000dd393:
	mov -1080(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000dd396
uuid_00000000000dd394:
uuid_00000000000dd396:
	mov -1008(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000dd399
uuid_00000000000dd397:
uuid_00000000000dd399:
	mov -936(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000dd39c
uuid_00000000000dd39a:
uuid_00000000000dd39c:
	mov -864(%RBP),%RSP
	add $-928, %RSP
	jmp uuid_00000000000dd39f
uuid_00000000000dd39d:
uuid_00000000000dd39f:
	mov -792(%RBP),%RSP
	add $-856, %RSP
	jmp uuid_00000000000dd3a2
uuid_00000000000dd3a0:
uuid_00000000000dd3a2:
	mov -720(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dd3a5
uuid_00000000000dd3a3:
uuid_00000000000dd3a5:
	mov -648(%RBP),%RSP
	add $-712, %RSP
	jmp uuid_00000000000dd3a8
uuid_00000000000dd3a6:
uuid_00000000000dd3a8:
	mov -576(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dd3ab
uuid_00000000000dd3a9:
uuid_00000000000dd3ab:
	mov -520(%RBP),%RSP
	add $-568, %RSP
	jmp uuid_00000000000dd3ae
uuid_00000000000dd3ac:
uuid_00000000000dd3ae:
	mov -488(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000dd3b1
uuid_00000000000dd3af:
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd3b1:
	mov -376(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000dd3b4
uuid_00000000000dd3b2:
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd3b4:
	mov -72(%RBP),%RSP
	add $-368, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $uuid_00000000000dacef
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $0
uuid_00000000000dd3d7:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3d8
	jmp uuid_00000000000dd3d9
uuid_00000000000dd3d8:
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	push %RBP
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -424(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3cd
	jmp uuid_00000000000dd3cf
uuid_00000000000dd3cd:
	push %RBP
	mov -416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd3ca
	jmp uuid_00000000000dd3cc
uuid_00000000000dd3ca:
	push %RBP
	mov -408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3c4
	jmp uuid_00000000000dd3c6
uuid_00000000000dd3c4:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3bb
	jmp uuid_00000000000dd3bd
uuid_00000000000dd3bb:
	push %RBP
	jmp uuid_00000000000dd3b8
	jmp uuid_00000000000dd3ba
uuid_00000000000dd3b8:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq $uuid_00000000000dc810
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3b5
	jmp uuid_00000000000dd3b7
uuid_00000000000dd3b5:
	movb $1, -704(%rbp)
uuid_00000000000dd3b7:
	mov -728(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dd3ba:
	mov -720(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dd3bd:
	mov -712(%RBP),%RSP
	add $-736, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3c1
	jmp uuid_00000000000dd3c3
uuid_00000000000dd3c1:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd3be
	jmp uuid_00000000000dd3c0
uuid_00000000000dd3be:
	movb $1, -608(%rbp)
uuid_00000000000dd3c0:
	mov -744(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dd3c3:
	mov -624(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dd3c6:
	mov -616(%RBP),%RSP
	add $-816, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3c7
	jmp uuid_00000000000dd3c9
uuid_00000000000dd3c7:
	movb $1, -432(%rbp)
uuid_00000000000dd3c9:
	mov -528(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dd3cc:
	mov -448(%RBP),%RSP
	add $-816, %RSP
uuid_00000000000dd3cf:
	mov -440(%RBP),%RSP
	add $-816, %RSP
	mov -432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3d4
	push %RBP
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	jmp uuid_00000000000dd3d1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd3d0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd3d3
uuid_00000000000dd3d1:
#call function compile-c-fields-of-case : Arrow<Cons<Cons<Type,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_fields_SB_of_SB_case_CL_ArrowTypeConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -272(%RBP), %RAX
	orq %R14,%RAX
	movq %RAX, -272(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
#call function compile-c-casedef : Arrow<Cons<Type,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_CL_ArrowSConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
uuid_00000000000dd3d3:
	mov -824(%RBP),%RSP
	add $-920, %RSP
	jmp uuid_00000000000dd3d6
uuid_00000000000dd3d4:
#call function compile-c-fields-of-case : Arrow<Cons<Cons<Type,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_fields_SB_of_SB_case_CL_ArrowTypeConsU64ConsASTType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
#call function substitute : Arrow<Cons<TContext,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call substitute_CL_ArrowTypeConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
#call function is-incomplete-typedef : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call is_SB_incomplete_SB_typedef_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -272(%RBP), %RAX
	orq %R14,%RAX
	movq %RAX, -272(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
#call function compile-c-casedef : Arrow<Cons<Type,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_CL_ArrowSConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	mov -240(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -240(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -776(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -152(%rbp)
uuid_00000000000dd3d6:
	mov -352(%RBP),%RSP
	add $-840, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000dd3d7
uuid_00000000000dd3d9:
	push %RBP
	mov -272(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd3f8
#call function .bind : Arrow<Cons<Cons<HashtableEq<Type,U64>,Type>,U64>,HashtableEq<Type,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64TypeConsU64ConsTypeHashtableEqU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov $is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3f2
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3f3
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -232(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3f4
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3f5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3f6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd3f7
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000dd3fa
uuid_00000000000dd3f8:
#call function cons : Arrow<Cons<Tuple<Tuple<TContext,Type>,AST>,List<Tuple<Tuple<TContext,Type>,AST>>>,List<Tuple<Tuple<TContext,Type>,AST>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq $0
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq $0
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r15
	pushq 240(%r15)
	pushq 232(%r15)
	pushq 224(%r15)
	pushq 216(%r15)
	pushq 208(%r15)
	pushq 200(%r15)
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListTupleASTTupleTypeTContextConsListTupleASTTupleTypeTContextTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used248
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	push -512(%RSP)
	mov $continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	popq 168(%r15)
	popq 176(%r15)
	popq 184(%r15)
	popq 192(%r15)
	popq 200(%r15)
	popq 208(%r15)
	popq 216(%r15)
	popq 224(%r15)
	popq 232(%r15)
	popq 240(%r15)
uuid_00000000000dd3fa:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	mov %rbp, %rsp
	sub $224, %rsp
	ret
compile_SB_c_SB_typedef_CL_ArrowNilConsASTType:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd3fb
#call function compile-c-typedef-concrete : Arrow<Cons<Cons<TContext,Type>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd3fd
uuid_00000000000dd3fb:
uuid_00000000000dd3fd:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd404
	jmp uuid_00000000000dd406
uuid_00000000000dd404:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd401
	jmp uuid_00000000000dd403
uuid_00000000000dd401:
	push %RBP
	mov -152(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd3fe
	jmp uuid_00000000000dd400
uuid_00000000000dd3fe:
	movb $1, -176(%rbp)
uuid_00000000000dd400:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd403:
	mov -192(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd406:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd420
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd41f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd422
uuid_00000000000dd420:
	pushq -248(%rbp)
#call function .length : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Tuple<String,U64>,List<Type>>,Tuple<String,U64>>,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
	push -128(%RSP)
uuid_00000000000dd41c:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd41d
	jmp uuid_00000000000dd41e
uuid_00000000000dd41d:
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd415
	jmp uuid_00000000000dd417
uuid_00000000000dd415:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd412
	jmp uuid_00000000000dd414
uuid_00000000000dd412:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	jmp uuid_00000000000dd40f
	jmp uuid_00000000000dd411
uuid_00000000000dd40f:
	movb $1, -408(%rbp)
uuid_00000000000dd411:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dd414:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dd417:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd419
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd418
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd41b
uuid_00000000000dd419:
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function compile-c-typedef-concrete : Arrow<Cons<Cons<TContext,Type>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_typedef_SB_concrete_CL_ArrowNilConsASTConsTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -464(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -280(%rbp)
uuid_00000000000dd41b:
	mov -360(%RBP),%RSP
	add $-616, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $120, %rsp
	add $8, %RSP
	jmp uuid_00000000000dd41c
uuid_00000000000dd41e:
uuid_00000000000dd422:
	mov -144(%RBP),%RSP
	add $-312, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
compile_SB_c_SB_fields_SB_of_SB_case_CL_ArrowTypeConsU64ConsASTType:
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd432
	jmp uuid_00000000000dd434
uuid_00000000000dd432:
	push %RBP
	mov -280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd42f
	jmp uuid_00000000000dd431
uuid_00000000000dd42f:
	push %RBP
	mov -272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd429
	jmp uuid_00000000000dd42b
uuid_00000000000dd429:
	push %RBP
	jmp uuid_00000000000dd426
	jmp uuid_00000000000dd428
uuid_00000000000dd426:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd423
	jmp uuid_00000000000dd425
uuid_00000000000dd423:
	movb $1, -472(%rbp)
uuid_00000000000dd425:
	mov -496(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd428:
	mov -488(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd42b:
	mov -480(%RBP),%RSP
	add $-504, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd42c
	jmp uuid_00000000000dd42e
uuid_00000000000dd42c:
	movb $1, -296(%rbp)
uuid_00000000000dd42e:
	mov -392(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd431:
	mov -312(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000dd434:
	mov -304(%RBP),%RSP
	add $-504, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd439
	push %RBP
	jmp uuid_00000000000dd436
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd435
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd438
uuid_00000000000dd436:
uuid_00000000000dd438:
	mov -512(%RBP),%RSP
	add $-512, %RSP
	jmp uuid_00000000000dd43b
uuid_00000000000dd439:
#call function type-of-s-with-fields : Arrow<Cons<Cons<Cons<Type,String>,AST>,U64>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -504(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_SB_with_SB_fields_CL_ArrowTypeConsU64ConsASTConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -144(%RSP)
	push -144(%RSP)
	push -144(%RSP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd43b:
	mov -216(%RBP),%RSP
	add $-504, %RSP
	subq $24, %rsp
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $112, %rsp
	ret
compile_SB_c_SB_casedef_CL_ArrowSConsU64Type:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd43c
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-casedef-fields : Arrow<Cons<Cons<Type,U64>,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $1
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_SB_fields_CL_ArrowSConsU64ConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	pushq $0
	pushq $uuid_00000000000dd43d
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
compile_SB_c_SB_casedef_SB_fields_CL_ArrowSConsU64ConsU64Type:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd444
	jmp uuid_00000000000dd446
uuid_00000000000dd444:
	push %RBP
	jmp uuid_00000000000dd441
	jmp uuid_00000000000dd443
uuid_00000000000dd441:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -168(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd43e
	jmp uuid_00000000000dd440
uuid_00000000000dd43e:
	movb $1, -136(%rbp)
uuid_00000000000dd440:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dd443:
	mov -152(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dd446:
	mov -144(%RBP),%RSP
	add $-168, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd46a
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd45f
	jmp uuid_00000000000dd461
uuid_00000000000dd45f:
	push %RBP
	mov -192(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd456
	jmp uuid_00000000000dd458
uuid_00000000000dd456:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd44d
	jmp uuid_00000000000dd44f
uuid_00000000000dd44d:
	push %RBP
	jmp uuid_00000000000dd44a
	jmp uuid_00000000000dd44c
uuid_00000000000dd44a:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000dd447
	jmp uuid_00000000000dd449
uuid_00000000000dd447:
	movb $1, -336(%rbp)
uuid_00000000000dd449:
	mov -360(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd44c:
	mov -352(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd44f:
	mov -344(%RBP),%RSP
	add $-384, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd453
	jmp uuid_00000000000dd455
uuid_00000000000dd453:
	push %RBP
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	jmp uuid_00000000000dd450
	jmp uuid_00000000000dd452
uuid_00000000000dd450:
	movb $1, -272(%rbp)
uuid_00000000000dd452:
	mov -392(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dd455:
	mov -288(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dd458:
	mov -280(%RBP),%RSP
	add $-416, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd45c
	jmp uuid_00000000000dd45e
uuid_00000000000dd45c:
	push %RBP
	mov -184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd459
	jmp uuid_00000000000dd45b
uuid_00000000000dd459:
	movb $1, -208(%rbp)
uuid_00000000000dd45b:
	mov -424(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dd45e:
	mov -224(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dd461:
	mov -216(%RBP),%RSP
	add $-432, %RSP
	mov -208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd467
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	jmp uuid_00000000000dd464
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd463
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd466
uuid_00000000000dd464:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000dd462
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -32(%RBP), %RAX
	mov $1000, %R14
	mul %R14
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000dad50
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd466:
	mov -440(%RBP),%RSP
	add $-464, %RSP
	jmp uuid_00000000000dd469
uuid_00000000000dd467:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000dd462
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -32(%RBP), %RAX
	mov $1000, %R14
	mul %R14
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000dad50
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
#call function compile-c-casedef-fields : Arrow<Cons<Cons<Type,U64>,U64>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -32(%rbp)
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call compile_SB_c_SB_casedef_SB_fields_CL_ArrowSConsU64ConsU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd469:
	mov -176(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dd46c
uuid_00000000000dd46a:
uuid_00000000000dd46c:
	mov -104(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
fragment_SB_context_CL__CL_new_CL_ArrowFContextNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	subq $200, %rsp
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dd48f:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd490
	jmp uuid_00000000000dd491
uuid_00000000000dd490:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd479
	jmp uuid_00000000000dd47b
uuid_00000000000dd479:
	push %RBP
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000dd476
	jmp uuid_00000000000dd478
uuid_00000000000dd476:
	push %RBP
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	jmp uuid_00000000000dd473
	jmp uuid_00000000000dd475
uuid_00000000000dd473:
	push %RBP
	mov -920(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd470
	jmp uuid_00000000000dd472
uuid_00000000000dd470:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd46d
	jmp uuid_00000000000dd46f
uuid_00000000000dd46d:
	movb $1, -1112(%rbp)
uuid_00000000000dd46f:
	mov -1336(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd472:
	mov -1320(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd475:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd478:
	mov -1128(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dd47b:
	mov -1120(%RBP),%RSP
	add $-1536, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd48c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd48b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd48e
uuid_00000000000dd48c:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd488
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dd48a
uuid_00000000000dd488:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd485
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db45d
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000dd487
uuid_00000000000dd485:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd482
	jmp uuid_00000000000dd484
uuid_00000000000dd482:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd47f
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
	jmp uuid_00000000000dd481
uuid_00000000000dd47f:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd47c
	jmp uuid_00000000000dd47e
uuid_00000000000dd47c:
	movq -1280(%rbp), %r15
	movq %r15, -672(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -664(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -656(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -648(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -640(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -632(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -624(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -616(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -608(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -600(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -592(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -584(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -576(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -568(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -560(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -552(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -544(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -536(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -528(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000dd47e:
	mov -1624(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd481:
	mov -1616(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd484:
	mov -1608(%RBP),%RSP
	add $-1624, %RSP
	movq -1536(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd487:
	mov -1552(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd48a:
	mov -1544(%RBP),%RSP
	add $-1624, %RSP
uuid_00000000000dd48e:
	mov -904(%RBP),%RSP
	add $-1624, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd48f
uuid_00000000000dd491:
	push %RBP
	mov -312(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4ae
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd492
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd493
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -520(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -512(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd4aa:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4ab
	jmp uuid_00000000000dd4ac
uuid_00000000000dd4ab:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4a0
	jmp uuid_00000000000dd4a2
uuid_00000000000dd4a0:
	push %RBP
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000dd49d
	jmp uuid_00000000000dd49f
uuid_00000000000dd49d:
	push %RBP
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	jmp uuid_00000000000dd49a
	jmp uuid_00000000000dd49c
uuid_00000000000dd49a:
	push %RBP
	mov -928(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd497
	jmp uuid_00000000000dd499
uuid_00000000000dd497:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd494
	jmp uuid_00000000000dd496
uuid_00000000000dd494:
	movb $1, -1120(%rbp)
uuid_00000000000dd496:
	mov -1344(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd499:
	mov -1328(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd49c:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd49f:
	mov -1136(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000dd4a2:
	mov -1128(%RBP),%RSP
	add $-1544, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4a7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd4a6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd4a9
uuid_00000000000dd4a7:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1336(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4a3
	jmp uuid_00000000000dd4a5
uuid_00000000000dd4a3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd4a5:
	mov -1552(%RBP),%RSP
	add $-1552, %RSP
	movq -1544(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1376(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd4a9:
	mov -912(%RBP),%RSP
	add $-1552, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd4aa
uuid_00000000000dd4ac:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd4ad
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd4b0
uuid_00000000000dd4ae:
uuid_00000000000dd4b0:
	mov -704(%RBP),%RSP
	add $-704, %RSP
	subq $152, %rsp
	pushq -672(%rbp)
	pushq -664(%rbp)
	pushq -656(%rbp)
	pushq -648(%rbp)
	pushq -640(%rbp)
	pushq -632(%rbp)
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,AST>,U8>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsU8ConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext:
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,U8>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $1
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	subq $168, %rsp
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $336, %rsp
	ret
fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsU8ConsASTConsTypeConsTypeConsStringFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function find-alias : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call find_SB_alias_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -208(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000dd503:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd504
	jmp uuid_00000000000dd505
uuid_00000000000dd504:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4c1
	jmp uuid_00000000000dd4c3
uuid_00000000000dd4c1:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	jmp uuid_00000000000dd4be
	jmp uuid_00000000000dd4c0
uuid_00000000000dd4be:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000dd4bb
	jmp uuid_00000000000dd4bd
uuid_00000000000dd4bb:
	push %RBP
	mov -960(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd4b8
	jmp uuid_00000000000dd4ba
uuid_00000000000dd4b8:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd4b5
	jmp uuid_00000000000dd4b7
uuid_00000000000dd4b5:
	movb $1, -1152(%rbp)
uuid_00000000000dd4b7:
	mov -1376(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd4ba:
	mov -1360(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd4bd:
	mov -1328(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd4c0:
	mov -1168(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dd4c3:
	mov -1160(%RBP),%RSP
	add $-1576, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd500
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd4ff
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd502
uuid_00000000000dd500:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4fc
	movq -1576(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000dd4fe
uuid_00000000000dd4fc:
	push %RBP
#call function is : Arrow<Cons<Sized<24>,Sized<24>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized24Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4f9
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4f6
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4f3
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db45d
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	jmp uuid_00000000000dd4f5
uuid_00000000000dd4f3:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
uuid_00000000000dd4f5:
	mov -1608(%RBP),%RSP
	add $-1608, %RSP
	jmp uuid_00000000000dd4f8
uuid_00000000000dd4f6:
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4e8
	jmp uuid_00000000000dd4ea
uuid_00000000000dd4e8:
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4e5
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4e2
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	movq -1624(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -720(%rbp)
	jmp uuid_00000000000dd4e4
uuid_00000000000dd4e2:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
uuid_00000000000dd4e4:
	mov -1672(%RBP),%RSP
	add $-1672, %RSP
	jmp uuid_00000000000dd4e7
uuid_00000000000dd4e5:
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd4d7
	jmp uuid_00000000000dd4d9
uuid_00000000000dd4d7:
	push %RBP
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd4d4
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	movq -1624(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -720(%rbp)
	jmp uuid_00000000000dd4d6
uuid_00000000000dd4d4:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
uuid_00000000000dd4d6:
	mov -1680(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd4d9:
	mov -1672(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd4e7:
	mov -1664(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000dd4ea:
	mov -1656(%RBP),%RSP
	add $-1680, %RSP
	movq -1576(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd4f8:
	mov -1600(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000dd4fb
uuid_00000000000dd4f9:
#call function cons : Arrow<Cons<Fragment,List<Fragment>>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListFragmentConsListFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd4fb:
	mov -1592(%RBP),%RSP
	add $-1592, %RSP
uuid_00000000000dd4fe:
	mov -1584(%RBP),%RSP
	add $-1592, %RSP
uuid_00000000000dd502:
	mov -944(%RBP),%RSP
	add $-1592, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd503
uuid_00000000000dd505:
	push %RBP
	mov -336(%RBP), %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	push %RAX
#call function .length : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	mov %RBX, %RBP
	call _DT_length_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd521
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd506
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd493
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -544(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -512(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -504(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -496(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -488(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd51d:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd51e
	jmp uuid_00000000000dd51f
uuid_00000000000dd51e:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd513
	jmp uuid_00000000000dd515
uuid_00000000000dd513:
	push %RBP
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000dd510
	jmp uuid_00000000000dd512
uuid_00000000000dd510:
	push %RBP
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	jmp uuid_00000000000dd50d
	jmp uuid_00000000000dd50f
uuid_00000000000dd50d:
	push %RBP
	mov -968(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd50a
	jmp uuid_00000000000dd50c
uuid_00000000000dd50a:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd507
	jmp uuid_00000000000dd509
uuid_00000000000dd507:
	movb $1, -1160(%rbp)
uuid_00000000000dd509:
	mov -1384(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd50c:
	mov -1368(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd50f:
	mov -1336(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd512:
	mov -1176(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000dd515:
	mov -1168(%RBP),%RSP
	add $-1584, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd51a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd519
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd51c
uuid_00000000000dd51a:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1376(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd516
	jmp uuid_00000000000dd518
uuid_00000000000dd516:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd518:
	mov -1592(%RBP),%RSP
	add $-1592, %RSP
	movq -1584(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1528(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1520(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1512(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1408(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1400(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1392(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd51c:
	mov -952(%RBP),%RSP
	add $-1592, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd51d
uuid_00000000000dd51f:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd520
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd523
uuid_00000000000dd521:
uuid_00000000000dd523:
	mov -744(%RBP),%RSP
	add $-744, %RSP
	subq $168, %rsp
	pushq -712(%rbp)
	pushq -704(%rbp)
	pushq -696(%rbp)
	pushq -688(%rbp)
	pushq -680(%rbp)
	pushq -672(%rbp)
	pushq -664(%rbp)
	pushq -656(%rbp)
	pushq -648(%rbp)
	pushq -640(%rbp)
	pushq -632(%rbp)
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
fragment_SB_context_CL__CL_lookup_SB_vararg_CL_ArrowFragmentListConsASTConsTypeConsStringFContext:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000dd53a:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd53b
	jmp uuid_00000000000dd53c
uuid_00000000000dd53b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	push %RBP
	mov -888(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd530
	jmp uuid_00000000000dd532
uuid_00000000000dd530:
	push %RBP
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	jmp uuid_00000000000dd52d
	jmp uuid_00000000000dd52f
uuid_00000000000dd52d:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000dd52a
	jmp uuid_00000000000dd52c
uuid_00000000000dd52a:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd527
	jmp uuid_00000000000dd529
uuid_00000000000dd527:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd524
	jmp uuid_00000000000dd526
uuid_00000000000dd524:
	movb $1, -896(%rbp)
uuid_00000000000dd526:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd529:
	mov -1104(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd52c:
	mov -1072(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd52f:
	mov -912(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd532:
	mov -904(%RBP),%RSP
	add $-1320, %RSP
	mov -896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd537
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd536
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd539
uuid_00000000000dd537:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd533
	jmp uuid_00000000000dd535
uuid_00000000000dd533:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
uuid_00000000000dd535:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
	movq -1320(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dd539:
	mov -688(%RBP),%RSP
	add $-1328, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd53a
uuid_00000000000dd53c:
	subq $168, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	subq $200, %rsp
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::set-vararg : Arrow<Cons<Fragment,List<Array<Fragment,?>>>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
#call function cons : Arrow<Cons<Array<Fragment,?>,List<Array<Fragment,?>>>,List<Array<Fragment,?>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Fragment,Array<Fragment,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	mov %RBX, %RBP
	call cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
with_SB_location_CL_ArrowASTConsSourceLocationAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5aa
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov -416(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5a7
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd543
	jmp uuid_00000000000dd545
uuid_00000000000dd543:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000dd540
	jmp uuid_00000000000dd542
uuid_00000000000dd540:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd53d
	jmp uuid_00000000000dd53f
uuid_00000000000dd53d:
	movb $1, -504(%rbp)
uuid_00000000000dd53f:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dd542:
	mov -520(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dd545:
	mov -512(%RBP),%RSP
	add $-592, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5a4
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd54f
	jmp uuid_00000000000dd551
uuid_00000000000dd54f:
	push %RBP
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000dd54c
	jmp uuid_00000000000dd54e
uuid_00000000000dd54c:
	push %RBP
	mov -608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd549
	jmp uuid_00000000000dd54b
uuid_00000000000dd549:
	movb $1, -680(%rbp)
uuid_00000000000dd54b:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd54e:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dd551:
	mov -688(%RBP),%RSP
	add $-768, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5a1
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd558
	jmp uuid_00000000000dd55a
uuid_00000000000dd558:
	push %RBP
	jmp uuid_00000000000dd555
	jmp uuid_00000000000dd557
uuid_00000000000dd555:
	movb $1, -856(%rbp)
uuid_00000000000dd557:
	mov -872(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dd55a:
	mov -864(%RBP),%RSP
	add $-872, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd59e
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd561
	jmp uuid_00000000000dd563
uuid_00000000000dd561:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd55e
	jmp uuid_00000000000dd560
uuid_00000000000dd55e:
	push %RBP
	mov -936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd55b
	jmp uuid_00000000000dd55d
uuid_00000000000dd55b:
	movb $1, -960(%rbp)
uuid_00000000000dd55d:
	mov -1056(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd560:
	mov -976(%RBP),%RSP
	add $-1128, %RSP
uuid_00000000000dd563:
	mov -968(%RBP),%RSP
	add $-1128, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd59b
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1208(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd56d
	jmp uuid_00000000000dd56f
uuid_00000000000dd56d:
	push %RBP
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	jmp uuid_00000000000dd56a
	jmp uuid_00000000000dd56c
uuid_00000000000dd56a:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd567
	jmp uuid_00000000000dd569
uuid_00000000000dd567:
	push %RBP
	mov -1168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd564
	jmp uuid_00000000000dd566
uuid_00000000000dd564:
	movb $1, -1216(%rbp)
uuid_00000000000dd566:
	mov -1344(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dd569:
	mov -1264(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dd56c:
	mov -1232(%RBP),%RSP
	add $-1416, %RSP
uuid_00000000000dd56f:
	mov -1224(%RBP),%RSP
	add $-1416, %RSP
	mov -1216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd598
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1496(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd576
	jmp uuid_00000000000dd578
uuid_00000000000dd576:
	push %RBP
	mov -1488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd573
	jmp uuid_00000000000dd575
uuid_00000000000dd573:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd570
	jmp uuid_00000000000dd572
uuid_00000000000dd570:
	movb $1, -1504(%rbp)
uuid_00000000000dd572:
	mov -1600(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd575:
	mov -1520(%RBP),%RSP
	add $-1672, %RSP
uuid_00000000000dd578:
	mov -1512(%RBP),%RSP
	add $-1672, %RSP
	mov -1504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd595
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -1752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd57f
	jmp uuid_00000000000dd581
uuid_00000000000dd57f:
	push %RBP
	mov -1744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd57c
	jmp uuid_00000000000dd57e
uuid_00000000000dd57c:
	push %RBP
	mov -1736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd579
	jmp uuid_00000000000dd57b
uuid_00000000000dd579:
	movb $1, -1760(%rbp)
uuid_00000000000dd57b:
	mov -1856(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dd57e:
	mov -1776(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dd581:
	mov -1768(%RBP),%RSP
	add $-1928, %RSP
	mov -1760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd592
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -2008(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd588
	jmp uuid_00000000000dd58a
uuid_00000000000dd588:
	push %RBP
	mov -2000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd585
	jmp uuid_00000000000dd587
uuid_00000000000dd585:
	push %RBP
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	jmp uuid_00000000000dd582
	jmp uuid_00000000000dd584
uuid_00000000000dd582:
	movb $1, -2016(%rbp)
uuid_00000000000dd584:
	mov -2112(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dd587:
	mov -2032(%RBP),%RSP
	add $-2168, %RSP
uuid_00000000000dd58a:
	mov -2024(%RBP),%RSP
	add $-2168, %RSP
	mov -2016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd58f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd58e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd591
uuid_00000000000dd58f:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd58b
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	popq -2168(%RBP)
	popq -2160(%RBP)
	popq -2152(%RBP)
	popq -2144(%RBP)
	popq -2136(%RBP)
	popq -2128(%RBP)
	popq -2120(%RBP)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -2104(%RBP)
	popq -2096(%RBP)
	popq -2088(%RBP)
	popq -2080(%RBP)
	popq -2072(%RBP)
	popq -2064(%RBP)
	popq -2056(%RBP)
	popq -2048(%RBP)
	popq -2040(%RBP)
	jmp uuid_00000000000dd58d
uuid_00000000000dd58b:
uuid_00000000000dd58d:
	mov -2176(%RBP),%RSP
	add $-2176, %RSP
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd591:
	mov -1936(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000dd594
uuid_00000000000dd592:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd594:
	mov -1680(%RBP),%RSP
	add $-1928, %RSP
	jmp uuid_00000000000dd597
uuid_00000000000dd595:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd597:
	mov -1424(%RBP),%RSP
	add $-1672, %RSP
	jmp uuid_00000000000dd59a
uuid_00000000000dd598:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq $5
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd59a:
	mov -1136(%RBP),%RSP
	add $-1416, %RSP
	jmp uuid_00000000000dd59d
uuid_00000000000dd59b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
uuid_00000000000dd59d:
	mov -880(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000dd5a0
uuid_00000000000dd59e:
uuid_00000000000dd5a0:
	mov -776(%RBP),%RSP
	add $-872, %RSP
	jmp uuid_00000000000dd5a3
uuid_00000000000dd5a1:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd552
	pushq -768(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $6
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000dd554
uuid_00000000000dd552:
uuid_00000000000dd554:
	mov -776(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dd5a3:
	mov -600(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000dd5a6
uuid_00000000000dd5a4:
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd546
	pushq -592(%rbp)
#call function with-location : Arrow<Cons<Token,SourceLocation>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowTokenConsSourceLocationToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	pushq $7
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	jmp uuid_00000000000dd548
uuid_00000000000dd546:
uuid_00000000000dd548:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000dd5a6:
	mov -424(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000dd5a9
uuid_00000000000dd5a7:
uuid_00000000000dd5a9:
	mov -344(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000dd5ac
uuid_00000000000dd5aa:
uuid_00000000000dd5ac:
	mov -264(%RBP),%RSP
	add $-336, %RSP
	subq $72, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $112, %rsp
	ret
with_SB_location_CL_ArrowTokenConsSourceLocationToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5b6
	jmp uuid_00000000000dd5b8
uuid_00000000000dd5b6:
	push %RBP
	jmp uuid_00000000000dd5b3
	jmp uuid_00000000000dd5b5
uuid_00000000000dd5b3:
	push %RBP
	jmp uuid_00000000000dd5b0
	jmp uuid_00000000000dd5b2
uuid_00000000000dd5b0:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd5ad
	jmp uuid_00000000000dd5af
uuid_00000000000dd5ad:
	movb $1, -224(%rbp)
uuid_00000000000dd5af:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd5b2:
	mov -248(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd5b5:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd5b8:
	mov -232(%RBP),%RSP
	add $-264, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5ba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd5b9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd5bc
uuid_00000000000dd5ba:
	pushq -264(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd5bc:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
without_SB_location_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd621
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd61e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5c3
	jmp uuid_00000000000dd5c5
uuid_00000000000dd5c3:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000dd5c0
	jmp uuid_00000000000dd5c2
uuid_00000000000dd5c0:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd5bd
	jmp uuid_00000000000dd5bf
uuid_00000000000dd5bd:
	movb $1, -472(%rbp)
uuid_00000000000dd5bf:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd5c2:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd5c5:
	mov -480(%RBP),%RSP
	add $-560, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd61b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5cc
	jmp uuid_00000000000dd5ce
uuid_00000000000dd5cc:
	push %RBP
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	jmp uuid_00000000000dd5c9
	jmp uuid_00000000000dd5cb
uuid_00000000000dd5c9:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd5c6
	jmp uuid_00000000000dd5c8
uuid_00000000000dd5c6:
	movb $1, -648(%rbp)
uuid_00000000000dd5c8:
	mov -728(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dd5cb:
	mov -664(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000dd5ce:
	mov -656(%RBP),%RSP
	add $-736, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd618
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5d2
	jmp uuid_00000000000dd5d4
uuid_00000000000dd5d2:
	push %RBP
	jmp uuid_00000000000dd5cf
	jmp uuid_00000000000dd5d1
uuid_00000000000dd5cf:
	movb $1, -824(%rbp)
uuid_00000000000dd5d1:
	mov -840(%RBP),%RSP
	add $-840, %RSP
uuid_00000000000dd5d4:
	mov -832(%RBP),%RSP
	add $-840, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd615
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5db
	jmp uuid_00000000000dd5dd
uuid_00000000000dd5db:
	push %RBP
	mov -912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5d8
	jmp uuid_00000000000dd5da
uuid_00000000000dd5d8:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5d5
	jmp uuid_00000000000dd5d7
uuid_00000000000dd5d5:
	movb $1, -928(%rbp)
uuid_00000000000dd5d7:
	mov -1024(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dd5da:
	mov -944(%RBP),%RSP
	add $-1096, %RSP
uuid_00000000000dd5dd:
	mov -936(%RBP),%RSP
	add $-1096, %RSP
	mov -928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd612
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1176(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5e7
	jmp uuid_00000000000dd5e9
uuid_00000000000dd5e7:
	push %RBP
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000dd5e4
	jmp uuid_00000000000dd5e6
uuid_00000000000dd5e4:
	push %RBP
	mov -1144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5e1
	jmp uuid_00000000000dd5e3
uuid_00000000000dd5e1:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5de
	jmp uuid_00000000000dd5e0
uuid_00000000000dd5de:
	movb $1, -1184(%rbp)
uuid_00000000000dd5e0:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dd5e3:
	mov -1232(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dd5e6:
	mov -1200(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000dd5e9:
	mov -1192(%RBP),%RSP
	add $-1384, %RSP
	mov -1184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd60f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5f0
	jmp uuid_00000000000dd5f2
uuid_00000000000dd5f0:
	push %RBP
	mov -1456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5ed
	jmp uuid_00000000000dd5ef
uuid_00000000000dd5ed:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5ea
	jmp uuid_00000000000dd5ec
uuid_00000000000dd5ea:
	movb $1, -1472(%rbp)
uuid_00000000000dd5ec:
	mov -1568(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dd5ef:
	mov -1488(%RBP),%RSP
	add $-1640, %RSP
uuid_00000000000dd5f2:
	mov -1480(%RBP),%RSP
	add $-1640, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd60c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd5f9
	jmp uuid_00000000000dd5fb
uuid_00000000000dd5f9:
	push %RBP
	mov -1712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5f6
	jmp uuid_00000000000dd5f8
uuid_00000000000dd5f6:
	push %RBP
	mov -1704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5f3
	jmp uuid_00000000000dd5f5
uuid_00000000000dd5f3:
	movb $1, -1728(%rbp)
uuid_00000000000dd5f5:
	mov -1824(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dd5f8:
	mov -1744(%RBP),%RSP
	add $-1896, %RSP
uuid_00000000000dd5fb:
	mov -1736(%RBP),%RSP
	add $-1896, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd609
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1976(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd602
	jmp uuid_00000000000dd604
uuid_00000000000dd602:
	push %RBP
	mov -1968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd5ff
	jmp uuid_00000000000dd601
uuid_00000000000dd5ff:
	push %RBP
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	jmp uuid_00000000000dd5fc
	jmp uuid_00000000000dd5fe
uuid_00000000000dd5fc:
	movb $1, -1984(%rbp)
uuid_00000000000dd5fe:
	mov -2080(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dd601:
	mov -2000(%RBP),%RSP
	add $-2136, %RSP
uuid_00000000000dd604:
	mov -1992(%RBP),%RSP
	add $-2136, %RSP
	mov -1984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd606
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd605
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd608
uuid_00000000000dd606:
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd608:
	mov -1904(%RBP),%RSP
	add $-2136, %RSP
	jmp uuid_00000000000dd60b
uuid_00000000000dd609:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd60b:
	mov -1648(%RBP),%RSP
	add $-1896, %RSP
	jmp uuid_00000000000dd60e
uuid_00000000000dd60c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd60e:
	mov -1392(%RBP),%RSP
	add $-1640, %RSP
	jmp uuid_00000000000dd611
uuid_00000000000dd60f:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd611:
	mov -1104(%RBP),%RSP
	add $-1384, %RSP
	jmp uuid_00000000000dd614
uuid_00000000000dd612:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd614:
	mov -848(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000dd617
uuid_00000000000dd615:
uuid_00000000000dd617:
	mov -744(%RBP),%RSP
	add $-840, %RSP
	jmp uuid_00000000000dd61a
uuid_00000000000dd618:
	pushq -736(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd61a:
	mov -568(%RBP),%RSP
	add $-736, %RSP
	jmp uuid_00000000000dd61d
uuid_00000000000dd61b:
	pushq -560(%rbp)
#call function without-location : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd61d:
	mov -392(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dd620
uuid_00000000000dd61e:
uuid_00000000000dd620:
	mov -312(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dd623
uuid_00000000000dd621:
uuid_00000000000dd623:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
without_SB_location_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd62d
	jmp uuid_00000000000dd62f
uuid_00000000000dd62d:
	push %RBP
	jmp uuid_00000000000dd62a
	jmp uuid_00000000000dd62c
uuid_00000000000dd62a:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd627
	jmp uuid_00000000000dd629
uuid_00000000000dd627:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd624
	jmp uuid_00000000000dd626
uuid_00000000000dd624:
	movb $1, -192(%rbp)
uuid_00000000000dd626:
	mov -232(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dd629:
	mov -216(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dd62c:
	mov -208(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000dd62f:
	mov -200(%RBP),%RSP
	add $-240, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd631
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd630
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd633
uuid_00000000000dd631:
	pushq -240(%rbp)
	pushq -224(%rbp)
	pushq $uuid_00000000000dab3d
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd633:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
with_SB_key_CL_ArrowTokenConsStringToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd63d
	jmp uuid_00000000000dd63f
uuid_00000000000dd63d:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	jmp uuid_00000000000dd63a
	jmp uuid_00000000000dd63c
uuid_00000000000dd63a:
	push %RBP
	jmp uuid_00000000000dd637
	jmp uuid_00000000000dd639
uuid_00000000000dd637:
	push %RBP
	jmp uuid_00000000000dd634
	jmp uuid_00000000000dd636
uuid_00000000000dd634:
	movb $1, -200(%rbp)
uuid_00000000000dd636:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd639:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd63c:
	mov -216(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd63f:
	mov -208(%RBP),%RSP
	add $-264, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd641
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd640
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd643
uuid_00000000000dd641:
	pushq -64(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd643:
	mov -136(%RBP),%RSP
	add $-264, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
location_SB_of_CL_ArrowSourceLocationAST:
	pushq $uuid_00000000000dd644
	pushq $0
	pushq $0
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd64b
	jmp uuid_00000000000dd64d
uuid_00000000000dd64b:
	push %RBP
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000dd648
	jmp uuid_00000000000dd64a
uuid_00000000000dd648:
	push %RBP
	jmp uuid_00000000000dd645
	jmp uuid_00000000000dd647
uuid_00000000000dd645:
	movb $1, -272(%rbp)
uuid_00000000000dd647:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd64a:
	mov -288(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000dd64d:
	mov -280(%RBP),%RSP
	add $-352, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6ac
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd654
	jmp uuid_00000000000dd656
uuid_00000000000dd654:
	push %RBP
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000dd651
	jmp uuid_00000000000dd653
uuid_00000000000dd651:
	push %RBP
	jmp uuid_00000000000dd64e
	jmp uuid_00000000000dd650
uuid_00000000000dd64e:
	movb $1, -440(%rbp)
uuid_00000000000dd650:
	mov -520(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dd653:
	mov -456(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dd656:
	mov -448(%RBP),%RSP
	add $-520, %RSP
	mov -440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6a9
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd65d
	jmp uuid_00000000000dd65f
uuid_00000000000dd65d:
	push %RBP
	mov -592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd65a
	jmp uuid_00000000000dd65c
uuid_00000000000dd65a:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd657
	jmp uuid_00000000000dd659
uuid_00000000000dd657:
	movb $1, -608(%rbp)
uuid_00000000000dd659:
	mov -704(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dd65c:
	mov -624(%RBP),%RSP
	add $-776, %RSP
uuid_00000000000dd65f:
	mov -616(%RBP),%RSP
	add $-776, %RSP
	mov -608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6a6
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd66c
	jmp uuid_00000000000dd66e
uuid_00000000000dd66c:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000dd669
	jmp uuid_00000000000dd66b
uuid_00000000000dd669:
	push %RBP
	mov -824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd666
	jmp uuid_00000000000dd668
uuid_00000000000dd666:
	push %RBP
	mov -816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd663
	jmp uuid_00000000000dd665
uuid_00000000000dd663:
	movb $1, -864(%rbp)
uuid_00000000000dd665:
	mov -992(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dd668:
	mov -912(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dd66b:
	mov -880(%RBP),%RSP
	add $-1064, %RSP
uuid_00000000000dd66e:
	mov -872(%RBP),%RSP
	add $-1064, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6a3
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1144(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd678
	jmp uuid_00000000000dd67a
uuid_00000000000dd678:
	push %RBP
	mov -1136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd675
	jmp uuid_00000000000dd677
uuid_00000000000dd675:
	push %RBP
	mov -1128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd672
	jmp uuid_00000000000dd674
uuid_00000000000dd672:
	movb $1, -1152(%rbp)
uuid_00000000000dd674:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd677:
	mov -1168(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000dd67a:
	mov -1160(%RBP),%RSP
	add $-1320, %RSP
	mov -1152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6a0
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd684
	jmp uuid_00000000000dd686
uuid_00000000000dd684:
	push %RBP
	mov -1392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd681
	jmp uuid_00000000000dd683
uuid_00000000000dd681:
	push %RBP
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000dd67e
	jmp uuid_00000000000dd680
uuid_00000000000dd67e:
	movb $1, -1408(%rbp)
uuid_00000000000dd680:
	mov -1504(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000dd683:
	mov -1424(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000dd686:
	mov -1416(%RBP),%RSP
	add $-1560, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd69d
	push %RBP
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd690
	jmp uuid_00000000000dd692
uuid_00000000000dd690:
	push %RBP
	mov -1632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd68d
	jmp uuid_00000000000dd68f
uuid_00000000000dd68d:
	push %RBP
	mov -1624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd68a
	jmp uuid_00000000000dd68c
uuid_00000000000dd68a:
	movb $1, -1648(%rbp)
uuid_00000000000dd68c:
	mov -1744(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dd68f:
	mov -1664(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000dd692:
	mov -1656(%RBP),%RSP
	add $-1816, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd69a
	push %RBP
	jmp uuid_00000000000dd697
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd696
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd699
uuid_00000000000dd697:
uuid_00000000000dd699:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dd69c
uuid_00000000000dd69a:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd693
	jmp uuid_00000000000dd695
uuid_00000000000dd693:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd695:
	mov -1824(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dd69c:
	mov -1568(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dd69f
uuid_00000000000dd69d:
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd687
	jmp uuid_00000000000dd689
uuid_00000000000dd687:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd689:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000dd69f:
	mov -1328(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000dd6a2
uuid_00000000000dd6a0:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd67b
	jmp uuid_00000000000dd67d
uuid_00000000000dd67b:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd67d:
	mov -1328(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000dd6a2:
	mov -1072(%RBP),%RSP
	add $-1328, %RSP
	jmp uuid_00000000000dd6a5
uuid_00000000000dd6a3:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd66f
	jmp uuid_00000000000dd671
uuid_00000000000dd66f:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd671:
	mov -1072(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000dd6a5:
	mov -784(%RBP),%RSP
	add $-1072, %RSP
	jmp uuid_00000000000dd6a8
uuid_00000000000dd6a6:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	push %RBP
#call function non-zero : Arrow<SourceLocation,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd660
	jmp uuid_00000000000dd662
uuid_00000000000dd660:
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd662:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dd6a8:
	mov -528(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dd6ab
uuid_00000000000dd6a9:
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd6ab:
	mov -360(%RBP),%RSP
	add $-520, %RSP
	jmp uuid_00000000000dd6ae
uuid_00000000000dd6ac:
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dd6ae:
	mov -192(%RBP),%RSP
	add $-352, %RSP
	subq $32, %rsp
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
unique_CL_ArrowTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6b8
	jmp uuid_00000000000dd6ba
uuid_00000000000dd6b8:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000dd6b5
	jmp uuid_00000000000dd6b7
uuid_00000000000dd6b5:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6b2
	jmp uuid_00000000000dd6b4
uuid_00000000000dd6b2:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6af
	jmp uuid_00000000000dd6b1
uuid_00000000000dd6af:
	movb $1, -192(%rbp)
uuid_00000000000dd6b1:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd6b4:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd6b7:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd6ba:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6bc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd6bb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd6be
uuid_00000000000dd6bc:
	pushq -272(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq $0
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd6be:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	subq $56, %rsp
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_SB_verbose_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6c8
	jmp uuid_00000000000dd6ca
uuid_00000000000dd6c8:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	jmp uuid_00000000000dd6c5
	jmp uuid_00000000000dd6c7
uuid_00000000000dd6c5:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6c2
	jmp uuid_00000000000dd6c4
uuid_00000000000dd6c2:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6bf
	jmp uuid_00000000000dd6c1
uuid_00000000000dd6bf:
	movb $1, -192(%rbp)
uuid_00000000000dd6c1:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd6c4:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd6c7:
	mov -208(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd6ca:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6cc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd6cb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd6ce
uuid_00000000000dd6cc:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad55
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd6ce:
	mov -128(%RBP),%RSP
	add $-272, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
token_CL__CL_new_CL_ArrowTokenString:
	pushq -8(%rbp)
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function location::new : Arrow<Nil,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call location_CL__CL_new_CL_ArrowSourceLocationNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $0
	subq $56, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
location_CL__CL_new_CL_ArrowSourceLocationNil:
	pushq $uuid_00000000000dd644
	pushq $0
	pushq $0
	pushq $0
	subq $32, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
non_SB_zero_CL_ArrowU64SourceLocation:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6d8
	jmp uuid_00000000000dd6da
uuid_00000000000dd6d8:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6d5
	jmp uuid_00000000000dd6d7
uuid_00000000000dd6d5:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6d2
	jmp uuid_00000000000dd6d4
uuid_00000000000dd6d2:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6cf
	jmp uuid_00000000000dd6d1
uuid_00000000000dd6cf:
	movb $1, -128(%rbp)
uuid_00000000000dd6d1:
	mov -176(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dd6d4:
	mov -160(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dd6d7:
	mov -144(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000dd6da:
	mov -136(%RBP),%RSP
	add $-184, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd6de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd6e1
uuid_00000000000dd6df:
	push %RBP
	mov -168(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6db
	jmp uuid_00000000000dd6dd
uuid_00000000000dd6db:
	movq $1, -48(%rbp)
uuid_00000000000dd6dd:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dd6e1:
	mov -88(%RBP),%RSP
	add $-192, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
is_SB_already_SB_tokenized_CL_ArrowU64String:
	pushq $0
	mov $already_SB_tokenized_CL_ListStringListString, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000dd6fe:
#call function non-zero : Arrow<List<String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6ff
	jmp uuid_00000000000dd700
uuid_00000000000dd6ff:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6f4
	jmp uuid_00000000000dd6f6
uuid_00000000000dd6f4:
	push %RBP
	mov -96(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd6f1
	jmp uuid_00000000000dd6f3
uuid_00000000000dd6f1:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd6ee
	jmp uuid_00000000000dd6f0
uuid_00000000000dd6ee:
	movb $1, -112(%rbp)
uuid_00000000000dd6f0:
	mov -160(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dd6f3:
	mov -128(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000dd6f6:
	mov -120(%RBP),%RSP
	add $-168, %RSP
	mov -112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd6fb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd6fa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd6fd
uuid_00000000000dd6fb:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd6f7
	jmp uuid_00000000000dd6f9
uuid_00000000000dd6f7:
	movq $1, -24(%rbp)
uuid_00000000000dd6f9:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -136(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000dd6fd:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd6fe
uuid_00000000000dd700:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
tokenize_CL_ArrowNilString:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000dd701
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd702
	jmp uuid_00000000000dd704
uuid_00000000000dd702:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	pushq 0(%r15)
	pushq $2
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
uuid_00000000000dd704:
	mov -24(%RBP),%RSP
	add $-24, %RSP
	pushq $uuid_00000000000dab3d
	push %RBP
#call function is-already-tokenized : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call is_SB_already_SB_tokenized_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd70d
#call function read-file : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call read_SB_file_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -32(%rbp)
#call function cons : Arrow<Cons<String,List<String>>,List<String>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov $already_SB_tokenized_CL_ListStringListString, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call cons_CL_ArrowListStringConsListStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov $already_SB_tokenized_CL_ListStringListString, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000dd70f
uuid_00000000000dd70d:
uuid_00000000000dd70f:
	mov -40(%RBP),%RSP
	add $-40, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
	pushq $1
	pushq $1
	pushq $1
	pushq $1
	pushq $0
uuid_00000000000dd7c5:
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000dd7c6
	jmp uuid_00000000000dd7c7
uuid_00000000000dd7c6:
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -120(%rbp)
	mov -136(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd714
	push %RBP
	jmp uuid_00000000000dd711
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd710
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd713
uuid_00000000000dd711:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
uuid_00000000000dd713:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000dd716
uuid_00000000000dd714:
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	movq $1, -88(%rbp)
uuid_00000000000dd716:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	mov -32(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -144(%rbp)
	mov -160(%RBP), %AL
	mov $35, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7c2
	push %RBP
	pushq -144(%rbp)
	mov -176(%RBP), %AL
	mov $10, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7bf
	push %RBP
	pushq -144(%rbp)
	mov -192(%RBP), %AL
	mov $9, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7bc
	push %RBP
	pushq -144(%rbp)
	mov -208(%RBP), %AL
	mov $32, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7b9
	push %RBP
	pushq -144(%rbp)
	mov -224(%RBP), %AL
	mov $40, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7b6
	push %RBP
	pushq -144(%rbp)
	mov -240(%RBP), %AL
	mov $41, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7b3
	push %RBP
	pushq -144(%rbp)
	mov -256(%RBP), %AL
	mov $39, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7b0
	push %RBP
	pushq -144(%rbp)
	mov -272(%RBP), %AL
	mov $59, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7ad
	push %RBP
	pushq -144(%rbp)
	jmp uuid_00000000000dd7aa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd7a9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd7ac
uuid_00000000000dd7aa:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000dd7a6
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad53
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd7a3
	jmp uuid_00000000000dd7a5
uuid_00000000000dd7a3:
	pushq $uuid_00000000000dad53
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd7a5:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000dd7a8
uuid_00000000000dd7a6:
uuid_00000000000dd7a8:
	mov -296(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000dd7ac:
	mov -280(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000dd7af
uuid_00000000000dd7ad:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000dd798
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd78d
	jmp uuid_00000000000dd78f
uuid_00000000000dd78d:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd78f:
	mov -288(%RBP),%RSP
	add $-344, %RSP
	pushq $uuid_00000000000dad50
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000dd79a
uuid_00000000000dd798:
uuid_00000000000dd79a:
	mov -280(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000dd7af:
	mov -264(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dd7b2
uuid_00000000000dd7b0:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000dd782
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd777
	jmp uuid_00000000000dd779
uuid_00000000000dd777:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd779:
	mov -272(%RBP),%RSP
	add $-328, %RSP
	pushq $uuid_00000000000dad52
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000dd784
uuid_00000000000dd782:
uuid_00000000000dd784:
	mov -264(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000dd7b2:
	mov -248(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000dd7b5
uuid_00000000000dd7b3:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000dd76c
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd761
	jmp uuid_00000000000dd763
uuid_00000000000dd761:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd763:
	mov -256(%RBP),%RSP
	add $-312, %RSP
	mov -112(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -112(%rbp)
	pushq $uuid_00000000000daa70
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	jmp uuid_00000000000dd76e
uuid_00000000000dd76c:
uuid_00000000000dd76e:
	mov -248(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd7b5:
	mov -232(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd7b8
uuid_00000000000dd7b6:
	push %RBP
	mov -48(%RBP), %AL
	cmp $0, %AL
	jne uuid_00000000000dd756
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd74b
	jmp uuid_00000000000dd74d
uuid_00000000000dd74b:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd74d:
	mov -240(%RBP),%RSP
	add $-296, %RSP
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	pushq $uuid_00000000000daa6e
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	jmp uuid_00000000000dd758
uuid_00000000000dd756:
uuid_00000000000dd758:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dd7b8:
	mov -216(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000dd7bb
uuid_00000000000dd7b9:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd740
	jmp uuid_00000000000dd742
uuid_00000000000dd740:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd742:
	mov -216(%RBP),%RSP
	add $-272, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000dd7bb:
	mov -200(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000dd7be
uuid_00000000000dd7bc:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd735
	jmp uuid_00000000000dd737
uuid_00000000000dd735:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd737:
	mov -200(%RBP),%RSP
	add $-256, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000dd7be:
	mov -184(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd7c1
uuid_00000000000dd7bf:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd72a
	jmp uuid_00000000000dd72c
uuid_00000000000dd72a:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd72c:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	movb $0, -48(%rbp)
uuid_00000000000dd7c1:
	mov -168(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000dd7c4
uuid_00000000000dd7c2:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd71f
	jmp uuid_00000000000dd721
uuid_00000000000dd71f:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	pushq $0
	pushq $0
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
uuid_00000000000dd721:
	mov -168(%RBP),%RSP
	add $-224, %RSP
	movq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -80(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -88(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -88(%rbp), %r15
	mov %r15, -104(%rbp)
	movb $1, -48(%rbp)
uuid_00000000000dd7c4:
	mov -152(%RBP),%RSP
	add $-224, %RSP
	mov -32(%RBP), %RAX
	inc %RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dd7c5
uuid_00000000000dd7c7:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd7d0
	jmp uuid_00000000000dd7d2
uuid_00000000000dd7d0:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function iuid : Arrow<Nil,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call iuid_CL_ArrowU64Nil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $0
	pushq $0
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
uuid_00000000000dd7d2:
	mov -120(%RBP),%RSP
	add $-176, %RSP
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7dd
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd7db
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd7dc
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd7df
uuid_00000000000dd7dd:
uuid_00000000000dd7df:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	mov %rbp, %rsp
	sub $16, %rsp
	ret
align_CL_ArrowI64I64:
#call function max : Arrow<Cons<I64,I64>,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $8
	mov %RBX, %RBP
	call max_CL_ArrowI64ConsI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_ffi_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7e6
	jmp uuid_00000000000dd7e8
uuid_00000000000dd7e6:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd7e3
	jmp uuid_00000000000dd7e5
uuid_00000000000dd7e3:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd7e0
	jmp uuid_00000000000dd7e2
uuid_00000000000dd7e0:
	movb $1, -104(%rbp)
uuid_00000000000dd7e2:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd7e5:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd7e8:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7fa
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7f0
	jmp uuid_00000000000dd7f2
uuid_00000000000dd7f0:
	push %RBP
	jmp uuid_00000000000dd7ed
	jmp uuid_00000000000dd7ef
uuid_00000000000dd7ed:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dd7e9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd7ea
	jmp uuid_00000000000dd7ec
uuid_00000000000dd7ea:
	movb $1, -216(%rbp)
uuid_00000000000dd7ec:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd7ef:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd7f2:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd7f7
	push %RBP
	jmp uuid_00000000000dd7f4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd7f3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd7f6
uuid_00000000000dd7f4:
uuid_00000000000dd7f6:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd7f9
uuid_00000000000dd7f7:
	movq $1, -40(%rbp)
uuid_00000000000dd7f9:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd7fc
uuid_00000000000dd7fa:
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd7fc:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_nil_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd803
	jmp uuid_00000000000dd805
uuid_00000000000dd803:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd800
	jmp uuid_00000000000dd802
uuid_00000000000dd800:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd7fd
	jmp uuid_00000000000dd7ff
uuid_00000000000dd7fd:
	movb $1, -104(%rbp)
uuid_00000000000dd7ff:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd802:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd805:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd816
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd80c
	jmp uuid_00000000000dd80e
uuid_00000000000dd80c:
	push %RBP
	jmp uuid_00000000000dd809
	jmp uuid_00000000000dd80b
uuid_00000000000dd809:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd806
	jmp uuid_00000000000dd808
uuid_00000000000dd806:
	movb $1, -216(%rbp)
uuid_00000000000dd808:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd80b:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd80e:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd813
	push %RBP
	jmp uuid_00000000000dd810
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd80f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd812
uuid_00000000000dd810:
uuid_00000000000dd812:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd815
uuid_00000000000dd813:
	movq $1, -40(%rbp)
uuid_00000000000dd815:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd818
uuid_00000000000dd816:
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd818:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_never_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd81f
	jmp uuid_00000000000dd821
uuid_00000000000dd81f:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd81c
	jmp uuid_00000000000dd81e
uuid_00000000000dd81c:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd819
	jmp uuid_00000000000dd81b
uuid_00000000000dd819:
	movb $1, -104(%rbp)
uuid_00000000000dd81b:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd81e:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd821:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd832
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd828
	jmp uuid_00000000000dd82a
uuid_00000000000dd828:
	push %RBP
	jmp uuid_00000000000dd825
	jmp uuid_00000000000dd827
uuid_00000000000dd825:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dac51
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd822
	jmp uuid_00000000000dd824
uuid_00000000000dd822:
	movb $1, -216(%rbp)
uuid_00000000000dd824:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd827:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd82a:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd82f
	push %RBP
	jmp uuid_00000000000dd82c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd82b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd82e
uuid_00000000000dd82c:
uuid_00000000000dd82e:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd831
uuid_00000000000dd82f:
	movq $1, -40(%rbp)
uuid_00000000000dd831:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd834
uuid_00000000000dd832:
#call function is-never : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_never_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-never : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_never_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd834:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_seq_CL_ArrowU64AST:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd83b
	jmp uuid_00000000000dd83d
uuid_00000000000dd83b:
	push %RBP
	jmp uuid_00000000000dd838
	jmp uuid_00000000000dd83a
uuid_00000000000dd838:
	push %RBP
	jmp uuid_00000000000dd835
	jmp uuid_00000000000dd837
uuid_00000000000dd835:
	movb $1, -248(%rbp)
uuid_00000000000dd837:
	mov -272(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd83a:
	mov -264(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000dd83d:
	mov -256(%RBP),%RSP
	add $-272, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd842
	push %RBP
	jmp uuid_00000000000dd83f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd83e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd841
uuid_00000000000dd83f:
uuid_00000000000dd841:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000dd844
uuid_00000000000dd842:
	movq $1, -88(%rbp)
uuid_00000000000dd844:
	mov -168(%RBP),%RSP
	add $-272, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
is_SB_arrow_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd84b
	jmp uuid_00000000000dd84d
uuid_00000000000dd84b:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd848
	jmp uuid_00000000000dd84a
uuid_00000000000dd848:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd845
	jmp uuid_00000000000dd847
uuid_00000000000dd845:
	movb $1, -104(%rbp)
uuid_00000000000dd847:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd84a:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd84d:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd85e
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd854
	jmp uuid_00000000000dd856
uuid_00000000000dd854:
	push %RBP
	jmp uuid_00000000000dd851
	jmp uuid_00000000000dd853
uuid_00000000000dd851:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db279
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd84e
	jmp uuid_00000000000dd850
uuid_00000000000dd84e:
	movb $1, -216(%rbp)
uuid_00000000000dd850:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd853:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd856:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd85b
	push %RBP
	jmp uuid_00000000000dd858
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd857
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd85a
uuid_00000000000dd858:
uuid_00000000000dd85a:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd85d
uuid_00000000000dd85b:
	movq $1, -40(%rbp)
uuid_00000000000dd85d:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd860
uuid_00000000000dd85e:
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd860:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_array_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd867
	jmp uuid_00000000000dd869
uuid_00000000000dd867:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd864
	jmp uuid_00000000000dd866
uuid_00000000000dd864:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd861
	jmp uuid_00000000000dd863
uuid_00000000000dd861:
	movb $1, -104(%rbp)
uuid_00000000000dd863:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd866:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd869:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd87a
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd870
	jmp uuid_00000000000dd872
uuid_00000000000dd870:
	push %RBP
	jmp uuid_00000000000dd86d
	jmp uuid_00000000000dd86f
uuid_00000000000dd86d:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd86a
	jmp uuid_00000000000dd86c
uuid_00000000000dd86a:
	movb $1, -216(%rbp)
uuid_00000000000dd86c:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd86f:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd872:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd877
	push %RBP
	jmp uuid_00000000000dd874
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd873
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd876
uuid_00000000000dd874:
uuid_00000000000dd876:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd879
uuid_00000000000dd877:
	movq $1, -40(%rbp)
uuid_00000000000dd879:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd87c
uuid_00000000000dd87a:
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd87c:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_hook_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd883
	jmp uuid_00000000000dd885
uuid_00000000000dd883:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd880
	jmp uuid_00000000000dd882
uuid_00000000000dd880:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd87d
	jmp uuid_00000000000dd87f
uuid_00000000000dd87d:
	movb $1, -104(%rbp)
uuid_00000000000dd87f:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd882:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd885:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd897
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd88d
	jmp uuid_00000000000dd88f
uuid_00000000000dd88d:
	push %RBP
	jmp uuid_00000000000dd88a
	jmp uuid_00000000000dd88c
uuid_00000000000dd88a:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dd886
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd887
	jmp uuid_00000000000dd889
uuid_00000000000dd887:
	movb $1, -216(%rbp)
uuid_00000000000dd889:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd88c:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd88f:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd894
	push %RBP
	jmp uuid_00000000000dd891
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd890
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd893
uuid_00000000000dd891:
uuid_00000000000dd893:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd896
uuid_00000000000dd894:
	movq $1, -40(%rbp)
uuid_00000000000dd896:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd899
uuid_00000000000dd897:
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-hook : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_hook_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd899:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_blob_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8a0
	jmp uuid_00000000000dd8a2
uuid_00000000000dd8a0:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd89d
	jmp uuid_00000000000dd89f
uuid_00000000000dd89d:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd89a
	jmp uuid_00000000000dd89c
uuid_00000000000dd89a:
	movb $1, -104(%rbp)
uuid_00000000000dd89c:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd89f:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd8a2:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8b4
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8aa
	jmp uuid_00000000000dd8ac
uuid_00000000000dd8aa:
	push %RBP
	jmp uuid_00000000000dd8a7
	jmp uuid_00000000000dd8a9
uuid_00000000000dd8a7:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dd8a3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8a4
	jmp uuid_00000000000dd8a6
uuid_00000000000dd8a4:
	movb $1, -216(%rbp)
uuid_00000000000dd8a6:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd8a9:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd8ac:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8b1
	push %RBP
	jmp uuid_00000000000dd8ae
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd8ad
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd8b0
uuid_00000000000dd8ae:
uuid_00000000000dd8b0:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd8b3
uuid_00000000000dd8b1:
	movq $1, -40(%rbp)
uuid_00000000000dd8b3:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd8b6
uuid_00000000000dd8b4:
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd8b6:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_stack_SB_variable_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8bd
	jmp uuid_00000000000dd8bf
uuid_00000000000dd8bd:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8ba
	jmp uuid_00000000000dd8bc
uuid_00000000000dd8ba:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8b7
	jmp uuid_00000000000dd8b9
uuid_00000000000dd8b7:
	movb $1, -104(%rbp)
uuid_00000000000dd8b9:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd8bc:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd8bf:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8d0
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8c6
	jmp uuid_00000000000dd8c8
uuid_00000000000dd8c6:
	push %RBP
	jmp uuid_00000000000dd8c3
	jmp uuid_00000000000dd8c5
uuid_00000000000dd8c3:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8c0
	jmp uuid_00000000000dd8c2
uuid_00000000000dd8c0:
	movb $1, -216(%rbp)
uuid_00000000000dd8c2:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd8c5:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd8c8:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8cd
	push %RBP
	jmp uuid_00000000000dd8ca
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd8c9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd8cc
uuid_00000000000dd8ca:
uuid_00000000000dd8cc:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd8cf
uuid_00000000000dd8cd:
	movq $1, -40(%rbp)
uuid_00000000000dd8cf:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd8d2
uuid_00000000000dd8d0:
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd8d2:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_cons_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8d9
	jmp uuid_00000000000dd8db
uuid_00000000000dd8d9:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8d6
	jmp uuid_00000000000dd8d8
uuid_00000000000dd8d6:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8d3
	jmp uuid_00000000000dd8d5
uuid_00000000000dd8d3:
	movb $1, -104(%rbp)
uuid_00000000000dd8d5:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd8d8:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd8db:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8ec
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8e2
	jmp uuid_00000000000dd8e4
uuid_00000000000dd8e2:
	push %RBP
	jmp uuid_00000000000dd8df
	jmp uuid_00000000000dd8e1
uuid_00000000000dd8df:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8dc
	jmp uuid_00000000000dd8de
uuid_00000000000dd8dc:
	movb $1, -216(%rbp)
uuid_00000000000dd8de:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd8e1:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd8e4:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8e9
	push %RBP
	jmp uuid_00000000000dd8e6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd8e5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd8e8
uuid_00000000000dd8e6:
uuid_00000000000dd8e8:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd8eb
uuid_00000000000dd8e9:
	movq $1, -40(%rbp)
uuid_00000000000dd8eb:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd8ee
uuid_00000000000dd8ec:
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd8ee:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_ctx_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8f5
	jmp uuid_00000000000dd8f7
uuid_00000000000dd8f5:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8f2
	jmp uuid_00000000000dd8f4
uuid_00000000000dd8f2:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd8ef
	jmp uuid_00000000000dd8f1
uuid_00000000000dd8ef:
	movb $1, -104(%rbp)
uuid_00000000000dd8f1:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd8f4:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd8f7:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd909
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd8ff
	jmp uuid_00000000000dd901
uuid_00000000000dd8ff:
	push %RBP
	jmp uuid_00000000000dd8fc
	jmp uuid_00000000000dd8fe
uuid_00000000000dd8fc:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dd8f8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd8f9
	jmp uuid_00000000000dd8fb
uuid_00000000000dd8f9:
	movb $1, -216(%rbp)
uuid_00000000000dd8fb:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd8fe:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd901:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd906
	push %RBP
	jmp uuid_00000000000dd903
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd902
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd905
uuid_00000000000dd903:
uuid_00000000000dd905:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd908
uuid_00000000000dd906:
	movq $1, -40(%rbp)
uuid_00000000000dd908:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd90b
uuid_00000000000dd909:
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-ctx : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_ctx_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd90b:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_string_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd912
	jmp uuid_00000000000dd914
uuid_00000000000dd912:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd90f
	jmp uuid_00000000000dd911
uuid_00000000000dd90f:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd90c
	jmp uuid_00000000000dd90e
uuid_00000000000dd90c:
	movb $1, -104(%rbp)
uuid_00000000000dd90e:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd911:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd914:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd925
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd91b
	jmp uuid_00000000000dd91d
uuid_00000000000dd91b:
	push %RBP
	jmp uuid_00000000000dd918
	jmp uuid_00000000000dd91a
uuid_00000000000dd918:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dacb3
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd915
	jmp uuid_00000000000dd917
uuid_00000000000dd915:
	movb $1, -216(%rbp)
uuid_00000000000dd917:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd91a:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd91d:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd922
	push %RBP
	jmp uuid_00000000000dd91f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd91e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd921
uuid_00000000000dd91f:
uuid_00000000000dd921:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd924
uuid_00000000000dd922:
	movq $1, -40(%rbp)
uuid_00000000000dd924:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd927
uuid_00000000000dd925:
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd927:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_rc_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd92e
	jmp uuid_00000000000dd930
uuid_00000000000dd92e:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd92b
	jmp uuid_00000000000dd92d
uuid_00000000000dd92b:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd928
	jmp uuid_00000000000dd92a
uuid_00000000000dd928:
	movb $1, -104(%rbp)
uuid_00000000000dd92a:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd92d:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd930:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd941
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd937
	jmp uuid_00000000000dd939
uuid_00000000000dd937:
	push %RBP
	jmp uuid_00000000000dd934
	jmp uuid_00000000000dd936
uuid_00000000000dd934:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000db227
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd931
	jmp uuid_00000000000dd933
uuid_00000000000dd931:
	movb $1, -216(%rbp)
uuid_00000000000dd933:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd936:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd939:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd93e
	push %RBP
	jmp uuid_00000000000dd93b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd93a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd93d
uuid_00000000000dd93b:
uuid_00000000000dd93d:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd940
uuid_00000000000dd93e:
	movq $1, -40(%rbp)
uuid_00000000000dd940:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd943
uuid_00000000000dd941:
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd943:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_onto_SB_stack_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd94a
	jmp uuid_00000000000dd94c
uuid_00000000000dd94a:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd947
	jmp uuid_00000000000dd949
uuid_00000000000dd947:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd944
	jmp uuid_00000000000dd946
uuid_00000000000dd944:
	movb $1, -104(%rbp)
uuid_00000000000dd946:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd949:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd94c:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd970
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd966
	jmp uuid_00000000000dd968
uuid_00000000000dd966:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd95d
	jmp uuid_00000000000dd95f
uuid_00000000000dd95d:
	push %RBP
	jmp uuid_00000000000dd95a
	jmp uuid_00000000000dd95c
uuid_00000000000dd95a:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd954
	jmp uuid_00000000000dd956
uuid_00000000000dd954:
	push %RBP
	jmp uuid_00000000000dd951
	jmp uuid_00000000000dd953
uuid_00000000000dd951:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000dd94d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd94e
	jmp uuid_00000000000dd950
uuid_00000000000dd94e:
	movb $1, -336(%rbp)
uuid_00000000000dd950:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd953:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd956:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd957
	jmp uuid_00000000000dd959
uuid_00000000000dd957:
	movb $1, -280(%rbp)
uuid_00000000000dd959:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd95c:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd95f:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd963
	jmp uuid_00000000000dd965
uuid_00000000000dd963:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db822
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd960
	jmp uuid_00000000000dd962
uuid_00000000000dd960:
	movb $1, -216(%rbp)
uuid_00000000000dd962:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd965:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd968:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd96d
	push %RBP
	jmp uuid_00000000000dd96a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd969
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd96c
uuid_00000000000dd96a:
uuid_00000000000dd96c:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dd96f
uuid_00000000000dd96d:
	movq $1, -40(%rbp)
uuid_00000000000dd96f:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dd972
uuid_00000000000dd970:
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd972:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_impure_SB_offset_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd979
	jmp uuid_00000000000dd97b
uuid_00000000000dd979:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd976
	jmp uuid_00000000000dd978
uuid_00000000000dd976:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd973
	jmp uuid_00000000000dd975
uuid_00000000000dd973:
	movb $1, -104(%rbp)
uuid_00000000000dd975:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd978:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd97b:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd99f
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd995
	jmp uuid_00000000000dd997
uuid_00000000000dd995:
	push %RBP
	mov -200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd98c
	jmp uuid_00000000000dd98e
uuid_00000000000dd98c:
	push %RBP
	jmp uuid_00000000000dd989
	jmp uuid_00000000000dd98b
uuid_00000000000dd989:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd983
	jmp uuid_00000000000dd985
uuid_00000000000dd983:
	push %RBP
	jmp uuid_00000000000dd980
	jmp uuid_00000000000dd982
uuid_00000000000dd980:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq $uuid_00000000000dd97c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd97d
	jmp uuid_00000000000dd97f
uuid_00000000000dd97d:
	movb $1, -336(%rbp)
uuid_00000000000dd97f:
	mov -360(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd982:
	mov -352(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd985:
	mov -344(%RBP),%RSP
	add $-368, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd986
	jmp uuid_00000000000dd988
uuid_00000000000dd986:
	movb $1, -280(%rbp)
uuid_00000000000dd988:
	mov -304(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd98b:
	mov -296(%RBP),%RSP
	add $-368, %RSP
uuid_00000000000dd98e:
	mov -288(%RBP),%RSP
	add $-368, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd992
	jmp uuid_00000000000dd994
uuid_00000000000dd992:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -384(%rbp)
	pushq $uuid_00000000000db822
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd98f
	jmp uuid_00000000000dd991
uuid_00000000000dd98f:
	movb $1, -216(%rbp)
uuid_00000000000dd991:
	mov -376(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd994:
	mov -232(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000dd997:
	mov -224(%RBP),%RSP
	add $-384, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd99c
	push %RBP
	jmp uuid_00000000000dd999
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd998
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd99b
uuid_00000000000dd999:
uuid_00000000000dd99b:
	mov -392(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dd99e
uuid_00000000000dd99c:
	movq $1, -40(%rbp)
uuid_00000000000dd99e:
	mov -184(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000dd9a1
uuid_00000000000dd99f:
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd9a1:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
is_SB_branchconditional_CL_ArrowU64Type:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9a8
	jmp uuid_00000000000dd9aa
uuid_00000000000dd9a8:
	push %RBP
	mov -88(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd9a5
	jmp uuid_00000000000dd9a7
uuid_00000000000dd9a5:
	push %RBP
	mov -80(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd9a2
	jmp uuid_00000000000dd9a4
uuid_00000000000dd9a2:
	movb $1, -104(%rbp)
uuid_00000000000dd9a4:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd9a7:
	mov -120(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000dd9aa:
	mov -112(%RBP),%RSP
	add $-176, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9bc
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9b2
	jmp uuid_00000000000dd9b4
uuid_00000000000dd9b2:
	push %RBP
	jmp uuid_00000000000dd9af
	jmp uuid_00000000000dd9b1
uuid_00000000000dd9af:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq $uuid_00000000000dd9ab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dd9ac
	jmp uuid_00000000000dd9ae
uuid_00000000000dd9ac:
	movb $1, -216(%rbp)
uuid_00000000000dd9ae:
	mov -240(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd9b1:
	mov -232(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000dd9b4:
	mov -224(%RBP),%RSP
	add $-248, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9b9
	push %RBP
	jmp uuid_00000000000dd9b6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd9b5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd9b8
uuid_00000000000dd9b6:
uuid_00000000000dd9b8:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000dd9bb
uuid_00000000000dd9b9:
	movq $1, -40(%rbp)
uuid_00000000000dd9bb:
	mov -184(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dd9be
uuid_00000000000dd9bc:
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-branchconditional : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call is_SB_branchconditional_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000dd9be:
	mov -72(%RBP),%RSP
	add $-176, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
mark_SB_is_SB_lm_SB_struct_CL_ArrowNilString:
#call function .bind : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,HashtableEq<String,U64>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $class_SB_exists_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $1
	mov %RBX, %RBP
	call _DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	mov %rbp, %rsp
	sub $16, %rsp
	ret
is_SB_lm_SB_struct_CL_ArrowU64String:
#call function .lookup : Arrow<Cons<Cons<HashtableEq<String,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq $0
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
_AD__CL_ArrowASTConsASTAST:
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9cf
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9c5
	jmp uuid_00000000000dd9c7
uuid_00000000000dd9c5:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd9c2
	jmp uuid_00000000000dd9c4
uuid_00000000000dd9c2:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd9bf
	jmp uuid_00000000000dd9c1
uuid_00000000000dd9bf:
	movb $1, -392(%rbp)
uuid_00000000000dd9c1:
	mov -488(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd9c4:
	mov -408(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000dd9c7:
	mov -400(%RBP),%RSP
	add $-560, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9cc
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000dd9c9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd9c8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd9cb
uuid_00000000000dd9c9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd9cb:
	mov -568(%RBP),%RSP
	add $-640, %RSP
	jmp uuid_00000000000dd9ce
uuid_00000000000dd9cc:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dd9ce:
	mov -312(%RBP),%RSP
	add $-560, %RSP
	jmp uuid_00000000000dd9d1
uuid_00000000000dd9cf:
uuid_00000000000dd9d1:
	mov -232(%RBP),%RSP
	add $-304, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $152, %rsp
	ret
print_CL_ArrowNilToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9db
	jmp uuid_00000000000dd9dd
uuid_00000000000dd9db:
	push %RBP
	jmp uuid_00000000000dd9d8
	jmp uuid_00000000000dd9da
uuid_00000000000dd9d8:
	push %RBP
	jmp uuid_00000000000dd9d5
	jmp uuid_00000000000dd9d7
uuid_00000000000dd9d5:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd9d2
	jmp uuid_00000000000dd9d4
uuid_00000000000dd9d2:
	movb $1, -192(%rbp)
uuid_00000000000dd9d4:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dd9d7:
	mov -216(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dd9da:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dd9dd:
	mov -200(%RBP),%RSP
	add $-232, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd9de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd9e1
uuid_00000000000dd9df:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd9e1:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $64, %rsp
	ret
print_CL_ArrowNilContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9f6
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9f3
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9eb
	jmp uuid_00000000000dd9ed
uuid_00000000000dd9eb:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000dd9e8
	jmp uuid_00000000000dd9ea
uuid_00000000000dd9e8:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd9e5
	jmp uuid_00000000000dd9e7
uuid_00000000000dd9e5:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd9e2
	jmp uuid_00000000000dd9e4
uuid_00000000000dd9e2:
	movb $1, -520(%rbp)
uuid_00000000000dd9e4:
	mov -632(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dd9e7:
	mov -616(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dd9ea:
	mov -536(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000dd9ed:
	mov -528(%RBP),%RSP
	add $-728, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dd9f0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dd9ef
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dd9f2
uuid_00000000000dd9f0:
#call function print : Arrow<Context,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd9ee
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd25d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dd9f2:
	mov -416(%RBP),%RSP
	add $-728, %RSP
	jmp uuid_00000000000dd9f5
uuid_00000000000dd9f3:
uuid_00000000000dd9f5:
	mov -312(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000dd9f8
uuid_00000000000dd9f6:
uuid_00000000000dd9f8:
	mov -208(%RBP),%RSP
	add $-304, %RSP
	mov %rbp, %rsp
	sub $104, %rsp
	ret
print_CL_ArrowNilTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda0f
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda0c
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda05
	jmp uuid_00000000000dda07
uuid_00000000000dda05:
	push %RBP
	jmp uuid_00000000000dda02
	jmp uuid_00000000000dda04
uuid_00000000000dda02:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000dd9ff
	jmp uuid_00000000000dda01
uuid_00000000000dd9ff:
	push %RBP
	mov -528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dd9fc
	jmp uuid_00000000000dd9fe
uuid_00000000000dd9fc:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dd9f9
	jmp uuid_00000000000dd9fb
uuid_00000000000dd9f9:
	movb $1, -640(%rbp)
uuid_00000000000dd9fb:
	mov -712(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dd9fe:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dda01:
	mov -664(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dda04:
	mov -656(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000dda07:
	mov -648(%RBP),%RSP
	add $-832, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda09
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dda08
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dda0b
uuid_00000000000dda09:
#call function print : Arrow<TContext,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd25d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda0b:
	mov -512(%RBP),%RSP
	add $-832, %RSP
	jmp uuid_00000000000dda0e
uuid_00000000000dda0c:
uuid_00000000000dda0e:
	mov -384(%RBP),%RSP
	add $-504, %RSP
	jmp uuid_00000000000dda11
uuid_00000000000dda0f:
uuid_00000000000dda11:
	mov -256(%RBP),%RSP
	add $-376, %RSP
	mov %rbp, %rsp
	sub $128, %rsp
	ret
print_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda82
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda7f
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda19
	jmp uuid_00000000000dda1b
uuid_00000000000dda19:
	push %RBP
	jmp uuid_00000000000dda16
	jmp uuid_00000000000dda18
uuid_00000000000dda16:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda13
	jmp uuid_00000000000dda15
uuid_00000000000dda13:
	movb $1, -400(%rbp)
uuid_00000000000dda15:
	mov -424(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dda18:
	mov -416(%RBP),%RSP
	add $-432, %RSP
uuid_00000000000dda1b:
	mov -408(%RBP),%RSP
	add $-432, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda7c
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda22
	jmp uuid_00000000000dda24
uuid_00000000000dda22:
	push %RBP
	jmp uuid_00000000000dda1f
	jmp uuid_00000000000dda21
uuid_00000000000dda1f:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda1c
	jmp uuid_00000000000dda1e
uuid_00000000000dda1c:
	movb $1, -520(%rbp)
uuid_00000000000dda1e:
	mov -544(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dda21:
	mov -536(%RBP),%RSP
	add $-552, %RSP
uuid_00000000000dda24:
	mov -528(%RBP),%RSP
	add $-552, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda79
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda28
	jmp uuid_00000000000dda2a
uuid_00000000000dda28:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000dda25
	jmp uuid_00000000000dda27
uuid_00000000000dda25:
	movb $1, -640(%rbp)
uuid_00000000000dda27:
	mov -656(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000dda2a:
	mov -648(%RBP),%RSP
	add $-680, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda76
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda2e
	jmp uuid_00000000000dda30
uuid_00000000000dda2e:
	push %RBP
	jmp uuid_00000000000dda2b
	jmp uuid_00000000000dda2d
uuid_00000000000dda2b:
	movb $1, -768(%rbp)
uuid_00000000000dda2d:
	mov -784(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000dda30:
	mov -776(%RBP),%RSP
	add $-784, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda73
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda37
	jmp uuid_00000000000dda39
uuid_00000000000dda37:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda34
	jmp uuid_00000000000dda36
uuid_00000000000dda34:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda31
	jmp uuid_00000000000dda33
uuid_00000000000dda31:
	movb $1, -872(%rbp)
uuid_00000000000dda33:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dda36:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000dda39:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda70
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda41
	jmp uuid_00000000000dda43
uuid_00000000000dda41:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda3e
	jmp uuid_00000000000dda40
uuid_00000000000dda3e:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000dda3b
	jmp uuid_00000000000dda3d
uuid_00000000000dda3b:
	movb $1, -1128(%rbp)
uuid_00000000000dda3d:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000dda40:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000dda43:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda6d
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda4b
	jmp uuid_00000000000dda4d
uuid_00000000000dda4b:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda48
	jmp uuid_00000000000dda4a
uuid_00000000000dda48:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda45
	jmp uuid_00000000000dda47
uuid_00000000000dda45:
	movb $1, -1368(%rbp)
uuid_00000000000dda47:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dda4a:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dda4d:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda6a
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda57
	jmp uuid_00000000000dda59
uuid_00000000000dda57:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000dda54
	jmp uuid_00000000000dda56
uuid_00000000000dda54:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda51
	jmp uuid_00000000000dda53
uuid_00000000000dda51:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda4e
	jmp uuid_00000000000dda50
uuid_00000000000dda4e:
	movb $1, -1624(%rbp)
uuid_00000000000dda50:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dda53:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dda56:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000dda59:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda67
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda60
	jmp uuid_00000000000dda62
uuid_00000000000dda60:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda5d
	jmp uuid_00000000000dda5f
uuid_00000000000dda5d:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda5a
	jmp uuid_00000000000dda5c
uuid_00000000000dda5a:
	movb $1, -1912(%rbp)
uuid_00000000000dda5c:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000dda5f:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000dda62:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda64
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dda63
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dda66
uuid_00000000000dda64:
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd25d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda66:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000dda69
uuid_00000000000dda67:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad53
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dade1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda69:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000dda6c
uuid_00000000000dda6a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda6c:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000dda6f
uuid_00000000000dda6d:
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dda44
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda6f:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000dda72
uuid_00000000000dda70:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dda3a
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd9ee
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda72:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000dda75
uuid_00000000000dda73:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db822
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda75:
	mov -688(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000dda78
uuid_00000000000dda76:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda78:
	mov -560(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000dda7b
uuid_00000000000dda79:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad52
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda7b:
	mov -440(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000dda7e
uuid_00000000000dda7c:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda7e:
	mov -320(%RBP),%RSP
	add $-432, %RSP
	jmp uuid_00000000000dda81
uuid_00000000000dda7f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa5e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda81:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000dda84
uuid_00000000000dda82:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dda12
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda84:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
print_CL_ArrowNilFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dda85
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dda99:
#call function non-zero : Arrow<FContext,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dda9a
	jmp uuid_00000000000dda9b
uuid_00000000000dda9a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dda92
	jmp uuid_00000000000dda94
uuid_00000000000dda92:
	push %RBP
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	jmp uuid_00000000000dda8f
	jmp uuid_00000000000dda91
uuid_00000000000dda8f:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000dda8c
	jmp uuid_00000000000dda8e
uuid_00000000000dda8c:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dda89
	jmp uuid_00000000000dda8b
uuid_00000000000dda89:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda86
	jmp uuid_00000000000dda88
uuid_00000000000dda86:
	movb $1, -624(%rbp)
uuid_00000000000dda88:
	mov -848(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dda8b:
	mov -832(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dda8e:
	mov -800(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dda91:
	mov -640(%RBP),%RSP
	add $-1048, %RSP
uuid_00000000000dda94:
	mov -632(%RBP),%RSP
	add $-1048, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dda96
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dda95
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dda98
uuid_00000000000dda96:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -840(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db3ae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dda98:
	mov -416(%RBP),%RSP
	add $-1048, %RSP
	add $200, %rsp
	add $200, %rsp
	add $8, %rsp
	add $152, %rsp
	add $24, %rsp
	add $8, %rsp
	add $200, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dda99
uuid_00000000000dda9b:
	mov %rbp, %rsp
	sub $208, %rsp
	ret
print_CL_ArrowNilFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq $0
	push %RBP
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddaae
	jmp uuid_00000000000ddab0
uuid_00000000000ddaae:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000ddaab
	jmp uuid_00000000000ddaad
uuid_00000000000ddaab:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddaa8
	jmp uuid_00000000000ddaaa
uuid_00000000000ddaa8:
	push %RBP
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	jmp uuid_00000000000ddaa5
	jmp uuid_00000000000ddaa7
uuid_00000000000ddaa5:
	push %RBP
	mov -408(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddaa2
	jmp uuid_00000000000ddaa4
uuid_00000000000ddaa2:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dda9f
	jmp uuid_00000000000ddaa1
uuid_00000000000dda9f:
	push %RBP
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dda9c
	jmp uuid_00000000000dda9e
uuid_00000000000dda9c:
	movb $1, -480(%rbp)
uuid_00000000000dda9e:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000ddaa1:
	mov -784(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000ddaa4:
	mov -768(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000ddaa7:
	mov -736(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000ddaaa:
	mov -528(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000ddaad:
	mov -496(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000ddab0:
	mov -488(%RBP),%RSP
	add $-912, %RSP
	mov -480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddac7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddac6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddac9
uuid_00000000000ddac7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddab1
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddab2
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<I64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddac3:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddac4
	jmp uuid_00000000000ddac5
uuid_00000000000ddac4:
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq $0
	push %RBP
	mov -1016(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddabc
	jmp uuid_00000000000ddabe
uuid_00000000000ddabc:
	push %RBP
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	jmp uuid_00000000000ddab9
	jmp uuid_00000000000ddabb
uuid_00000000000ddab9:
	push %RBP
	mov -984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddab6
	jmp uuid_00000000000ddab8
uuid_00000000000ddab6:
	push %RBP
	mov -976(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddab3
	jmp uuid_00000000000ddab5
uuid_00000000000ddab3:
	movb $1, -1024(%rbp)
uuid_00000000000ddab5:
	mov -1088(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000ddab8:
	mov -1072(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000ddabb:
	mov -1040(%RBP),%RSP
	add $-1136, %RSP
uuid_00000000000ddabe:
	mov -1032(%RBP),%RSP
	add $-1136, %RSP
	mov -1024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddac0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddabf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddac2
uuid_00000000000ddac0:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad56
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd9ee
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -792(%rbp)
uuid_00000000000ddac2:
	mov -968(%RBP),%RSP
	add $-1136, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddac3
uuid_00000000000ddac5:
uuid_00000000000ddac9:
	mov -320(%RBP),%RSP
	add $-912, %RSP
	mov %rbp, %rsp
	sub $160, %rsp
	ret
print_CL_ArrowNilFragmentList:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddad0
	jmp uuid_00000000000ddad2
uuid_00000000000ddad0:
	push %RBP
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	jmp uuid_00000000000ddacd
	jmp uuid_00000000000ddacf
uuid_00000000000ddacd:
	push %RBP
	mov -360(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddaca
	jmp uuid_00000000000ddacc
uuid_00000000000ddaca:
	movb $1, -528(%rbp)
uuid_00000000000ddacc:
	mov -704(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000ddacf:
	mov -544(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000ddad2:
	mov -536(%RBP),%RSP
	add $-872, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddad7
	push %RBP
	jmp uuid_00000000000ddad4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddad3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddad6
uuid_00000000000ddad4:
uuid_00000000000ddad6:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000ddad9
uuid_00000000000ddad7:
#call function print : Arrow<FragmentList,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddad9:
	mov -352(%RBP),%RSP
	add $-872, %RSP
	mov %rbp, %rsp
	sub $176, %rsp
	ret
print_CL_ArrowNilSourceLocation:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq $0
	push %RBP
	mov -112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddae3
	jmp uuid_00000000000ddae5
uuid_00000000000ddae3:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddae0
	jmp uuid_00000000000ddae2
uuid_00000000000ddae0:
	push %RBP
	mov -96(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddadd
	jmp uuid_00000000000ddadf
uuid_00000000000ddadd:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddada
	jmp uuid_00000000000ddadc
uuid_00000000000ddada:
	movb $1, -120(%rbp)
uuid_00000000000ddadc:
	mov -168(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddadf:
	mov -152(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddae2:
	mov -136(%RBP),%RSP
	add $-176, %RSP
uuid_00000000000ddae5:
	mov -128(%RBP),%RSP
	add $-176, %RSP
	mov -120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddaea
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddae9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddaec
uuid_00000000000ddaea:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddae6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddae7
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddae8
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddaec:
	mov -80(%RBP),%RSP
	add $-176, %RSP
	mov %rbp, %rsp
	sub $40, %rsp
	ret
print_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb20
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddaf0
	jmp uuid_00000000000ddaf2
uuid_00000000000ddaf0:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddaed
	jmp uuid_00000000000ddaef
uuid_00000000000ddaed:
	movb $1, -128(%rbp)
uuid_00000000000ddaef:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000ddaf2:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb1d
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddaf9
	jmp uuid_00000000000ddafb
uuid_00000000000ddaf9:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddaf6
	jmp uuid_00000000000ddaf8
uuid_00000000000ddaf6:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddaf3
	jmp uuid_00000000000ddaf5
uuid_00000000000ddaf3:
	movb $1, -192(%rbp)
uuid_00000000000ddaf5:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddaf8:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddafb:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb1a
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb02
	jmp uuid_00000000000ddb04
uuid_00000000000ddb02:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddaff
	jmp uuid_00000000000ddb01
uuid_00000000000ddaff:
	push %RBP
	mov -280(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddafc
	jmp uuid_00000000000ddafe
uuid_00000000000ddafc:
	movb $1, -304(%rbp)
uuid_00000000000ddafe:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddb01:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddb04:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb17
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb10
	jmp uuid_00000000000ddb12
uuid_00000000000ddb10:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb0d
	jmp uuid_00000000000ddb0f
uuid_00000000000ddb0d:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddb0a
	jmp uuid_00000000000ddb0c
uuid_00000000000ddb0a:
	movb $1, -416(%rbp)
uuid_00000000000ddb0c:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddb0f:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddb12:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb14
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddb13
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddb16
uuid_00000000000ddb14:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daeee
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daeef
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddb16:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000ddb19
uuid_00000000000ddb17:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb07
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb06
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddb09
uuid_00000000000ddb07:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb05
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddb09:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000ddb19:
	mov -272(%RBP),%RSP
	add $-384, %RSP
	jmp uuid_00000000000ddb1c
uuid_00000000000ddb1a:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddb1c:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000ddb1f
uuid_00000000000ddb1d:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddb1f:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000ddb22
uuid_00000000000ddb20:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dabfe
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddb22:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
print_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb40
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb2d
	jmp uuid_00000000000ddb2f
uuid_00000000000ddb2d:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb2a
	jmp uuid_00000000000ddb2c
uuid_00000000000ddb2a:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000ddb27
	jmp uuid_00000000000ddb29
uuid_00000000000ddb27:
	movb $1, -192(%rbp)
uuid_00000000000ddb29:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddb2c:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddb2f:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb3d
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb36
	jmp uuid_00000000000ddb38
uuid_00000000000ddb36:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb33
	jmp uuid_00000000000ddb35
uuid_00000000000ddb33:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000ddb30
	jmp uuid_00000000000ddb32
uuid_00000000000ddb30:
	movb $1, -336(%rbp)
uuid_00000000000ddb32:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddb35:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddb38:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb3a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddb39
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddb3c
uuid_00000000000ddb3a:
#call function print : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daeae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddb3c:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000ddb3f
uuid_00000000000ddb3d:
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddb3f:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddb42
uuid_00000000000ddb40:
uuid_00000000000ddb42:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
reverse_CL_ArrowFragmentListFragmentList:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000ddb50:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddb51
	jmp uuid_00000000000ddb52
uuid_00000000000ddb51:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb49
	jmp uuid_00000000000ddb4b
uuid_00000000000ddb49:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000ddb46
	jmp uuid_00000000000ddb48
uuid_00000000000ddb46:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb43
	jmp uuid_00000000000ddb45
uuid_00000000000ddb43:
	movb $1, -696(%rbp)
uuid_00000000000ddb45:
	mov -872(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddb48:
	mov -712(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddb4b:
	mov -704(%RBP),%RSP
	add $-1040, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb4d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddb4c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddb4f
uuid_00000000000ddb4d:
#call function close : Arrow<FragmentList,Array<FragmentList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentListFragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $0
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	movq -1040(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddb4f:
	mov -520(%RBP),%RSP
	add $-1040, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddb50
uuid_00000000000ddb52:
	subq $168, %rsp
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
serialize_SB_ast_CL_ArrowNilAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbd3
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbd0
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb56
	jmp uuid_00000000000ddb58
uuid_00000000000ddb56:
	push %RBP
	jmp uuid_00000000000ddb53
	jmp uuid_00000000000ddb55
uuid_00000000000ddb53:
	movb $1, -400(%rbp)
uuid_00000000000ddb55:
	mov -416(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000ddb58:
	mov -408(%RBP),%RSP
	add $-416, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbcd
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb5f
	jmp uuid_00000000000ddb61
uuid_00000000000ddb5f:
	push %RBP
	jmp uuid_00000000000ddb5c
	jmp uuid_00000000000ddb5e
uuid_00000000000ddb5c:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddb59
	jmp uuid_00000000000ddb5b
uuid_00000000000ddb59:
	movb $1, -504(%rbp)
uuid_00000000000ddb5b:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000ddb5e:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000ddb61:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbca
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb69
	jmp uuid_00000000000ddb6b
uuid_00000000000ddb69:
	push %RBP
	jmp uuid_00000000000ddb66
	jmp uuid_00000000000ddb68
uuid_00000000000ddb66:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddb63
	jmp uuid_00000000000ddb65
uuid_00000000000ddb63:
	movb $1, -624(%rbp)
uuid_00000000000ddb65:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000ddb68:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000ddb6b:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbc7
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb70
	jmp uuid_00000000000ddb72
uuid_00000000000ddb70:
	push %RBP
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	jmp uuid_00000000000ddb6d
	jmp uuid_00000000000ddb6f
uuid_00000000000ddb6d:
	movb $1, -744(%rbp)
uuid_00000000000ddb6f:
	mov -760(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000ddb72:
	mov -752(%RBP),%RSP
	add $-784, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbc4
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb79
	jmp uuid_00000000000ddb7b
uuid_00000000000ddb79:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb76
	jmp uuid_00000000000ddb78
uuid_00000000000ddb76:
	push %RBP
	mov -848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb73
	jmp uuid_00000000000ddb75
uuid_00000000000ddb73:
	movb $1, -872(%rbp)
uuid_00000000000ddb75:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddb78:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ddb7b:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbc1
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb84
	jmp uuid_00000000000ddb86
uuid_00000000000ddb84:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb81
	jmp uuid_00000000000ddb83
uuid_00000000000ddb81:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000ddb7e
	jmp uuid_00000000000ddb80
uuid_00000000000ddb7e:
	movb $1, -1128(%rbp)
uuid_00000000000ddb80:
	mov -1224(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000ddb83:
	mov -1144(%RBP),%RSP
	add $-1280, %RSP
uuid_00000000000ddb86:
	mov -1136(%RBP),%RSP
	add $-1280, %RSP
	mov -1128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbbe
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb8e
	jmp uuid_00000000000ddb90
uuid_00000000000ddb8e:
	push %RBP
	mov -1352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb8b
	jmp uuid_00000000000ddb8d
uuid_00000000000ddb8b:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb88
	jmp uuid_00000000000ddb8a
uuid_00000000000ddb88:
	movb $1, -1368(%rbp)
uuid_00000000000ddb8a:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000ddb8d:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000ddb90:
	mov -1376(%RBP),%RSP
	add $-1536, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbbb
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb9b
	jmp uuid_00000000000ddb9d
uuid_00000000000ddb9b:
	push %RBP
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000ddb98
	jmp uuid_00000000000ddb9a
uuid_00000000000ddb98:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb95
	jmp uuid_00000000000ddb97
uuid_00000000000ddb95:
	push %RBP
	mov -1576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddb92
	jmp uuid_00000000000ddb94
uuid_00000000000ddb92:
	movb $1, -1624(%rbp)
uuid_00000000000ddb94:
	mov -1752(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000ddb97:
	mov -1672(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000ddb9a:
	mov -1640(%RBP),%RSP
	add $-1824, %RSP
uuid_00000000000ddb9d:
	mov -1632(%RBP),%RSP
	add $-1824, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbb8
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -1904(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddba5
	jmp uuid_00000000000ddba7
uuid_00000000000ddba5:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddba2
	jmp uuid_00000000000ddba4
uuid_00000000000ddba2:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2080(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddb9f
	jmp uuid_00000000000ddba1
uuid_00000000000ddb9f:
	movb $1, -1912(%rbp)
uuid_00000000000ddba1:
	mov -2008(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000ddba4:
	mov -1928(%RBP),%RSP
	add $-2080, %RSP
uuid_00000000000ddba7:
	mov -1920(%RBP),%RSP
	add $-2080, %RSP
	mov -1912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbb5
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -2160(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbae
	jmp uuid_00000000000ddbb0
uuid_00000000000ddbae:
	push %RBP
	mov -2152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddbab
	jmp uuid_00000000000ddbad
uuid_00000000000ddbab:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddba8
	jmp uuid_00000000000ddbaa
uuid_00000000000ddba8:
	movb $1, -2168(%rbp)
uuid_00000000000ddbaa:
	mov -2264(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000ddbad:
	mov -2184(%RBP),%RSP
	add $-2336, %RSP
uuid_00000000000ddbb0:
	mov -2176(%RBP),%RSP
	add $-2336, %RSP
	mov -2168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbb2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddbb1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddbb4
uuid_00000000000ddbb2:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbb4:
	mov -2088(%RBP),%RSP
	add $-2336, %RSP
	jmp uuid_00000000000ddbb7
uuid_00000000000ddbb5:
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbb7:
	mov -1832(%RBP),%RSP
	add $-2080, %RSP
	jmp uuid_00000000000ddbba
uuid_00000000000ddbb8:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb9e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbba:
	mov -1544(%RBP),%RSP
	add $-1824, %RSP
	jmp uuid_00000000000ddbbd
uuid_00000000000ddbbb:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb91
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbbd:
	mov -1288(%RBP),%RSP
	add $-1536, %RSP
	jmp uuid_00000000000ddbc0
uuid_00000000000ddbbe:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb87
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbc0:
	mov -1048(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000ddbc3
uuid_00000000000ddbc1:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbc3:
	mov -792(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000ddbc6
uuid_00000000000ddbc4:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbc6:
	mov -664(%RBP),%RSP
	add $-784, %RSP
	jmp uuid_00000000000ddbc9
uuid_00000000000ddbc7:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb6c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbc9:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	jmp uuid_00000000000ddbcc
uuid_00000000000ddbca:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb62
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbcc:
	mov -424(%RBP),%RSP
	add $-536, %RSP
	jmp uuid_00000000000ddbcf
uuid_00000000000ddbcd:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db822
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbcf:
	mov -320(%RBP),%RSP
	add $-416, %RSP
	jmp uuid_00000000000ddbd2
uuid_00000000000ddbd0:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbd2:
	mov -240(%RBP),%RSP
	add $-312, %RSP
	jmp uuid_00000000000ddbd5
uuid_00000000000ddbd3:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa5e
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbd5:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	mov %rbp, %rsp
	sub $80, %rsp
	ret
serialize_SB_ast_CL_ArrowNilListType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbf3
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbe0
	jmp uuid_00000000000ddbe2
uuid_00000000000ddbe0:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbdd
	jmp uuid_00000000000ddbdf
uuid_00000000000ddbdd:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000ddbda
	jmp uuid_00000000000ddbdc
uuid_00000000000ddbda:
	movb $1, -192(%rbp)
uuid_00000000000ddbdc:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddbdf:
	mov -208(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddbe2:
	mov -200(%RBP),%RSP
	add $-280, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbf0
	push %RBP
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbe9
	jmp uuid_00000000000ddbeb
uuid_00000000000ddbe9:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddbe6
	jmp uuid_00000000000ddbe8
uuid_00000000000ddbe6:
	push %RBP
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	jmp uuid_00000000000ddbe3
	jmp uuid_00000000000ddbe5
uuid_00000000000ddbe3:
	movb $1, -336(%rbp)
uuid_00000000000ddbe5:
	mov -400(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddbe8:
	mov -352(%RBP),%RSP
	add $-424, %RSP
uuid_00000000000ddbeb:
	mov -344(%RBP),%RSP
	add $-424, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbed
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddbec
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddbef
uuid_00000000000ddbed:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb91
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbef:
	mov -288(%RBP),%RSP
	add $-424, %RSP
	jmp uuid_00000000000ddbf2
uuid_00000000000ddbf0:
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddbf2:
	mov -144(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddbf5
uuid_00000000000ddbf3:
uuid_00000000000ddbf5:
	mov -96(%RBP),%RSP
	add $-136, %RSP
	mov %rbp, %rsp
	sub $48, %rsp
	ret
serialize_SB_ast_CL_ArrowNilType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc27
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddbfa
	jmp uuid_00000000000ddbfc
uuid_00000000000ddbfa:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddbf7
	jmp uuid_00000000000ddbf9
uuid_00000000000ddbf7:
	movb $1, -128(%rbp)
uuid_00000000000ddbf9:
	mov -144(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000ddbfc:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc24
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc03
	jmp uuid_00000000000ddc05
uuid_00000000000ddc03:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc00
	jmp uuid_00000000000ddc02
uuid_00000000000ddc00:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddbfd
	jmp uuid_00000000000ddbff
uuid_00000000000ddbfd:
	movb $1, -192(%rbp)
uuid_00000000000ddbff:
	mov -240(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddc02:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000ddc05:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc21
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -296(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc0d
	jmp uuid_00000000000ddc0f
uuid_00000000000ddc0d:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc0a
	jmp uuid_00000000000ddc0c
uuid_00000000000ddc0a:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddc07
	jmp uuid_00000000000ddc09
uuid_00000000000ddc07:
	movb $1, -304(%rbp)
uuid_00000000000ddc09:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddc0c:
	mov -320(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000ddc0f:
	mov -312(%RBP),%RSP
	add $-376, %RSP
	mov -304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc1e
	push %RBP
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc16
	jmp uuid_00000000000ddc18
uuid_00000000000ddc16:
	push %RBP
	mov -400(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc13
	jmp uuid_00000000000ddc15
uuid_00000000000ddc13:
	push %RBP
	mov -392(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddc10
	jmp uuid_00000000000ddc12
uuid_00000000000ddc10:
	movb $1, -416(%rbp)
uuid_00000000000ddc12:
	mov -480(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddc15:
	mov -432(%RBP),%RSP
	add $-488, %RSP
uuid_00000000000ddc18:
	mov -424(%RBP),%RSP
	add $-488, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc1b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddc1a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc1d
uuid_00000000000ddc1b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb91
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb6c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddc19
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<List<Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddc1d:
	mov -384(%RBP),%RSP
	add $-488, %RSP
	jmp uuid_00000000000ddc20
uuid_00000000000ddc1e:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb6c
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddc20:
	mov -272(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000ddc23
uuid_00000000000ddc21:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb91
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddc06
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb91
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa6f
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb7d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddc23:
	mov -160(%RBP),%RSP
	add $-264, %RSP
	jmp uuid_00000000000ddc26
uuid_00000000000ddc24:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddb62
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddc26:
	mov -96(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000ddc29
uuid_00000000000ddc27:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddbf6
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddc29:
	mov -64(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $32, %rsp
	ret
slot_CL_ArrowTypeConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc30
	jmp uuid_00000000000ddc32
uuid_00000000000ddc30:
	push %RBP
	jmp uuid_00000000000ddc2d
	jmp uuid_00000000000ddc2f
uuid_00000000000ddc2d:
	push %RBP
	mov -104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddc2a
	jmp uuid_00000000000ddc2c
uuid_00000000000ddc2a:
	movb $1, -128(%rbp)
uuid_00000000000ddc2c:
	mov -152(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000ddc2f:
	mov -144(%RBP),%RSP
	add $-160, %RSP
uuid_00000000000ddc32:
	mov -136(%RBP),%RSP
	add $-160, %RSP
	mov -128(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc49
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc3c
	jmp uuid_00000000000ddc3e
uuid_00000000000ddc3c:
	push %RBP
	mov -184(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc39
	jmp uuid_00000000000ddc3b
uuid_00000000000ddc39:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc36
	jmp uuid_00000000000ddc38
uuid_00000000000ddc36:
	movb $1, -200(%rbp)
uuid_00000000000ddc38:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000ddc3b:
	mov -216(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000ddc3e:
	mov -208(%RBP),%RSP
	add $-272, %RSP
	mov -200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc46
	push %RBP
	jmp uuid_00000000000ddc43
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddc42
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc45
uuid_00000000000ddc43:
uuid_00000000000ddc45:
	mov -280(%RBP),%RSP
	add $-280, %RSP
	jmp uuid_00000000000ddc48
uuid_00000000000ddc46:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc3f
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	jmp uuid_00000000000ddc41
uuid_00000000000ddc3f:
	movq -296(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000ddc41:
	mov -304(%RBP),%RSP
	add $-304, %RSP
uuid_00000000000ddc48:
	mov -168(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000ddc4b
uuid_00000000000ddc49:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc33
	jmp uuid_00000000000ddc35
uuid_00000000000ddc33:
	movq -24(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000ddc35:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000ddc4b:
	mov -96(%RBP),%RSP
	add $-168, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
slot_CL_ArrowTypeConsStringConsStringType:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -128(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc52
	jmp uuid_00000000000ddc54
uuid_00000000000ddc52:
	push %RBP
	mov -120(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc4f
	jmp uuid_00000000000ddc51
uuid_00000000000ddc4f:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddc4c
	jmp uuid_00000000000ddc4e
uuid_00000000000ddc4c:
	movb $1, -136(%rbp)
uuid_00000000000ddc4e:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000ddc51:
	mov -152(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000ddc54:
	mov -144(%RBP),%RSP
	add $-208, %RSP
	mov -136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc7e
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc71
	jmp uuid_00000000000ddc73
uuid_00000000000ddc71:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc6e
	jmp uuid_00000000000ddc70
uuid_00000000000ddc6e:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddc6b
	jmp uuid_00000000000ddc6d
uuid_00000000000ddc6b:
	movb $1, -248(%rbp)
uuid_00000000000ddc6d:
	mov -296(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000ddc70:
	mov -264(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000ddc73:
	mov -256(%RBP),%RSP
	add $-320, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc7b
	push %RBP
	jmp uuid_00000000000ddc78
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddc77
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc7a
uuid_00000000000ddc78:
uuid_00000000000ddc7a:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000ddc7d
uuid_00000000000ddc7b:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc74
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	movq -376(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -56(%rbp)
	jmp uuid_00000000000ddc76
uuid_00000000000ddc74:
	movq -344(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000ddc76:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000ddc7d:
	mov -216(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000ddc80
uuid_00000000000ddc7e:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc68
	jmp uuid_00000000000ddc6a
uuid_00000000000ddc68:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc5b
	jmp uuid_00000000000ddc5d
uuid_00000000000ddc5b:
	push %RBP
	jmp uuid_00000000000ddc58
	jmp uuid_00000000000ddc5a
uuid_00000000000ddc58:
	push %RBP
	mov -288(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddc55
	jmp uuid_00000000000ddc57
uuid_00000000000ddc55:
	movb $1, -312(%rbp)
uuid_00000000000ddc57:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000ddc5a:
	mov -328(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000ddc5d:
	mov -320(%RBP),%RSP
	add $-344, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc65
	push %RBP
	jmp uuid_00000000000ddc62
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddc61
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc64
uuid_00000000000ddc62:
uuid_00000000000ddc64:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000ddc67
uuid_00000000000ddc65:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddc5e
	jmp uuid_00000000000ddc60
uuid_00000000000ddc5e:
	movq -24(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000ddc60:
	mov -352(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000ddc67:
	mov -264(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000ddc6a:
	mov -216(%RBP),%RSP
	add $-352, %RSP
uuid_00000000000ddc80:
	mov -104(%RBP),%RSP
	add $-352, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
uuid_CL_ArrowStringNil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000ddc81
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-hex : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov %RBX, %RBP
	call to_SB_hex_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
iuid_CL_ArrowU64Nil:
	mov $uuid_SB_counter_CL_U64, %RAX
	mov 0(%RAX), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, %r15
	movq $uuid_SB_counter_CL_U64, %r14
	movq %r15, 0(%r14)
	mov $uuid_SB_counter_CL_U64, %r15
	pushq 0(%r15)
	mov -16(%rbp), %RAX
	mov %rbp, %rsp
	sub $8, %rsp
	ret
var_SB_name_SB_if_SB_var_CL_ArrowStringAST:
	pushq $uuid_00000000000dab3d
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc88
	jmp uuid_00000000000ddc8a
uuid_00000000000ddc88:
	push %RBP
	jmp uuid_00000000000ddc85
	jmp uuid_00000000000ddc87
uuid_00000000000ddc85:
	push %RBP
	mov -176(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddc82
	jmp uuid_00000000000ddc84
uuid_00000000000ddc82:
	movb $1, -248(%rbp)
uuid_00000000000ddc84:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddc87:
	mov -264(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000ddc8a:
	mov -256(%RBP),%RSP
	add $-280, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc9b
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -360(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc91
	jmp uuid_00000000000ddc93
uuid_00000000000ddc91:
	push %RBP
	jmp uuid_00000000000ddc8e
	jmp uuid_00000000000ddc90
uuid_00000000000ddc8e:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddc8b
	jmp uuid_00000000000ddc8d
uuid_00000000000ddc8b:
	movb $1, -368(%rbp)
uuid_00000000000ddc8d:
	mov -392(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000ddc90:
	mov -384(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000ddc93:
	mov -376(%RBP),%RSP
	add $-400, %RSP
	mov -368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddc98
	push %RBP
	jmp uuid_00000000000ddc95
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddc94
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddc97
uuid_00000000000ddc95:
uuid_00000000000ddc97:
	mov -408(%RBP),%RSP
	add $-408, %RSP
	jmp uuid_00000000000ddc9a
uuid_00000000000ddc98:
	movq -400(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -400(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000ddc9a:
	mov -288(%RBP),%RSP
	add $-400, %RSP
	jmp uuid_00000000000ddc9d
uuid_00000000000ddc9b:
	movq -280(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -280(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000ddc9d:
	mov -168(%RBP),%RSP
	add $-280, %RSP
	mov -88(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
remove_SB_parens_CL_ArrowListTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcb4
	jmp uuid_00000000000ddcb6
uuid_00000000000ddcb4:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcb1
	jmp uuid_00000000000ddcb3
uuid_00000000000ddcb1:
	push %RBP
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq $0
	push %RBP
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcab
	jmp uuid_00000000000ddcad
uuid_00000000000ddcab:
	push %RBP
	jmp uuid_00000000000ddca8
	jmp uuid_00000000000ddcaa
uuid_00000000000ddca8:
	push %RBP
	jmp uuid_00000000000ddca5
	jmp uuid_00000000000ddca7
uuid_00000000000ddca5:
	push %RBP
	mov -344(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	pushq $uuid_00000000000daa6e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddca2
	jmp uuid_00000000000ddca4
uuid_00000000000ddca2:
	movb $1, -400(%rbp)
uuid_00000000000ddca4:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000ddca7:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000ddcaa:
	mov -416(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000ddcad:
	mov -408(%RBP),%RSP
	add $-440, %RSP
	mov -400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcae
	jmp uuid_00000000000ddcb0
uuid_00000000000ddcae:
	movb $1, -240(%rbp)
uuid_00000000000ddcb0:
	mov -336(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000ddcb3:
	mov -256(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000ddcb6:
	mov -248(%RBP),%RSP
	add $-440, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddce4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddce3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddce6
uuid_00000000000ddce4:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000ddce0:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddce1
	jmp uuid_00000000000ddce2
uuid_00000000000ddce1:
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddccd
	jmp uuid_00000000000ddccf
uuid_00000000000ddccd:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcca
	jmp uuid_00000000000ddccc
uuid_00000000000ddcca:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcc4
	jmp uuid_00000000000ddcc6
uuid_00000000000ddcc4:
	push %RBP
	jmp uuid_00000000000ddcc1
	jmp uuid_00000000000ddcc3
uuid_00000000000ddcc1:
	push %RBP
	jmp uuid_00000000000ddcbe
	jmp uuid_00000000000ddcc0
uuid_00000000000ddcbe:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddcbb
	jmp uuid_00000000000ddcbd
uuid_00000000000ddcbb:
	movb $1, -832(%rbp)
uuid_00000000000ddcbd:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000ddcc0:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000ddcc3:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000ddcc6:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcc7
	jmp uuid_00000000000ddcc9
uuid_00000000000ddcc7:
	movb $1, -672(%rbp)
uuid_00000000000ddcc9:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000ddccc:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000ddccf:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcdd
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcd6
	jmp uuid_00000000000ddcd8
uuid_00000000000ddcd6:
	push %RBP
	mov -944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcd3
	jmp uuid_00000000000ddcd5
uuid_00000000000ddcd3:
	push %RBP
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000ddcd0
	jmp uuid_00000000000ddcd2
uuid_00000000000ddcd0:
	movb $1, -960(%rbp)
uuid_00000000000ddcd2:
	mov -1056(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000ddcd5:
	mov -976(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000ddcd8:
	mov -968(%RBP),%RSP
	add $-1112, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcda
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddcd9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddcdc
uuid_00000000000ddcda:
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	movq -1048(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -264(%rbp)
uuid_00000000000ddcdc:
	mov -880(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000ddcdf
uuid_00000000000ddcdd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
uuid_00000000000ddcdf:
	mov -592(%RBP),%RSP
	add $-872, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddce0
uuid_00000000000ddce2:
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000ddce6:
	mov -160(%RBP),%RSP
	add $-512, %RSP
	subq $72, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_expect_CL_ArrowNilConsListTokenString:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_SB_lambda_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd16
	jmp uuid_00000000000ddd18
uuid_00000000000ddd16:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd01
	jmp uuid_00000000000ddd03
uuid_00000000000ddd01:
	push %RBP
	mov -344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddcfe
	jmp uuid_00000000000ddd00
uuid_00000000000ddcfe:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcf8
	jmp uuid_00000000000ddcfa
uuid_00000000000ddcf8:
	push %RBP
	jmp uuid_00000000000ddcf5
	jmp uuid_00000000000ddcf7
uuid_00000000000ddcf5:
	push %RBP
	jmp uuid_00000000000ddcf2
	jmp uuid_00000000000ddcf4
uuid_00000000000ddcf2:
	push %RBP
	mov -464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddcef
	jmp uuid_00000000000ddcf1
uuid_00000000000ddcef:
	movb $1, -520(%rbp)
uuid_00000000000ddcf1:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000ddcf4:
	mov -544(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000ddcf7:
	mov -536(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000ddcfa:
	mov -528(%RBP),%RSP
	add $-560, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddcfb
	jmp uuid_00000000000ddcfd
uuid_00000000000ddcfb:
	movb $1, -360(%rbp)
uuid_00000000000ddcfd:
	mov -456(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000ddd00:
	mov -376(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000ddd03:
	mov -368(%RBP),%RSP
	add $-560, %RSP
	mov -360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd13
	jmp uuid_00000000000ddd15
uuid_00000000000ddd13:
	push %RBP
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq $0
	push %RBP
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd0d
	jmp uuid_00000000000ddd0f
uuid_00000000000ddd0d:
	push %RBP
	jmp uuid_00000000000ddd0a
	jmp uuid_00000000000ddd0c
uuid_00000000000ddd0a:
	push %RBP
	jmp uuid_00000000000ddd07
	jmp uuid_00000000000ddd09
uuid_00000000000ddd07:
	push %RBP
	mov -576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -672(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd04
	jmp uuid_00000000000ddd06
uuid_00000000000ddd04:
	movb $1, -632(%rbp)
uuid_00000000000ddd06:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000ddd09:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000ddd0c:
	mov -648(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000ddd0f:
	mov -640(%RBP),%RSP
	add $-672, %RSP
	mov -632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd10
	jmp uuid_00000000000ddd12
uuid_00000000000ddd10:
	movb $1, -264(%rbp)
uuid_00000000000ddd12:
	mov -568(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000ddd15:
	mov -280(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000ddd18:
	mov -272(%RBP),%RSP
	add $-672, %RSP
	mov -264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd1d
	push %RBP
	jmp uuid_00000000000ddd1a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddd19
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd1c
uuid_00000000000ddd1a:
uuid_00000000000ddd1c:
	mov -680(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000ddd1f
uuid_00000000000ddd1d:
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -448(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -408(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -400(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddd1f:
	mov -184(%RBP),%RSP
	add $-672, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd33
	jmp uuid_00000000000ddd35
uuid_00000000000ddd33:
	push %RBP
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	jmp uuid_00000000000ddd30
	jmp uuid_00000000000ddd32
uuid_00000000000ddd30:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd2a
	jmp uuid_00000000000ddd2c
uuid_00000000000ddd2a:
	push %RBP
	jmp uuid_00000000000ddd27
	jmp uuid_00000000000ddd29
uuid_00000000000ddd27:
	push %RBP
	mov -1240(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1344(%rbp)
	pushq $uuid_00000000000dade1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd24
	jmp uuid_00000000000ddd26
uuid_00000000000ddd24:
	movb $1, -1312(%rbp)
uuid_00000000000ddd26:
	mov -1336(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000ddd29:
	mov -1328(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000ddd2c:
	mov -1320(%RBP),%RSP
	add $-1344, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd2d
	jmp uuid_00000000000ddd2f
uuid_00000000000ddd2d:
	movb $1, -1136(%rbp)
uuid_00000000000ddd2f:
	mov -1232(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000ddd32:
	mov -1152(%RBP),%RSP
	add $-1344, %RSP
uuid_00000000000ddd35:
	mov -1144(%RBP),%RSP
	add $-1344, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd50
	push %RBP
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq $0
	push %RBP
	mov -1504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd49
	jmp uuid_00000000000ddd4b
uuid_00000000000ddd49:
	push %RBP
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	jmp uuid_00000000000ddd46
	jmp uuid_00000000000ddd48
uuid_00000000000ddd46:
	push %RBP
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	jmp uuid_00000000000ddd43
	jmp uuid_00000000000ddd45
uuid_00000000000ddd43:
	movb $1, -1512(%rbp)
uuid_00000000000ddd45:
	mov -1608(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000ddd48:
	mov -1528(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000ddd4b:
	mov -1520(%RBP),%RSP
	add $-1680, %RSP
	mov -1512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd4d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddd4c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd4f
uuid_00000000000ddd4d:
	movq -1680(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -680(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1544(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1536(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddd4f:
	mov -1352(%RBP),%RSP
	add $-1680, %RSP
	jmp uuid_00000000000ddd52
uuid_00000000000ddd50:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd3c
	jmp uuid_00000000000ddd3e
uuid_00000000000ddd3c:
	push %RBP
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	jmp uuid_00000000000ddd39
	jmp uuid_00000000000ddd3b
uuid_00000000000ddd39:
	push %RBP
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000ddd36
	jmp uuid_00000000000ddd38
uuid_00000000000ddd36:
	movb $1, -1664(%rbp)
uuid_00000000000ddd38:
	mov -1760(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000ddd3b:
	mov -1680(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000ddd3e:
	mov -1672(%RBP),%RSP
	add $-1832, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd40
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddd3f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd42
uuid_00000000000ddd40:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1752(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1744(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1736(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1728(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -752(%rbp)
uuid_00000000000ddd42:
	mov -1504(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000ddd52:
	mov -976(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000ddd8f:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd90
	jmp uuid_00000000000ddd91
uuid_00000000000ddd90:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd62
	jmp uuid_00000000000ddd64
uuid_00000000000ddd62:
	push %RBP
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	jmp uuid_00000000000ddd5f
	jmp uuid_00000000000ddd61
uuid_00000000000ddd5f:
	push %RBP
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq $0
	push %RBP
	mov -2320(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd59
	jmp uuid_00000000000ddd5b
uuid_00000000000ddd59:
	push %RBP
	jmp uuid_00000000000ddd56
	jmp uuid_00000000000ddd58
uuid_00000000000ddd56:
	push %RBP
	mov -2256(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2360(%rbp)
	pushq $uuid_00000000000dade1
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd53
	jmp uuid_00000000000ddd55
uuid_00000000000ddd53:
	movb $1, -2328(%rbp)
uuid_00000000000ddd55:
	mov -2352(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000ddd58:
	mov -2344(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000ddd5b:
	mov -2336(%RBP),%RSP
	add $-2360, %RSP
	mov -2328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd5c
	jmp uuid_00000000000ddd5e
uuid_00000000000ddd5c:
	movb $1, -2152(%rbp)
uuid_00000000000ddd5e:
	mov -2248(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000ddd61:
	mov -2168(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000ddd64:
	mov -2160(%RBP),%RSP
	add $-2360, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd8c
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2520(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd78
	jmp uuid_00000000000ddd7a
uuid_00000000000ddd78:
	push %RBP
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	mov -2616(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd75
	jmp uuid_00000000000ddd77
uuid_00000000000ddd75:
	push %RBP
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	jmp uuid_00000000000ddd72
	jmp uuid_00000000000ddd74
uuid_00000000000ddd72:
	movb $1, -2528(%rbp)
uuid_00000000000ddd74:
	mov -2624(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000ddd77:
	mov -2544(%RBP),%RSP
	add $-2696, %RSP
uuid_00000000000ddd7a:
	mov -2536(%RBP),%RSP
	add $-2696, %RSP
	mov -2528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd89
	push %RBP
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd82
	jmp uuid_00000000000ddd84
uuid_00000000000ddd82:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	jmp uuid_00000000000ddd7f
	jmp uuid_00000000000ddd81
uuid_00000000000ddd7f:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	jmp uuid_00000000000ddd7c
	jmp uuid_00000000000ddd7e
uuid_00000000000ddd7c:
	movb $1, -2864(%rbp)
uuid_00000000000ddd7e:
	mov -2960(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000ddd81:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000ddd84:
	mov -2872(%RBP),%RSP
	add $-3032, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd86
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddd85
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd88
uuid_00000000000ddd86:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	pushq -3016(%rbp)
	pushq -3024(%rbp)
	pushq -3032(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2952(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2944(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2936(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2928(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2920(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2912(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2904(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2896(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2888(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddd88:
	mov -2704(%RBP),%RSP
	add $-3032, %RSP
	jmp uuid_00000000000ddd8b
uuid_00000000000ddd89:
#call function parse-expect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ddd7b
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_expect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ddd8b:
	mov -2368(%RBP),%RSP
	add $-2696, %RSP
	jmp uuid_00000000000ddd8e
uuid_00000000000ddd8c:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd6b
	jmp uuid_00000000000ddd6d
uuid_00000000000ddd6b:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000ddd68
	jmp uuid_00000000000ddd6a
uuid_00000000000ddd68:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000ddd65
	jmp uuid_00000000000ddd67
uuid_00000000000ddd65:
	movb $1, -2680(%rbp)
uuid_00000000000ddd67:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000ddd6a:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000ddd6d:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddd6f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddd6e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddd71
uuid_00000000000ddd6f:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq $5
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -752(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000ddd71:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000ddd8e:
	mov -1992(%RBP),%RSP
	add $-2848, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddd8f
uuid_00000000000ddd91:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -1984(%rbp)
	pushq -1976(%rbp)
	pushq -1968(%rbp)
	pushq -1960(%rbp)
	pushq -1952(%rbp)
	pushq -1944(%rbp)
	pushq -1936(%rbp)
	pushq -1928(%rbp)
	pushq -1920(%rbp)
	pushq -1912(%rbp)
	pushq -1904(%rbp)
	pushq -1896(%rbp)
	pushq -1888(%rbp)
	pushq -1880(%rbp)
	pushq -1872(%rbp)
	pushq -1864(%rbp)
	pushq -1856(%rbp)
	pushq -1848(%rbp)
	pushq -1840(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000ddde1:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddde2
	jmp uuid_00000000000ddde3
uuid_00000000000ddde2:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddac
	jmp uuid_00000000000dddae
uuid_00000000000dddac:
	push %RBP
	mov -368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddda9
	jmp uuid_00000000000dddab
uuid_00000000000ddda9:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq $0
	push %RBP
	mov -536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddda3
	jmp uuid_00000000000ddda5
uuid_00000000000ddda3:
	push %RBP
	jmp uuid_00000000000ddda0
	jmp uuid_00000000000ddda2
uuid_00000000000ddda0:
	push %RBP
	jmp uuid_00000000000ddd9d
	jmp uuid_00000000000ddd9f
uuid_00000000000ddd9d:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq $uuid_00000000000dad50
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddd9a
	jmp uuid_00000000000ddd9c
uuid_00000000000ddd9a:
	movb $1, -544(%rbp)
uuid_00000000000ddd9c:
	mov -576(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000ddd9f:
	mov -568(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000ddda2:
	mov -560(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000ddda5:
	mov -552(%RBP),%RSP
	add $-584, %RSP
	mov -544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddda6
	jmp uuid_00000000000ddda8
uuid_00000000000ddda6:
	movb $1, -384(%rbp)
uuid_00000000000ddda8:
	mov -480(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dddab:
	mov -400(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dddae:
	mov -392(%RBP),%RSP
	add $-584, %RSP
	mov -384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dddde
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddc1
	jmp uuid_00000000000dddc3
uuid_00000000000dddc1:
	push %RBP
	mov -656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dddbe
	jmp uuid_00000000000dddc0
uuid_00000000000dddbe:
	push %RBP
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddb8
	jmp uuid_00000000000dddba
uuid_00000000000dddb8:
	push %RBP
	jmp uuid_00000000000dddb5
	jmp uuid_00000000000dddb7
uuid_00000000000dddb5:
	push %RBP
	jmp uuid_00000000000dddb2
	jmp uuid_00000000000dddb4
uuid_00000000000dddb2:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -872(%rbp)
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dddaf
	jmp uuid_00000000000dddb1
uuid_00000000000dddaf:
	movb $1, -832(%rbp)
uuid_00000000000dddb1:
	mov -864(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dddb4:
	mov -856(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dddb7:
	mov -848(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dddba:
	mov -840(%RBP),%RSP
	add $-872, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dddbb
	jmp uuid_00000000000dddbd
uuid_00000000000dddbb:
	movb $1, -672(%rbp)
uuid_00000000000dddbd:
	mov -768(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dddc0:
	mov -688(%RBP),%RSP
	add $-872, %RSP
uuid_00000000000dddc3:
	mov -680(%RBP),%RSP
	add $-872, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddddb
	push %RBP
	jmp uuid_00000000000dddd8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dddd7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dddda
uuid_00000000000dddd8:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddcd
	jmp uuid_00000000000dddcf
uuid_00000000000dddcd:
	push %RBP
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000dddca
	jmp uuid_00000000000dddcc
uuid_00000000000dddca:
	push %RBP
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	jmp uuid_00000000000dddc7
	jmp uuid_00000000000dddc9
uuid_00000000000dddc7:
	movb $1, -1200(%rbp)
uuid_00000000000dddc9:
	mov -1296(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000dddcc:
	mov -1216(%RBP),%RSP
	add $-1368, %RSP
uuid_00000000000dddcf:
	mov -1208(%RBP),%RSP
	add $-1368, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dddd4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dddd3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dddd6
uuid_00000000000dddd4:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dddd0
	movq -1368(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -88(%rbp)
	jmp uuid_00000000000dddd2
uuid_00000000000dddd0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dddd2:
	mov -1376(%RBP),%RSP
	add $-1376, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dddd6:
	mov -1040(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000dddda:
	mov -880(%RBP),%RSP
	add $-1376, %RSP
	jmp uuid_00000000000ddddd
uuid_00000000000ddddb:
	push %RBP
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dddc4
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000dddc6
uuid_00000000000dddc4:
uuid_00000000000dddc6:
	mov -880(%RBP),%RSP
	add $-880, %RSP
	movq -760(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000ddddd:
	mov -592(%RBP),%RSP
	add $-880, %RSP
	jmp uuid_00000000000ddde0
uuid_00000000000dddde:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000ddde0:
	mov -304(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ddde1
uuid_00000000000ddde3:
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_one_SB_expression_CL_ArrowParsePartialListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov -376(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde80
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddfe
	jmp uuid_00000000000dde00
uuid_00000000000dddfe:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dddfb
	jmp uuid_00000000000dddfd
uuid_00000000000dddfb:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dddf5
	jmp uuid_00000000000dddf7
uuid_00000000000dddf5:
	push %RBP
	jmp uuid_00000000000dddf2
	jmp uuid_00000000000dddf4
uuid_00000000000dddf2:
	push %RBP
	jmp uuid_00000000000dddef
	jmp uuid_00000000000dddf1
uuid_00000000000dddef:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -664(%rbp)
	pushq $uuid_00000000000dad53
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dddec
	jmp uuid_00000000000dddee
uuid_00000000000dddec:
	movb $1, -624(%rbp)
uuid_00000000000dddee:
	mov -656(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dddf1:
	mov -648(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dddf4:
	mov -640(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dddf7:
	mov -632(%RBP),%RSP
	add $-664, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dddf8
	jmp uuid_00000000000dddfa
uuid_00000000000dddf8:
	movb $1, -464(%rbp)
uuid_00000000000dddfa:
	mov -560(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dddfd:
	mov -480(%RBP),%RSP
	add $-664, %RSP
uuid_00000000000dde00:
	mov -472(%RBP),%RSP
	add $-664, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde7d
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -744(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde20
	jmp uuid_00000000000dde22
uuid_00000000000dde20:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde1d
	jmp uuid_00000000000dde1f
uuid_00000000000dde1d:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq $0
	push %RBP
	mov -904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde17
	jmp uuid_00000000000dde19
uuid_00000000000dde17:
	push %RBP
	jmp uuid_00000000000dde14
	jmp uuid_00000000000dde16
uuid_00000000000dde14:
	push %RBP
	jmp uuid_00000000000dde11
	jmp uuid_00000000000dde13
uuid_00000000000dde11:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde0e
	jmp uuid_00000000000dde10
uuid_00000000000dde0e:
	movb $1, -912(%rbp)
uuid_00000000000dde10:
	mov -944(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dde13:
	mov -936(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dde16:
	mov -928(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dde19:
	mov -920(%RBP),%RSP
	add $-952, %RSP
	mov -912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde1a
	jmp uuid_00000000000dde1c
uuid_00000000000dde1a:
	movb $1, -752(%rbp)
uuid_00000000000dde1c:
	mov -848(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dde1f:
	mov -768(%RBP),%RSP
	add $-952, %RSP
uuid_00000000000dde22:
	mov -760(%RBP),%RSP
	add $-952, %RSP
	mov -752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde7a
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1032(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde36
	jmp uuid_00000000000dde38
uuid_00000000000dde36:
	push %RBP
	mov -1024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde33
	jmp uuid_00000000000dde35
uuid_00000000000dde33:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde2d
	jmp uuid_00000000000dde2f
uuid_00000000000dde2d:
	push %RBP
	jmp uuid_00000000000dde2a
	jmp uuid_00000000000dde2c
uuid_00000000000dde2a:
	push %RBP
	jmp uuid_00000000000dde27
	jmp uuid_00000000000dde29
uuid_00000000000dde27:
	push %RBP
	mov -1144(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1240(%rbp)
	pushq $uuid_00000000000daa6e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde24
	jmp uuid_00000000000dde26
uuid_00000000000dde24:
	movb $1, -1200(%rbp)
uuid_00000000000dde26:
	mov -1232(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dde29:
	mov -1224(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dde2c:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dde2f:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde30
	jmp uuid_00000000000dde32
uuid_00000000000dde30:
	movb $1, -1040(%rbp)
uuid_00000000000dde32:
	mov -1136(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dde35:
	mov -1056(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000dde38:
	mov -1048(%RBP),%RSP
	add $-1240, %RSP
	mov -1040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde77
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde61
	jmp uuid_00000000000dde63
uuid_00000000000dde61:
	push %RBP
	mov -1312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde4c
	jmp uuid_00000000000dde4e
uuid_00000000000dde4c:
	push %RBP
	mov -1408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde49
	jmp uuid_00000000000dde4b
uuid_00000000000dde49:
	push %RBP
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	jmp uuid_00000000000dde46
	jmp uuid_00000000000dde48
uuid_00000000000dde46:
	movb $1, -1424(%rbp)
uuid_00000000000dde48:
	mov -1520(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dde4b:
	mov -1440(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000dde4e:
	mov -1432(%RBP),%RSP
	add $-1576, %RSP
	mov -1424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde5e
	jmp uuid_00000000000dde60
uuid_00000000000dde5e:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde58
	jmp uuid_00000000000dde5a
uuid_00000000000dde58:
	push %RBP
	jmp uuid_00000000000dde55
	jmp uuid_00000000000dde57
uuid_00000000000dde55:
	push %RBP
	jmp uuid_00000000000dde52
	jmp uuid_00000000000dde54
uuid_00000000000dde52:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1688(%rbp)
	pushq $uuid_00000000000dad52
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde4f
	jmp uuid_00000000000dde51
uuid_00000000000dde4f:
	movb $1, -1648(%rbp)
uuid_00000000000dde51:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000dde54:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000dde57:
	mov -1664(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000dde5a:
	mov -1656(%RBP),%RSP
	add $-1688, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde5b
	jmp uuid_00000000000dde5d
uuid_00000000000dde5b:
	movb $1, -1328(%rbp)
uuid_00000000000dde5d:
	mov -1584(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000dde60:
	mov -1344(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000dde63:
	mov -1336(%RBP),%RSP
	add $-1688, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde74
	push %RBP
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde6a
	jmp uuid_00000000000dde6c
uuid_00000000000dde6a:
	push %RBP
	mov -1760(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde67
	jmp uuid_00000000000dde69
uuid_00000000000dde67:
	push %RBP
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	jmp uuid_00000000000dde64
	jmp uuid_00000000000dde66
uuid_00000000000dde64:
	movb $1, -1776(%rbp)
uuid_00000000000dde66:
	mov -1872(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dde69:
	mov -1792(%RBP),%RSP
	add $-1928, %RSP
uuid_00000000000dde6c:
	mov -1784(%RBP),%RSP
	add $-1928, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde71
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dde70
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde73
uuid_00000000000dde71:
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -1880(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde6d
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000dde6f
uuid_00000000000dde6d:
	mov -1880(%RBP), %RAX
	push %RAX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dde6f:
	mov -1936(%RBP),%RSP
	add $-1936, %RSP
	movq -1864(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1856(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1848(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1840(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1832(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1824(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1816(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1808(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1800(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000dde73:
	mov -1696(%RBP),%RSP
	add $-1936, %RSP
	jmp uuid_00000000000dde76
uuid_00000000000dde74:
	mov -1528(%RBP), %RAX
	push %RAX
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1512(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1504(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000dde76:
	mov -1248(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000dde79
uuid_00000000000dde77:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde3f
	jmp uuid_00000000000dde41
uuid_00000000000dde3f:
	push %RBP
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	jmp uuid_00000000000dde3c
	jmp uuid_00000000000dde3e
uuid_00000000000dde3c:
	push %RBP
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	jmp uuid_00000000000dde39
	jmp uuid_00000000000dde3b
uuid_00000000000dde39:
	movb $1, -1560(%rbp)
uuid_00000000000dde3b:
	mov -1656(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dde3e:
	mov -1576(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dde41:
	mov -1568(%RBP),%RSP
	add $-1728, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde43
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dde42
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde45
uuid_00000000000dde43:
	movq -1728(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1720(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1712(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000dde45:
	mov -1400(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dde79:
	mov -960(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000dde7c
uuid_00000000000dde7a:
#call function parse-unexpect : Arrow<Cons<String,List<Token>>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dde23
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call parse_SB_unexpect_CL_ArrowNilConsListTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dde7c:
	mov -672(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000dde7f
uuid_00000000000dde7d:
#call function parse-lambda : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call parse_SB_lambda_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde07
	jmp uuid_00000000000dde09
uuid_00000000000dde07:
	push %RBP
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	jmp uuid_00000000000dde04
	jmp uuid_00000000000dde06
uuid_00000000000dde04:
	push %RBP
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	jmp uuid_00000000000dde01
	jmp uuid_00000000000dde03
uuid_00000000000dde01:
	movb $1, -984(%rbp)
uuid_00000000000dde03:
	mov -1080(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000dde06:
	mov -1000(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000dde09:
	mov -992(%RBP),%RSP
	add $-1152, %RSP
	mov -984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde0b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dde0a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dde0d
uuid_00000000000dde0b:
	movq -1152(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -160(%rbp)
uuid_00000000000dde0d:
	mov -824(%RBP),%RSP
	add $-1152, %RSP
uuid_00000000000dde7f:
	mov -384(%RBP),%RSP
	add $-1152, %RSP
	jmp uuid_00000000000dde82
uuid_00000000000dde80:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $9
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
uuid_00000000000dde82:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_toplevel_CL_ArrowASTListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
uuid_00000000000de0d8:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de0d9
	jmp uuid_00000000000de0da
uuid_00000000000de0d9:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde99
	jmp uuid_00000000000dde9b
uuid_00000000000dde99:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dde96
	jmp uuid_00000000000dde98
uuid_00000000000dde96:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dde90
	jmp uuid_00000000000dde92
uuid_00000000000dde90:
	push %RBP
	jmp uuid_00000000000dde8d
	jmp uuid_00000000000dde8f
uuid_00000000000dde8d:
	push %RBP
	jmp uuid_00000000000dde8a
	jmp uuid_00000000000dde8c
uuid_00000000000dde8a:
	push %RBP
	mov -416(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq $uuid_00000000000dad50
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde87
	jmp uuid_00000000000dde89
uuid_00000000000dde87:
	movb $1, -472(%rbp)
uuid_00000000000dde89:
	mov -504(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dde8c:
	mov -496(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dde8f:
	mov -488(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dde92:
	mov -480(%RBP),%RSP
	add $-512, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dde93
	jmp uuid_00000000000dde95
uuid_00000000000dde93:
	movb $1, -312(%rbp)
uuid_00000000000dde95:
	mov -408(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dde98:
	mov -328(%RBP),%RSP
	add $-512, %RSP
uuid_00000000000dde9b:
	mov -320(%RBP),%RSP
	add $-512, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0d5
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddeaf
	jmp uuid_00000000000ddeb1
uuid_00000000000ddeaf:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddeac
	jmp uuid_00000000000ddeae
uuid_00000000000ddeac:
	push %RBP
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddea6
	jmp uuid_00000000000ddea8
uuid_00000000000ddea6:
	push %RBP
	jmp uuid_00000000000ddea3
	jmp uuid_00000000000ddea5
uuid_00000000000ddea3:
	push %RBP
	jmp uuid_00000000000ddea0
	jmp uuid_00000000000ddea2
uuid_00000000000ddea0:
	push %RBP
	mov -704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -800(%rbp)
	pushq $uuid_00000000000dde9c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dde9d
	jmp uuid_00000000000dde9f
uuid_00000000000dde9d:
	movb $1, -760(%rbp)
uuid_00000000000dde9f:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000ddea2:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000ddea5:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000ddea8:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddea9
	jmp uuid_00000000000ddeab
uuid_00000000000ddea9:
	movb $1, -600(%rbp)
uuid_00000000000ddeab:
	mov -696(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000ddeae:
	mov -616(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000ddeb1:
	mov -608(%RBP),%RSP
	add $-800, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0d2
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddeef
	jmp uuid_00000000000ddef1
uuid_00000000000ddeef:
	push %RBP
	mov -872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddeec
	jmp uuid_00000000000ddeee
uuid_00000000000ddeec:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq $0
	push %RBP
	mov -1040(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddee6
	jmp uuid_00000000000ddee8
uuid_00000000000ddee6:
	push %RBP
	jmp uuid_00000000000ddee3
	jmp uuid_00000000000ddee5
uuid_00000000000ddee3:
	push %RBP
	jmp uuid_00000000000ddee0
	jmp uuid_00000000000ddee2
uuid_00000000000ddee0:
	push %RBP
	mov -992(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1088(%rbp)
	pushq $uuid_00000000000ddedc
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddedd
	jmp uuid_00000000000ddedf
uuid_00000000000ddedd:
	movb $1, -1048(%rbp)
uuid_00000000000ddedf:
	mov -1080(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000ddee2:
	mov -1072(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000ddee5:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000ddee8:
	mov -1056(%RBP),%RSP
	add $-1088, %RSP
	mov -1048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddee9
	jmp uuid_00000000000ddeeb
uuid_00000000000ddee9:
	movb $1, -888(%rbp)
uuid_00000000000ddeeb:
	mov -984(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000ddeee:
	mov -904(%RBP),%RSP
	add $-1088, %RSP
uuid_00000000000ddef1:
	mov -896(%RBP),%RSP
	add $-1088, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0cf
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf28
	jmp uuid_00000000000ddf2a
uuid_00000000000ddf28:
	push %RBP
	mov -1160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf12
	jmp uuid_00000000000ddf14
uuid_00000000000ddf12:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf0f
	jmp uuid_00000000000ddf11
uuid_00000000000ddf0f:
	push %RBP
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq $0
	push %RBP
	mov -1424(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf09
	jmp uuid_00000000000ddf0b
uuid_00000000000ddf09:
	push %RBP
	jmp uuid_00000000000ddf06
	jmp uuid_00000000000ddf08
uuid_00000000000ddf06:
	push %RBP
	jmp uuid_00000000000ddf03
	jmp uuid_00000000000ddf05
uuid_00000000000ddf03:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq $uuid_00000000000ddeff
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddf00
	jmp uuid_00000000000ddf02
uuid_00000000000ddf00:
	movb $1, -1432(%rbp)
uuid_00000000000ddf02:
	mov -1464(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000ddf05:
	mov -1456(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000ddf08:
	mov -1448(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000ddf0b:
	mov -1440(%RBP),%RSP
	add $-1472, %RSP
	mov -1432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf0c
	jmp uuid_00000000000ddf0e
uuid_00000000000ddf0c:
	movb $1, -1272(%rbp)
uuid_00000000000ddf0e:
	mov -1368(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000ddf11:
	mov -1288(%RBP),%RSP
	add $-1472, %RSP
uuid_00000000000ddf14:
	mov -1280(%RBP),%RSP
	add $-1472, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf25
	jmp uuid_00000000000ddf27
uuid_00000000000ddf25:
	push %RBP
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf1f
	jmp uuid_00000000000ddf21
uuid_00000000000ddf1f:
	push %RBP
	jmp uuid_00000000000ddf1c
	jmp uuid_00000000000ddf1e
uuid_00000000000ddf1c:
	push %RBP
	jmp uuid_00000000000ddf19
	jmp uuid_00000000000ddf1b
uuid_00000000000ddf19:
	push %RBP
	mov -1488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1584(%rbp)
	pushq $uuid_00000000000ddf15
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddf16
	jmp uuid_00000000000ddf18
uuid_00000000000ddf16:
	movb $1, -1544(%rbp)
uuid_00000000000ddf18:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000ddf1b:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000ddf1e:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000ddf21:
	mov -1552(%RBP),%RSP
	add $-1584, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf22
	jmp uuid_00000000000ddf24
uuid_00000000000ddf22:
	movb $1, -1176(%rbp)
uuid_00000000000ddf24:
	mov -1480(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000ddf27:
	mov -1192(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000ddf2a:
	mov -1184(%RBP),%RSP
	add $-1584, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0cc
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf57
	jmp uuid_00000000000ddf59
uuid_00000000000ddf57:
	push %RBP
	mov -1656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf54
	jmp uuid_00000000000ddf56
uuid_00000000000ddf54:
	push %RBP
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq $0
	push %RBP
	mov -1824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf4e
	jmp uuid_00000000000ddf50
uuid_00000000000ddf4e:
	push %RBP
	jmp uuid_00000000000ddf4b
	jmp uuid_00000000000ddf4d
uuid_00000000000ddf4b:
	push %RBP
	jmp uuid_00000000000ddf48
	jmp uuid_00000000000ddf4a
uuid_00000000000ddf48:
	push %RBP
	mov -1776(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq $uuid_00000000000ddeff
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddf45
	jmp uuid_00000000000ddf47
uuid_00000000000ddf45:
	movb $1, -1832(%rbp)
uuid_00000000000ddf47:
	mov -1864(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000ddf4a:
	mov -1856(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000ddf4d:
	mov -1848(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000ddf50:
	mov -1840(%RBP),%RSP
	add $-1872, %RSP
	mov -1832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf51
	jmp uuid_00000000000ddf53
uuid_00000000000ddf51:
	movb $1, -1672(%rbp)
uuid_00000000000ddf53:
	mov -1768(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000ddf56:
	mov -1688(%RBP),%RSP
	add $-1872, %RSP
uuid_00000000000ddf59:
	mov -1680(%RBP),%RSP
	add $-1872, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0c9
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfc7
	jmp uuid_00000000000ddfc9
uuid_00000000000ddfc7:
	push %RBP
	mov -1944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfb1
	jmp uuid_00000000000ddfb3
uuid_00000000000ddfb1:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf9b
	jmp uuid_00000000000ddf9d
uuid_00000000000ddf9b:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf86
	jmp uuid_00000000000ddf88
uuid_00000000000ddf86:
	push %RBP
	mov -2232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddf83
	jmp uuid_00000000000ddf85
uuid_00000000000ddf83:
	push %RBP
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq $0
	push %RBP
	mov -2400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf7d
	jmp uuid_00000000000ddf7f
uuid_00000000000ddf7d:
	push %RBP
	jmp uuid_00000000000ddf7a
	jmp uuid_00000000000ddf7c
uuid_00000000000ddf7a:
	push %RBP
	jmp uuid_00000000000ddf77
	jmp uuid_00000000000ddf79
uuid_00000000000ddf77:
	push %RBP
	mov -2352(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddf74
	jmp uuid_00000000000ddf76
uuid_00000000000ddf74:
	movb $1, -2408(%rbp)
uuid_00000000000ddf76:
	mov -2440(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000ddf79:
	mov -2432(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000ddf7c:
	mov -2424(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000ddf7f:
	mov -2416(%RBP),%RSP
	add $-2448, %RSP
	mov -2408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf80
	jmp uuid_00000000000ddf82
uuid_00000000000ddf80:
	movb $1, -2248(%rbp)
uuid_00000000000ddf82:
	mov -2344(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000ddf85:
	mov -2264(%RBP),%RSP
	add $-2448, %RSP
uuid_00000000000ddf88:
	mov -2256(%RBP),%RSP
	add $-2448, %RSP
	mov -2248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf98
	jmp uuid_00000000000ddf9a
uuid_00000000000ddf98:
	push %RBP
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq $0
	push %RBP
	mov -2512(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf92
	jmp uuid_00000000000ddf94
uuid_00000000000ddf92:
	push %RBP
	jmp uuid_00000000000ddf8f
	jmp uuid_00000000000ddf91
uuid_00000000000ddf8f:
	push %RBP
	jmp uuid_00000000000ddf8c
	jmp uuid_00000000000ddf8e
uuid_00000000000ddf8c:
	push %RBP
	mov -2464(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddf89
	jmp uuid_00000000000ddf8b
uuid_00000000000ddf89:
	movb $1, -2520(%rbp)
uuid_00000000000ddf8b:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000ddf8e:
	mov -2544(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000ddf91:
	mov -2536(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000ddf94:
	mov -2528(%RBP),%RSP
	add $-2560, %RSP
	mov -2520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf95
	jmp uuid_00000000000ddf97
uuid_00000000000ddf95:
	movb $1, -2152(%rbp)
uuid_00000000000ddf97:
	mov -2456(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000ddf9a:
	mov -2168(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000ddf9d:
	mov -2160(%RBP),%RSP
	add $-2560, %RSP
	mov -2152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfae
	jmp uuid_00000000000ddfb0
uuid_00000000000ddfae:
	push %RBP
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq $0
	push %RBP
	mov -2624(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfa8
	jmp uuid_00000000000ddfaa
uuid_00000000000ddfa8:
	push %RBP
	jmp uuid_00000000000ddfa5
	jmp uuid_00000000000ddfa7
uuid_00000000000ddfa5:
	push %RBP
	jmp uuid_00000000000ddfa2
	jmp uuid_00000000000ddfa4
uuid_00000000000ddfa2:
	push %RBP
	mov -2576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2672(%rbp)
	pushq $uuid_00000000000ddf9e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddf9f
	jmp uuid_00000000000ddfa1
uuid_00000000000ddf9f:
	movb $1, -2632(%rbp)
uuid_00000000000ddfa1:
	mov -2664(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000ddfa4:
	mov -2656(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000ddfa7:
	mov -2648(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000ddfaa:
	mov -2640(%RBP),%RSP
	add $-2672, %RSP
	mov -2632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfab
	jmp uuid_00000000000ddfad
uuid_00000000000ddfab:
	movb $1, -2056(%rbp)
uuid_00000000000ddfad:
	mov -2568(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000ddfb0:
	mov -2072(%RBP),%RSP
	add $-2672, %RSP
uuid_00000000000ddfb3:
	mov -2064(%RBP),%RSP
	add $-2672, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfc4
	jmp uuid_00000000000ddfc6
uuid_00000000000ddfc4:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfbe
	jmp uuid_00000000000ddfc0
uuid_00000000000ddfbe:
	push %RBP
	jmp uuid_00000000000ddfbb
	jmp uuid_00000000000ddfbd
uuid_00000000000ddfbb:
	push %RBP
	jmp uuid_00000000000ddfb8
	jmp uuid_00000000000ddfba
uuid_00000000000ddfb8:
	push %RBP
	mov -2688(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq $uuid_00000000000ddfb4
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ddfb5
	jmp uuid_00000000000ddfb7
uuid_00000000000ddfb5:
	movb $1, -2744(%rbp)
uuid_00000000000ddfb7:
	mov -2776(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000ddfba:
	mov -2768(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000ddfbd:
	mov -2760(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000ddfc0:
	mov -2752(%RBP),%RSP
	add $-2784, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfc1
	jmp uuid_00000000000ddfc3
uuid_00000000000ddfc1:
	movb $1, -1960(%rbp)
uuid_00000000000ddfc3:
	mov -2680(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000ddfc6:
	mov -1976(%RBP),%RSP
	add $-2784, %RSP
uuid_00000000000ddfc9:
	mov -1968(%RBP),%RSP
	add $-2784, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0c6
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de017
	jmp uuid_00000000000de019
uuid_00000000000de017:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de001
	jmp uuid_00000000000de003
uuid_00000000000de001:
	push %RBP
	mov -2952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfec
	jmp uuid_00000000000ddfee
uuid_00000000000ddfec:
	push %RBP
	mov -3048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddfe9
	jmp uuid_00000000000ddfeb
uuid_00000000000ddfe9:
	push %RBP
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfe3
	jmp uuid_00000000000ddfe5
uuid_00000000000ddfe3:
	push %RBP
	jmp uuid_00000000000ddfe0
	jmp uuid_00000000000ddfe2
uuid_00000000000ddfe0:
	push %RBP
	jmp uuid_00000000000ddfdd
	jmp uuid_00000000000ddfdf
uuid_00000000000ddfdd:
	push %RBP
	mov -3168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddfda
	jmp uuid_00000000000ddfdc
uuid_00000000000ddfda:
	movb $1, -3224(%rbp)
uuid_00000000000ddfdc:
	mov -3256(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000ddfdf:
	mov -3248(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000ddfe2:
	mov -3240(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000ddfe5:
	mov -3232(%RBP),%RSP
	add $-3264, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddfe6
	jmp uuid_00000000000ddfe8
uuid_00000000000ddfe6:
	movb $1, -3064(%rbp)
uuid_00000000000ddfe8:
	mov -3160(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000ddfeb:
	mov -3080(%RBP),%RSP
	add $-3264, %RSP
uuid_00000000000ddfee:
	mov -3072(%RBP),%RSP
	add $-3264, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddffe
	jmp uuid_00000000000de000
uuid_00000000000ddffe:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq $0
	push %RBP
	mov -3328(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddff8
	jmp uuid_00000000000ddffa
uuid_00000000000ddff8:
	push %RBP
	jmp uuid_00000000000ddff5
	jmp uuid_00000000000ddff7
uuid_00000000000ddff5:
	push %RBP
	jmp uuid_00000000000ddff2
	jmp uuid_00000000000ddff4
uuid_00000000000ddff2:
	push %RBP
	mov -3280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ddfef
	jmp uuid_00000000000ddff1
uuid_00000000000ddfef:
	movb $1, -3336(%rbp)
uuid_00000000000ddff1:
	mov -3368(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000ddff4:
	mov -3360(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000ddff7:
	mov -3352(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000ddffa:
	mov -3344(%RBP),%RSP
	add $-3376, %RSP
	mov -3336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddffb
	jmp uuid_00000000000ddffd
uuid_00000000000ddffb:
	movb $1, -2968(%rbp)
uuid_00000000000ddffd:
	mov -3272(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000de000:
	mov -2984(%RBP),%RSP
	add $-3376, %RSP
uuid_00000000000de003:
	mov -2976(%RBP),%RSP
	add $-3376, %RSP
	mov -2968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de014
	jmp uuid_00000000000de016
uuid_00000000000de014:
	push %RBP
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq $0
	push %RBP
	mov -3440(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de00e
	jmp uuid_00000000000de010
uuid_00000000000de00e:
	push %RBP
	jmp uuid_00000000000de00b
	jmp uuid_00000000000de00d
uuid_00000000000de00b:
	push %RBP
	jmp uuid_00000000000de008
	jmp uuid_00000000000de00a
uuid_00000000000de008:
	push %RBP
	mov -3392(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3488(%rbp)
	pushq $uuid_00000000000de004
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de005
	jmp uuid_00000000000de007
uuid_00000000000de005:
	movb $1, -3448(%rbp)
uuid_00000000000de007:
	mov -3480(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de00a:
	mov -3472(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de00d:
	mov -3464(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de010:
	mov -3456(%RBP),%RSP
	add $-3488, %RSP
	mov -3448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de011
	jmp uuid_00000000000de013
uuid_00000000000de011:
	movb $1, -2872(%rbp)
uuid_00000000000de013:
	mov -3384(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de016:
	mov -2888(%RBP),%RSP
	add $-3488, %RSP
uuid_00000000000de019:
	mov -2880(%RBP),%RSP
	add $-3488, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0c3
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3568(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de042
	jmp uuid_00000000000de044
uuid_00000000000de042:
	push %RBP
	mov -3560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3664(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de02c
	jmp uuid_00000000000de02e
uuid_00000000000de02c:
	push %RBP
	mov -3656(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de029
	jmp uuid_00000000000de02b
uuid_00000000000de029:
	push %RBP
	pushq -3600(%RBP)
	pushq -3608(%RBP)
	pushq -3616(%RBP)
	pushq -3624(%RBP)
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de023
	jmp uuid_00000000000de025
uuid_00000000000de023:
	push %RBP
	jmp uuid_00000000000de020
	jmp uuid_00000000000de022
uuid_00000000000de020:
	push %RBP
	jmp uuid_00000000000de01d
	jmp uuid_00000000000de01f
uuid_00000000000de01d:
	push %RBP
	mov -3776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de01a
	jmp uuid_00000000000de01c
uuid_00000000000de01a:
	movb $1, -3832(%rbp)
uuid_00000000000de01c:
	mov -3864(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de01f:
	mov -3856(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de022:
	mov -3848(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de025:
	mov -3840(%RBP),%RSP
	add $-3872, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de026
	jmp uuid_00000000000de028
uuid_00000000000de026:
	movb $1, -3672(%rbp)
uuid_00000000000de028:
	mov -3768(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de02b:
	mov -3688(%RBP),%RSP
	add $-3872, %RSP
uuid_00000000000de02e:
	mov -3680(%RBP),%RSP
	add $-3872, %RSP
	mov -3672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de03f
	jmp uuid_00000000000de041
uuid_00000000000de03f:
	push %RBP
	pushq -3504(%RBP)
	pushq -3512(%RBP)
	pushq -3520(%RBP)
	pushq -3528(%RBP)
	pushq -3536(%RBP)
	pushq -3544(%RBP)
	pushq -3552(%RBP)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de039
	jmp uuid_00000000000de03b
uuid_00000000000de039:
	push %RBP
	jmp uuid_00000000000de036
	jmp uuid_00000000000de038
uuid_00000000000de036:
	push %RBP
	jmp uuid_00000000000de033
	jmp uuid_00000000000de035
uuid_00000000000de033:
	push %RBP
	mov -3888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3984(%rbp)
	pushq $uuid_00000000000de02f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de030
	jmp uuid_00000000000de032
uuid_00000000000de030:
	movb $1, -3944(%rbp)
uuid_00000000000de032:
	mov -3976(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de035:
	mov -3968(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de038:
	mov -3960(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de03b:
	mov -3952(%RBP),%RSP
	add $-3984, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de03c
	jmp uuid_00000000000de03e
uuid_00000000000de03c:
	movb $1, -3576(%rbp)
uuid_00000000000de03e:
	mov -3880(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de041:
	mov -3592(%RBP),%RSP
	add $-3984, %RSP
uuid_00000000000de044:
	mov -3584(%RBP),%RSP
	add $-3984, %RSP
	mov -3576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0c0
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de076
	jmp uuid_00000000000de078
uuid_00000000000de076:
	push %RBP
	mov -4056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4160(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de060
	jmp uuid_00000000000de062
uuid_00000000000de060:
	push %RBP
	mov -4152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4256(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de057
	jmp uuid_00000000000de059
uuid_00000000000de057:
	push %RBP
	mov -4248(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de054
	jmp uuid_00000000000de056
uuid_00000000000de054:
	push %RBP
	pushq -4192(%RBP)
	pushq -4200(%RBP)
	pushq -4208(%RBP)
	pushq -4216(%RBP)
	pushq -4224(%RBP)
	pushq -4232(%RBP)
	pushq -4240(%RBP)
	pushq $0
	push %RBP
	mov -4416(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de04e
	jmp uuid_00000000000de050
uuid_00000000000de04e:
	push %RBP
	jmp uuid_00000000000de04b
	jmp uuid_00000000000de04d
uuid_00000000000de04b:
	push %RBP
	jmp uuid_00000000000de048
	jmp uuid_00000000000de04a
uuid_00000000000de048:
	push %RBP
	mov -4368(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de045
	jmp uuid_00000000000de047
uuid_00000000000de045:
	movb $1, -4424(%rbp)
uuid_00000000000de047:
	mov -4456(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de04a:
	mov -4448(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de04d:
	mov -4440(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de050:
	mov -4432(%RBP),%RSP
	add $-4464, %RSP
	mov -4424(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de051
	jmp uuid_00000000000de053
uuid_00000000000de051:
	movb $1, -4264(%rbp)
uuid_00000000000de053:
	mov -4360(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de056:
	mov -4280(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000de059:
	mov -4272(%RBP),%RSP
	add $-4464, %RSP
	mov -4264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de05d
	jmp uuid_00000000000de05f
uuid_00000000000de05d:
	push %RBP
	pushq -4096(%RBP)
	pushq -4104(%RBP)
	pushq -4112(%RBP)
	pushq -4120(%RBP)
	pushq -4128(%RBP)
	pushq -4136(%RBP)
	pushq -4144(%RBP)
	jmp uuid_00000000000de05a
	jmp uuid_00000000000de05c
uuid_00000000000de05a:
	movb $1, -4168(%rbp)
uuid_00000000000de05c:
	mov -4472(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000de05f:
	mov -4184(%RBP),%RSP
	add $-4528, %RSP
uuid_00000000000de062:
	mov -4176(%RBP),%RSP
	add $-4528, %RSP
	mov -4168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de073
	jmp uuid_00000000000de075
uuid_00000000000de073:
	push %RBP
	pushq -4000(%RBP)
	pushq -4008(%RBP)
	pushq -4016(%RBP)
	pushq -4024(%RBP)
	pushq -4032(%RBP)
	pushq -4040(%RBP)
	pushq -4048(%RBP)
	pushq $0
	push %RBP
	mov -4592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de06d
	jmp uuid_00000000000de06f
uuid_00000000000de06d:
	push %RBP
	jmp uuid_00000000000de06a
	jmp uuid_00000000000de06c
uuid_00000000000de06a:
	push %RBP
	jmp uuid_00000000000de067
	jmp uuid_00000000000de069
uuid_00000000000de067:
	push %RBP
	mov -4544(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4640(%rbp)
	pushq $uuid_00000000000de063
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de064
	jmp uuid_00000000000de066
uuid_00000000000de064:
	movb $1, -4600(%rbp)
uuid_00000000000de066:
	mov -4632(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de069:
	mov -4624(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de06c:
	mov -4616(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de06f:
	mov -4608(%RBP),%RSP
	add $-4640, %RSP
	mov -4600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de070
	jmp uuid_00000000000de072
uuid_00000000000de070:
	movb $1, -4072(%rbp)
uuid_00000000000de072:
	mov -4536(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de075:
	mov -4088(%RBP),%RSP
	add $-4640, %RSP
uuid_00000000000de078:
	mov -4080(%RBP),%RSP
	add $-4640, %RSP
	mov -4072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0bd
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de099
	jmp uuid_00000000000de09b
uuid_00000000000de099:
	push %RBP
	mov -4712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4816(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de090
	jmp uuid_00000000000de092
uuid_00000000000de090:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de08d
	jmp uuid_00000000000de08f
uuid_00000000000de08d:
	push %RBP
	pushq -4752(%RBP)
	pushq -4760(%RBP)
	pushq -4768(%RBP)
	pushq -4776(%RBP)
	pushq -4784(%RBP)
	pushq -4792(%RBP)
	pushq -4800(%RBP)
	pushq $0
	push %RBP
	mov -4976(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de087
	jmp uuid_00000000000de089
uuid_00000000000de087:
	push %RBP
	jmp uuid_00000000000de084
	jmp uuid_00000000000de086
uuid_00000000000de084:
	push %RBP
	jmp uuid_00000000000de081
	jmp uuid_00000000000de083
uuid_00000000000de081:
	push %RBP
	mov -4928(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5024(%rbp)
	pushq $uuid_00000000000de07d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de07e
	jmp uuid_00000000000de080
uuid_00000000000de07e:
	movb $1, -4984(%rbp)
uuid_00000000000de080:
	mov -5016(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de083:
	mov -5008(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de086:
	mov -5000(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de089:
	mov -4992(%RBP),%RSP
	add $-5024, %RSP
	mov -4984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de08a
	jmp uuid_00000000000de08c
uuid_00000000000de08a:
	movb $1, -4824(%rbp)
uuid_00000000000de08c:
	mov -4920(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de08f:
	mov -4840(%RBP),%RSP
	add $-5024, %RSP
uuid_00000000000de092:
	mov -4832(%RBP),%RSP
	add $-5024, %RSP
	mov -4824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de096
	jmp uuid_00000000000de098
uuid_00000000000de096:
	push %RBP
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	pushq -4688(%RBP)
	pushq -4696(%RBP)
	pushq -4704(%RBP)
	jmp uuid_00000000000de093
	jmp uuid_00000000000de095
uuid_00000000000de093:
	movb $1, -4728(%rbp)
uuid_00000000000de095:
	mov -5032(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000de098:
	mov -4744(%RBP),%RSP
	add $-5088, %RSP
uuid_00000000000de09b:
	mov -4736(%RBP),%RSP
	add $-5088, %RSP
	mov -4728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0ba
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000de0b7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de0b6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de0b9
uuid_00000000000de0b7:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq $0
	push %RBP
	mov -5480(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0af
	jmp uuid_00000000000de0b1
uuid_00000000000de0af:
	push %RBP
	pushq -5408(%RBP)
	pushq -5416(%RBP)
	pushq -5424(%RBP)
	pushq -5432(%RBP)
	pushq -5440(%RBP)
	pushq -5448(%RBP)
	pushq -5456(%RBP)
	pushq -5464(%RBP)
	pushq -5472(%RBP)
	jmp uuid_00000000000de0ac
	jmp uuid_00000000000de0ae
uuid_00000000000de0ac:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	pushq -5400(%RBP)
	jmp uuid_00000000000de0a9
	jmp uuid_00000000000de0ab
uuid_00000000000de0a9:
	movb $1, -5488(%rbp)
uuid_00000000000de0ab:
	mov -5584(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de0ae:
	mov -5504(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de0b1:
	mov -5496(%RBP),%RSP
	add $-5656, %RSP
	mov -5488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0b3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de0b2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de0b5
uuid_00000000000de0b3:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5576(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5568(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0b5:
	mov -5328(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de0b9:
	mov -5096(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000de0bc
uuid_00000000000de0ba:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0a2
	jmp uuid_00000000000de0a4
uuid_00000000000de0a2:
	push %RBP
	pushq -5328(%RBP)
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	pushq -5392(%RBP)
	jmp uuid_00000000000de09f
	jmp uuid_00000000000de0a1
uuid_00000000000de09f:
	push %RBP
	pushq -5256(%RBP)
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	pushq -5288(%RBP)
	pushq -5296(%RBP)
	pushq -5304(%RBP)
	pushq -5312(%RBP)
	pushq -5320(%RBP)
	jmp uuid_00000000000de09c
	jmp uuid_00000000000de09e
uuid_00000000000de09c:
	movb $1, -5408(%rbp)
uuid_00000000000de09e:
	mov -5504(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000de0a1:
	mov -5424(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000de0a4:
	mov -5416(%RBP),%RSP
	add $-5576, %RSP
	mov -5408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0a6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de0a5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de0a8
uuid_00000000000de0a6:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -5496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -5488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -5480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -5472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -5464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -5456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -5448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -5440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -5432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0a8:
	mov -5248(%RBP),%RSP
	add $-5576, %RSP
uuid_00000000000de0bc:
	mov -4648(%RBP),%RSP
	add $-5576, %RSP
	jmp uuid_00000000000de0bf
uuid_00000000000de0bd:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de079
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de07a
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de07a
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de07b
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de07b
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de07c
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de07c
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de07a
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de07a
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de07c
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000de07c
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4464(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4464(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4480(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac7c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $3
	pushq $5
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -4352(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -4344(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -4336(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -4328(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -4320(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -4312(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -4304(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -4296(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -4288(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0bf:
	mov -3992(%RBP),%RSP
	add $-4640, %RSP
	jmp uuid_00000000000de0c2
uuid_00000000000de0c0:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3872(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3760(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3752(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3744(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3736(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3728(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3720(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3712(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3704(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3696(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0c2:
	mov -3496(%RBP),%RSP
	add $-3984, %RSP
	jmp uuid_00000000000de0c5
uuid_00000000000de0c3:
#call function index-size-of-class : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3376(%rbp)
#call function to-u64 : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3264(%rbp)
	mov %RBX, %RBP
	call to_SB_u64_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_size_SB_of_SB_class_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -3152(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -3144(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -3136(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -3128(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -3120(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -3112(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -3104(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -3096(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -3088(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0c5:
	mov -2792(%RBP),%RSP
	add $-3488, %RSP
	jmp uuid_00000000000de0c8
uuid_00000000000de0c6:
#call function close : Arrow<SfxList,Array<SfxList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SfxListSfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2448(%rbp)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5ed
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc1cc
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	movq -2336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0c8:
	mov -1880(%RBP),%RSP
	add $-2784, %RSP
	jmp uuid_00000000000de0cb
uuid_00000000000de0c9:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq $0
	push %RBP
	mov -2184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf60
	jmp uuid_00000000000ddf62
uuid_00000000000ddf60:
	push %RBP
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	jmp uuid_00000000000ddf5d
	jmp uuid_00000000000ddf5f
uuid_00000000000ddf5d:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	jmp uuid_00000000000ddf5a
	jmp uuid_00000000000ddf5c
uuid_00000000000ddf5a:
	movb $1, -2192(%rbp)
uuid_00000000000ddf5c:
	mov -2288(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000ddf5f:
	mov -2208(%RBP),%RSP
	add $-2360, %RSP
uuid_00000000000ddf62:
	mov -2200(%RBP),%RSP
	add $-2360, %RSP
	mov -2192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf71
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddf70
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddf73
uuid_00000000000ddf71:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf69
	jmp uuid_00000000000ddf6b
uuid_00000000000ddf69:
	push %RBP
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	jmp uuid_00000000000ddf66
	jmp uuid_00000000000ddf68
uuid_00000000000ddf66:
	push %RBP
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	jmp uuid_00000000000ddf63
	jmp uuid_00000000000ddf65
uuid_00000000000ddf63:
	movb $1, -2680(%rbp)
uuid_00000000000ddf65:
	mov -2776(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000ddf68:
	mov -2696(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000ddf6b:
	mov -2688(%RBP),%RSP
	add $-2848, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf6d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddf6c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddf6f
uuid_00000000000ddf6d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2784(%rbp)
	pushq -2792(%rbp)
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -2768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddf6f:
	mov -2520(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000ddf73:
	mov -2032(%RBP),%RSP
	add $-2848, %RSP
uuid_00000000000de0cb:
	mov -1592(%RBP),%RSP
	add $-2848, %RSP
	jmp uuid_00000000000de0ce
uuid_00000000000de0cc:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf31
	jmp uuid_00000000000ddf33
uuid_00000000000ddf31:
	push %RBP
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	jmp uuid_00000000000ddf2e
	jmp uuid_00000000000ddf30
uuid_00000000000ddf2e:
	push %RBP
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	jmp uuid_00000000000ddf2b
	jmp uuid_00000000000ddf2d
uuid_00000000000ddf2b:
	movb $1, -1904(%rbp)
uuid_00000000000ddf2d:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000ddf30:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000ddf33:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf42
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddf41
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddf44
uuid_00000000000ddf42:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq $0
	push %RBP
	mov -2384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf3a
	jmp uuid_00000000000ddf3c
uuid_00000000000ddf3a:
	push %RBP
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	jmp uuid_00000000000ddf37
	jmp uuid_00000000000ddf39
uuid_00000000000ddf37:
	push %RBP
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	jmp uuid_00000000000ddf34
	jmp uuid_00000000000ddf36
uuid_00000000000ddf34:
	movb $1, -2392(%rbp)
uuid_00000000000ddf36:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000ddf39:
	mov -2408(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000ddf3c:
	mov -2400(%RBP),%RSP
	add $-2560, %RSP
	mov -2392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddf3e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddf3d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddf40
uuid_00000000000ddf3e:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	pushq -2512(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
#call function type-of-s : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call type_SB_of_SB_s_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function index-tag-is-fragment : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function tag-of : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call tag_SB_of_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call index_SB_tag_SB_is_SB_fragment_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -2480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -2424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -2416(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddf40:
	mov -2232(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000ddf44:
	mov -1744(%RBP),%RSP
	add $-2584, %RSP
uuid_00000000000de0ce:
	mov -1096(%RBP),%RSP
	add $-2584, %RSP
	jmp uuid_00000000000de0d1
uuid_00000000000de0cf:
#call function parse-many-expressions : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov %RBX, %RBP
	call parse_SB_many_SB_expressions_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddef8
	jmp uuid_00000000000ddefa
uuid_00000000000ddef8:
	push %RBP
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	jmp uuid_00000000000ddef5
	jmp uuid_00000000000ddef7
uuid_00000000000ddef5:
	push %RBP
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	jmp uuid_00000000000ddef2
	jmp uuid_00000000000ddef4
uuid_00000000000ddef2:
	movb $1, -1408(%rbp)
uuid_00000000000ddef4:
	mov -1504(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000ddef7:
	mov -1424(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000ddefa:
	mov -1416(%RBP),%RSP
	add $-1576, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ddefc
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddefb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddefe
uuid_00000000000ddefc:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -1496(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000ddefe:
	mov -1248(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000de0d1:
	mov -808(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000de0d4
uuid_00000000000de0d2:
#call function parse-one-expression : Arrow<List<Token>,ParsePartial+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	mov %RBX, %RBP
	call parse_SB_one_SB_expression_CL_ArrowParsePartialListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq $0
	push %RBP
	mov -1112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddeb8
	jmp uuid_00000000000ddeba
uuid_00000000000ddeb8:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	jmp uuid_00000000000ddeb5
	jmp uuid_00000000000ddeb7
uuid_00000000000ddeb5:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	jmp uuid_00000000000ddeb2
	jmp uuid_00000000000ddeb4
uuid_00000000000ddeb2:
	movb $1, -1120(%rbp)
uuid_00000000000ddeb4:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000ddeb7:
	mov -1136(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000ddeba:
	mov -1128(%RBP),%RSP
	add $-1288, %RSP
	mov -1120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dded9
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dded8
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ddedb
uuid_00000000000dded9:
#call function take-one-expr : Arrow<List<Token>,Tuple<List<Token>,List<Token>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	mov %RBX, %RBP
	call take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddec1
	jmp uuid_00000000000ddec3
uuid_00000000000ddec1:
	push %RBP
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	jmp uuid_00000000000ddebe
	jmp uuid_00000000000ddec0
uuid_00000000000ddebe:
	push %RBP
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	jmp uuid_00000000000ddebb
	jmp uuid_00000000000ddebd
uuid_00000000000ddebb:
	movb $1, -1608(%rbp)
uuid_00000000000ddebd:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000ddec0:
	mov -1624(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000ddec3:
	mov -1616(%RBP),%RSP
	add $-1776, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dded5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dded4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dded7
uuid_00000000000dded5:
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	push %RBP
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq $0
	push %RBP
	mov -2000(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddeca
	jmp uuid_00000000000ddecc
uuid_00000000000ddeca:
	push %RBP
	mov -1992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ddec7
	jmp uuid_00000000000ddec9
uuid_00000000000ddec7:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2176(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ddec4
	jmp uuid_00000000000ddec6
uuid_00000000000ddec4:
	movb $1, -2008(%rbp)
uuid_00000000000ddec6:
	mov -2104(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000ddec9:
	mov -2024(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000ddecc:
	mov -2016(%RBP),%RSP
	add $-2176, %RSP
	mov -2008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dded1
	push %RBP
	jmp uuid_00000000000ddece
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ddecd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dded0
uuid_00000000000ddece:
uuid_00000000000dded0:
	mov -2184(%RBP),%RSP
	add $-2184, %RSP
	jmp uuid_00000000000dded3
uuid_00000000000dded1:
	movq -2096(%rbp), %r15
	movq %r15, -1848(%rbp)
	movq -2088(%rbp), %r15
	movq %r15, -1840(%rbp)
	movq -2080(%rbp), %r15
	movq %r15, -1832(%rbp)
	movq -2072(%rbp), %r15
	movq %r15, -1824(%rbp)
	movq -2064(%rbp), %r15
	movq %r15, -1816(%rbp)
	movq -2056(%rbp), %r15
	movq %r15, -1808(%rbp)
	movq -2048(%rbp), %r15
	movq %r15, -1800(%rbp)
	movq -2040(%rbp), %r15
	movq %r15, -1792(%rbp)
	movq -2032(%rbp), %r15
	movq %r15, -1784(%rbp)
uuid_00000000000dded3:
	mov -1928(%RBP),%RSP
	add $-2176, %RSP
#call function close : Arrow<MacroList,Array<MacroList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_MacroListMacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function without-location : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call without_SB_location_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	popq 72(%r15)
	popq 80(%r15)
	popq 88(%r15)
	popq 96(%r15)
	popq 104(%r15)
	popq 112(%r15)
	popq 120(%r15)
	popq 128(%r15)
	popq 136(%r15)
	popq 144(%r15)
	popq 152(%r15)
	popq 160(%r15)
	movq -1696(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dded7:
	mov -1448(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000ddedb:
	mov -960(%RBP),%RSP
	add $-2176, %RSP
uuid_00000000000de0d4:
	mov -520(%RBP),%RSP
	add $-2176, %RSP
	jmp uuid_00000000000de0d7
uuid_00000000000de0d5:
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de0d7:
	mov -232(%RBP),%RSP
	add $-512, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de0d8
uuid_00000000000de0da:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString:
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000de0f5:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de0f6
	jmp uuid_00000000000de0f7
uuid_00000000000de0f6:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0ec
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0e9
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0e6
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0e3
	push %RBP
	jmp uuid_00000000000de0e0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de0df
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de0e2
uuid_00000000000de0e0:
uuid_00000000000de0e2:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de0e5
uuid_00000000000de0e3:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de0e5:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de0e8
uuid_00000000000de0e6:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de0e8:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de0eb
uuid_00000000000de0e9:
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de0eb:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000de0ee
uuid_00000000000de0ec:
	mov -48(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -48(%rbp)
uuid_00000000000de0ee:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de0f2
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de0f4
uuid_00000000000de0f2:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $44, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de0ef
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de0f1
uuid_00000000000de0ef:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de0f1:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000de0f4:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de0f5
uuid_00000000000de0f7:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_SB_single_CL_ArrowTypeString:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000de15e:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de15f
	jmp uuid_00000000000de160
uuid_00000000000de15f:
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de15b
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de131
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de12e
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de12b
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de128
	push %RBP
	jmp uuid_00000000000de125
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de124
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de127
uuid_00000000000de125:
uuid_00000000000de127:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de12a
uuid_00000000000de128:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de12a:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de12d
uuid_00000000000de12b:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de12d:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de130
uuid_00000000000de12e:
	mov -24(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de130:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000de133
uuid_00000000000de131:
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
uuid_00000000000de133:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -24(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de158
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	jmp uuid_00000000000de15a
uuid_00000000000de158:
	pushq -32(%rbp)
	push %RBP
	pushq -128(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de155
	push %RBP
	pushq -128(%rbp)
	mov -160(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de152
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de151
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de154
uuid_00000000000de152:
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de13d
	jmp uuid_00000000000de13f
uuid_00000000000de13d:
	push %RBP
	mov -208(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de13a
	jmp uuid_00000000000de13c
uuid_00000000000de13a:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de137
	jmp uuid_00000000000de139
uuid_00000000000de137:
	movb $1, -224(%rbp)
uuid_00000000000de139:
	mov -288(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000de13c:
	mov -240(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000de13f:
	mov -232(%RBP),%RSP
	add $-296, %RSP
	mov -224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de14e
	push %RBP
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de143
	jmp uuid_00000000000de145
uuid_00000000000de143:
	push %RBP
	mov -320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de140
	jmp uuid_00000000000de142
uuid_00000000000de140:
	movb $1, -336(%rbp)
uuid_00000000000de142:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000de145:
	mov -344(%RBP),%RSP
	add $-360, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de14b
	push %RBP
	jmp uuid_00000000000de148
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de147
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de14a
uuid_00000000000de148:
#call function eprint : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de146
	mov %RBX, %RBP
	call eprint_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de14a:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000de14d
uuid_00000000000de14b:
	pushq -360(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de14d:
	mov -304(%RBP),%RSP
	add $-360, %RSP
	jmp uuid_00000000000de150
uuid_00000000000de14e:
	pushq -296(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-comma-sep : Arrow<String,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_comma_SB_sep_CL_ArrowListTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de150:
	mov -192(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000de154:
	mov -152(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000de157
uuid_00000000000de155:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de134
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dacdb
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de136
uuid_00000000000de134:
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dacdb
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de136:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000de157:
	mov -136(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000de15a:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000de15d
uuid_00000000000de15b:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de121
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de11e
	push %RBP
	pushq -96(%rbp)
	jmp uuid_00000000000de11b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de11a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de11d
uuid_00000000000de11b:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de11d:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de120
uuid_00000000000de11e:
	movb $60, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de117
	jmp uuid_00000000000de119
uuid_00000000000de117:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000dabfe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de114
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de111
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de113
uuid_00000000000de111:
	pushq $0
	pushq -144(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de113:
	mov -160(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de116
uuid_00000000000de114:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de116:
	mov -152(%RBP),%RSP
	add $-152, %RSP
uuid_00000000000de119:
	mov -136(%RBP),%RSP
	add $-152, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de120:
	mov -120(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000de123
uuid_00000000000de121:
	movb $91, -32(%rbp)
	movq $1, -24(%rbp)
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de106
	jmp uuid_00000000000de108
uuid_00000000000de106:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000dabfe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de103
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de100
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de102
uuid_00000000000de100:
	pushq $0
	pushq -128(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de102:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de105
uuid_00000000000de103:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de105:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000de108:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000de123:
	mov -104(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000de15d:
	mov -88(%RBP),%RSP
	add $-136, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de15e
uuid_00000000000de160:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de16f
	jmp uuid_00000000000de171
uuid_00000000000de16f:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000dabfe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de16c
	push %RBP
#call function is-variable : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	mov %RBX, %RBP
	call is_SB_variable_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de169
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	jmp uuid_00000000000de16b
uuid_00000000000de169:
	pushq $0
	pushq -96(%rbp)
	pushq $2
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de16b:
	mov -112(%RBP),%RSP
	add $-112, %RSP
	jmp uuid_00000000000de16e
uuid_00000000000de16c:
	pushq $0
	pushq $0
	pushq $3
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
uuid_00000000000de16e:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000de171:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	subq $24, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_type_CL_ArrowTypeString:
	pushq $0
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de172
	jmp uuid_00000000000de174
uuid_00000000000de172:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq $uuid_00000000000daedb
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -8(%rbp)
	movb $1, -24(%rbp)
uuid_00000000000de174:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
uuid_00000000000de19b:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de19c
	jmp uuid_00000000000de19d
uuid_00000000000de19c:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -96(%rbp)
	mov -112(%RBP), %AL
	mov $60, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de182
	push %RBP
	pushq -96(%rbp)
	mov -128(%RBP), %AL
	mov $62, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de17f
	push %RBP
	pushq -96(%rbp)
	mov -144(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de17c
	push %RBP
	pushq -96(%rbp)
	mov -160(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de179
	push %RBP
	jmp uuid_00000000000de176
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de175
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de178
uuid_00000000000de176:
uuid_00000000000de178:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de17b
uuid_00000000000de179:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de17b:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000de17e
uuid_00000000000de17c:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de17e:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000de181
uuid_00000000000de17f:
	mov -40(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de181:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000de184
uuid_00000000000de182:
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000de184:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -40(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de198
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000de19a
uuid_00000000000de198:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $43, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de195
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	jmp uuid_00000000000de197
uuid_00000000000de195:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de18b
	jmp uuid_00000000000de18d
uuid_00000000000de18b:
	push %RBP
	mov -176(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de188
	jmp uuid_00000000000de18a
uuid_00000000000de188:
	push %RBP
	mov -168(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de185
	jmp uuid_00000000000de187
uuid_00000000000de185:
	movb $1, -192(%rbp)
uuid_00000000000de187:
	mov -256(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000de18a:
	mov -208(%RBP),%RSP
	add $-264, %RSP
uuid_00000000000de18d:
	mov -200(%RBP),%RSP
	add $-264, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de192
	push %RBP
	jmp uuid_00000000000de18f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de18e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de191
uuid_00000000000de18f:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000de191:
	mov -272(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000de194
uuid_00000000000de192:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000de194:
	mov -160(%RBP),%RSP
	add $-288, %RSP
	pushq $0
	pushq $0
	pushq $3
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000de197:
	mov -128(%RBP),%RSP
	add $-288, %RSP
uuid_00000000000de19a:
	mov -120(%RBP),%RSP
	add $-288, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de19b
uuid_00000000000de19d:
	push %RBP
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de1ae
	jmp uuid_00000000000de1b0
uuid_00000000000de1ae:
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1a4
	jmp uuid_00000000000de1a6
uuid_00000000000de1a4:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1a1
	jmp uuid_00000000000de1a3
uuid_00000000000de1a1:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de19e
	jmp uuid_00000000000de1a0
uuid_00000000000de19e:
	movb $1, -160(%rbp)
uuid_00000000000de1a0:
	mov -224(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000de1a3:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000de1a6:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1ab
	push %RBP
	jmp uuid_00000000000de1a8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de1a7
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de1aa
uuid_00000000000de1a8:
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000de1aa:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000de1ad
uuid_00000000000de1ab:
#call function parse-type-single : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call parse_SB_type_SB_single_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	movq -256(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -240(%rbp), %r15
	movq %r15, -72(%rbp)
uuid_00000000000de1ad:
	mov -128(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000de1b0:
	mov -96(%RBP),%RSP
	add $-256, %RSP
	push %RBP
	mov -24(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1b9
	jmp uuid_00000000000de1bb
uuid_00000000000de1b9:
	pushq $uuid_00000000000daedb
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
uuid_00000000000de1bb:
	mov -264(%RBP),%RSP
	add $-264, %RSP
	subq $24, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
parse_SB_unexpect_CL_ArrowNilConsListTokenString:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
parse_CL_ArrowNilNil:
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	movq $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %R15
	popq 0(%R15)
	popq 8(%R15)
	popq 16(%R15)
	popq 24(%R15)
	popq 32(%R15)
	popq 40(%R15)
	popq 48(%R15)
	popq 56(%R15)
	popq 64(%R15)
#call function parse-toplevel : Arrow<List<Token>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call parse_SB_toplevel_CL_ArrowASTListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
take_SB_one_SB_expr_CL_ArrowTupleListTokenListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	pushq $0
uuid_00000000000de21e:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de21f
	jmp uuid_00000000000de220
uuid_00000000000de21f:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -384(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1e6
	jmp uuid_00000000000de1e8
uuid_00000000000de1e6:
	push %RBP
	mov -376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de1e3
	jmp uuid_00000000000de1e5
uuid_00000000000de1e3:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1dd
	jmp uuid_00000000000de1df
uuid_00000000000de1dd:
	push %RBP
	jmp uuid_00000000000de1da
	jmp uuid_00000000000de1dc
uuid_00000000000de1da:
	push %RBP
	jmp uuid_00000000000de1d7
	jmp uuid_00000000000de1d9
uuid_00000000000de1d7:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000dad50
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de1d4
	jmp uuid_00000000000de1d6
uuid_00000000000de1d4:
	movb $1, -552(%rbp)
uuid_00000000000de1d6:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de1d9:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de1dc:
	mov -568(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de1df:
	mov -560(%RBP),%RSP
	add $-592, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de1e0
	jmp uuid_00000000000de1e2
uuid_00000000000de1e0:
	movb $1, -392(%rbp)
uuid_00000000000de1e2:
	mov -488(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de1e5:
	mov -408(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000de1e8:
	mov -400(%RBP),%RSP
	add $-592, %RSP
	mov -392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de21b
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1f2
	jmp uuid_00000000000de1f4
uuid_00000000000de1f2:
	push %RBP
	mov -664(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de1ef
	jmp uuid_00000000000de1f1
uuid_00000000000de1ef:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	jmp uuid_00000000000de1ec
	jmp uuid_00000000000de1ee
uuid_00000000000de1ec:
	movb $1, -680(%rbp)
uuid_00000000000de1ee:
	mov -776(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000de1f1:
	mov -696(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000de1f4:
	mov -688(%RBP),%RSP
	add $-832, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de218
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de217
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de21a
uuid_00000000000de218:
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1fe
	jmp uuid_00000000000de200
uuid_00000000000de1fe:
	push %RBP
	jmp uuid_00000000000de1fb
	jmp uuid_00000000000de1fd
uuid_00000000000de1fb:
	push %RBP
	jmp uuid_00000000000de1f8
	jmp uuid_00000000000de1fa
uuid_00000000000de1f8:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq $uuid_00000000000daa6e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de1f5
	jmp uuid_00000000000de1f7
uuid_00000000000de1f5:
	movb $1, -960(%rbp)
uuid_00000000000de1f7:
	mov -992(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000de1fa:
	mov -984(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000de1fd:
	mov -976(%RBP),%RSP
	add $-1000, %RSP
uuid_00000000000de200:
	mov -968(%RBP),%RSP
	add $-1000, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de214
	push %RBP
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de20a
	jmp uuid_00000000000de20c
uuid_00000000000de20a:
	push %RBP
	jmp uuid_00000000000de207
	jmp uuid_00000000000de209
uuid_00000000000de207:
	push %RBP
	jmp uuid_00000000000de204
	jmp uuid_00000000000de206
uuid_00000000000de204:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000daa70
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de201
	jmp uuid_00000000000de203
uuid_00000000000de201:
	movb $1, -1072(%rbp)
uuid_00000000000de203:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de206:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de209:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de20c:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de211
	push %RBP
	jmp uuid_00000000000de20e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de20d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de210
uuid_00000000000de20e:
uuid_00000000000de210:
	mov -1120(%RBP),%RSP
	add $-1120, %RSP
	jmp uuid_00000000000de213
uuid_00000000000de211:
	mov -232(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000de213:
	mov -1008(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000de216
uuid_00000000000de214:
	mov -232(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -232(%rbp)
uuid_00000000000de216:
	mov -896(%RBP),%RSP
	add $-1000, %RSP
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -768(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000de21a:
	mov -600(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000de21d
uuid_00000000000de21b:
	push %RBP
	mov -232(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de1e9
#call function cons : Arrow<Cons<Token,List<Token>>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function head : Arrow<List<Token>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call head_CL_ArrowTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTokenConsListTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	push -160(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -480(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -480(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -472(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -464(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -456(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -448(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -440(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -432(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -424(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -416(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000de1eb
uuid_00000000000de1e9:
	movq -72(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -56(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -48(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -8(%rbp), %r15
	movq %r15, -160(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de1eb:
	mov -600(%RBP),%RSP
	add $-600, %RSP
uuid_00000000000de21d:
	mov -312(%RBP),%RSP
	add $-600, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de21e
uuid_00000000000de220:
#call function remove-parens : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function reverse : Arrow<List<Token>,List<Token>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call remove_SB_parens_CL_ArrowListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de228
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	subq %R14,%RAX
	mov %RAX, %RAX
	mov $8, %R14
	subq %R14,%RAX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov -336(%RBP), %RAX
	mov -512(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	pushq $1
	pushq $1
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db236
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db238
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db239
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db237
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000de227
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq $uuid_00000000000db23a
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -336(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	jmp uuid_00000000000de22a
uuid_00000000000de228:
#call function with-only-class : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call with_SB_only_SB_class_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function .lookup : Arrow<Cons<Cons<HashtableEq<Type,String>,Type>,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq $uuid_00000000000dacef
	mov %RBX, %RBP
	call _DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq $0
	pushq $0
	pushq $0
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	push %RBP
#call function is-nil : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	mov %RBX, %RBP
	call is_SB_nil_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de221
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq $0
	pushq $uuid_00000000000daeae
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -712(%RBP)
	popq -704(%RBP)
	popq -696(%RBP)
	jmp uuid_00000000000de223
uuid_00000000000de221:
uuid_00000000000de223:
	mov -720(%RBP),%RSP
	add $-720, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de224
	pushq $2
	pushq $0
	pushq -536(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de225
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de226
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
uuid_00000000000de22a:
	mov -504(%RBP),%RSP
	add $-720, %RSP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -336(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -728(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	subq $152, %rsp
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $344, %rsp
	ret
compile_SB_declare_SB_cstring_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -176(%rbp)
	mov -192(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de232
	push %RBP
	pushq -176(%rbp)
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de22f
	push %RBP
	pushq -176(%rbp)
	mov -224(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de22c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de22b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de22e
uuid_00000000000de22c:
#call function compile-declare-cstring-blob : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_blob_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de22e:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000de231
uuid_00000000000de22f:
#call function compile-declare-cstring-gnu : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_gnu_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de231:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000de234
uuid_00000000000de232:
#call function compile-declare-cstring-c : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_SB_c_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de234:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_blob_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de235
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_c_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de236
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function escape-c-string : Arrow<String,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_c_SB_string_CL_ArrowSString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	pushq $uuid_00000000000de236
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
escape_SB_c_SB_string_CL_ArrowSString:
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000de25d:
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de25e
	jmp uuid_00000000000de25f
uuid_00000000000de25e:
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de25a
	push %RBP
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	mov $34, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de257
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
#call function clone-rope : Arrow<U8,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de259
uuid_00000000000de257:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000de236
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de259:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000de25c
uuid_00000000000de25a:
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
	mov -8(%RBP), %RAX
	mov 0(%RAX), %AL
	mov %AL, %AL
	push %RAX
	push %RBP
	pushq -56(%rbp)
	mov -72(%RBP), %AL
	mov $58, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de254
	push %RBP
	pushq -56(%rbp)
	mov -88(%RBP), %AL
	mov $91, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de251
	push %RBP
	pushq -56(%rbp)
	mov -104(%RBP), %AL
	mov $92, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de24e
	push %RBP
	pushq -56(%rbp)
	mov -120(%RBP), %AL
	mov $93, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de24b
	push %RBP
	pushq -56(%rbp)
	mov -136(%RBP), %AL
	mov $96, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de248
	push %RBP
	pushq -56(%rbp)
	mov -152(%RBP), %AL
	mov $110, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de245
	push %RBP
	pushq -56(%rbp)
	mov -168(%RBP), %AL
	mov $111, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de242
	push %RBP
	pushq -56(%rbp)
	mov -184(%RBP), %AL
	mov $115, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de23f
	push %RBP
	pushq -56(%rbp)
	mov -200(%RBP), %AL
	mov $116, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de23c
	push %RBP
	pushq -56(%rbp)
	jmp uuid_00000000000de239
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de238
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de23b
uuid_00000000000de239:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad28
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<U8,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilU8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dad29
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de23b:
	mov -208(%RBP),%RSP
	add $-216, %RSP
	jmp uuid_00000000000de23e
uuid_00000000000de23c:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000de237
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de23e:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000de241
uuid_00000000000de23f:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de241:
	mov -176(%RBP),%RSP
	add $-184, %RSP
	jmp uuid_00000000000de244
uuid_00000000000de242:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dad55
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de244:
	mov -160(%RBP),%RSP
	add $-168, %RSP
	jmp uuid_00000000000de247
uuid_00000000000de245:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dad54
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de247:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000de24a
uuid_00000000000de248:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dad52
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de24a:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000de24d
uuid_00000000000de24b:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000daa70
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de24d:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000de250
uuid_00000000000de24e:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dad27
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de250:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000de253
uuid_00000000000de251:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000daa6e
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de253:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	jmp uuid_00000000000de256
uuid_00000000000de254:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq $0
	pushq $uuid_00000000000dad50
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de256:
	mov -64(%RBP),%RSP
	add $-72, %RSP
	mov -8(%RBP), %RAX
	inc %RAX
	movq %RAX, -8(%rbp)
uuid_00000000000de25c:
	mov -48(%RBP),%RSP
	add $-72, %RSP
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de25d
uuid_00000000000de25f:
	subq $24, %rsp
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_declare_SB_cstring_SB_gnu_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $1
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de27b
	mov $cstring_SB_cache_CL_StringStringListStringStringList, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $uuid_00000000000dab3d
uuid_00000000000de273:
#call function non-zero : Arrow<StringStringList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64StringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de274
	jmp uuid_00000000000de275
uuid_00000000000de274:
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq $0
	push %RBP
	mov -288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de269
	jmp uuid_00000000000de26b
uuid_00000000000de269:
	push %RBP
	mov -280(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de266
	jmp uuid_00000000000de268
uuid_00000000000de266:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de263
	jmp uuid_00000000000de265
uuid_00000000000de263:
	push %RBP
	mov -264(%RBP), %RAX
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de260
	jmp uuid_00000000000de262
uuid_00000000000de260:
	movb $1, -296(%rbp)
uuid_00000000000de262:
	mov -344(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000de265:
	mov -328(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000de268:
	mov -312(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000de26b:
	mov -304(%RBP),%RSP
	add $-376, %RSP
	mov -296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de270
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de26f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de272
uuid_00000000000de270:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -8(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de26c
	movq -376(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -184(%rbp)
	jmp uuid_00000000000de26e
uuid_00000000000de26c:
	movq -320(%rbp), %r15
	movq %r15, -216(%rbp)
	mov -320(%rbp), %r15
	mov %r15, -216(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000de26e:
	mov -384(%RBP),%RSP
	add $-384, %RSP
uuid_00000000000de272:
	mov -256(%RBP),%RSP
	add $-384, %RSP
	add $32, %rsp
	add $32, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $32, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de273
uuid_00000000000de275:
	push %RBP
	mov -216(%RBP), %RAX
	mov 0(%RAX), %AL
	cmp $0, %AL
	jne uuid_00000000000de278
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -216(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de276
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function escape-literal : Arrow<String,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call escape_SB_literal_CL_ArrowStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de277
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<StringStringList,Array<StringStringList,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $cstring_SB_cache_CL_StringStringListStringStringList, %r15
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_StringStringListStringStringList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8(%rbp)
	pushq -216(%rbp)
	pushq $0
	mov $cstring_SB_cache_CL_StringStringListStringStringList, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	jmp uuid_00000000000de27a
uuid_00000000000de278:
uuid_00000000000de27a:
	mov -224(%RBP),%RSP
	add $-224, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
	pushq -216(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	jmp uuid_00000000000de27d
uuid_00000000000de27b:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
uuid_00000000000de27d:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2ae
	jmp uuid_00000000000de2b0
uuid_00000000000de2ae:
	push %RBP
	mov -456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2a5
	jmp uuid_00000000000de2a7
uuid_00000000000de2a5:
	push %RBP
	mov -552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de293
	jmp uuid_00000000000de295
uuid_00000000000de293:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de281
	jmp uuid_00000000000de283
uuid_00000000000de281:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000de27e
	jmp uuid_00000000000de280
uuid_00000000000de27e:
	movb $1, -760(%rbp)
uuid_00000000000de280:
	mov -776(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de283:
	mov -768(%RBP),%RSP
	add $-800, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de290
	jmp uuid_00000000000de292
uuid_00000000000de290:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de28a
	jmp uuid_00000000000de28c
uuid_00000000000de28a:
	push %RBP
	jmp uuid_00000000000de287
	jmp uuid_00000000000de289
uuid_00000000000de287:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de284
	jmp uuid_00000000000de286
uuid_00000000000de284:
	movb $1, -888(%rbp)
uuid_00000000000de286:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de289:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de28c:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de28d
	jmp uuid_00000000000de28f
uuid_00000000000de28d:
	movb $1, -664(%rbp)
uuid_00000000000de28f:
	mov -808(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de292:
	mov -680(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de295:
	mov -672(%RBP),%RSP
	add $-920, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2a2
	jmp uuid_00000000000de2a4
uuid_00000000000de2a2:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de29c
	jmp uuid_00000000000de29e
uuid_00000000000de29c:
	push %RBP
	jmp uuid_00000000000de299
	jmp uuid_00000000000de29b
uuid_00000000000de299:
	push %RBP
	mov -936(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de296
	jmp uuid_00000000000de298
uuid_00000000000de296:
	movb $1, -1008(%rbp)
uuid_00000000000de298:
	mov -1032(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de29b:
	mov -1024(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de29e:
	mov -1016(%RBP),%RSP
	add $-1040, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de29f
	jmp uuid_00000000000de2a1
uuid_00000000000de29f:
	movb $1, -568(%rbp)
uuid_00000000000de2a1:
	mov -928(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de2a4:
	mov -584(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000de2a7:
	mov -576(%RBP),%RSP
	add $-1040, %RSP
	mov -568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2ab
	jmp uuid_00000000000de2ad
uuid_00000000000de2ab:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de2a8
	jmp uuid_00000000000de2aa
uuid_00000000000de2a8:
	movb $1, -472(%rbp)
uuid_00000000000de2aa:
	mov -1048(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000de2ad:
	mov -488(%RBP),%RSP
	add $-1120, %RSP
uuid_00000000000de2b0:
	mov -480(%RBP),%RSP
	add $-1120, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2e5
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -1200(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2db
	jmp uuid_00000000000de2dd
uuid_00000000000de2db:
	push %RBP
	mov -1192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2c9
	jmp uuid_00000000000de2cb
uuid_00000000000de2c9:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2b7
	jmp uuid_00000000000de2b9
uuid_00000000000de2b7:
	push %RBP
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	jmp uuid_00000000000de2b4
	jmp uuid_00000000000de2b6
uuid_00000000000de2b4:
	movb $1, -1400(%rbp)
uuid_00000000000de2b6:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de2b9:
	mov -1408(%RBP),%RSP
	add $-1440, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2c6
	jmp uuid_00000000000de2c8
uuid_00000000000de2c6:
	push %RBP
	mov -1280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2c0
	jmp uuid_00000000000de2c2
uuid_00000000000de2c0:
	push %RBP
	jmp uuid_00000000000de2bd
	jmp uuid_00000000000de2bf
uuid_00000000000de2bd:
	push %RBP
	mov -1456(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de2ba
	jmp uuid_00000000000de2bc
uuid_00000000000de2ba:
	movb $1, -1528(%rbp)
uuid_00000000000de2bc:
	mov -1552(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de2bf:
	mov -1544(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de2c2:
	mov -1536(%RBP),%RSP
	add $-1560, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2c3
	jmp uuid_00000000000de2c5
uuid_00000000000de2c3:
	movb $1, -1304(%rbp)
uuid_00000000000de2c5:
	mov -1448(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de2c8:
	mov -1320(%RBP),%RSP
	add $-1560, %RSP
uuid_00000000000de2cb:
	mov -1312(%RBP),%RSP
	add $-1560, %RSP
	mov -1304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2d8
	jmp uuid_00000000000de2da
uuid_00000000000de2d8:
	push %RBP
	mov -1184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2d2
	jmp uuid_00000000000de2d4
uuid_00000000000de2d2:
	push %RBP
	jmp uuid_00000000000de2cf
	jmp uuid_00000000000de2d1
uuid_00000000000de2cf:
	push %RBP
	mov -1576(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de2cc
	jmp uuid_00000000000de2ce
uuid_00000000000de2cc:
	movb $1, -1648(%rbp)
uuid_00000000000de2ce:
	mov -1672(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de2d1:
	mov -1664(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de2d4:
	mov -1656(%RBP),%RSP
	add $-1680, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2d5
	jmp uuid_00000000000de2d7
uuid_00000000000de2d5:
	movb $1, -1208(%rbp)
uuid_00000000000de2d7:
	mov -1568(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de2da:
	mov -1224(%RBP),%RSP
	add $-1680, %RSP
uuid_00000000000de2dd:
	mov -1216(%RBP),%RSP
	add $-1680, %RSP
	mov -1208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de2e2
	push %RBP
	jmp uuid_00000000000de2df
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de2de
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de2e1
uuid_00000000000de2df:
uuid_00000000000de2e1:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
	jmp uuid_00000000000de2e4
uuid_00000000000de2e2:
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1688(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1560(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000de2e4:
	mov -1128(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000de2e7
uuid_00000000000de2e5:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de2b1
	jmp uuid_00000000000de2b3
uuid_00000000000de2b1:
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -304(%RBP), %RAX
	mov -1160(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function maybe-local-variable : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call maybe_SB_local_SB_variable_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1168(%RBP), %RAX
	mov -1176(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -920(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
uuid_00000000000de2b3:
	mov -1128(%RBP),%RSP
	add $-1184, %RSP
uuid_00000000000de2e7:
	mov -392(%RBP),%RSP
	add $-1184, %RSP
	subq $200, %rsp
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5a9
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	mov -680(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5a6
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -760(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2ef
	jmp uuid_00000000000de2f1
uuid_00000000000de2ef:
	push %RBP
	jmp uuid_00000000000de2ec
	jmp uuid_00000000000de2ee
uuid_00000000000de2ec:
	push %RBP
	mov -696(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de2e9
	jmp uuid_00000000000de2eb
uuid_00000000000de2e9:
	movb $1, -768(%rbp)
uuid_00000000000de2eb:
	mov -792(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de2ee:
	mov -784(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de2f1:
	mov -776(%RBP),%RSP
	add $-800, %RSP
	mov -768(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5a3
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de2f8
	jmp uuid_00000000000de2fa
uuid_00000000000de2f8:
	push %RBP
	jmp uuid_00000000000de2f5
	jmp uuid_00000000000de2f7
uuid_00000000000de2f5:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de2f2
	jmp uuid_00000000000de2f4
uuid_00000000000de2f2:
	movb $1, -888(%rbp)
uuid_00000000000de2f4:
	mov -912(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de2f7:
	mov -904(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de2fa:
	mov -896(%RBP),%RSP
	add $-920, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5a0
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de367
	jmp uuid_00000000000de369
uuid_00000000000de367:
	push %RBP
	mov -992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de355
	jmp uuid_00000000000de357
uuid_00000000000de355:
	push %RBP
	mov -1088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1192(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de34c
	jmp uuid_00000000000de34e
uuid_00000000000de34c:
	push %RBP
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	jmp uuid_00000000000de349
	jmp uuid_00000000000de34b
uuid_00000000000de349:
	movb $1, -1200(%rbp)
uuid_00000000000de34b:
	mov -1216(%RBP),%RSP
	add $-1240, %RSP
uuid_00000000000de34e:
	mov -1208(%RBP),%RSP
	add $-1240, %RSP
	mov -1200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de352
	jmp uuid_00000000000de354
uuid_00000000000de352:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de34f
	jmp uuid_00000000000de351
uuid_00000000000de34f:
	movb $1, -1104(%rbp)
uuid_00000000000de351:
	mov -1248(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000de354:
	mov -1120(%RBP),%RSP
	add $-1320, %RSP
uuid_00000000000de357:
	mov -1112(%RBP),%RSP
	add $-1320, %RSP
	mov -1104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de364
	jmp uuid_00000000000de366
uuid_00000000000de364:
	push %RBP
	mov -984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de35e
	jmp uuid_00000000000de360
uuid_00000000000de35e:
	push %RBP
	jmp uuid_00000000000de35b
	jmp uuid_00000000000de35d
uuid_00000000000de35b:
	push %RBP
	mov -1336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de358
	jmp uuid_00000000000de35a
uuid_00000000000de358:
	movb $1, -1408(%rbp)
uuid_00000000000de35a:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de35d:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de360:
	mov -1416(%RBP),%RSP
	add $-1440, %RSP
	mov -1408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de361
	jmp uuid_00000000000de363
uuid_00000000000de361:
	movb $1, -1008(%rbp)
uuid_00000000000de363:
	mov -1328(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de366:
	mov -1024(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de369:
	mov -1016(%RBP),%RSP
	add $-1440, %RSP
	mov -1008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de59d
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de382
	jmp uuid_00000000000de384
uuid_00000000000de382:
	push %RBP
	mov -1512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de370
	jmp uuid_00000000000de372
uuid_00000000000de370:
	push %RBP
	jmp uuid_00000000000de36d
	jmp uuid_00000000000de36f
uuid_00000000000de36d:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de36a
	jmp uuid_00000000000de36c
uuid_00000000000de36a:
	movb $1, -1624(%rbp)
uuid_00000000000de36c:
	mov -1648(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000de36f:
	mov -1640(%RBP),%RSP
	add $-1656, %RSP
uuid_00000000000de372:
	mov -1632(%RBP),%RSP
	add $-1656, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de37f
	jmp uuid_00000000000de381
uuid_00000000000de37f:
	push %RBP
	mov -1504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de379
	jmp uuid_00000000000de37b
uuid_00000000000de379:
	push %RBP
	jmp uuid_00000000000de376
	jmp uuid_00000000000de378
uuid_00000000000de376:
	push %RBP
	mov -1672(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1776(%rbp)
	pushq $uuid_00000000000db089
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de373
	jmp uuid_00000000000de375
uuid_00000000000de373:
	movb $1, -1744(%rbp)
uuid_00000000000de375:
	mov -1768(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de378:
	mov -1760(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de37b:
	mov -1752(%RBP),%RSP
	add $-1776, %RSP
	mov -1744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de37c
	jmp uuid_00000000000de37e
uuid_00000000000de37c:
	movb $1, -1528(%rbp)
uuid_00000000000de37e:
	mov -1664(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de381:
	mov -1544(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000de384:
	mov -1536(%RBP),%RSP
	add $-1776, %RSP
	mov -1528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de59a
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -1856(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de39d
	jmp uuid_00000000000de39f
uuid_00000000000de39d:
	push %RBP
	mov -1848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1952(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de38b
	jmp uuid_00000000000de38d
uuid_00000000000de38b:
	push %RBP
	jmp uuid_00000000000de388
	jmp uuid_00000000000de38a
uuid_00000000000de388:
	push %RBP
	mov -1888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de385
	jmp uuid_00000000000de387
uuid_00000000000de385:
	movb $1, -1960(%rbp)
uuid_00000000000de387:
	mov -1984(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000de38a:
	mov -1976(%RBP),%RSP
	add $-1992, %RSP
uuid_00000000000de38d:
	mov -1968(%RBP),%RSP
	add $-1992, %RSP
	mov -1960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de39a
	jmp uuid_00000000000de39c
uuid_00000000000de39a:
	push %RBP
	mov -1840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2072(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de394
	jmp uuid_00000000000de396
uuid_00000000000de394:
	push %RBP
	jmp uuid_00000000000de391
	jmp uuid_00000000000de393
uuid_00000000000de391:
	push %RBP
	mov -2008(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000db0a6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de38e
	jmp uuid_00000000000de390
uuid_00000000000de38e:
	movb $1, -2080(%rbp)
uuid_00000000000de390:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de393:
	mov -2096(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de396:
	mov -2088(%RBP),%RSP
	add $-2112, %RSP
	mov -2080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de397
	jmp uuid_00000000000de399
uuid_00000000000de397:
	movb $1, -1864(%rbp)
uuid_00000000000de399:
	mov -2000(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de39c:
	mov -1880(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000de39f:
	mov -1872(%RBP),%RSP
	add $-2112, %RSP
	mov -1864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de597
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3af
	jmp uuid_00000000000de3b1
uuid_00000000000de3af:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de3ac
	jmp uuid_00000000000de3ae
uuid_00000000000de3ac:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3a6
	jmp uuid_00000000000de3a8
uuid_00000000000de3a6:
	push %RBP
	jmp uuid_00000000000de3a3
	jmp uuid_00000000000de3a5
uuid_00000000000de3a3:
	push %RBP
	mov -2304(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2408(%rbp)
	pushq $uuid_00000000000db151
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de3a0
	jmp uuid_00000000000de3a2
uuid_00000000000de3a0:
	movb $1, -2376(%rbp)
uuid_00000000000de3a2:
	mov -2400(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de3a5:
	mov -2392(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de3a8:
	mov -2384(%RBP),%RSP
	add $-2408, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3a9
	jmp uuid_00000000000de3ab
uuid_00000000000de3a9:
	movb $1, -2200(%rbp)
uuid_00000000000de3ab:
	mov -2296(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de3ae:
	mov -2216(%RBP),%RSP
	add $-2408, %RSP
uuid_00000000000de3b1:
	mov -2208(%RBP),%RSP
	add $-2408, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de594
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3c1
	jmp uuid_00000000000de3c3
uuid_00000000000de3c1:
	push %RBP
	mov -2480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de3be
	jmp uuid_00000000000de3c0
uuid_00000000000de3be:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2664(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3b8
	jmp uuid_00000000000de3ba
uuid_00000000000de3b8:
	push %RBP
	jmp uuid_00000000000de3b5
	jmp uuid_00000000000de3b7
uuid_00000000000de3b5:
	push %RBP
	mov -2600(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq $uuid_00000000000db164
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de3b2
	jmp uuid_00000000000de3b4
uuid_00000000000de3b2:
	movb $1, -2672(%rbp)
uuid_00000000000de3b4:
	mov -2696(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de3b7:
	mov -2688(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de3ba:
	mov -2680(%RBP),%RSP
	add $-2704, %RSP
	mov -2672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3bb
	jmp uuid_00000000000de3bd
uuid_00000000000de3bb:
	movb $1, -2496(%rbp)
uuid_00000000000de3bd:
	mov -2592(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de3c0:
	mov -2512(%RBP),%RSP
	add $-2704, %RSP
uuid_00000000000de3c3:
	mov -2504(%RBP),%RSP
	add $-2704, %RSP
	mov -2496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de591
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -2784(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de45c
	jmp uuid_00000000000de45e
uuid_00000000000de45c:
	push %RBP
	mov -2776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2880(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de44a
	jmp uuid_00000000000de44c
uuid_00000000000de44a:
	push %RBP
	pushq -2856(%RBP)
	pushq -2864(%RBP)
	pushq -2872(%RBP)
	jmp uuid_00000000000de447
	jmp uuid_00000000000de449
uuid_00000000000de447:
	movb $1, -2888(%rbp)
uuid_00000000000de449:
	mov -2904(%RBP),%RSP
	add $-2928, %RSP
uuid_00000000000de44c:
	mov -2896(%RBP),%RSP
	add $-2928, %RSP
	mov -2888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de459
	jmp uuid_00000000000de45b
uuid_00000000000de459:
	push %RBP
	mov -2768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3008(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de453
	jmp uuid_00000000000de455
uuid_00000000000de453:
	push %RBP
	jmp uuid_00000000000de450
	jmp uuid_00000000000de452
uuid_00000000000de450:
	push %RBP
	mov -2944(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000db131
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de44d
	jmp uuid_00000000000de44f
uuid_00000000000de44d:
	movb $1, -3016(%rbp)
uuid_00000000000de44f:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de452:
	mov -3032(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de455:
	mov -3024(%RBP),%RSP
	add $-3048, %RSP
	mov -3016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de456
	jmp uuid_00000000000de458
uuid_00000000000de456:
	movb $1, -2792(%rbp)
uuid_00000000000de458:
	mov -2936(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de45b:
	mov -2808(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de45e:
	mov -2800(%RBP),%RSP
	add $-3048, %RSP
	mov -2792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de58e
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de47d
	jmp uuid_00000000000de47f
uuid_00000000000de47d:
	push %RBP
	mov -3120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3224(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de46b
	jmp uuid_00000000000de46d
uuid_00000000000de46b:
	push %RBP
	mov -3216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3320(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de462
	jmp uuid_00000000000de464
uuid_00000000000de462:
	push %RBP
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	jmp uuid_00000000000de45f
	jmp uuid_00000000000de461
uuid_00000000000de45f:
	movb $1, -3328(%rbp)
uuid_00000000000de461:
	mov -3344(%RBP),%RSP
	add $-3368, %RSP
uuid_00000000000de464:
	mov -3336(%RBP),%RSP
	add $-3368, %RSP
	mov -3328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de468
	jmp uuid_00000000000de46a
uuid_00000000000de468:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de465
	jmp uuid_00000000000de467
uuid_00000000000de465:
	movb $1, -3232(%rbp)
uuid_00000000000de467:
	mov -3376(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000de46a:
	mov -3248(%RBP),%RSP
	add $-3448, %RSP
uuid_00000000000de46d:
	mov -3240(%RBP),%RSP
	add $-3448, %RSP
	mov -3232(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de47a
	jmp uuid_00000000000de47c
uuid_00000000000de47a:
	push %RBP
	mov -3112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3528(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de474
	jmp uuid_00000000000de476
uuid_00000000000de474:
	push %RBP
	jmp uuid_00000000000de471
	jmp uuid_00000000000de473
uuid_00000000000de471:
	push %RBP
	mov -3464(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3568(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de46e
	jmp uuid_00000000000de470
uuid_00000000000de46e:
	movb $1, -3536(%rbp)
uuid_00000000000de470:
	mov -3560(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de473:
	mov -3552(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de476:
	mov -3544(%RBP),%RSP
	add $-3568, %RSP
	mov -3536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de477
	jmp uuid_00000000000de479
uuid_00000000000de477:
	movb $1, -3136(%rbp)
uuid_00000000000de479:
	mov -3456(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de47c:
	mov -3152(%RBP),%RSP
	add $-3568, %RSP
uuid_00000000000de47f:
	mov -3144(%RBP),%RSP
	add $-3568, %RSP
	mov -3136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de58b
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -3648(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4a6
	jmp uuid_00000000000de4a8
uuid_00000000000de4a6:
	push %RBP
	mov -3640(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de4a3
	jmp uuid_00000000000de4a5
uuid_00000000000de4a3:
	push %RBP
	mov -3632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3824(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de49d
	jmp uuid_00000000000de49f
uuid_00000000000de49d:
	push %RBP
	mov -3816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de49a
	jmp uuid_00000000000de49c
uuid_00000000000de49a:
	push %RBP
	mov -3808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4000(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de494
	jmp uuid_00000000000de496
uuid_00000000000de494:
	push %RBP
	mov -3992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de491
	jmp uuid_00000000000de493
uuid_00000000000de491:
	push %RBP
	mov -3984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de48b
	jmp uuid_00000000000de48d
uuid_00000000000de48b:
	push %RBP
	jmp uuid_00000000000de488
	jmp uuid_00000000000de48a
uuid_00000000000de488:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	pushq $uuid_00000000000db0b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de485
	jmp uuid_00000000000de487
uuid_00000000000de485:
	movb $1, -4184(%rbp)
uuid_00000000000de487:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de48a:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de48d:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de48e
	jmp uuid_00000000000de490
uuid_00000000000de48e:
	movb $1, -4008(%rbp)
uuid_00000000000de490:
	mov -4104(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de493:
	mov -4024(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de496:
	mov -4016(%RBP),%RSP
	add $-4216, %RSP
	mov -4008(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de497
	jmp uuid_00000000000de499
uuid_00000000000de497:
	movb $1, -3832(%rbp)
uuid_00000000000de499:
	mov -3928(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de49c:
	mov -3848(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de49f:
	mov -3840(%RBP),%RSP
	add $-4216, %RSP
	mov -3832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4a0
	jmp uuid_00000000000de4a2
uuid_00000000000de4a0:
	movb $1, -3656(%rbp)
uuid_00000000000de4a2:
	mov -3752(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de4a5:
	mov -3672(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000de4a8:
	mov -3664(%RBP),%RSP
	add $-4216, %RSP
	mov -3656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de588
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4d7
	jmp uuid_00000000000de4d9
uuid_00000000000de4d7:
	push %RBP
	mov -4288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de4d4
	jmp uuid_00000000000de4d6
uuid_00000000000de4d4:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4ce
	jmp uuid_00000000000de4d0
uuid_00000000000de4ce:
	push %RBP
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq -4464(%RBP)
	jmp uuid_00000000000de4cb
	jmp uuid_00000000000de4cd
uuid_00000000000de4cb:
	push %RBP
	mov -4440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4c8
	jmp uuid_00000000000de4ca
uuid_00000000000de4c8:
	push %RBP
	mov -4432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq $0
	push %RBP
	mov -4752(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4c2
	jmp uuid_00000000000de4c4
uuid_00000000000de4c2:
	push %RBP
	jmp uuid_00000000000de4bf
	jmp uuid_00000000000de4c1
uuid_00000000000de4bf:
	push %RBP
	mov -4688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de4bc
	jmp uuid_00000000000de4be
uuid_00000000000de4bc:
	movb $1, -4760(%rbp)
uuid_00000000000de4be:
	mov -4784(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de4c1:
	mov -4776(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de4c4:
	mov -4768(%RBP),%RSP
	add $-4792, %RSP
	mov -4760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4c5
	jmp uuid_00000000000de4c7
uuid_00000000000de4c5:
	movb $1, -4480(%rbp)
uuid_00000000000de4c7:
	mov -4608(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de4ca:
	mov -4528(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de4cd:
	mov -4496(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de4d0:
	mov -4488(%RBP),%RSP
	add $-4792, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4d1
	jmp uuid_00000000000de4d3
uuid_00000000000de4d1:
	movb $1, -4304(%rbp)
uuid_00000000000de4d3:
	mov -4400(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de4d6:
	mov -4320(%RBP),%RSP
	add $-4792, %RSP
uuid_00000000000de4d9:
	mov -4312(%RBP),%RSP
	add $-4792, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de585
	push %RBP
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq $0
	push %RBP
	mov -4872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de505
	jmp uuid_00000000000de507
uuid_00000000000de505:
	push %RBP
	mov -4864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de502
	jmp uuid_00000000000de504
uuid_00000000000de502:
	push %RBP
	mov -4856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de4ff
	jmp uuid_00000000000de501
uuid_00000000000de4ff:
	movb $1, -4880(%rbp)
uuid_00000000000de501:
	mov -4976(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000de504:
	mov -4896(%RBP),%RSP
	add $-5048, %RSP
uuid_00000000000de507:
	mov -4888(%RBP),%RSP
	add $-5048, %RSP
	mov -4880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de582
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de581
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de584
uuid_00000000000de582:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de57e
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $3
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de57b
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de57d
uuid_00000000000de57b:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -280(%rbp)
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -5184(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov -5152(%RBP), %RAX
	push %RAX
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de57d:
	mov -5064(%RBP),%RSP
	add $-5368, %RSP
	jmp uuid_00000000000de580
uuid_00000000000de57e:
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5208(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de50e
	jmp uuid_00000000000de510
uuid_00000000000de50e:
	push %RBP
	jmp uuid_00000000000de50b
	jmp uuid_00000000000de50d
uuid_00000000000de50b:
	push %RBP
	mov -5144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de508
	jmp uuid_00000000000de50a
uuid_00000000000de508:
	movb $1, -5216(%rbp)
uuid_00000000000de50a:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de50d:
	mov -5232(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de510:
	mov -5224(%RBP),%RSP
	add $-5248, %RSP
	mov -5216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de578
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5328(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de538
	jmp uuid_00000000000de53a
uuid_00000000000de538:
	push %RBP
	mov -5320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5424(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de526
	jmp uuid_00000000000de528
uuid_00000000000de526:
	push %RBP
	mov -5416(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5520(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de514
	jmp uuid_00000000000de516
uuid_00000000000de514:
	push %RBP
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	jmp uuid_00000000000de511
	jmp uuid_00000000000de513
uuid_00000000000de511:
	movb $1, -5528(%rbp)
uuid_00000000000de513:
	mov -5544(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000de516:
	mov -5536(%RBP),%RSP
	add $-5568, %RSP
	mov -5528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de523
	jmp uuid_00000000000de525
uuid_00000000000de523:
	push %RBP
	mov -5408(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5648(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de51d
	jmp uuid_00000000000de51f
uuid_00000000000de51d:
	push %RBP
	jmp uuid_00000000000de51a
	jmp uuid_00000000000de51c
uuid_00000000000de51a:
	push %RBP
	mov -5584(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de517
	jmp uuid_00000000000de519
uuid_00000000000de517:
	movb $1, -5656(%rbp)
uuid_00000000000de519:
	mov -5680(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de51c:
	mov -5672(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de51f:
	mov -5664(%RBP),%RSP
	add $-5688, %RSP
	mov -5656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de520
	jmp uuid_00000000000de522
uuid_00000000000de520:
	movb $1, -5432(%rbp)
uuid_00000000000de522:
	mov -5576(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de525:
	mov -5448(%RBP),%RSP
	add $-5688, %RSP
uuid_00000000000de528:
	mov -5440(%RBP),%RSP
	add $-5688, %RSP
	mov -5432(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de535
	jmp uuid_00000000000de537
uuid_00000000000de535:
	push %RBP
	mov -5312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5768(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de52f
	jmp uuid_00000000000de531
uuid_00000000000de52f:
	push %RBP
	jmp uuid_00000000000de52c
	jmp uuid_00000000000de52e
uuid_00000000000de52c:
	push %RBP
	mov -5704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5808(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de529
	jmp uuid_00000000000de52b
uuid_00000000000de529:
	movb $1, -5776(%rbp)
uuid_00000000000de52b:
	mov -5800(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de52e:
	mov -5792(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de531:
	mov -5784(%RBP),%RSP
	add $-5808, %RSP
	mov -5776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de532
	jmp uuid_00000000000de534
uuid_00000000000de532:
	movb $1, -5336(%rbp)
uuid_00000000000de534:
	mov -5696(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de537:
	mov -5352(%RBP),%RSP
	add $-5808, %RSP
uuid_00000000000de53a:
	mov -5344(%RBP),%RSP
	add $-5808, %RSP
	mov -5336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de575
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -5888(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de541
	jmp uuid_00000000000de543
uuid_00000000000de541:
	push %RBP
	jmp uuid_00000000000de53e
	jmp uuid_00000000000de540
uuid_00000000000de53e:
	push %RBP
	mov -5824(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de53b
	jmp uuid_00000000000de53d
uuid_00000000000de53b:
	movb $1, -5896(%rbp)
uuid_00000000000de53d:
	mov -5920(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000de540:
	mov -5912(%RBP),%RSP
	add $-5928, %RSP
uuid_00000000000de543:
	mov -5904(%RBP),%RSP
	add $-5928, %RSP
	mov -5896(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de572
	push %RBP
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq $0
	push %RBP
	mov -6008(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de56b
	jmp uuid_00000000000de56d
uuid_00000000000de56b:
	push %RBP
	mov -6000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6104(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de559
	jmp uuid_00000000000de55b
uuid_00000000000de559:
	push %RBP
	mov -6096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6200(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de547
	jmp uuid_00000000000de549
uuid_00000000000de547:
	push %RBP
	pushq -6176(%RBP)
	pushq -6184(%RBP)
	pushq -6192(%RBP)
	jmp uuid_00000000000de544
	jmp uuid_00000000000de546
uuid_00000000000de544:
	movb $1, -6208(%rbp)
uuid_00000000000de546:
	mov -6224(%RBP),%RSP
	add $-6248, %RSP
uuid_00000000000de549:
	mov -6216(%RBP),%RSP
	add $-6248, %RSP
	mov -6208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de556
	jmp uuid_00000000000de558
uuid_00000000000de556:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6328(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de550
	jmp uuid_00000000000de552
uuid_00000000000de550:
	push %RBP
	jmp uuid_00000000000de54d
	jmp uuid_00000000000de54f
uuid_00000000000de54d:
	push %RBP
	mov -6264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de54a
	jmp uuid_00000000000de54c
uuid_00000000000de54a:
	movb $1, -6336(%rbp)
uuid_00000000000de54c:
	mov -6360(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de54f:
	mov -6352(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de552:
	mov -6344(%RBP),%RSP
	add $-6368, %RSP
	mov -6336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de553
	jmp uuid_00000000000de555
uuid_00000000000de553:
	movb $1, -6112(%rbp)
uuid_00000000000de555:
	mov -6256(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de558:
	mov -6128(%RBP),%RSP
	add $-6368, %RSP
uuid_00000000000de55b:
	mov -6120(%RBP),%RSP
	add $-6368, %RSP
	mov -6112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de568
	jmp uuid_00000000000de56a
uuid_00000000000de568:
	push %RBP
	mov -5992(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de562
	jmp uuid_00000000000de564
uuid_00000000000de562:
	push %RBP
	jmp uuid_00000000000de55f
	jmp uuid_00000000000de561
uuid_00000000000de55f:
	push %RBP
	mov -6384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6488(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de55c
	jmp uuid_00000000000de55e
uuid_00000000000de55c:
	movb $1, -6456(%rbp)
uuid_00000000000de55e:
	mov -6480(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de561:
	mov -6472(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de564:
	mov -6464(%RBP),%RSP
	add $-6488, %RSP
	mov -6456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de565
	jmp uuid_00000000000de567
uuid_00000000000de565:
	movb $1, -6016(%rbp)
uuid_00000000000de567:
	mov -6376(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de56a:
	mov -6032(%RBP),%RSP
	add $-6488, %RSP
uuid_00000000000de56d:
	mov -6024(%RBP),%RSP
	add $-6488, %RSP
	mov -6016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de56f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de56e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de571
uuid_00000000000de56f:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -6368(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de571:
	mov -5936(%RBP),%RSP
	add $-6488, %RSP
	jmp uuid_00000000000de574
uuid_00000000000de572:
#call function compile-constructor : Arrow<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5928(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_constructor_CL_ArrowFragmentConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	push -368(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de574:
	mov -5816(%RBP),%RSP
	add $-5928, %RSP
	jmp uuid_00000000000de577
uuid_00000000000de575:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5688(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de577:
	mov -5256(%RBP),%RSP
	add $-5808, %RSP
	jmp uuid_00000000000de57a
uuid_00000000000de578:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -5248(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de57a:
	mov -5136(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de580:
	mov -5056(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000de584:
	mov -4800(%RBP),%RSP
	add $-5248, %RSP
	jmp uuid_00000000000de587
uuid_00000000000de585:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -280(%RBP), %RAX
	mov -4824(%RBP), %R14
	subq %R14,%RAX
	push %RAX
#call function fragment::local-variable : Arrow<Cons<I64,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4832(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4fc
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	pushq $0
	pushq $0
	pushq $3
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq $0
	push %RBP
	mov -5168(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4ef
	jmp uuid_00000000000de4f1
uuid_00000000000de4ef:
	push %RBP
	jmp uuid_00000000000de4ec
	jmp uuid_00000000000de4ee
uuid_00000000000de4ec:
	push %RBP
	mov -5152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4e6
	jmp uuid_00000000000de4e8
uuid_00000000000de4e6:
	push %RBP
	jmp uuid_00000000000de4e3
	jmp uuid_00000000000de4e5
uuid_00000000000de4e3:
	push %RBP
	jmp uuid_00000000000de4e0
	jmp uuid_00000000000de4e2
uuid_00000000000de4e0:
	push %RBP
	mov -5232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de4dd
	jmp uuid_00000000000de4df
uuid_00000000000de4dd:
	movb $1, -5280(%rbp)
uuid_00000000000de4df:
	mov -5312(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de4e2:
	mov -5304(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de4e5:
	mov -5296(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de4e8:
	mov -5288(%RBP),%RSP
	add $-5384, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4e9
	jmp uuid_00000000000de4eb
uuid_00000000000de4e9:
	movb $1, -5176(%rbp)
uuid_00000000000de4eb:
	mov -5200(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de4ee:
	mov -5192(%RBP),%RSP
	add $-5384, %RSP
uuid_00000000000de4f1:
	mov -5184(%RBP),%RSP
	add $-5384, %RSP
	mov -5176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de4f6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de4f5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de4f8
uuid_00000000000de4f6:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db1fb
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -5480(%RBP)
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4f2
	jmp uuid_00000000000de4f4
uuid_00000000000de4f2:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db1fb
	pushq $0
	pushq $0
	pushq $3
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -5712(%rbp)
	pushq -5720(%rbp)
	pushq $uuid_00000000000db7b8
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -5016(%RBP)
	popq -5008(%RBP)
	popq -5000(%RBP)
uuid_00000000000de4f4:
	mov -5568(%RBP),%RSP
	add $-5720, %RSP
uuid_00000000000de4f8:
	mov -5096(%RBP),%RSP
	add $-5720, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000db1fb
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de4f9
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de4f9
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de4fa
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4824(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de4fb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de4fe
uuid_00000000000de4fc:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de4da
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000dd25d
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de307
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de4db
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000de4dc
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de4fe:
	mov -4992(%RBP),%RSP
	add $-4992, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4832(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de587:
	mov -4224(%RBP),%RSP
	add $-4992, %RSP
	jmp uuid_00000000000de58a
uuid_00000000000de588:
	mov -280(%RBP), %RAX
	mov $-8, %R14
	addq %R14,%RAX
	push %RAX
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de4a9
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -4464(%RBP), %RAX
	push %RAX
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4aa
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4464(%RBP), %RAX
	push %RAX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
	jmp uuid_00000000000de4ac
uuid_00000000000de4aa:
uuid_00000000000de4ac:
	mov -4544(%RBP),%RSP
	add $-4544, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4528(%RBP)
	popq -4520(%RBP)
	popq -4512(%RBP)
	popq -4504(%RBP)
	popq -4496(%RBP)
	popq -4488(%RBP)
	popq -4480(%RBP)
	popq -4472(%RBP)
	popq -4464(%RBP)
	popq -4456(%RBP)
	popq -4448(%RBP)
	popq -4440(%RBP)
	popq -4432(%RBP)
	popq -4424(%RBP)
	popq -4416(%RBP)
	popq -4408(%RBP)
	popq -4400(%RBP)
	popq -4392(%RBP)
	popq -4384(%RBP)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4344(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov -4312(%RBP), %RAX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4ad
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -4664(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4632(%RBP), %RAX
	push %RAX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	jmp uuid_00000000000de4af
uuid_00000000000de4ad:
uuid_00000000000de4af:
	mov -4704(%RBP),%RSP
	add $-4704, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
	push %RBP
#call function is-never : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_never_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de4b0
	jmp uuid_00000000000de4b2
uuid_00000000000de4b0:
#call function never-as-expr-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call never_SB_as_SB_expr_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4696(%RBP)
	popq -4688(%RBP)
	popq -4680(%RBP)
	popq -4672(%RBP)
	popq -4664(%RBP)
	popq -4656(%RBP)
	popq -4648(%RBP)
	popq -4640(%RBP)
	popq -4632(%RBP)
	popq -4624(%RBP)
	popq -4616(%RBP)
	popq -4608(%RBP)
	popq -4600(%RBP)
	popq -4592(%RBP)
	popq -4584(%RBP)
	popq -4576(%RBP)
	popq -4568(%RBP)
	popq -4560(%RBP)
	popq -4552(%RBP)
uuid_00000000000de4b2:
	mov -4712(%RBP),%RSP
	add $-4712, %RSP
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq $uuid_00000000000de4b3
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4224(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq $uuid_00000000000de4b4
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	pushq $uuid_00000000000de4b5
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de4b6
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -4864(%RBP)
	popq -4856(%RBP)
	popq -4848(%RBP)
	popq -4840(%RBP)
	popq -4832(%RBP)
	popq -4824(%RBP)
	popq -4816(%RBP)
	popq -4808(%RBP)
	popq -4800(%RBP)
	popq -4792(%RBP)
	popq -4784(%RBP)
	popq -4776(%RBP)
	popq -4768(%RBP)
	popq -4760(%RBP)
	popq -4752(%RBP)
	popq -4744(%RBP)
	popq -4736(%RBP)
	popq -4728(%RBP)
	popq -4720(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de4b7
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de4b6
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	pushq -4776(%rbp)
	pushq -4784(%rbp)
	pushq -4792(%rbp)
	pushq -4800(%rbp)
	pushq -4808(%rbp)
	pushq -4816(%rbp)
	pushq -4824(%rbp)
	pushq -4832(%rbp)
	pushq -4840(%rbp)
	pushq -4848(%rbp)
	pushq -4856(%rbp)
	pushq -4864(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dab05
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd9ab
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de07a
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dab08
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	pushq -4696(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de4b6
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dd9ab
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de4b8
	pushq -4872(%rbp)
	pushq -4880(%rbp)
	pushq -4888(%rbp)
	pushq -280(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -4496(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -4536(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de4b9
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de4bb
uuid_00000000000de4b9:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de4bb:
	mov -4896(%RBP),%RSP
	add $-4896, %RSP
uuid_00000000000de58a:
	mov -3576(%RBP),%RSP
	add $-4896, %RSP
	jmp uuid_00000000000de58d
uuid_00000000000de58b:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	pushq -3424(%rbp)
	pushq -3432(%rbp)
	pushq -3440(%rbp)
	pushq -3448(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de482
	jmp uuid_00000000000de484
uuid_00000000000de482:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de480
	pushq $2
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de481
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000ddb7d
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de484:
	mov -3576(%RBP),%RSP
	add $-3576, %RSP
uuid_00000000000de58d:
	mov -3056(%RBP),%RSP
	add $-3576, %RSP
	jmp uuid_00000000000de590
uuid_00000000000de58e:
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3056(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dc1cc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db5ed
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac7c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Type,Array<Type,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t2 : Arrow<Cons<String,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db238
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dab01
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call t2_CL_ArrowTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_TypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3064(%rbp)
	pushq -3072(%rbp)
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de590:
	mov -2712(%RBP),%RSP
	add $-3080, %RSP
	jmp uuid_00000000000de593
uuid_00000000000de591:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de444
	push %RBP
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de441
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de443
uuid_00000000000de441:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -2800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de41c
	jmp uuid_00000000000de41e
uuid_00000000000de41c:
	push %RBP
	mov -2792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de413
	jmp uuid_00000000000de415
uuid_00000000000de413:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de40a
	jmp uuid_00000000000de40c
uuid_00000000000de40a:
	push %RBP
	mov -2920(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2992(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de407
	jmp uuid_00000000000de409
uuid_00000000000de407:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	mov -3024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de404
	jmp uuid_00000000000de406
uuid_00000000000de404:
	movb $1, -2936(%rbp)
uuid_00000000000de406:
	mov -3000(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de409:
	mov -2952(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de40c:
	mov -2944(%RBP),%RSP
	add $-3024, %RSP
	mov -2936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de410
	jmp uuid_00000000000de412
uuid_00000000000de410:
	push %RBP
	jmp uuid_00000000000de40d
	jmp uuid_00000000000de40f
uuid_00000000000de40d:
	movb $1, -2872(%rbp)
uuid_00000000000de40f:
	mov -3032(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de412:
	mov -2888(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de415:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de419
	jmp uuid_00000000000de41b
uuid_00000000000de419:
	push %RBP
	mov -2784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de416
	jmp uuid_00000000000de418
uuid_00000000000de416:
	movb $1, -2808(%rbp)
uuid_00000000000de418:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de41b:
	mov -2824(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de41e:
	mov -2816(%RBP),%RSP
	add $-3048, %RSP
	mov -2808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de43e
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de437
	jmp uuid_00000000000de439
uuid_00000000000de437:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de42e
	jmp uuid_00000000000de430
uuid_00000000000de42e:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de425
	jmp uuid_00000000000de427
uuid_00000000000de425:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de422
	jmp uuid_00000000000de424
uuid_00000000000de422:
	push %RBP
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	jmp uuid_00000000000de41f
	jmp uuid_00000000000de421
uuid_00000000000de41f:
	movb $1, -3216(%rbp)
uuid_00000000000de421:
	mov -3280(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de424:
	mov -3232(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de427:
	mov -3224(%RBP),%RSP
	add $-3304, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de42b
	jmp uuid_00000000000de42d
uuid_00000000000de42b:
	push %RBP
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de428
	jmp uuid_00000000000de42a
uuid_00000000000de428:
	movb $1, -3152(%rbp)
uuid_00000000000de42a:
	mov -3312(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de42d:
	mov -3168(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de430:
	mov -3160(%RBP),%RSP
	add $-3336, %RSP
	mov -3152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de434
	jmp uuid_00000000000de436
uuid_00000000000de434:
	push %RBP
	mov -3064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3352(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de431
	jmp uuid_00000000000de433
uuid_00000000000de431:
	movb $1, -3088(%rbp)
uuid_00000000000de433:
	mov -3344(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de436:
	mov -3104(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de439:
	mov -3096(%RBP),%RSP
	add $-3352, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de43b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de43a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de43d
uuid_00000000000de43b:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db1ad
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3288(%rbp)
	pushq -3296(%rbp)
	pushq -3304(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -280(%RBP), %RAX
	subq %R14,%RAX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -3360(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de43d:
	mov -3056(%RBP),%RSP
	add $-3360, %RSP
	jmp uuid_00000000000de440
uuid_00000000000de43e:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de440:
	mov -2776(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de443:
	mov -2744(%RBP),%RSP
	add $-3048, %RSP
	jmp uuid_00000000000de446
uuid_00000000000de444:
	push %RBP
#call function is-array : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	mov %RBX, %RBP
	call is_SB_array_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de401
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db164
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de403
uuid_00000000000de401:
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -2800(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3dc
	jmp uuid_00000000000de3de
uuid_00000000000de3dc:
	push %RBP
	mov -2792(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3d3
	jmp uuid_00000000000de3d5
uuid_00000000000de3d3:
	push %RBP
	mov -2856(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3ca
	jmp uuid_00000000000de3cc
uuid_00000000000de3ca:
	push %RBP
	mov -2920(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -2992(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3c7
	jmp uuid_00000000000de3c9
uuid_00000000000de3c7:
	push %RBP
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	mov -3024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3c4
	jmp uuid_00000000000de3c6
uuid_00000000000de3c4:
	movb $1, -2936(%rbp)
uuid_00000000000de3c6:
	mov -3000(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de3c9:
	mov -2952(%RBP),%RSP
	add $-3024, %RSP
uuid_00000000000de3cc:
	mov -2944(%RBP),%RSP
	add $-3024, %RSP
	mov -2936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3d0
	jmp uuid_00000000000de3d2
uuid_00000000000de3d0:
	push %RBP
	jmp uuid_00000000000de3cd
	jmp uuid_00000000000de3cf
uuid_00000000000de3cd:
	movb $1, -2872(%rbp)
uuid_00000000000de3cf:
	mov -3032(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de3d2:
	mov -2888(%RBP),%RSP
	add $-3032, %RSP
uuid_00000000000de3d5:
	mov -2880(%RBP),%RSP
	add $-3032, %RSP
	mov -2872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3d9
	jmp uuid_00000000000de3db
uuid_00000000000de3d9:
	push %RBP
	mov -2784(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3048(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de3d6
	jmp uuid_00000000000de3d8
uuid_00000000000de3d6:
	movb $1, -2808(%rbp)
uuid_00000000000de3d8:
	mov -3040(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de3db:
	mov -2824(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de3de:
	mov -2816(%RBP),%RSP
	add $-3048, %RSP
	mov -2808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3fe
	push %RBP
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	pushq $0
	push %RBP
	mov -3080(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3f7
	jmp uuid_00000000000de3f9
uuid_00000000000de3f7:
	push %RBP
	mov -3072(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3ee
	jmp uuid_00000000000de3f0
uuid_00000000000de3ee:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3e5
	jmp uuid_00000000000de3e7
uuid_00000000000de3e5:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3e2
	jmp uuid_00000000000de3e4
uuid_00000000000de3e2:
	push %RBP
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	jmp uuid_00000000000de3df
	jmp uuid_00000000000de3e1
uuid_00000000000de3df:
	movb $1, -3216(%rbp)
uuid_00000000000de3e1:
	mov -3280(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de3e4:
	mov -3232(%RBP),%RSP
	add $-3304, %RSP
uuid_00000000000de3e7:
	mov -3224(%RBP),%RSP
	add $-3304, %RSP
	mov -3216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3eb
	jmp uuid_00000000000de3ed
uuid_00000000000de3eb:
	push %RBP
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de3e8
	jmp uuid_00000000000de3ea
uuid_00000000000de3e8:
	movb $1, -3152(%rbp)
uuid_00000000000de3ea:
	mov -3312(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de3ed:
	mov -3168(%RBP),%RSP
	add $-3336, %RSP
uuid_00000000000de3f0:
	mov -3160(%RBP),%RSP
	add $-3336, %RSP
	mov -3152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3f4
	jmp uuid_00000000000de3f6
uuid_00000000000de3f4:
	push %RBP
	mov -3064(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3352(%rbp)
	pushq $uuid_00000000000dacdb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de3f1
	jmp uuid_00000000000de3f3
uuid_00000000000de3f1:
	movb $1, -3088(%rbp)
uuid_00000000000de3f3:
	mov -3344(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de3f6:
	mov -3104(%RBP),%RSP
	add $-3352, %RSP
uuid_00000000000de3f9:
	mov -3096(%RBP),%RSP
	add $-3352, %RSP
	mov -3088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de3fb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de3fa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de3fd
uuid_00000000000de3fb:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db164
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de3fd:
	mov -3056(%RBP),%RSP
	add $-3352, %RSP
	jmp uuid_00000000000de400
uuid_00000000000de3fe:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2520(%rbp)
	pushq -2528(%rbp)
	pushq -2536(%rbp)
	pushq -2544(%rbp)
	pushq -2552(%rbp)
	pushq -2560(%rbp)
	pushq -2568(%rbp)
	pushq -2576(%rbp)
	pushq -2584(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de400:
	mov -2776(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de403:
	mov -2744(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de446:
	mov -2736(%RBP),%RSP
	add $-3048, %RSP
uuid_00000000000de593:
	mov -2416(%RBP),%RSP
	add $-3048, %RSP
	jmp uuid_00000000000de596
uuid_00000000000de594:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de596:
	mov -2120(%RBP),%RSP
	add $-2408, %RSP
	jmp uuid_00000000000de599
uuid_00000000000de597:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1992(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db09c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dadca
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000db7b8
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de599:
	mov -1784(%RBP),%RSP
	add $-2288, %RSP
	jmp uuid_00000000000de59c
uuid_00000000000de59a:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1656(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db09c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
#call function fragment::label : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_label_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de59c:
	mov -1448(%RBP),%RSP
	add $-1776, %RSP
	jmp uuid_00000000000de59f
uuid_00000000000de59d:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de59f:
	mov -928(%RBP),%RSP
	add $-1440, %RSP
	jmp uuid_00000000000de5a2
uuid_00000000000de5a0:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-string : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_string_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de346
	pushq $0
	push %RBP
#call function is-reg8 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg8_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de2fb
	jmp uuid_00000000000de2fd
uuid_00000000000de2fb:
	movb $1, -960(%rbp)
uuid_00000000000de2fd:
	mov -968(%RBP),%RSP
	add $-968, %RSP
	push %RBP
#call function is-reg16 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg16_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de2fe
	jmp uuid_00000000000de300
uuid_00000000000de2fe:
	movb $1, -960(%rbp)
uuid_00000000000de300:
	mov -976(%RBP),%RSP
	add $-976, %RSP
	push %RBP
#call function is-reg32 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg32_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de301
	jmp uuid_00000000000de303
uuid_00000000000de301:
	movb $1, -960(%rbp)
uuid_00000000000de303:
	mov -984(%RBP),%RSP
	add $-984, %RSP
	push %RBP
#call function is-reg64 : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call is_SB_reg64_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de304
	jmp uuid_00000000000de306
uuid_00000000000de304:
	movb $1, -960(%rbp)
uuid_00000000000de306:
	mov -992(%RBP),%RSP
	add $-992, %RSP
	push %RBP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de343
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function class-of-tag : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call class_SB_of_SB_tag_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de340
	pushq -920(%rbp)
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1032(%rbp)
	pushq $uuid_00000000000de30b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de33a
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1048(%rbp)
	pushq $uuid_00000000000de30c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de337
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	pushq $uuid_00000000000de30d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de334
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq $uuid_00000000000dad7d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de331
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq $uuid_00000000000de30f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de32e
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%rbp)
	pushq $uuid_00000000000de311
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de32b
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1128(%rbp)
	pushq $uuid_00000000000de313
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de328
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq $uuid_00000000000de315
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de325
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq $uuid_00000000000de317
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de322
	push %RBP
	pushq -1016(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1176(%rbp)
	pushq $uuid_00000000000de319
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de31f
	push %RBP
	jmp uuid_00000000000de31c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de31b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de31e
uuid_00000000000de31c:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de31e:
	mov -1184(%RBP),%RSP
	add $-1184, %RSP
	jmp uuid_00000000000de321
uuid_00000000000de31f:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de31a
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de321:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
	jmp uuid_00000000000de324
uuid_00000000000de322:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de318
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de324:
	mov -1152(%RBP),%RSP
	add $-1160, %RSP
	jmp uuid_00000000000de327
uuid_00000000000de325:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de316
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de327:
	mov -1136(%RBP),%RSP
	add $-1144, %RSP
	jmp uuid_00000000000de32a
uuid_00000000000de328:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de314
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de32a:
	mov -1120(%RBP),%RSP
	add $-1128, %RSP
	jmp uuid_00000000000de32d
uuid_00000000000de32b:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de312
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de32d:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
	jmp uuid_00000000000de330
uuid_00000000000de32e:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de310
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de330:
	mov -1088(%RBP),%RSP
	add $-1096, %RSP
	jmp uuid_00000000000de333
uuid_00000000000de331:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de30e
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de333:
	mov -1072(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000de336
uuid_00000000000de334:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dab02
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de336:
	mov -1056(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000de339
uuid_00000000000de337:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daac1
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de339:
	mov -1040(%RBP),%RSP
	add $-1048, %RSP
	jmp uuid_00000000000de33c
uuid_00000000000de33a:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daafa
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de33c:
	mov -1024(%RBP),%RSP
	add $-1032, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de33d
	jmp uuid_00000000000de33f
uuid_00000000000de33d:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa6e
	pushq $2
	pushq $0
	pushq -920(%rbp)
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000daa70
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de33f:
	mov -1040(%RBP),%RSP
	add $-1040, %RSP
	jmp uuid_00000000000de342
uuid_00000000000de340:
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de308
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000db7b8
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de30a
uuid_00000000000de308:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de307
	pushq $2
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de225
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1016(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000de226
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de30a:
	mov -1024(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000de342:
	mov -1008(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000de345
uuid_00000000000de343:
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de345:
	mov -1000(%RBP),%RSP
	add $-1000, %RSP
	jmp uuid_00000000000de348
uuid_00000000000de346:
#call function compile-declare-cstring : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -920(%rbp)
	mov %RBX, %RBP
	call compile_SB_declare_SB_cstring_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de348:
	mov -952(%RBP),%RSP
	add $-952, %RSP
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de5a2:
	mov -808(%RBP),%RSP
	add $-952, %RSP
	jmp uuid_00000000000de5a5
uuid_00000000000de5a3:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -800(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de5a5:
	mov -688(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000de5a8
uuid_00000000000de5a6:
uuid_00000000000de5a8:
	mov -608(%RBP),%RSP
	add $-680, %RSP
	jmp uuid_00000000000de5ab
uuid_00000000000de5a9:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
	pushq $uuid_00000000000de2e8
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de5ab:
	mov -528(%RBP),%RSP
	add $-600, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -288(%rbp)
	push %RBP
	pushq -456(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5b0
	push %RBP
	jmp uuid_00000000000de5ad
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de5ac
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de5af
uuid_00000000000de5ad:
#call function compile-expr-direct : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_expr_SB_direct_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de5af:
	mov -480(%RBP),%RSP
	add $-480, %RSP
	jmp uuid_00000000000de5b2
uuid_00000000000de5b0:
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000db27a
	pushq $0
	pushq $0
	pushq $3
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de5b2:
	mov -464(%RBP),%RSP
	add $-472, %RSP
	subq $152, %rsp
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
compile_SB_global_CL_ArrowNilConsASTConsStringFContext:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -296(%rbp)
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5ba
	push %RBP
	pushq -296(%rbp)
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5b7
	push %RBP
	pushq -296(%rbp)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5b4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de5b3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de5b6
uuid_00000000000de5b4:
#call function compile-global-gnu : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_gnu_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de5b6:
	mov -336(%RBP),%RSP
	add $-344, %RSP
	jmp uuid_00000000000de5b9
uuid_00000000000de5b7:
#call function compile-global-blob : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_blob_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de5b9:
	mov -320(%RBP),%RSP
	add $-328, %RSP
	jmp uuid_00000000000de5bc
uuid_00000000000de5ba:
#call function compile-global-c : Arrow<Cons<Cons<FContext,String>,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_global_SB_c_CL_ArrowNilConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de5bc:
	mov -304(%RBP),%RSP
	add $-312, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_c_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5c6
	jmp uuid_00000000000de5c8
uuid_00000000000de5c6:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000de5c3
	jmp uuid_00000000000de5c5
uuid_00000000000de5c3:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de5c0
	jmp uuid_00000000000de5c2
uuid_00000000000de5c0:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de5bd
	jmp uuid_00000000000de5bf
uuid_00000000000de5bd:
	movb $1, -472(%rbp)
uuid_00000000000de5bf:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de5c2:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de5c5:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de5c8:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de606
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5ff
	jmp uuid_00000000000de601
uuid_00000000000de5ff:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5ed
	jmp uuid_00000000000de5ef
uuid_00000000000de5ed:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5e4
	jmp uuid_00000000000de5e6
uuid_00000000000de5e4:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000de5e1
	jmp uuid_00000000000de5e3
uuid_00000000000de5e1:
	movb $1, -952(%rbp)
uuid_00000000000de5e3:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000de5e6:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5ea
	jmp uuid_00000000000de5ec
uuid_00000000000de5ea:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de5e7
	jmp uuid_00000000000de5e9
uuid_00000000000de5e7:
	movb $1, -856(%rbp)
uuid_00000000000de5e9:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000de5ec:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000de5ef:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5fc
	jmp uuid_00000000000de5fe
uuid_00000000000de5fc:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5f6
	jmp uuid_00000000000de5f8
uuid_00000000000de5f6:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000de5f3
	jmp uuid_00000000000de5f5
uuid_00000000000de5f3:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5f0
	jmp uuid_00000000000de5f2
uuid_00000000000de5f0:
	movb $1, -1160(%rbp)
uuid_00000000000de5f2:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de5f5:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de5f8:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de5f9
	jmp uuid_00000000000de5fb
uuid_00000000000de5f9:
	movb $1, -760(%rbp)
uuid_00000000000de5fb:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de5fe:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de601:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de603
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de602
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de605
uuid_00000000000de603:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq $0
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd25d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de4db
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd25d
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_global_SB_initializer_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_global_SB_initializer_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000de605:
	mov -680(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000de608
uuid_00000000000de606:
	push %RBP
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de5de
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000de5c9
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq $uuid_00000000000dd027
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5ca
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -872(%rbp)
	jmp uuid_00000000000de5cc
uuid_00000000000de5ca:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	pushq $3
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
uuid_00000000000de5cc:
	mov -880(%RBP),%RSP
	add $-880, %RSP
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $0
	pushq $3
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5ce
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	jmp uuid_00000000000de5d0
uuid_00000000000de5ce:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5cd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de5d0:
	mov -960(%RBP),%RSP
	add $-960, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -872(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa6e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5d1
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_header_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5d2
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	jmp uuid_00000000000de5d4
uuid_00000000000de5d2:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5cd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de5d4:
	mov -968(%RBP),%RSP
	add $-968, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa6f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -872(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa6e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function compile-c-function-args : Arrow<Cons<FContext,AST>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov %RBX, %RBP
	call compile_SB_c_SB_function_SB_args_CL_ArrowSConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -304(%RSP)
	push -304(%RSP)
	push -304(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5d5
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5d6
	jmp uuid_00000000000de5d8
uuid_00000000000de5d6:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_global_SB_initializer_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de5d8:
	mov -976(%RBP),%RSP
	add $-976, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de5da
	jmp uuid_00000000000de5dc
uuid_00000000000de5da:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5d9
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
uuid_00000000000de5dc:
	mov -984(%RBP),%RSP
	add $-984, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de5dd
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000de5e0
uuid_00000000000de5de:
uuid_00000000000de5e0:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000de608:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_blob_CL_ArrowNilConsASTConsStringFContext:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de609
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_global_SB_gnu_CL_ArrowNilConsASTConsStringFContext:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -464(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de613
	jmp uuid_00000000000de615
uuid_00000000000de613:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000de610
	jmp uuid_00000000000de612
uuid_00000000000de610:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de60d
	jmp uuid_00000000000de60f
uuid_00000000000de60d:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de60a
	jmp uuid_00000000000de60c
uuid_00000000000de60a:
	movb $1, -472(%rbp)
uuid_00000000000de60c:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de60f:
	mov -520(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de612:
	mov -488(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de615:
	mov -480(%RBP),%RSP
	add $-672, %RSP
	mov -472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de659
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de651
	jmp uuid_00000000000de653
uuid_00000000000de651:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de63f
	jmp uuid_00000000000de641
uuid_00000000000de63f:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -944(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de636
	jmp uuid_00000000000de638
uuid_00000000000de636:
	push %RBP
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	jmp uuid_00000000000de633
	jmp uuid_00000000000de635
uuid_00000000000de633:
	movb $1, -952(%rbp)
uuid_00000000000de635:
	mov -968(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000de638:
	mov -960(%RBP),%RSP
	add $-992, %RSP
	mov -952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de63c
	jmp uuid_00000000000de63e
uuid_00000000000de63c:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de639
	jmp uuid_00000000000de63b
uuid_00000000000de639:
	movb $1, -856(%rbp)
uuid_00000000000de63b:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000de63e:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000de641:
	mov -864(%RBP),%RSP
	add $-1072, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de64e
	jmp uuid_00000000000de650
uuid_00000000000de64e:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de648
	jmp uuid_00000000000de64a
uuid_00000000000de648:
	push %RBP
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	jmp uuid_00000000000de645
	jmp uuid_00000000000de647
uuid_00000000000de645:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1248(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de642
	jmp uuid_00000000000de644
uuid_00000000000de642:
	movb $1, -1160(%rbp)
uuid_00000000000de644:
	mov -1240(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de647:
	mov -1176(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de64a:
	mov -1168(%RBP),%RSP
	add $-1248, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de64b
	jmp uuid_00000000000de64d
uuid_00000000000de64b:
	movb $1, -760(%rbp)
uuid_00000000000de64d:
	mov -1080(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de650:
	mov -776(%RBP),%RSP
	add $-1248, %RSP
uuid_00000000000de653:
	mov -768(%RBP),%RSP
	add $-1248, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de656
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de655
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de658
uuid_00000000000de656:
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -1280(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de654
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daa93
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	pushq -208(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq $7
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
#call function ascript-normal : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffc
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_SB_normal_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile-stack-calls : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000daffd
	pushq $0
	pushq $0
	pushq $3
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $-8
	pushq $4
	mov %RBX, %RBP
	call compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
	push -376(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq $uuid_00000000000db7b8
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_init_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000de658:
	mov -680(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000de65b
uuid_00000000000de659:
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de630
#call function domain : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call domain_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function compile-destructure-args : Arrow<Cons<Cons<Cons<Type,FContext>,AST>,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	mov %RBX, %RBP
	call compile_SB_destructure_SB_args_CL_ArrowFContextConsI64ConsASTConsFContextType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $uuid_00000000000de5c9
	pushq $0
	pushq $0
	pushq $3
#call function fragment::expression : Arrow<String,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq $0
	mov -720(%RBP), %RAX
	mov $8, %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
	mov -720(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	movq %RAX, -720(%rbp)
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -720(%rbp)
	pushq $1
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq $0
	pushq $0
	pushq $3
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000dd027
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de61d
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	jmp uuid_00000000000de61f
uuid_00000000000de61d:
	mov $main_SB_with_CL_U8, %r15
	movb $1, 0(%r15)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	push %RBP
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de61a
	push %RBP
	jmp uuid_00000000000de617
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de616
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de619
uuid_00000000000de617:
	mov $main_SB_with_SB_argv_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000de619:
	mov -1064(%RBP),%RSP
	add $-1064, %RSP
	jmp uuid_00000000000de61c
uuid_00000000000de61a:
uuid_00000000000de61c:
	mov -984(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd027
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
uuid_00000000000de61f:
	mov -904(%RBP),%RSP
	add $-1056, %RSP
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dadca
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	push %RBP
	mov $config_SB_profile_SB_invocations_CL_U8, %RAX
	mov 0(%RAX), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de62b
	jmp uuid_00000000000de62d
uuid_00000000000de62b:
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	pushq $0
	pushq $uuid_00000000000de620
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de621
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de622
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de623
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_data_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de624
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de625
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de626
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_profile_SB_onexit_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de624
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de625
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de627
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de628
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq $0
	pushq $uuid_00000000000de629
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000de62a
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov $assemble_SB_profile_SB_onexit_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
uuid_00000000000de62d:
	mov -1064(%RBP),%RSP
	add $-1088, %RSP
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $uuid_00000000000db7b8
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dcffa
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de62e
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -712(%RBP), %RAX
	mov $8, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de4fb
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de62f
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov $assemble_SB_text_SB_section_CL_SS, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	jmp uuid_00000000000de632
uuid_00000000000de630:
uuid_00000000000de632:
	mov -680(%RBP),%RSP
	add $-680, %RSP
uuid_00000000000de65b:
	mov -392(%RBP),%RSP
	add $-680, %RSP
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext:
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de65c
	movq -384(%rbp), %r15
	movq %r15, -488(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -480(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -472(%rbp)
	jmp uuid_00000000000de65e
uuid_00000000000de65c:
uuid_00000000000de65e:
	mov -496(%RBP),%RSP
	add $-496, %RSP
	push %RBP
#call function is-stack-variable : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call is_SB_stack_SB_variable_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de65f
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000de227
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -704(%RBP)
	popq -696(%RBP)
	popq -688(%RBP)
	popq -680(%RBP)
	popq -672(%RBP)
	popq -664(%RBP)
	popq -656(%RBP)
	popq -648(%RBP)
	popq -640(%RBP)
	popq -632(%RBP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq $uuid_00000000000db23a
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -208(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
#call function and : Arrow<Cons<Type,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db1ae
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call and_CL_ArrowTypeConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	mov -208(%RBP), %RAX
	mov -712(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	jmp uuid_00000000000de661
uuid_00000000000de65f:
uuid_00000000000de661:
	mov -504(%RBP),%RSP
	add $-504, %RSP
	subq $152, %rsp
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $464, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	subq $152, %rsp
	pushq 152(%rsp)
	pushq 168(%rsp)
	pushq 184(%rsp)
	pushq 200(%rsp)
	pushq 216(%rsp)
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function slot : Arrow<Cons<Type,String>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call slot_CL_ArrowTypeConsStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -64(%RSP)
	push -64(%RSP)
	push -64(%RSP)
	push %RBP
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq $0
	push %RBP
	mov -512(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de67a
	jmp uuid_00000000000de67c
uuid_00000000000de67a:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de671
	jmp uuid_00000000000de673
uuid_00000000000de671:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de668
	jmp uuid_00000000000de66a
uuid_00000000000de668:
	push %RBP
	mov -632(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de665
	jmp uuid_00000000000de667
uuid_00000000000de665:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000de662
	jmp uuid_00000000000de664
uuid_00000000000de662:
	movb $1, -648(%rbp)
uuid_00000000000de664:
	mov -712(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000de667:
	mov -664(%RBP),%RSP
	add $-736, %RSP
uuid_00000000000de66a:
	mov -656(%RBP),%RSP
	add $-736, %RSP
	mov -648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de66e
	jmp uuid_00000000000de670
uuid_00000000000de66e:
	push %RBP
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	jmp uuid_00000000000de66b
	jmp uuid_00000000000de66d
uuid_00000000000de66b:
	movb $1, -584(%rbp)
uuid_00000000000de66d:
	mov -744(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000de670:
	mov -600(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000de673:
	mov -592(%RBP),%RSP
	add $-768, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de677
	jmp uuid_00000000000de679
uuid_00000000000de677:
	push %RBP
	mov -496(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -784(%rbp)
	pushq $uuid_00000000000daffe
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de674
	jmp uuid_00000000000de676
uuid_00000000000de674:
	movb $1, -520(%rbp)
uuid_00000000000de676:
	mov -776(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000de679:
	mov -536(%RBP),%RSP
	add $-784, %RSP
uuid_00000000000de67c:
	mov -528(%RBP),%RSP
	add $-784, %RSP
	mov -520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de6a3
	push %RBP
	jmp uuid_00000000000de6a0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de69f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de6a2
uuid_00000000000de6a0:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de69c
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de699
	jmp uuid_00000000000de69b
uuid_00000000000de699:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de696
	jmp uuid_00000000000de698
uuid_00000000000de696:
	pushq $uuid_00000000000db228
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db228
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db279
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de698:
	mov -848(%RBP),%RSP
	add $-920, %RSP
uuid_00000000000de69b:
	mov -816(%RBP),%RSP
	add $-920, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -392(%RBP), %RAX
	push %RAX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov -280(%RBP), %RAX
	mov -808(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	jmp uuid_00000000000de69e
uuid_00000000000de69c:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
uuid_00000000000de69e:
	mov -800(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000de6a2:
	mov -792(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000de6a5
uuid_00000000000de6a3:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq $0
	push %RBP
	mov -936(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de683
	jmp uuid_00000000000de685
uuid_00000000000de683:
	push %RBP
	mov -928(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de680
	jmp uuid_00000000000de682
uuid_00000000000de680:
	push %RBP
	mov -920(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de67d
	jmp uuid_00000000000de67f
uuid_00000000000de67d:
	movb $1, -944(%rbp)
uuid_00000000000de67f:
	mov -1040(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de682:
	mov -960(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de685:
	mov -952(%RBP),%RSP
	add $-1112, %RSP
	mov -944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de693
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de692
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de695
uuid_00000000000de693:
#call function compile-push-rvalue : Arrow<Cons<Cons<Cons<Cons<FContext,AST>,I64>,U64>,U64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsU64ConsU64ConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push -328(%RSP)
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de68f
	push %RBP
	mov -288(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de68c
	jmp uuid_00000000000de68e
uuid_00000000000de68c:
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push %RBP
#call function is-rc : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call is_SB_rc_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de689
	jmp uuid_00000000000de68b
uuid_00000000000de689:
	pushq $uuid_00000000000db228
#call function token::new : Arrow<String,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db228
	mov %RBX, %RBP
	call token_CL__CL_new_CL_ArrowTokenString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $7
#call function guess-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function without-representation : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call without_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call guess_SB_representation_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1304(%RBP)
	popq -1296(%RBP)
	popq -1288(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db279
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -1032(%RBP)
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
#call function ascript : Arrow<Cons<AST,Type>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	mov %RBX, %RBP
	call ascript_CL_ArrowNilConsTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000de68b:
	mov -1312(%RBP),%RSP
	add $-1384, %RSP
uuid_00000000000de68e:
	mov -1280(%RBP),%RSP
	add $-1384, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov -1200(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function compile-maybe-push-stack : Arrow<Cons<Cons<Cons<Cons<FContext,I64>,Fragment>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1472(%RBP), %RAX
	push %RAX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call compile_SB_maybe_SB_push_SB_stack_CL_ArrowFragmentConsASTConsTypeConsFragmentConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	push -488(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov -280(%RBP), %RAX
	mov -1544(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -1536(%RBP)
	popq -1528(%RBP)
	popq -1520(%RBP)
	popq -1512(%RBP)
	popq -1504(%RBP)
	popq -1496(%RBP)
	popq -1488(%RBP)
	popq -1480(%RBP)
	popq -1472(%RBP)
	popq -1464(%RBP)
	popq -1456(%RBP)
	popq -1448(%RBP)
	popq -1440(%RBP)
	popq -1432(%RBP)
	popq -1424(%RBP)
	popq -1416(%RBP)
	popq -1408(%RBP)
	popq -1400(%RBP)
	popq -1392(%RBP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	jmp uuid_00000000000de691
uuid_00000000000de68f:
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov -1200(%RBP), %RAX
	push %RAX
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	push %RBP
	mov -296(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000de686
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000daeae
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	jmp uuid_00000000000de688
uuid_00000000000de686:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	pushq $0
	pushq $uuid_00000000000daeae
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
uuid_00000000000de688:
	mov -1432(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000de691:
	mov -1272(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000de695:
	mov -864(%RBP),%RSP
	add $-1432, %RSP
uuid_00000000000de6a5:
	mov -488(%RBP),%RSP
	add $-1432, %RSP
	subq $152, %rsp
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $304, %rsp
	ret
compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de6aa
	push %RBP
	jmp uuid_00000000000de6a7
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de6a6
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de6a9
uuid_00000000000de6a7:
#call function compile-push-rvalue : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call compile_SB_push_SB_rvalue_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
uuid_00000000000de6a9:
	mov -600(%RBP),%RSP
	add $-600, %RSP
	jmp uuid_00000000000de6ac
uuid_00000000000de6aa:
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dac47
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
uuid_00000000000de6ac:
	mov -520(%RBP),%RSP
	add $-592, %RSP
	subq $152, %rsp
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $288, %rsp
	ret
compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push %RBP
#call function is-blob : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call is_SB_blob_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6c4
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6ad
	jmp uuid_00000000000de6af
uuid_00000000000de6ad:
	pushq $4
	popq -472(%RBP)
uuid_00000000000de6af:
	mov -872(%RBP),%RSP
	add $-872, %RSP
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $0
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6b0
	jmp uuid_00000000000de6b2
uuid_00000000000de6b0:
	pushq $4
	popq -472(%RBP)
uuid_00000000000de6b2:
	mov -880(%RBP),%RSP
	add $-880, %RSP
#call function compile-stack-call-push-args : Arrow<Cons<Cons<FContext,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_SB_push_SB_args_CL_ArrowFragmentConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
	push -312(%RSP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de6b3
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1032(%RBP)
	popq -1024(%RBP)
	popq -1016(%RBP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	pushq $0
	pushq $0
	pushq $3
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -360(%rbp)
	push %RBP
#call function is-ffi : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call is_SB_ffi_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6b4
#call function mangle-identifier : Arrow<Cons<String,Type>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	mov %RBX, %RBP
	call mangle_SB_identifier_CL_ArrowStringConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -1224(%rbp)
	jmp uuid_00000000000de6b6
uuid_00000000000de6b4:
uuid_00000000000de6b6:
	mov -1232(%RBP),%RSP
	add $-1232, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000de6b7
	pushq $0
	pushq -1224(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000de6b8
	pushq $0
	pushq -360(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000de6b9
	pushq $0
#call function to-string : Arrow<Type,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000de4b5
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1064(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000de6ba
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function sizeof-type : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call sizeof_SB_type_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq $uuid_00000000000de6bb
	pushq $0
#call function to-string : Arrow<IsUsed,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringIsUsed
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de4b6
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de4b7
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de4b6
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de6bc
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-blob : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,I64>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de6bd
#call function t3 : Arrow<Cons<Cons<String,Type>,Type>,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daffe
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de4b6
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	mov %RBX, %RBP
	call t3_CL_ArrowTypeConsTypeConsTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq -464(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	push -344(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	push %RBP
	mov -1064(%RBP), %RAX
	mov $8, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de6c1
	jmp uuid_00000000000de6c3
uuid_00000000000de6c1:
	push %RBP
#call function is : Arrow<Cons<Sized<8>,Sized<8>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -472(%rbp)
	pushq $4
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized8Sized8
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6be
	jmp uuid_00000000000de6c0
uuid_00000000000de6be:
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov -464(%RBP), %RAX
	mov -1064(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000de6c0:
	mov -1272(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000de6c3:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
#call function denormalize : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call denormalize_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
	jmp uuid_00000000000de6c6
uuid_00000000000de6c4:
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -360(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
	popq -816(%RBP)
	popq -808(%RBP)
	popq -800(%RBP)
	popq -792(%RBP)
	popq -784(%RBP)
	popq -776(%RBP)
	popq -768(%RBP)
	popq -760(%RBP)
	popq -752(%RBP)
	popq -744(%RBP)
	popq -736(%RBP)
	popq -728(%RBP)
	popq -720(%RBP)
	popq -712(%RBP)
uuid_00000000000de6c6:
	mov -864(%RBP),%RSP
	add $-864, %RSP
	subq $152, %rsp
	pushq -856(%rbp)
	pushq -848(%rbp)
	pushq -840(%rbp)
	pushq -832(%rbp)
	pushq -824(%rbp)
	pushq -816(%rbp)
	pushq -808(%rbp)
	pushq -800(%rbp)
	pushq -792(%rbp)
	pushq -784(%rbp)
	pushq -776(%rbp)
	pushq -768(%rbp)
	pushq -760(%rbp)
	pushq -752(%rbp)
	pushq -744(%rbp)
	pushq -736(%rbp)
	pushq -728(%rbp)
	pushq -720(%rbp)
	pushq -712(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $480, %rsp
	ret
compile_SB_stack_SB_calls_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsTypeConsStringFContext:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment-context::lookups : Arrow<Cons<Cons<Cons<Cons<FContext,String>,Type>,Type>,AST>,List<Fragment>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookups_CL_ArrowListFragmentConsASTConsTypeConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used168
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	push -360(%RSP)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
uuid_00000000000de6d7:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6d8
	jmp uuid_00000000000de6d9
uuid_00000000000de6d8:
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	push %RBP
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	push %RBP
	mov -1184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de6cd
	jmp uuid_00000000000de6cf
uuid_00000000000de6cd:
	push %RBP
	mov -1176(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de6ca
	jmp uuid_00000000000de6cc
uuid_00000000000de6ca:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	jmp uuid_00000000000de6c7
	jmp uuid_00000000000de6c9
uuid_00000000000de6c7:
	movb $1, -1192(%rbp)
uuid_00000000000de6c9:
	mov -1384(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000de6cc:
	mov -1208(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000de6cf:
	mov -1200(%RBP),%RSP
	add $-1536, %RSP
	mov -1192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de6d4
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de6d3
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de6d6
uuid_00000000000de6d4:
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6d0
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	jmp uuid_00000000000de6d2
uuid_00000000000de6d0:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
#call function compile-stack-call : Arrow<Cons<Cons<Cons<Cons<Cons<Cons<FContext,Fragment>,String>,Type>,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -208(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	mov %RBX, %RBP
	call compile_SB_stack_SB_call_CL_ArrowFragmentConsIsUsedConsI64ConsASTConsTypeConsStringConsFragmentFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	push -504(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
uuid_00000000000de6d2:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	movq -1376(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1368(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1360(%rbp), %r15
	movq %r15, -824(%rbp)
	movq -1352(%rbp), %r15
	movq %r15, -816(%rbp)
	movq -1344(%rbp), %r15
	movq %r15, -808(%rbp)
	movq -1336(%rbp), %r15
	movq %r15, -800(%rbp)
	movq -1328(%rbp), %r15
	movq %r15, -792(%rbp)
	movq -1320(%rbp), %r15
	movq %r15, -784(%rbp)
	movq -1312(%rbp), %r15
	movq %r15, -776(%rbp)
	movq -1304(%rbp), %r15
	movq %r15, -768(%rbp)
	movq -1296(%rbp), %r15
	movq %r15, -760(%rbp)
	movq -1288(%rbp), %r15
	movq %r15, -752(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -744(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -736(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -728(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -720(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -712(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -704(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -696(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -688(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -680(%rbp)
uuid_00000000000de6d6:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000de6d7
uuid_00000000000de6d9:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	subq $152, %rsp
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $352, %rsp
	ret
translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov -624(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de704
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -832(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de6e6
	jmp uuid_00000000000de6e8
uuid_00000000000de6e6:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	jmp uuid_00000000000de6e3
	jmp uuid_00000000000de6e5
uuid_00000000000de6e3:
	push %RBP
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	jmp uuid_00000000000de6e0
	jmp uuid_00000000000de6e2
uuid_00000000000de6e0:
	push %RBP
	mov -648(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de6dd
	jmp uuid_00000000000de6df
uuid_00000000000de6dd:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de6da
	jmp uuid_00000000000de6dc
uuid_00000000000de6da:
	movb $1, -840(%rbp)
uuid_00000000000de6dc:
	mov -1064(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000de6df:
	mov -1048(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000de6e2:
	mov -1016(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000de6e5:
	mov -856(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000de6e8:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
	mov -840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de701
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de700
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de703
uuid_00000000000de701:
#call function translate-local-variables : Arrow<Cons<FContext,I64>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call translate_SB_local_SB_variables_CL_ArrowFContextConsI64FContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	push -240(%RSP)
	popq -1264(%RBP)
	popq -1256(%RBP)
	popq -1248(%RBP)
	popq -1240(%RBP)
	popq -1232(%RBP)
	popq -1224(%RBP)
	popq -1216(%RBP)
	popq -1208(%RBP)
	popq -1200(%RBP)
	popq -1192(%RBP)
	popq -1184(%RBP)
	popq -1176(%RBP)
	popq -1168(%RBP)
	popq -1160(%RBP)
	popq -1152(%RBP)
	popq -1144(%RBP)
	popq -1136(%RBP)
	popq -1128(%RBP)
	popq -1120(%RBP)
	popq -1112(%RBP)
	popq -1104(%RBP)
	popq -1096(%RBP)
	popq -1088(%RBP)
	popq -1080(%RBP)
	popq -1072(%RBP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000dd02b
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq $0
	push %RBP
	mov -1320(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de6ec
	jmp uuid_00000000000de6ee
uuid_00000000000de6ec:
	push %RBP
	mov -1312(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1352(%rbp)
	pushq $uuid_00000000000db45d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de6e9
	jmp uuid_00000000000de6eb
uuid_00000000000de6e9:
	movb $1, -1328(%rbp)
uuid_00000000000de6eb:
	mov -1344(%RBP),%RSP
	add $-1352, %RSP
uuid_00000000000de6ee:
	mov -1336(%RBP),%RSP
	add $-1352, %RSP
	mov -1328(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de6fd
	push %RBP
	jmp uuid_00000000000de6fa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de6f9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de6fc
uuid_00000000000de6fa:
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de6fc:
	mov -1360(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000de6ff
uuid_00000000000de6fd:
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push %RBP
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq $0
	push %RBP
	mov -1408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de6f2
	jmp uuid_00000000000de6f4
uuid_00000000000de6f2:
	push %RBP
	mov -1400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de6ef
	jmp uuid_00000000000de6f1
uuid_00000000000de6ef:
	movb $1, -1416(%rbp)
uuid_00000000000de6f1:
	mov -1432(%RBP),%RSP
	add $-1440, %RSP
uuid_00000000000de6f4:
	mov -1424(%RBP),%RSP
	add $-1440, %RSP
	mov -1416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de6f6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de6f5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de6f8
uuid_00000000000de6f6:
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1440(%rbp)
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -1448(%RBP), %RAX
	mov -208(%RBP), %R14
	addq %R14,%RAX
	push %RAX
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1456(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -1008(%RBP)
	popq -1000(%RBP)
	popq -992(%RBP)
	popq -984(%RBP)
	popq -976(%RBP)
	popq -968(%RBP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
	popq -888(%RBP)
	popq -880(%RBP)
	popq -872(%RBP)
	popq -864(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1056(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de6f8:
	mov -1384(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000de6ff:
	mov -1296(%RBP),%RSP
	add $-1456, %RSP
uuid_00000000000de703:
	mov -632(%RBP),%RSP
	add $-1456, %RSP
	jmp uuid_00000000000de706
uuid_00000000000de704:
uuid_00000000000de706:
	mov -424(%RBP),%RSP
	add $-624, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $216, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	push %RBP
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de710
	jmp uuid_00000000000de712
uuid_00000000000de710:
	push %RBP
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000de70d
	jmp uuid_00000000000de70f
uuid_00000000000de70d:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de70a
	jmp uuid_00000000000de70c
uuid_00000000000de70a:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de707
	jmp uuid_00000000000de709
uuid_00000000000de707:
	movb $1, -760(%rbp)
uuid_00000000000de709:
	mov -888(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000de70c:
	mov -808(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000de70f:
	mov -776(%RBP),%RSP
	add $-960, %RSP
uuid_00000000000de712:
	mov -768(%RBP),%RSP
	add $-960, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de718
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de717
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de71a
uuid_00000000000de718:
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $global_SB_ctx_CL_FContextFContext, %r15
	pushq 192(%r15)
	pushq 184(%r15)
	pushq 176(%r15)
	pushq 168(%r15)
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	mov -968(%RBP), %RAX
	movq %RAX, -288(%rbp)
	pushq -976(%RBP)
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	pushq -1008(%RBP)
	pushq -1016(%RBP)
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	pushq -1064(%RBP)
	pushq -1072(%RBP)
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	pushq -1104(%RBP)
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	pushq -1136(%RBP)
	pushq -1144(%RBP)
	pushq -1152(%RBP)
	pushq -1160(%RBP)
	pushq -1168(%RBP)
	pushq -1176(%RBP)
	pushq -1184(%RBP)
	pushq -1192(%RBP)
	pushq -1200(%RBP)
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000db27a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de714
	jmp uuid_00000000000de716
uuid_00000000000de714:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000de5c9
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq $uuid_00000000000de5c9
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de713
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -1992(%RBP)
	popq -1984(%RBP)
	popq -1976(%RBP)
	popq -1968(%RBP)
	popq -1960(%RBP)
	popq -1952(%RBP)
	popq -1944(%RBP)
	popq -1936(%RBP)
	popq -1928(%RBP)
	popq -1920(%RBP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
	popq -1840(%RBP)
	popq -1832(%RBP)
	popq -1824(%RBP)
	popq -1816(%RBP)
	popq -1808(%RBP)
	popq -1800(%RBP)
uuid_00000000000de716:
	mov -2000(%RBP),%RSP
	add $-2152, %RSP
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
uuid_00000000000de71a:
	mov -680(%RBP),%RSP
	add $-2224, %RSP
	subq $152, %rsp
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
cc_SB_blob_CL_ArrowFragmentConsASTConsI64ConsTypeConsStringFContext:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq $0
	push %RBP
	mov -776(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de724
	jmp uuid_00000000000de726
uuid_00000000000de724:
	push %RBP
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	jmp uuid_00000000000de721
	jmp uuid_00000000000de723
uuid_00000000000de721:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de71e
	jmp uuid_00000000000de720
uuid_00000000000de71e:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de71b
	jmp uuid_00000000000de71d
uuid_00000000000de71b:
	movb $1, -784(%rbp)
uuid_00000000000de71d:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000de720:
	mov -832(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000de723:
	mov -800(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000de726:
	mov -792(%RBP),%RSP
	add $-984, %RSP
	mov -784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de728
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de727
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de72a
uuid_00000000000de728:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
#call function range : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call range_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -624(%RBP)
	popq -616(%RBP)
	popq -608(%RBP)
	popq -600(%RBP)
	popq -592(%RBP)
	popq -584(%RBP)
	popq -576(%RBP)
	popq -568(%RBP)
	popq -560(%RBP)
	popq -552(%RBP)
	popq -544(%RBP)
	popq -536(%RBP)
	popq -528(%RBP)
	popq -520(%RBP)
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
uuid_00000000000de72a:
	mov -704(%RBP),%RSP
	add $-1056, %RSP
	subq $152, %rsp
	pushq -624(%rbp)
	pushq -616(%rbp)
	pushq -608(%rbp)
	pushq -600(%rbp)
	pushq -592(%rbp)
	pushq -584(%rbp)
	pushq -576(%rbp)
	pushq -568(%rbp)
	pushq -560(%rbp)
	pushq -552(%rbp)
	pushq -544(%rbp)
	pushq -536(%rbp)
	pushq -528(%rbp)
	pushq -520(%rbp)
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $320, %rsp
	ret
cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext:
	pushq -552(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de75b
	jmp uuid_00000000000de75d
uuid_00000000000de75b:
	push %RBP
	mov -712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de752
	jmp uuid_00000000000de754
uuid_00000000000de752:
	push %RBP
	mov -808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de740
	jmp uuid_00000000000de742
uuid_00000000000de740:
	push %RBP
	mov -904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1008(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de72e
	jmp uuid_00000000000de730
uuid_00000000000de72e:
	push %RBP
	pushq -984(%RBP)
	pushq -992(%RBP)
	pushq -1000(%RBP)
	jmp uuid_00000000000de72b
	jmp uuid_00000000000de72d
uuid_00000000000de72b:
	movb $1, -1016(%rbp)
uuid_00000000000de72d:
	mov -1032(%RBP),%RSP
	add $-1056, %RSP
uuid_00000000000de730:
	mov -1024(%RBP),%RSP
	add $-1056, %RSP
	mov -1016(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de73d
	jmp uuid_00000000000de73f
uuid_00000000000de73d:
	push %RBP
	mov -896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1136(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de737
	jmp uuid_00000000000de739
uuid_00000000000de737:
	push %RBP
	jmp uuid_00000000000de734
	jmp uuid_00000000000de736
uuid_00000000000de734:
	push %RBP
	mov -1072(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de731
	jmp uuid_00000000000de733
uuid_00000000000de731:
	movb $1, -1144(%rbp)
uuid_00000000000de733:
	mov -1168(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000de736:
	mov -1160(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000de739:
	mov -1152(%RBP),%RSP
	add $-1176, %RSP
	mov -1144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de73a
	jmp uuid_00000000000de73c
uuid_00000000000de73a:
	movb $1, -920(%rbp)
uuid_00000000000de73c:
	mov -1064(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000de73f:
	mov -936(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000de742:
	mov -928(%RBP),%RSP
	add $-1176, %RSP
	mov -920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de74f
	jmp uuid_00000000000de751
uuid_00000000000de74f:
	push %RBP
	mov -800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de749
	jmp uuid_00000000000de74b
uuid_00000000000de749:
	push %RBP
	jmp uuid_00000000000de746
	jmp uuid_00000000000de748
uuid_00000000000de746:
	push %RBP
	mov -1192(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de743
	jmp uuid_00000000000de745
uuid_00000000000de743:
	movb $1, -1264(%rbp)
uuid_00000000000de745:
	mov -1288(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000de748:
	mov -1280(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000de74b:
	mov -1272(%RBP),%RSP
	add $-1296, %RSP
	mov -1264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de74c
	jmp uuid_00000000000de74e
uuid_00000000000de74c:
	movb $1, -824(%rbp)
uuid_00000000000de74e:
	mov -1184(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000de751:
	mov -840(%RBP),%RSP
	add $-1296, %RSP
uuid_00000000000de754:
	mov -832(%RBP),%RSP
	add $-1296, %RSP
	mov -824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de758
	jmp uuid_00000000000de75a
uuid_00000000000de758:
	push %RBP
	mov -704(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de755
	jmp uuid_00000000000de757
uuid_00000000000de755:
	movb $1, -728(%rbp)
uuid_00000000000de757:
	mov -1304(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000de75a:
	mov -744(%RBP),%RSP
	add $-1376, %RSP
uuid_00000000000de75d:
	mov -736(%RBP),%RSP
	add $-1376, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7ec
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq $0
	push %RBP
	mov -1456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7bf
	jmp uuid_00000000000de7c1
uuid_00000000000de7bf:
	push %RBP
	mov -1448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7ad
	jmp uuid_00000000000de7af
uuid_00000000000de7ad:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1648(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de79b
	jmp uuid_00000000000de79d
uuid_00000000000de79b:
	push %RBP
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	jmp uuid_00000000000de798
	jmp uuid_00000000000de79a
uuid_00000000000de798:
	movb $1, -1656(%rbp)
uuid_00000000000de79a:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000de79d:
	mov -1664(%RBP),%RSP
	add $-1696, %RSP
	mov -1656(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7aa
	jmp uuid_00000000000de7ac
uuid_00000000000de7aa:
	push %RBP
	mov -1536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7a4
	jmp uuid_00000000000de7a6
uuid_00000000000de7a4:
	push %RBP
	jmp uuid_00000000000de7a1
	jmp uuid_00000000000de7a3
uuid_00000000000de7a1:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de79e
	jmp uuid_00000000000de7a0
uuid_00000000000de79e:
	movb $1, -1784(%rbp)
uuid_00000000000de7a0:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000de7a3:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000de7a6:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7a7
	jmp uuid_00000000000de7a9
uuid_00000000000de7a7:
	movb $1, -1560(%rbp)
uuid_00000000000de7a9:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000de7ac:
	mov -1576(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000de7af:
	mov -1568(%RBP),%RSP
	add $-1816, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7bc
	jmp uuid_00000000000de7be
uuid_00000000000de7bc:
	push %RBP
	mov -1440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7b6
	jmp uuid_00000000000de7b8
uuid_00000000000de7b6:
	push %RBP
	jmp uuid_00000000000de7b3
	jmp uuid_00000000000de7b5
uuid_00000000000de7b3:
	push %RBP
	mov -1832(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1936(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7b0
	jmp uuid_00000000000de7b2
uuid_00000000000de7b0:
	movb $1, -1904(%rbp)
uuid_00000000000de7b2:
	mov -1928(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000de7b5:
	mov -1920(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000de7b8:
	mov -1912(%RBP),%RSP
	add $-1936, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7b9
	jmp uuid_00000000000de7bb
uuid_00000000000de7b9:
	movb $1, -1464(%rbp)
uuid_00000000000de7bb:
	mov -1824(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000de7be:
	mov -1480(%RBP),%RSP
	add $-1936, %RSP
uuid_00000000000de7c1:
	mov -1472(%RBP),%RSP
	add $-1936, %RSP
	mov -1464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7e9
	push %RBP
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7e6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de7e5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de7e8
uuid_00000000000de7e6:
uuid_00000000000de7e8:
	mov -1944(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000de7eb
uuid_00000000000de7e9:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7e2
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7df
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7d9
	jmp uuid_00000000000de7db
uuid_00000000000de7d9:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de7db:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7dc
	jmp uuid_00000000000de7de
uuid_00000000000de7dc:
	mov -2048(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de7de:
	mov -2120(%RBP),%RSP
	add $-2120, %RSP
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000de7e1
uuid_00000000000de7df:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7d6
	jmp uuid_00000000000de7d8
uuid_00000000000de7d6:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de7d8:
	mov -1960(%RBP),%RSP
	add $-1960, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2080(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de7e1:
	mov -1952(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000de7e4
uuid_00000000000de7e2:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq $0
	push %RBP
	mov -2096(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7c8
	jmp uuid_00000000000de7ca
uuid_00000000000de7c8:
	push %RBP
	mov -2088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de7c5
	jmp uuid_00000000000de7c7
uuid_00000000000de7c5:
	push %RBP
	mov -2080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de7c2
	jmp uuid_00000000000de7c4
uuid_00000000000de7c2:
	movb $1, -2104(%rbp)
uuid_00000000000de7c4:
	mov -2200(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000de7c7:
	mov -2120(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000de7ca:
	mov -2112(%RBP),%RSP
	add $-2272, %RSP
	mov -2104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de7d3
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de7d2
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de7d5
uuid_00000000000de7d3:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7cf
#call function print : Arrow<Type,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call print_CL_ArrowNilType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de7ce
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de7d1
uuid_00000000000de7cf:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1696(%RBP)
	popq -1688(%RBP)
	popq -1680(%RBP)
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de7cb
	jmp uuid_00000000000de7cd
uuid_00000000000de7cb:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de7cd:
	mov -2288(%RBP),%RSP
	add $-2288, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	mov -2408(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1816(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	pushq -2768(%RBP)
	pushq -2776(%RBP)
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	pushq -2840(%RBP)
	pushq -2848(%RBP)
	pushq -2856(%RBP)
	pushq -2872(%RBP)
	pushq -2880(%RBP)
	pushq -2888(%RBP)
	pushq -2896(%RBP)
	pushq -2904(%RBP)
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq -3056(%RBP)
	pushq -3064(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -3072(%RBP)
	pushq -3080(%RBP)
	pushq -3088(%RBP)
	pushq -3096(%RBP)
	pushq -3104(%RBP)
	pushq -3112(%RBP)
	pushq -3120(%RBP)
	pushq -3128(%RBP)
	pushq -3136(%RBP)
	pushq -3144(%RBP)
	pushq -3152(%RBP)
	pushq -3160(%RBP)
	pushq -3168(%RBP)
	pushq -3176(%RBP)
	pushq -3184(%RBP)
	pushq -3192(%RBP)
	pushq -3200(%RBP)
	pushq -3208(%RBP)
	pushq -3216(%RBP)
	pushq -3224(%RBP)
	pushq -3232(%RBP)
	pushq -3240(%RBP)
	pushq -3248(%RBP)
	pushq -3256(%RBP)
	pushq -3264(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -2448(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de7d1:
	mov -2280(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000de7d5:
	mov -2024(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000de7e4:
	mov -1944(%RBP),%RSP
	add $-3272, %RSP
uuid_00000000000de7eb:
	mov -1384(%RBP),%RSP
	add $-3272, %RSP
	jmp uuid_00000000000de7ee
uuid_00000000000de7ec:
	push %RBP
#call function is-cons : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_cons_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de792
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de78f
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de789
	jmp uuid_00000000000de78b
uuid_00000000000de789:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de78b:
	mov -1400(%RBP),%RSP
	add $-1400, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de78c
	jmp uuid_00000000000de78e
uuid_00000000000de78c:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de78e:
	mov -1560(%RBP),%RSP
	add $-1560, %RSP
	mov -1520(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000de791
uuid_00000000000de78f:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de786
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq -1464(%RBP)
	pushq -1472(%RBP)
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	pushq -1640(%RBP)
	pushq -1648(%RBP)
	pushq -1656(%RBP)
	pushq -1664(%RBP)
	pushq -1672(%RBP)
	pushq -1680(%RBP)
	pushq -1688(%RBP)
	pushq -1696(%RBP)
	pushq -1704(%RBP)
	pushq -1712(%RBP)
	pushq -1720(%RBP)
	pushq -1728(%RBP)
	pushq -1736(%RBP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1408(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000de788
uuid_00000000000de786:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de780
	jmp uuid_00000000000de782
uuid_00000000000de780:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de782:
	mov -1408(%RBP),%RSP
	add $-1408, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de783
	jmp uuid_00000000000de785
uuid_00000000000de783:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de785:
	mov -1568(%RBP),%RSP
	add $-1568, %RSP
	mov -1528(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de788:
	mov -1400(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000de791:
	mov -1392(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000de794
uuid_00000000000de792:
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	push %RBP
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq $0
	push %RBP
	mov -1536(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de764
	jmp uuid_00000000000de766
uuid_00000000000de764:
	push %RBP
	mov -1528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de761
	jmp uuid_00000000000de763
uuid_00000000000de761:
	push %RBP
	mov -1520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de75e
	jmp uuid_00000000000de760
uuid_00000000000de75e:
	movb $1, -1544(%rbp)
uuid_00000000000de760:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000de763:
	mov -1560(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000de766:
	mov -1552(%RBP),%RSP
	add $-1712, %RSP
	mov -1544(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de77d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de77c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de77f
uuid_00000000000de77d:
	push %RBP
#call function is-vararg : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_vararg_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de779
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de770
	jmp uuid_00000000000de772
uuid_00000000000de770:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de772:
	mov -1728(%RBP),%RSP
	add $-1728, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-impure-offset : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_impure_SB_offset_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de773
	jmp uuid_00000000000de775
uuid_00000000000de773:
	mov -1816(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de775:
	mov -1888(%RBP),%RSP
	add $-1888, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de776
	jmp uuid_00000000000de778
uuid_00000000000de776:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de778:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1848(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000de77b
uuid_00000000000de779:
#call function get-vararg-inner : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call get_SB_vararg_SB_inner_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	popq -1056(%RBP)
	popq -1048(%RBP)
	popq -1040(%RBP)
	push %RBP
#call function can-unify : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call can_SB_unify_CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de76d
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1744(%RBP)
	pushq -1752(%RBP)
	pushq -1760(%RBP)
	pushq -1768(%RBP)
	pushq -1776(%RBP)
	pushq -1784(%RBP)
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2320(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1736(%RBP), %RAX
	movq %RAX, -552(%rbp)
	jmp uuid_00000000000de76f
uuid_00000000000de76d:
	push %RBP
#call function is-open : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_open_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de767
	jmp uuid_00000000000de769
uuid_00000000000de767:
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000de769:
	mov -1736(%RBP),%RSP
	add $-1736, %RSP
#call function compile-expr : Arrow<Cons<Cons<Cons<FContext,AST>,I64>,IsUsed>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -552(%rbp)
	pushq $4
	mov %RBX, %RBP
	call compile_SB_expr_CL_ArrowFragmentConsIsUsedConsI64ConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de76a
	jmp uuid_00000000000de76c
uuid_00000000000de76a:
#call function sizeof-aligned : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call sizeof_SB_aligned_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %R14
	mov -552(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de76c:
	mov -1896(%RBP),%RSP
	add $-1896, %RSP
	mov -1856(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
#call function bind-vararg : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1176(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call bind_SB_vararg_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function cc-args : Arrow<Cons<Cons<Cons<Cons<FContext,FContext>,AST>,AST>,I64>,Tuple<I64,Tuple<FContext,FContext>>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -552(%rbp)
	mov %RBX, %RBP
	call cc_SB_args_CL_ArrowTupleTupleFContextFContextI64ConsI64ConsASTConsASTConsFContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used424
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	push -584(%RSP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	pushq -2016(%RBP)
	pushq -2024(%RBP)
	pushq -2032(%RBP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	pushq -2096(%RBP)
	pushq -2104(%RBP)
	pushq -2112(%RBP)
	pushq -2120(%RBP)
	pushq -2128(%RBP)
	pushq -2136(%RBP)
	pushq -2144(%RBP)
	pushq -2152(%RBP)
	pushq -2160(%RBP)
	pushq -2168(%RBP)
	pushq -2176(%RBP)
	pushq -2184(%RBP)
	pushq -2192(%RBP)
	pushq -2200(%RBP)
	pushq -2208(%RBP)
	pushq -2216(%RBP)
	pushq -2224(%RBP)
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	pushq -2288(%RBP)
	pushq -2296(%RBP)
	pushq -2304(%RBP)
	pushq -2312(%RBP)
	pushq -2328(%RBP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	pushq -2400(%RBP)
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq -2560(%RBP)
	pushq -2568(%RBP)
	pushq -2576(%RBP)
	pushq -2584(%RBP)
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	mov -1904(%RBP), %RAX
	movq %RAX, -552(%rbp)
uuid_00000000000de76f:
	mov -1728(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000de77b:
	mov -1720(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000de77f:
	mov -1464(%RBP),%RSP
	add $-2728, %RSP
uuid_00000000000de794:
	mov -1384(%RBP),%RSP
	add $-2728, %RSP
	push %RBP
#call function is-onto-stack : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	mov %RBX, %RBP
	call is_SB_onto_SB_stack_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de795
	jmp uuid_00000000000de797
uuid_00000000000de795:
	movq -568(%rbp), %r15
	movq %r15, -552(%rbp)
	mov -568(%rbp), %r15
	mov %r15, -552(%rbp)
uuid_00000000000de797:
	mov -2736(%RBP),%RSP
	add $-2736, %RSP
uuid_00000000000de7ee:
	mov -648(%RBP),%RSP
	add $-2736, %RSP
	pushq -552(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq $0
	pushq $0
	subq $424, %rsp
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	pushq 696(%rsp)
	pushq 712(%rsp)
	pushq 728(%rsp)
	pushq 744(%rsp)
	pushq 760(%rsp)
	pushq 776(%rsp)
	pushq 792(%rsp)
	pushq 808(%rsp)
	pushq 824(%rsp)
	pushq 840(%rsp)
	pushq 856(%rsp)
	pushq 872(%rsp)
	pushq 888(%rsp)
	pushq 904(%rsp)
	pushq 920(%rsp)
	pushq 936(%rsp)
	pushq 952(%rsp)
	pushq 968(%rsp)
	pushq 984(%rsp)
	pushq 1000(%rsp)
	pushq 1016(%rsp)
	pushq 1032(%rsp)
	pushq 1048(%rsp)
	pushq 1064(%rsp)
	pushq 1080(%rsp)
	pushq 1096(%rsp)
	pushq 1112(%rsp)
	pushq 1128(%rsp)
	pushq 1144(%rsp)
	pushq 1160(%rsp)
	pushq 1176(%rsp)
	pushq 1192(%rsp)
	pushq 1208(%rsp)
	pushq 1224(%rsp)
	pushq 1240(%rsp)
	pushq 1256(%rsp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	popq -640(%rbp)
	popq -648(%rbp)
	popq -656(%rbp)
	popq -664(%rbp)
	popq -672(%rbp)
	popq -680(%rbp)
	popq -688(%rbp)
	popq -696(%rbp)
	popq -704(%rbp)
	popq -712(%rbp)
	popq -720(%rbp)
	popq -728(%rbp)
	popq -736(%rbp)
	popq -744(%rbp)
	popq -752(%rbp)
	popq -760(%rbp)
	popq -768(%rbp)
	popq -776(%rbp)
	popq -784(%rbp)
	popq -792(%rbp)
	popq -800(%rbp)
	popq -808(%rbp)
	popq -816(%rbp)
	popq -824(%rbp)
	popq -832(%rbp)
	popq -840(%rbp)
	popq -848(%rbp)
	popq -856(%rbp)
	popq -864(%rbp)
	popq -872(%rbp)
	popq -880(%rbp)
	popq -888(%rbp)
	popq -896(%rbp)
	popq -904(%rbp)
	popq -912(%rbp)
	popq -920(%rbp)
	popq -928(%rbp)
	popq -936(%rbp)
	popq -944(%rbp)
	popq -952(%rbp)
	popq -960(%rbp)
	popq -968(%rbp)
	popq -976(%rbp)
	popq -984(%rbp)
	addq $424, %rsp
	mov %rbp, %rsp
	sub $560, %rsp
	ret
blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext:
	pushq $0
	pushq $0
	pushq $3
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb04
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb01
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7f5
	jmp uuid_00000000000de7f7
uuid_00000000000de7f5:
	push %RBP
	jmp uuid_00000000000de7f2
	jmp uuid_00000000000de7f4
uuid_00000000000de7f2:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de7ef
	jmp uuid_00000000000de7f1
uuid_00000000000de7ef:
	movb $1, -640(%rbp)
uuid_00000000000de7f1:
	mov -664(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de7f4:
	mov -656(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000de7f7:
	mov -648(%RBP),%RSP
	add $-672, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deafe
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de7fe
	jmp uuid_00000000000de800
uuid_00000000000de7fe:
	push %RBP
	jmp uuid_00000000000de7fb
	jmp uuid_00000000000de7fd
uuid_00000000000de7fb:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de7f8
	jmp uuid_00000000000de7fa
uuid_00000000000de7f8:
	movb $1, -760(%rbp)
uuid_00000000000de7fa:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000de7fd:
	mov -776(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000de800:
	mov -768(%RBP),%RSP
	add $-792, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deafb
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de81f
	jmp uuid_00000000000de821
uuid_00000000000de81f:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de80d
	jmp uuid_00000000000de80f
uuid_00000000000de80d:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1064(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de804
	jmp uuid_00000000000de806
uuid_00000000000de804:
	push %RBP
	pushq -1040(%RBP)
	pushq -1048(%RBP)
	pushq -1056(%RBP)
	jmp uuid_00000000000de801
	jmp uuid_00000000000de803
uuid_00000000000de801:
	movb $1, -1072(%rbp)
uuid_00000000000de803:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000de806:
	mov -1080(%RBP),%RSP
	add $-1112, %RSP
	mov -1072(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de80a
	jmp uuid_00000000000de80c
uuid_00000000000de80a:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de807
	jmp uuid_00000000000de809
uuid_00000000000de807:
	movb $1, -976(%rbp)
uuid_00000000000de809:
	mov -1120(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000de80c:
	mov -992(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000de80f:
	mov -984(%RBP),%RSP
	add $-1192, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de81c
	jmp uuid_00000000000de81e
uuid_00000000000de81c:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de816
	jmp uuid_00000000000de818
uuid_00000000000de816:
	push %RBP
	jmp uuid_00000000000de813
	jmp uuid_00000000000de815
uuid_00000000000de813:
	push %RBP
	mov -1208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1312(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de810
	jmp uuid_00000000000de812
uuid_00000000000de810:
	movb $1, -1280(%rbp)
uuid_00000000000de812:
	mov -1304(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000de815:
	mov -1296(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000de818:
	mov -1288(%RBP),%RSP
	add $-1312, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de819
	jmp uuid_00000000000de81b
uuid_00000000000de819:
	movb $1, -880(%rbp)
uuid_00000000000de81b:
	mov -1200(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000de81e:
	mov -896(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000de821:
	mov -888(%RBP),%RSP
	add $-1312, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaf8
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de840
	jmp uuid_00000000000de842
uuid_00000000000de840:
	push %RBP
	mov -1384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de82e
	jmp uuid_00000000000de830
uuid_00000000000de82e:
	push %RBP
	mov -1480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1584(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de825
	jmp uuid_00000000000de827
uuid_00000000000de825:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	jmp uuid_00000000000de822
	jmp uuid_00000000000de824
uuid_00000000000de822:
	movb $1, -1592(%rbp)
uuid_00000000000de824:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000de827:
	mov -1600(%RBP),%RSP
	add $-1632, %RSP
	mov -1592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de82b
	jmp uuid_00000000000de82d
uuid_00000000000de82b:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de828
	jmp uuid_00000000000de82a
uuid_00000000000de828:
	movb $1, -1496(%rbp)
uuid_00000000000de82a:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000de82d:
	mov -1512(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000de830:
	mov -1504(%RBP),%RSP
	add $-1712, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de83d
	jmp uuid_00000000000de83f
uuid_00000000000de83d:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de837
	jmp uuid_00000000000de839
uuid_00000000000de837:
	push %RBP
	jmp uuid_00000000000de834
	jmp uuid_00000000000de836
uuid_00000000000de834:
	push %RBP
	mov -1728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1832(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de831
	jmp uuid_00000000000de833
uuid_00000000000de831:
	movb $1, -1800(%rbp)
uuid_00000000000de833:
	mov -1824(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de836:
	mov -1816(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de839:
	mov -1808(%RBP),%RSP
	add $-1832, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de83a
	jmp uuid_00000000000de83c
uuid_00000000000de83a:
	movb $1, -1400(%rbp)
uuid_00000000000de83c:
	mov -1720(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de83f:
	mov -1416(%RBP),%RSP
	add $-1832, %RSP
uuid_00000000000de842:
	mov -1408(%RBP),%RSP
	add $-1832, %RSP
	mov -1400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaf5
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -1912(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de852
	jmp uuid_00000000000de854
uuid_00000000000de852:
	push %RBP
	mov -1904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de84f
	jmp uuid_00000000000de851
uuid_00000000000de84f:
	push %RBP
	mov -1896(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2088(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de849
	jmp uuid_00000000000de84b
uuid_00000000000de849:
	push %RBP
	jmp uuid_00000000000de846
	jmp uuid_00000000000de848
uuid_00000000000de846:
	push %RBP
	mov -2024(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2128(%rbp)
	pushq $uuid_00000000000db151
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de843
	jmp uuid_00000000000de845
uuid_00000000000de843:
	movb $1, -2096(%rbp)
uuid_00000000000de845:
	mov -2120(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000de848:
	mov -2112(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000de84b:
	mov -2104(%RBP),%RSP
	add $-2128, %RSP
	mov -2096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de84c
	jmp uuid_00000000000de84e
uuid_00000000000de84c:
	movb $1, -1920(%rbp)
uuid_00000000000de84e:
	mov -2016(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000de851:
	mov -1936(%RBP),%RSP
	add $-2128, %RSP
uuid_00000000000de854:
	mov -1928(%RBP),%RSP
	add $-2128, %RSP
	mov -1920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaf2
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -2208(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8c9
	jmp uuid_00000000000de8cb
uuid_00000000000de8c9:
	push %RBP
	mov -2200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de895
	jmp uuid_00000000000de897
uuid_00000000000de895:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de892
	jmp uuid_00000000000de894
uuid_00000000000de892:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de88c
	jmp uuid_00000000000de88e
uuid_00000000000de88c:
	push %RBP
	mov -2472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de86e
	jmp uuid_00000000000de870
uuid_00000000000de86e:
	push %RBP
	mov -2568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2672(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de85b
	jmp uuid_00000000000de85d
uuid_00000000000de85b:
	push %RBP
	jmp uuid_00000000000de858
	jmp uuid_00000000000de85a
uuid_00000000000de858:
	push %RBP
	mov -2608(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de855
	jmp uuid_00000000000de857
uuid_00000000000de855:
	movb $1, -2680(%rbp)
uuid_00000000000de857:
	mov -2704(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000de85a:
	mov -2696(%RBP),%RSP
	add $-2712, %RSP
uuid_00000000000de85d:
	mov -2688(%RBP),%RSP
	add $-2712, %RSP
	mov -2680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de86b
	jmp uuid_00000000000de86d
uuid_00000000000de86b:
	push %RBP
	mov -2560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2792(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de865
	jmp uuid_00000000000de867
uuid_00000000000de865:
	push %RBP
	jmp uuid_00000000000de862
	jmp uuid_00000000000de864
uuid_00000000000de862:
	push %RBP
	mov -2728(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2832(%rbp)
	pushq $uuid_00000000000de85e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de85f
	jmp uuid_00000000000de861
uuid_00000000000de85f:
	movb $1, -2800(%rbp)
uuid_00000000000de861:
	mov -2824(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000de864:
	mov -2816(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000de867:
	mov -2808(%RBP),%RSP
	add $-2832, %RSP
	mov -2800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de868
	jmp uuid_00000000000de86a
uuid_00000000000de868:
	movb $1, -2584(%rbp)
uuid_00000000000de86a:
	mov -2720(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000de86d:
	mov -2600(%RBP),%RSP
	add $-2832, %RSP
uuid_00000000000de870:
	mov -2592(%RBP),%RSP
	add $-2832, %RSP
	mov -2584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de889
	jmp uuid_00000000000de88b
uuid_00000000000de889:
	push %RBP
	mov -2464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2912(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de883
	jmp uuid_00000000000de885
uuid_00000000000de883:
	push %RBP
	jmp uuid_00000000000de880
	jmp uuid_00000000000de882
uuid_00000000000de880:
	push %RBP
	mov -2880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -3016(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de87d
	jmp uuid_00000000000de87f
uuid_00000000000de87d:
	push %RBP
	mov -2872(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3096(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de877
	jmp uuid_00000000000de879
uuid_00000000000de877:
	push %RBP
	jmp uuid_00000000000de874
	jmp uuid_00000000000de876
uuid_00000000000de874:
	push %RBP
	mov -3032(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de871
	jmp uuid_00000000000de873
uuid_00000000000de871:
	movb $1, -3104(%rbp)
uuid_00000000000de873:
	mov -3128(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de876:
	mov -3120(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de879:
	mov -3112(%RBP),%RSP
	add $-3136, %RSP
	mov -3104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de87a
	jmp uuid_00000000000de87c
uuid_00000000000de87a:
	movb $1, -2920(%rbp)
uuid_00000000000de87c:
	mov -3024(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de87f:
	mov -2944(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de882:
	mov -2936(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de885:
	mov -2928(%RBP),%RSP
	add $-3136, %RSP
	mov -2920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de886
	jmp uuid_00000000000de888
uuid_00000000000de886:
	movb $1, -2488(%rbp)
uuid_00000000000de888:
	mov -2840(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de88b:
	mov -2504(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de88e:
	mov -2496(%RBP),%RSP
	add $-3136, %RSP
	mov -2488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de88f
	jmp uuid_00000000000de891
uuid_00000000000de88f:
	movb $1, -2312(%rbp)
uuid_00000000000de891:
	mov -2408(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de894:
	mov -2328(%RBP),%RSP
	add $-3136, %RSP
uuid_00000000000de897:
	mov -2320(%RBP),%RSP
	add $-3136, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8c6
	jmp uuid_00000000000de8c8
uuid_00000000000de8c6:
	push %RBP
	mov -2192(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8c0
	jmp uuid_00000000000de8c2
uuid_00000000000de8c0:
	push %RBP
	mov -3208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3312(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8ae
	jmp uuid_00000000000de8b0
uuid_00000000000de8ae:
	push %RBP
	mov -3304(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3408(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de89b
	jmp uuid_00000000000de89d
uuid_00000000000de89b:
	push %RBP
	jmp uuid_00000000000de898
	jmp uuid_00000000000de89a
uuid_00000000000de898:
	movb $1, -3416(%rbp)
uuid_00000000000de89a:
	mov -3432(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000de89d:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
	mov -3416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8ab
	jmp uuid_00000000000de8ad
uuid_00000000000de8ab:
	push %RBP
	mov -3296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8a5
	jmp uuid_00000000000de8a7
uuid_00000000000de8a5:
	push %RBP
	jmp uuid_00000000000de8a2
	jmp uuid_00000000000de8a4
uuid_00000000000de8a2:
	push %RBP
	mov -3448(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3552(%rbp)
	pushq $uuid_00000000000de89e
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de89f
	jmp uuid_00000000000de8a1
uuid_00000000000de89f:
	movb $1, -3520(%rbp)
uuid_00000000000de8a1:
	mov -3544(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000de8a4:
	mov -3536(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000de8a7:
	mov -3528(%RBP),%RSP
	add $-3552, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8a8
	jmp uuid_00000000000de8aa
uuid_00000000000de8a8:
	movb $1, -3320(%rbp)
uuid_00000000000de8aa:
	mov -3440(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000de8ad:
	mov -3336(%RBP),%RSP
	add $-3552, %RSP
uuid_00000000000de8b0:
	mov -3328(%RBP),%RSP
	add $-3552, %RSP
	mov -3320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8bd
	jmp uuid_00000000000de8bf
uuid_00000000000de8bd:
	push %RBP
	mov -3200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3632(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8b7
	jmp uuid_00000000000de8b9
uuid_00000000000de8b7:
	push %RBP
	jmp uuid_00000000000de8b4
	jmp uuid_00000000000de8b6
uuid_00000000000de8b4:
	push %RBP
	mov -3568(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3672(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de8b1
	jmp uuid_00000000000de8b3
uuid_00000000000de8b1:
	movb $1, -3640(%rbp)
uuid_00000000000de8b3:
	mov -3664(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000de8b6:
	mov -3656(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000de8b9:
	mov -3648(%RBP),%RSP
	add $-3672, %RSP
	mov -3640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8ba
	jmp uuid_00000000000de8bc
uuid_00000000000de8ba:
	movb $1, -3224(%rbp)
uuid_00000000000de8bc:
	mov -3560(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000de8bf:
	mov -3240(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000de8c2:
	mov -3232(%RBP),%RSP
	add $-3672, %RSP
	mov -3224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8c3
	jmp uuid_00000000000de8c5
uuid_00000000000de8c3:
	movb $1, -2216(%rbp)
uuid_00000000000de8c5:
	mov -3144(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000de8c8:
	mov -2232(%RBP),%RSP
	add $-3672, %RSP
uuid_00000000000de8cb:
	mov -2224(%RBP),%RSP
	add $-3672, %RSP
	mov -2216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaef
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -3752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de934
	jmp uuid_00000000000de936
uuid_00000000000de934:
	push %RBP
	mov -3744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de900
	jmp uuid_00000000000de902
uuid_00000000000de900:
	push %RBP
	mov -3840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8fd
	jmp uuid_00000000000de8ff
uuid_00000000000de8fd:
	push %RBP
	mov -3832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8f7
	jmp uuid_00000000000de8f9
uuid_00000000000de8f7:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8f4
	jmp uuid_00000000000de8f6
uuid_00000000000de8f4:
	push %RBP
	mov -4008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4200(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8ee
	jmp uuid_00000000000de8f0
uuid_00000000000de8ee:
	push %RBP
	jmp uuid_00000000000de8eb
	jmp uuid_00000000000de8ed
uuid_00000000000de8eb:
	push %RBP
	mov -4168(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -4304(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8e8
	jmp uuid_00000000000de8ea
uuid_00000000000de8e8:
	push %RBP
	mov -4160(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8e2
	jmp uuid_00000000000de8e4
uuid_00000000000de8e2:
	push %RBP
	jmp uuid_00000000000de8df
	jmp uuid_00000000000de8e1
uuid_00000000000de8df:
	push %RBP
	mov -4320(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000de8dc
	jmp uuid_00000000000de8de
uuid_00000000000de8dc:
	movb $1, -4392(%rbp)
uuid_00000000000de8de:
	mov -4416(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8e1:
	mov -4408(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8e4:
	mov -4400(%RBP),%RSP
	add $-4424, %RSP
	mov -4392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8e5
	jmp uuid_00000000000de8e7
uuid_00000000000de8e5:
	movb $1, -4208(%rbp)
uuid_00000000000de8e7:
	mov -4312(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8ea:
	mov -4232(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8ed:
	mov -4224(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8f0:
	mov -4216(%RBP),%RSP
	add $-4424, %RSP
	mov -4208(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8f1
	jmp uuid_00000000000de8f3
uuid_00000000000de8f1:
	movb $1, -4032(%rbp)
uuid_00000000000de8f3:
	mov -4128(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8f6:
	mov -4048(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8f9:
	mov -4040(%RBP),%RSP
	add $-4424, %RSP
	mov -4032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8fa
	jmp uuid_00000000000de8fc
uuid_00000000000de8fa:
	movb $1, -3856(%rbp)
uuid_00000000000de8fc:
	mov -3952(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de8ff:
	mov -3872(%RBP),%RSP
	add $-4424, %RSP
uuid_00000000000de902:
	mov -3864(%RBP),%RSP
	add $-4424, %RSP
	mov -3856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de931
	jmp uuid_00000000000de933
uuid_00000000000de931:
	push %RBP
	mov -3736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de92b
	jmp uuid_00000000000de92d
uuid_00000000000de92b:
	push %RBP
	mov -4496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de919
	jmp uuid_00000000000de91b
uuid_00000000000de919:
	push %RBP
	mov -4592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4696(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de906
	jmp uuid_00000000000de908
uuid_00000000000de906:
	push %RBP
	jmp uuid_00000000000de903
	jmp uuid_00000000000de905
uuid_00000000000de903:
	movb $1, -4704(%rbp)
uuid_00000000000de905:
	mov -4720(%RBP),%RSP
	add $-4720, %RSP
uuid_00000000000de908:
	mov -4712(%RBP),%RSP
	add $-4720, %RSP
	mov -4704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de916
	jmp uuid_00000000000de918
uuid_00000000000de916:
	push %RBP
	mov -4584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4800(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de910
	jmp uuid_00000000000de912
uuid_00000000000de910:
	push %RBP
	jmp uuid_00000000000de90d
	jmp uuid_00000000000de90f
uuid_00000000000de90d:
	push %RBP
	mov -4736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4840(%rbp)
	pushq $uuid_00000000000de909
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de90a
	jmp uuid_00000000000de90c
uuid_00000000000de90a:
	movb $1, -4808(%rbp)
uuid_00000000000de90c:
	mov -4832(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000de90f:
	mov -4824(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000de912:
	mov -4816(%RBP),%RSP
	add $-4840, %RSP
	mov -4808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de913
	jmp uuid_00000000000de915
uuid_00000000000de913:
	movb $1, -4608(%rbp)
uuid_00000000000de915:
	mov -4728(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000de918:
	mov -4624(%RBP),%RSP
	add $-4840, %RSP
uuid_00000000000de91b:
	mov -4616(%RBP),%RSP
	add $-4840, %RSP
	mov -4608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de928
	jmp uuid_00000000000de92a
uuid_00000000000de928:
	push %RBP
	mov -4488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4920(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de922
	jmp uuid_00000000000de924
uuid_00000000000de922:
	push %RBP
	jmp uuid_00000000000de91f
	jmp uuid_00000000000de921
uuid_00000000000de91f:
	push %RBP
	mov -4856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de91c
	jmp uuid_00000000000de91e
uuid_00000000000de91c:
	movb $1, -4928(%rbp)
uuid_00000000000de91e:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000de921:
	mov -4944(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000de924:
	mov -4936(%RBP),%RSP
	add $-4960, %RSP
	mov -4928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de925
	jmp uuid_00000000000de927
uuid_00000000000de925:
	movb $1, -4512(%rbp)
uuid_00000000000de927:
	mov -4848(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000de92a:
	mov -4528(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000de92d:
	mov -4520(%RBP),%RSP
	add $-4960, %RSP
	mov -4512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de92e
	jmp uuid_00000000000de930
uuid_00000000000de92e:
	movb $1, -3760(%rbp)
uuid_00000000000de930:
	mov -4432(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000de933:
	mov -3776(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000de936:
	mov -3768(%RBP),%RSP
	add $-4960, %RSP
	mov -3760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaec
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de963
	jmp uuid_00000000000de965
uuid_00000000000de963:
	push %RBP
	mov -5032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5136(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de950
	jmp uuid_00000000000de952
uuid_00000000000de950:
	push %RBP
	mov -5128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de94d
	jmp uuid_00000000000de94f
uuid_00000000000de94d:
	push %RBP
	mov -5120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de94a
	jmp uuid_00000000000de94c
uuid_00000000000de94a:
	movb $1, -5144(%rbp)
uuid_00000000000de94c:
	mov -5240(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000de94f:
	mov -5160(%RBP),%RSP
	add $-5312, %RSP
uuid_00000000000de952:
	mov -5152(%RBP),%RSP
	add $-5312, %RSP
	mov -5144(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de960
	jmp uuid_00000000000de962
uuid_00000000000de960:
	push %RBP
	mov -5024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de95a
	jmp uuid_00000000000de95c
uuid_00000000000de95a:
	push %RBP
	jmp uuid_00000000000de957
	jmp uuid_00000000000de959
uuid_00000000000de957:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5432(%rbp)
	pushq $uuid_00000000000de953
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de954
	jmp uuid_00000000000de956
uuid_00000000000de954:
	movb $1, -5400(%rbp)
uuid_00000000000de956:
	mov -5424(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000de959:
	mov -5416(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000de95c:
	mov -5408(%RBP),%RSP
	add $-5432, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de95d
	jmp uuid_00000000000de95f
uuid_00000000000de95d:
	movb $1, -5048(%rbp)
uuid_00000000000de95f:
	mov -5320(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000de962:
	mov -5064(%RBP),%RSP
	add $-5432, %RSP
uuid_00000000000de965:
	mov -5056(%RBP),%RSP
	add $-5432, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deae9
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de979
	jmp uuid_00000000000de97b
uuid_00000000000de979:
	push %RBP
	jmp uuid_00000000000de976
	jmp uuid_00000000000de978
uuid_00000000000de976:
	push %RBP
	mov -5496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de970
	jmp uuid_00000000000de972
uuid_00000000000de970:
	push %RBP
	jmp uuid_00000000000de96d
	jmp uuid_00000000000de96f
uuid_00000000000de96d:
	push %RBP
	mov -5552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5656(%rbp)
	pushq $uuid_00000000000de969
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de96a
	jmp uuid_00000000000de96c
uuid_00000000000de96a:
	movb $1, -5624(%rbp)
uuid_00000000000de96c:
	mov -5648(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de96f:
	mov -5640(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de972:
	mov -5632(%RBP),%RSP
	add $-5656, %RSP
	mov -5624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de973
	jmp uuid_00000000000de975
uuid_00000000000de973:
	movb $1, -5520(%rbp)
uuid_00000000000de975:
	mov -5544(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de978:
	mov -5536(%RBP),%RSP
	add $-5656, %RSP
uuid_00000000000de97b:
	mov -5528(%RBP),%RSP
	add $-5656, %RSP
	mov -5520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deae6
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -5736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de98c
	jmp uuid_00000000000de98e
uuid_00000000000de98c:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de989
	jmp uuid_00000000000de98b
uuid_00000000000de989:
	push %RBP
	mov -5720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5912(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de983
	jmp uuid_00000000000de985
uuid_00000000000de983:
	push %RBP
	jmp uuid_00000000000de980
	jmp uuid_00000000000de982
uuid_00000000000de980:
	push %RBP
	mov -5848(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq $uuid_00000000000de97c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de97d
	jmp uuid_00000000000de97f
uuid_00000000000de97d:
	movb $1, -5920(%rbp)
uuid_00000000000de97f:
	mov -5944(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000de982:
	mov -5936(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000de985:
	mov -5928(%RBP),%RSP
	add $-5952, %RSP
	mov -5920(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de986
	jmp uuid_00000000000de988
uuid_00000000000de986:
	movb $1, -5744(%rbp)
uuid_00000000000de988:
	mov -5840(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000de98b:
	mov -5760(%RBP),%RSP
	add $-5952, %RSP
uuid_00000000000de98e:
	mov -5752(%RBP),%RSP
	add $-5952, %RSP
	mov -5744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deae3
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9a8
	jmp uuid_00000000000de9aa
uuid_00000000000de9a8:
	push %RBP
	mov -6024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de995
	jmp uuid_00000000000de997
uuid_00000000000de995:
	push %RBP
	mov -6120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de992
	jmp uuid_00000000000de994
uuid_00000000000de992:
	push %RBP
	mov -6112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de98f
	jmp uuid_00000000000de991
uuid_00000000000de98f:
	movb $1, -6136(%rbp)
uuid_00000000000de991:
	mov -6232(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000de994:
	mov -6152(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000de997:
	mov -6144(%RBP),%RSP
	add $-6304, %RSP
	mov -6136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9a5
	jmp uuid_00000000000de9a7
uuid_00000000000de9a5:
	push %RBP
	mov -6016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6384(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de99f
	jmp uuid_00000000000de9a1
uuid_00000000000de99f:
	push %RBP
	jmp uuid_00000000000de99c
	jmp uuid_00000000000de99e
uuid_00000000000de99c:
	push %RBP
	mov -6320(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6424(%rbp)
	pushq $uuid_00000000000de998
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de999
	jmp uuid_00000000000de99b
uuid_00000000000de999:
	movb $1, -6392(%rbp)
uuid_00000000000de99b:
	mov -6416(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000de99e:
	mov -6408(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000de9a1:
	mov -6400(%RBP),%RSP
	add $-6424, %RSP
	mov -6392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9a2
	jmp uuid_00000000000de9a4
uuid_00000000000de9a2:
	movb $1, -6040(%rbp)
uuid_00000000000de9a4:
	mov -6312(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000de9a7:
	mov -6056(%RBP),%RSP
	add $-6424, %RSP
uuid_00000000000de9aa:
	mov -6048(%RBP),%RSP
	add $-6424, %RSP
	mov -6040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deae0
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6504(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9c6
	jmp uuid_00000000000de9c8
uuid_00000000000de9c6:
	push %RBP
	mov -6496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9b4
	jmp uuid_00000000000de9b6
uuid_00000000000de9b4:
	push %RBP
	mov -6592(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9b1
	jmp uuid_00000000000de9b3
uuid_00000000000de9b1:
	push %RBP
	mov -6584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9ae
	jmp uuid_00000000000de9b0
uuid_00000000000de9ae:
	movb $1, -6608(%rbp)
uuid_00000000000de9b0:
	mov -6704(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000de9b3:
	mov -6624(%RBP),%RSP
	add $-6776, %RSP
uuid_00000000000de9b6:
	mov -6616(%RBP),%RSP
	add $-6776, %RSP
	mov -6608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9c3
	jmp uuid_00000000000de9c5
uuid_00000000000de9c3:
	push %RBP
	mov -6488(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6856(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9bd
	jmp uuid_00000000000de9bf
uuid_00000000000de9bd:
	push %RBP
	jmp uuid_00000000000de9ba
	jmp uuid_00000000000de9bc
uuid_00000000000de9ba:
	push %RBP
	mov -6792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6896(%rbp)
	pushq $uuid_00000000000daeef
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9b7
	jmp uuid_00000000000de9b9
uuid_00000000000de9b7:
	movb $1, -6864(%rbp)
uuid_00000000000de9b9:
	mov -6888(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000de9bc:
	mov -6880(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000de9bf:
	mov -6872(%RBP),%RSP
	add $-6896, %RSP
	mov -6864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9c0
	jmp uuid_00000000000de9c2
uuid_00000000000de9c0:
	movb $1, -6512(%rbp)
uuid_00000000000de9c2:
	mov -6784(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000de9c5:
	mov -6528(%RBP),%RSP
	add $-6896, %RSP
uuid_00000000000de9c8:
	mov -6520(%RBP),%RSP
	add $-6896, %RSP
	mov -6512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deadd
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -6976(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9e5
	jmp uuid_00000000000de9e7
uuid_00000000000de9e5:
	push %RBP
	mov -6968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9d2
	jmp uuid_00000000000de9d4
uuid_00000000000de9d2:
	push %RBP
	mov -7064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9cf
	jmp uuid_00000000000de9d1
uuid_00000000000de9cf:
	push %RBP
	mov -7056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9cc
	jmp uuid_00000000000de9ce
uuid_00000000000de9cc:
	movb $1, -7080(%rbp)
uuid_00000000000de9ce:
	mov -7176(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000de9d1:
	mov -7096(%RBP),%RSP
	add $-7248, %RSP
uuid_00000000000de9d4:
	mov -7088(%RBP),%RSP
	add $-7248, %RSP
	mov -7080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9e2
	jmp uuid_00000000000de9e4
uuid_00000000000de9e2:
	push %RBP
	mov -6960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7328(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9dc
	jmp uuid_00000000000de9de
uuid_00000000000de9dc:
	push %RBP
	jmp uuid_00000000000de9d9
	jmp uuid_00000000000de9db
uuid_00000000000de9d9:
	push %RBP
	mov -7264(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7368(%rbp)
	pushq $uuid_00000000000de9d5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9d6
	jmp uuid_00000000000de9d8
uuid_00000000000de9d6:
	movb $1, -7336(%rbp)
uuid_00000000000de9d8:
	mov -7360(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000de9db:
	mov -7352(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000de9de:
	mov -7344(%RBP),%RSP
	add $-7368, %RSP
	mov -7336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9df
	jmp uuid_00000000000de9e1
uuid_00000000000de9df:
	movb $1, -6984(%rbp)
uuid_00000000000de9e1:
	mov -7256(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000de9e4:
	mov -7000(%RBP),%RSP
	add $-7368, %RSP
uuid_00000000000de9e7:
	mov -6992(%RBP),%RSP
	add $-7368, %RSP
	mov -6984(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deada
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7448(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea00
	jmp uuid_00000000000dea02
uuid_00000000000dea00:
	push %RBP
	mov -7440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7544(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9ee
	jmp uuid_00000000000de9f0
uuid_00000000000de9ee:
	push %RBP
	mov -7536(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9eb
	jmp uuid_00000000000de9ed
uuid_00000000000de9eb:
	push %RBP
	mov -7528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de9e8
	jmp uuid_00000000000de9ea
uuid_00000000000de9e8:
	movb $1, -7552(%rbp)
uuid_00000000000de9ea:
	mov -7648(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000de9ed:
	mov -7568(%RBP),%RSP
	add $-7720, %RSP
uuid_00000000000de9f0:
	mov -7560(%RBP),%RSP
	add $-7720, %RSP
	mov -7552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9fd
	jmp uuid_00000000000de9ff
uuid_00000000000de9fd:
	push %RBP
	mov -7432(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7800(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9f7
	jmp uuid_00000000000de9f9
uuid_00000000000de9f7:
	push %RBP
	jmp uuid_00000000000de9f4
	jmp uuid_00000000000de9f6
uuid_00000000000de9f4:
	push %RBP
	mov -7736(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7840(%rbp)
	pushq $uuid_00000000000dace5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9f1
	jmp uuid_00000000000de9f3
uuid_00000000000de9f1:
	movb $1, -7808(%rbp)
uuid_00000000000de9f3:
	mov -7832(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000de9f6:
	mov -7824(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000de9f9:
	mov -7816(%RBP),%RSP
	add $-7840, %RSP
	mov -7808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de9fa
	jmp uuid_00000000000de9fc
uuid_00000000000de9fa:
	movb $1, -7456(%rbp)
uuid_00000000000de9fc:
	mov -7728(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000de9ff:
	mov -7472(%RBP),%RSP
	add $-7840, %RSP
uuid_00000000000dea02:
	mov -7464(%RBP),%RSP
	add $-7840, %RSP
	mov -7456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dead7
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -7920(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea1c
	jmp uuid_00000000000dea1e
uuid_00000000000dea1c:
	push %RBP
	mov -7912(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8016(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea09
	jmp uuid_00000000000dea0b
uuid_00000000000dea09:
	push %RBP
	mov -8008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea06
	jmp uuid_00000000000dea08
uuid_00000000000dea06:
	push %RBP
	mov -8000(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea03
	jmp uuid_00000000000dea05
uuid_00000000000dea03:
	movb $1, -8024(%rbp)
uuid_00000000000dea05:
	mov -8120(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000dea08:
	mov -8040(%RBP),%RSP
	add $-8192, %RSP
uuid_00000000000dea0b:
	mov -8032(%RBP),%RSP
	add $-8192, %RSP
	mov -8024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea19
	jmp uuid_00000000000dea1b
uuid_00000000000dea19:
	push %RBP
	mov -7904(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8272(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea13
	jmp uuid_00000000000dea15
uuid_00000000000dea13:
	push %RBP
	jmp uuid_00000000000dea10
	jmp uuid_00000000000dea12
uuid_00000000000dea10:
	push %RBP
	mov -8208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8312(%rbp)
	pushq $uuid_00000000000dea0c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea0d
	jmp uuid_00000000000dea0f
uuid_00000000000dea0d:
	movb $1, -8280(%rbp)
uuid_00000000000dea0f:
	mov -8304(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dea12:
	mov -8296(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dea15:
	mov -8288(%RBP),%RSP
	add $-8312, %RSP
	mov -8280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea16
	jmp uuid_00000000000dea18
uuid_00000000000dea16:
	movb $1, -7928(%rbp)
uuid_00000000000dea18:
	mov -8200(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dea1b:
	mov -7944(%RBP),%RSP
	add $-8312, %RSP
uuid_00000000000dea1e:
	mov -7936(%RBP),%RSP
	add $-8312, %RSP
	mov -7928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dead4
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8392(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea37
	jmp uuid_00000000000dea39
uuid_00000000000dea37:
	push %RBP
	mov -8384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea25
	jmp uuid_00000000000dea27
uuid_00000000000dea25:
	push %RBP
	mov -8480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea22
	jmp uuid_00000000000dea24
uuid_00000000000dea22:
	push %RBP
	mov -8472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea1f
	jmp uuid_00000000000dea21
uuid_00000000000dea1f:
	movb $1, -8496(%rbp)
uuid_00000000000dea21:
	mov -8592(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000dea24:
	mov -8512(%RBP),%RSP
	add $-8664, %RSP
uuid_00000000000dea27:
	mov -8504(%RBP),%RSP
	add $-8664, %RSP
	mov -8496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea34
	jmp uuid_00000000000dea36
uuid_00000000000dea34:
	push %RBP
	mov -8376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8744(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea2e
	jmp uuid_00000000000dea30
uuid_00000000000dea2e:
	push %RBP
	jmp uuid_00000000000dea2b
	jmp uuid_00000000000dea2d
uuid_00000000000dea2b:
	push %RBP
	mov -8680(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8784(%rbp)
	pushq $uuid_00000000000daec8
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea28
	jmp uuid_00000000000dea2a
uuid_00000000000dea28:
	movb $1, -8752(%rbp)
uuid_00000000000dea2a:
	mov -8776(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dea2d:
	mov -8768(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dea30:
	mov -8760(%RBP),%RSP
	add $-8784, %RSP
	mov -8752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea31
	jmp uuid_00000000000dea33
uuid_00000000000dea31:
	movb $1, -8400(%rbp)
uuid_00000000000dea33:
	mov -8672(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dea36:
	mov -8416(%RBP),%RSP
	add $-8784, %RSP
uuid_00000000000dea39:
	mov -8408(%RBP),%RSP
	add $-8784, %RSP
	mov -8400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dead1
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -8864(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea52
	jmp uuid_00000000000dea54
uuid_00000000000dea52:
	push %RBP
	mov -8856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8960(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea40
	jmp uuid_00000000000dea42
uuid_00000000000dea40:
	push %RBP
	mov -8952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea3d
	jmp uuid_00000000000dea3f
uuid_00000000000dea3d:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea3a
	jmp uuid_00000000000dea3c
uuid_00000000000dea3a:
	movb $1, -8968(%rbp)
uuid_00000000000dea3c:
	mov -9064(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000dea3f:
	mov -8984(%RBP),%RSP
	add $-9136, %RSP
uuid_00000000000dea42:
	mov -8976(%RBP),%RSP
	add $-9136, %RSP
	mov -8968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea4f
	jmp uuid_00000000000dea51
uuid_00000000000dea4f:
	push %RBP
	mov -8848(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9216(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea49
	jmp uuid_00000000000dea4b
uuid_00000000000dea49:
	push %RBP
	jmp uuid_00000000000dea46
	jmp uuid_00000000000dea48
uuid_00000000000dea46:
	push %RBP
	mov -9152(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9256(%rbp)
	pushq $uuid_00000000000daac5
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea43
	jmp uuid_00000000000dea45
uuid_00000000000dea43:
	movb $1, -9224(%rbp)
uuid_00000000000dea45:
	mov -9248(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dea48:
	mov -9240(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dea4b:
	mov -9232(%RBP),%RSP
	add $-9256, %RSP
	mov -9224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea4c
	jmp uuid_00000000000dea4e
uuid_00000000000dea4c:
	movb $1, -8872(%rbp)
uuid_00000000000dea4e:
	mov -9144(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dea51:
	mov -8888(%RBP),%RSP
	add $-9256, %RSP
uuid_00000000000dea54:
	mov -8880(%RBP),%RSP
	add $-9256, %RSP
	mov -8872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deace
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9336(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea76
	jmp uuid_00000000000dea78
uuid_00000000000dea76:
	push %RBP
	mov -9328(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea73
	jmp uuid_00000000000dea75
uuid_00000000000dea73:
	push %RBP
	mov -9320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea6d
	jmp uuid_00000000000dea6f
uuid_00000000000dea6d:
	push %RBP
	mov -9504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea6a
	jmp uuid_00000000000dea6c
uuid_00000000000dea6a:
	push %RBP
	mov -9496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea64
	jmp uuid_00000000000dea66
uuid_00000000000dea64:
	push %RBP
	mov -9680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea61
	jmp uuid_00000000000dea63
uuid_00000000000dea61:
	push %RBP
	mov -9672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9864(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea5b
	jmp uuid_00000000000dea5d
uuid_00000000000dea5b:
	push %RBP
	jmp uuid_00000000000dea58
	jmp uuid_00000000000dea5a
uuid_00000000000dea58:
	push %RBP
	mov -9800(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9904(%rbp)
	pushq $uuid_00000000000db0b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea55
	jmp uuid_00000000000dea57
uuid_00000000000dea55:
	movb $1, -9872(%rbp)
uuid_00000000000dea57:
	mov -9896(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea5a:
	mov -9888(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea5d:
	mov -9880(%RBP),%RSP
	add $-9904, %RSP
	mov -9872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea5e
	jmp uuid_00000000000dea60
uuid_00000000000dea5e:
	movb $1, -9696(%rbp)
uuid_00000000000dea60:
	mov -9792(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea63:
	mov -9712(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea66:
	mov -9704(%RBP),%RSP
	add $-9904, %RSP
	mov -9696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea67
	jmp uuid_00000000000dea69
uuid_00000000000dea67:
	movb $1, -9520(%rbp)
uuid_00000000000dea69:
	mov -9616(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea6c:
	mov -9536(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea6f:
	mov -9528(%RBP),%RSP
	add $-9904, %RSP
	mov -9520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea70
	jmp uuid_00000000000dea72
uuid_00000000000dea70:
	movb $1, -9344(%rbp)
uuid_00000000000dea72:
	mov -9440(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea75:
	mov -9360(%RBP),%RSP
	add $-9904, %RSP
uuid_00000000000dea78:
	mov -9352(%RBP),%RSP
	add $-9904, %RSP
	mov -9344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deacb
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -9984(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deaa1
	jmp uuid_00000000000deaa3
uuid_00000000000deaa1:
	push %RBP
	mov -9976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dea9e
	jmp uuid_00000000000deaa0
uuid_00000000000dea9e:
	push %RBP
	mov -9968(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10160(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea98
	jmp uuid_00000000000dea9a
uuid_00000000000dea98:
	push %RBP
	pushq -10136(%RBP)
	pushq -10144(%RBP)
	pushq -10152(%RBP)
	jmp uuid_00000000000dea95
	jmp uuid_00000000000dea97
uuid_00000000000dea95:
	push %RBP
	mov -10128(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -10288(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea92
	jmp uuid_00000000000dea94
uuid_00000000000dea92:
	push %RBP
	mov -10120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -10368(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea8c
	jmp uuid_00000000000dea8e
uuid_00000000000dea8c:
	push %RBP
	jmp uuid_00000000000dea89
	jmp uuid_00000000000dea8b
uuid_00000000000dea89:
	push %RBP
	mov -10304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dea86
	jmp uuid_00000000000dea88
uuid_00000000000dea86:
	movb $1, -10376(%rbp)
uuid_00000000000dea88:
	mov -10400(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dea8b:
	mov -10392(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dea8e:
	mov -10384(%RBP),%RSP
	add $-10408, %RSP
	mov -10376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea8f
	jmp uuid_00000000000dea91
uuid_00000000000dea8f:
	movb $1, -10168(%rbp)
uuid_00000000000dea91:
	mov -10296(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dea94:
	mov -10216(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dea97:
	mov -10184(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000dea9a:
	mov -10176(%RBP),%RSP
	add $-10408, %RSP
	mov -10168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea9b
	jmp uuid_00000000000dea9d
uuid_00000000000dea9b:
	movb $1, -9992(%rbp)
uuid_00000000000dea9d:
	mov -10088(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000deaa0:
	mov -10008(%RBP),%RSP
	add $-10408, %RSP
uuid_00000000000deaa3:
	mov -10000(%RBP),%RSP
	add $-10408, %RSP
	mov -9992(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deac8
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq $0
	push %RBP
	mov -10488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deaaa
	jmp uuid_00000000000deaac
uuid_00000000000deaaa:
	push %RBP
	mov -10480(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deaa7
	jmp uuid_00000000000deaa9
uuid_00000000000deaa7:
	push %RBP
	mov -10472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deaa4
	jmp uuid_00000000000deaa6
uuid_00000000000deaa4:
	movb $1, -10496(%rbp)
uuid_00000000000deaa6:
	mov -10592(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000deaa9:
	mov -10512(%RBP),%RSP
	add $-10664, %RSP
uuid_00000000000deaac:
	mov -10504(%RBP),%RSP
	add $-10664, %RSP
	mov -10496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deac5
	push %RBP
	jmp uuid_00000000000deac2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000deac1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deac4
uuid_00000000000deac2:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000deac0
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000deac4:
	mov -10672(%RBP),%RSP
	add $-10672, %RSP
	jmp uuid_00000000000deac7
uuid_00000000000deac5:
	push %RBP
#call function is-arrow : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call is_SB_arrow_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deabd
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10680(%RBP)
	pushq -10688(%RBP)
	pushq -10696(%RBP)
	pushq -10704(%RBP)
	pushq -10712(%RBP)
	pushq -10720(%RBP)
	pushq -10728(%RBP)
	pushq -10736(%RBP)
	pushq -10744(%RBP)
	pushq -10752(%RBP)
	pushq -10760(%RBP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
	pushq -10792(%RBP)
	pushq -10800(%RBP)
	pushq -10808(%RBP)
	pushq -10816(%RBP)
	pushq -10824(%RBP)
	pushq -10832(%RBP)
	pushq -10840(%RBP)
	pushq -10848(%RBP)
	pushq -10856(%RBP)
	pushq -10864(%RBP)
	pushq -10872(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10912(%RBP)
	pushq -10920(%RBP)
	pushq -10928(%RBP)
	pushq -10936(%RBP)
	pushq -10944(%RBP)
	pushq -10952(%RBP)
	pushq -10960(%RBP)
	pushq -10968(%RBP)
	pushq -10976(%RBP)
	pushq -10984(%RBP)
	pushq -10992(%RBP)
	pushq -11000(%RBP)
	pushq -11008(%RBP)
	pushq -11016(%RBP)
	pushq -11024(%RBP)
	pushq -11032(%RBP)
	pushq -11040(%RBP)
	pushq -11048(%RBP)
	pushq -11056(%RBP)
	pushq -11064(%RBP)
	pushq -11072(%RBP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	pushq -11104(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	pushq -10880(%RBP)
	pushq -10888(%RBP)
	pushq -10896(%RBP)
	pushq -11112(%RBP)
	pushq -11120(%RBP)
	pushq -11128(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -11144(%rbp)
	pushq -11152(%rbp)
	pushq -11160(%rbp)
	pushq -11168(%rbp)
	pushq -11176(%rbp)
	pushq -11184(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000deabf
uuid_00000000000deabd:
	pushq -10600(%rbp)
	pushq -10608(%rbp)
	pushq -10616(%rbp)
	pushq -10624(%rbp)
	pushq -10632(%rbp)
	pushq -10640(%rbp)
	pushq -10648(%rbp)
	pushq -10656(%rbp)
	pushq -10664(%rbp)
	push %RBP
	pushq -10680(%rbp)
	pushq -10688(%rbp)
	pushq -10696(%rbp)
	pushq -10704(%rbp)
	pushq -10712(%rbp)
	pushq -10720(%rbp)
	pushq -10728(%rbp)
	pushq -10736(%rbp)
	pushq -10744(%rbp)
	pushq $0
	push %RBP
	mov -10824(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deab3
	jmp uuid_00000000000deab5
uuid_00000000000deab3:
	push %RBP
	jmp uuid_00000000000deab0
	jmp uuid_00000000000deab2
uuid_00000000000deab0:
	push %RBP
	mov -10760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deaad
	jmp uuid_00000000000deaaf
uuid_00000000000deaad:
	movb $1, -10832(%rbp)
uuid_00000000000deaaf:
	mov -10856(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000deab2:
	mov -10848(%RBP),%RSP
	add $-10864, %RSP
uuid_00000000000deab5:
	mov -10840(%RBP),%RSP
	add $-10864, %RSP
	mov -10832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deaba
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000deab9
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deabc
uuid_00000000000deaba:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10864(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deab6
#call function cc-blob : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10864(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call cc_SB_blob_CL_ArrowFragmentConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10880(%rbp)
	pushq -10888(%rbp)
	pushq -10896(%rbp)
	pushq -10904(%rbp)
	pushq -10912(%rbp)
	pushq -10920(%rbp)
	pushq -10928(%rbp)
	pushq -10936(%rbp)
	pushq -10944(%rbp)
	pushq -10952(%rbp)
	pushq -10960(%rbp)
	pushq -10968(%rbp)
	pushq -10976(%rbp)
	pushq -10984(%rbp)
	pushq -10992(%rbp)
	pushq -11000(%rbp)
	pushq -11008(%rbp)
	pushq -11016(%rbp)
	pushq -11024(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000deab8
uuid_00000000000deab6:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -10864(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -10568(%rbp)
	pushq -10576(%rbp)
	pushq -10584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -11080(%RBP)
	pushq -11088(%RBP)
	pushq -11096(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deab8:
	mov -10872(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000deabc:
	mov -10752(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000deabf:
	mov -10672(%RBP),%RSP
	add $-11104, %RSP
uuid_00000000000deac7:
	mov -10416(%RBP),%RSP
	add $-11104, %RSP
	jmp uuid_00000000000deaca
uuid_00000000000deac8:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10768(%RBP)
	pushq -10776(%RBP)
	pushq -10784(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq -208(%rbp)
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -10800(%rbp)
	pushq -10808(%rbp)
	pushq -10816(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -10560(%RBP)
	popq -10552(%RBP)
	popq -10544(%RBP)
	popq -10536(%RBP)
	popq -10528(%RBP)
	popq -10520(%RBP)
	popq -10512(%RBP)
	popq -10504(%RBP)
	popq -10496(%RBP)
	popq -10488(%RBP)
	popq -10480(%RBP)
	popq -10472(%RBP)
	popq -10464(%RBP)
	popq -10456(%RBP)
	popq -10448(%RBP)
	popq -10440(%RBP)
	popq -10432(%RBP)
	popq -10424(%RBP)
	popq -10416(%RBP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -10408(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10016(%rbp)
	pushq -10024(%rbp)
	pushq -10032(%rbp)
	pushq -10040(%rbp)
	pushq -10048(%rbp)
	pushq -10056(%rbp)
	pushq -10064(%rbp)
	pushq -10072(%rbp)
	pushq -10080(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -10416(%rbp)
	pushq -10424(%rbp)
	pushq -10432(%rbp)
	pushq -10440(%rbp)
	pushq -10448(%rbp)
	pushq -10456(%rbp)
	pushq -10464(%rbp)
	pushq -10472(%rbp)
	pushq -10480(%rbp)
	pushq -10488(%rbp)
	pushq -10496(%rbp)
	pushq -10504(%rbp)
	pushq -10512(%rbp)
	pushq -10520(%rbp)
	pushq -10528(%rbp)
	pushq -10536(%rbp)
	pushq -10544(%rbp)
	pushq -10552(%rbp)
	pushq -10560(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deaca:
	mov -9912(%RBP),%RSP
	add $-10816, %RSP
	jmp uuid_00000000000deacd
uuid_00000000000deacb:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9720(%rbp)
	pushq -9728(%rbp)
	pushq -9736(%rbp)
	pushq -9744(%rbp)
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	pushq -9776(%rbp)
	pushq -9784(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10112(%RBP)
	pushq -10120(%RBP)
	pushq -10128(%RBP)
	pushq -10144(%rbp)
	pushq -10152(%rbp)
	pushq -10160(%rbp)
	push %RBP
	pushq -10168(%rbp)
	pushq -10176(%rbp)
	pushq -10184(%rbp)
	pushq $0
	push %RBP
	mov -10216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dea7c
	jmp uuid_00000000000dea7e
uuid_00000000000dea7c:
	push %RBP
	mov -10208(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -10248(%rbp)
	pushq $uuid_00000000000daafa
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dea79
	jmp uuid_00000000000dea7b
uuid_00000000000dea79:
	movb $1, -10224(%rbp)
uuid_00000000000dea7b:
	mov -10240(%RBP),%RSP
	add $-10248, %RSP
uuid_00000000000dea7e:
	mov -10232(%RBP),%RSP
	add $-10248, %RSP
	mov -10224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dea83
	push %RBP
	jmp uuid_00000000000dea80
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dea7f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dea82
uuid_00000000000dea80:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9368(%rbp)
	pushq -9376(%rbp)
	pushq -9384(%rbp)
	pushq -9392(%rbp)
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	pushq -10480(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dea82:
	mov -10256(%RBP),%RSP
	add $-10488, %RSP
	jmp uuid_00000000000dea85
uuid_00000000000dea83:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9544(%rbp)
	pushq -9552(%rbp)
	pushq -9560(%rbp)
	pushq -9568(%rbp)
	pushq -9576(%rbp)
	pushq -9584(%rbp)
	pushq -9592(%rbp)
	pushq -9600(%rbp)
	pushq -9608(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -10456(%RBP)
	pushq -10464(%RBP)
	pushq -10472(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dea85:
	mov -10192(%RBP),%RSP
	add $-10480, %RSP
uuid_00000000000deacd:
	mov -9264(%RBP),%RSP
	add $-10480, %RSP
	jmp uuid_00000000000dead0
uuid_00000000000deace:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -9072(%rbp)
	pushq -9080(%rbp)
	pushq -9088(%rbp)
	pushq -9096(%rbp)
	pushq -9104(%rbp)
	pushq -9112(%rbp)
	pushq -9120(%rbp)
	pushq -9128(%rbp)
	pushq -9136(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9464(%RBP)
	pushq -9472(%RBP)
	pushq -9480(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8992(%rbp)
	pushq -9000(%rbp)
	pushq -9008(%rbp)
	pushq -9016(%rbp)
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	pushq -9048(%rbp)
	pushq -9056(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9720(%RBP)
	pushq -9728(%RBP)
	pushq -9736(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9496(%rbp)
	pushq -9504(%rbp)
	pushq -9512(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9752(%rbp)
	pushq -9760(%rbp)
	pushq -9768(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9776(%RBP), %RAX
	mov -9784(%RBP), %R14
	subq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dead0:
	mov -8792(%RBP),%RSP
	add $-9784, %RSP
	jmp uuid_00000000000dead3
uuid_00000000000dead1:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -8648(%rbp)
	pushq -8656(%rbp)
	pushq -8664(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8992(%RBP)
	pushq -9000(%RBP)
	pushq -9008(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8520(%rbp)
	pushq -8528(%rbp)
	pushq -8536(%rbp)
	pushq -8544(%rbp)
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	pushq -8576(%rbp)
	pushq -8584(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9024(%rbp)
	pushq -9032(%rbp)
	pushq -9040(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9280(%rbp)
	pushq -9288(%rbp)
	pushq -9296(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -9304(%RBP), %RAX
	mov -9312(%RBP), %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dead3:
	mov -8320(%RBP),%RSP
	add $-9312, %RSP
	jmp uuid_00000000000dead6
uuid_00000000000dead4:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8128(%rbp)
	pushq -8136(%rbp)
	pushq -8144(%rbp)
	pushq -8152(%rbp)
	pushq -8160(%rbp)
	pushq -8168(%rbp)
	pushq -8176(%rbp)
	pushq -8184(%rbp)
	pushq -8192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -8048(%rbp)
	pushq -8056(%rbp)
	pushq -8064(%rbp)
	pushq -8072(%rbp)
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	pushq -8104(%rbp)
	pushq -8112(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8776(%RBP)
	pushq -8784(%RBP)
	pushq -8792(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8552(%rbp)
	pushq -8560(%rbp)
	pushq -8568(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8808(%rbp)
	pushq -8816(%rbp)
	pushq -8824(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8832(%RBP), %RAX
	mov -8840(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dead6:
	mov -7848(%RBP),%RSP
	add $-8840, %RSP
	jmp uuid_00000000000dead9
uuid_00000000000dead7:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7656(%rbp)
	pushq -7664(%rbp)
	pushq -7672(%rbp)
	pushq -7680(%rbp)
	pushq -7688(%rbp)
	pushq -7696(%rbp)
	pushq -7704(%rbp)
	pushq -7712(%rbp)
	pushq -7720(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8048(%RBP)
	pushq -8056(%RBP)
	pushq -8064(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7576(%rbp)
	pushq -7584(%rbp)
	pushq -7592(%rbp)
	pushq -7600(%rbp)
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	pushq -7632(%rbp)
	pushq -7640(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -8304(%RBP)
	pushq -8312(%RBP)
	pushq -8320(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8080(%rbp)
	pushq -8088(%rbp)
	pushq -8096(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8336(%rbp)
	pushq -8344(%rbp)
	pushq -8352(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -8360(%RBP), %RAX
	mov -8368(%RBP), %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000dead9:
	mov -7376(%RBP),%RSP
	add $-8368, %RSP
	jmp uuid_00000000000deadc
uuid_00000000000deada:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7184(%rbp)
	pushq -7192(%rbp)
	pushq -7200(%rbp)
	pushq -7208(%rbp)
	pushq -7216(%rbp)
	pushq -7224(%rbp)
	pushq -7232(%rbp)
	pushq -7240(%rbp)
	pushq -7248(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7576(%RBP)
	pushq -7584(%RBP)
	pushq -7592(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -7104(%rbp)
	pushq -7112(%rbp)
	pushq -7120(%rbp)
	pushq -7128(%rbp)
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	pushq -7160(%rbp)
	pushq -7168(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7608(%rbp)
	pushq -7616(%rbp)
	pushq -7624(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7864(%rbp)
	pushq -7872(%rbp)
	pushq -7880(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov -7888(%RBP), %RAX
	mov -7896(%RBP), %R14
	mov $0, %RDX
	div %R14
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deadc:
	mov -6904(%RBP),%RSP
	add $-7896, %RSP
	jmp uuid_00000000000deadf
uuid_00000000000deadd:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	pushq -6744(%rbp)
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6632(%rbp)
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -7360(%RBP)
	pushq -7368(%RBP)
	pushq -7376(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7136(%rbp)
	pushq -7144(%rbp)
	pushq -7152(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7392(%rbp)
	pushq -7400(%rbp)
	pushq -7408(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -7416(%RBP), %RAX
	mov -7424(%RBP), %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de9c9
	pushq $0
	pushq $uuid_00000000000daac1
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de9cb
uuid_00000000000de9c9:
	pushq $0
	pushq $uuid_00000000000daafa
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de9cb:
	mov -7432(%RBP),%RSP
	add $-7432, %RSP
uuid_00000000000deadf:
	mov -6432(%RBP),%RSP
	add $-7432, %RSP
	jmp uuid_00000000000deae2
uuid_00000000000deae0:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	pushq -6280(%rbp)
	pushq -6288(%rbp)
	pushq -6296(%rbp)
	pushq -6304(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6632(%RBP)
	pushq -6640(%RBP)
	pushq -6648(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6888(%RBP)
	pushq -6896(%RBP)
	pushq -6904(%RBP)
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6664(%rbp)
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6920(%rbp)
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de9ab
	pushq $0
	pushq $uuid_00000000000daac1
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de9ad
uuid_00000000000de9ab:
	pushq $0
	pushq $uuid_00000000000daafa
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000de9ad:
	mov -6944(%RBP),%RSP
	add $-6944, %RSP
uuid_00000000000deae2:
	mov -5960(%RBP),%RSP
	add $-6944, %RSP
	jmp uuid_00000000000deae5
uuid_00000000000deae3:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5768(%rbp)
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -6160(%RBP)
	pushq -6168(%RBP)
	pushq -6176(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6192(%rbp)
	pushq -6200(%rbp)
	pushq -6208(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function align : Arrow<I64,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6216(%rbp)
	mov %RBX, %RBP
	call align_CL_ArrowI64I64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deae5:
	mov -5664(%RBP),%RSP
	add $-6216, %RSP
	jmp uuid_00000000000deae8
uuid_00000000000deae6:
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deae8:
	mov -5440(%RBP),%RSP
	add $-5656, %RSP
	jmp uuid_00000000000deaeb
uuid_00000000000deae9:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5640(%RBP)
	pushq -5648(%RBP)
	pushq -5656(%RBP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function to-i64 : Arrow<String,I64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5928(%rbp)
	pushq -5936(%rbp)
	pushq -5944(%rbp)
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_i64_CL_ArrowI64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000de966:
	mov -5952(%RBP), %RAX
	mov -5960(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de967
	jmp uuid_00000000000de968
uuid_00000000000de967:
	mov -5960(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -5960(%rbp)
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	jmp uuid_00000000000de966
uuid_00000000000de968:
uuid_00000000000deaeb:
	mov -4968(%RBP),%RSP
	add $-5960, %RSP
	jmp uuid_00000000000deaee
uuid_00000000000deaec:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
uuid_00000000000de947:
#call function non-zero : Arrow<S,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64S
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de948
	jmp uuid_00000000000de949
uuid_00000000000de948:
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	push %RBP
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq $0
	push %RBP
	mov -5272(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de93d
	jmp uuid_00000000000de93f
uuid_00000000000de93d:
	push %RBP
	mov -5264(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de93a
	jmp uuid_00000000000de93c
uuid_00000000000de93a:
	push %RBP
	mov -5256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de937
	jmp uuid_00000000000de939
uuid_00000000000de937:
	movb $1, -5280(%rbp)
uuid_00000000000de939:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000de93c:
	mov -5296(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000de93f:
	mov -5288(%RBP),%RSP
	add $-5352, %RSP
	mov -5280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de944
	push %RBP
	jmp uuid_00000000000de941
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de940
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de943
uuid_00000000000de941:
	pushq $0
	pushq $0
	pushq $3
	popq -5216(%RBP)
	popq -5208(%RBP)
	popq -5200(%RBP)
uuid_00000000000de943:
	mov -5360(%RBP),%RSP
	add $-5360, %RSP
	jmp uuid_00000000000de946
uuid_00000000000de944:
#call function fragment::expression : Arrow<S,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5336(%rbp)
	pushq -5344(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_expression_CL_ArrowFragmentS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -4424(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000de713
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq -5360(%rbp)
	pushq -5368(%rbp)
	pushq -5376(%rbp)
	pushq -5384(%rbp)
	pushq -5392(%rbp)
	pushq -5400(%rbp)
	pushq -5408(%rbp)
	pushq -5416(%rbp)
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	pushq -5480(%rbp)
	pushq -5488(%rbp)
	pushq -5496(%rbp)
	pushq -5504(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5512(%rbp)
	pushq -5520(%rbp)
	pushq -5528(%rbp)
	pushq -5536(%rbp)
	pushq -5544(%rbp)
	pushq -5552(%rbp)
	pushq -5560(%rbp)
	pushq -5568(%rbp)
	pushq -5576(%rbp)
	pushq -5584(%rbp)
	pushq -5592(%rbp)
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	pushq -5672(%rbp)
	pushq -5680(%rbp)
	pushq -5688(%rbp)
	pushq -5696(%rbp)
	pushq -5704(%rbp)
	pushq -208(%rbp)
	pushq -3880(%rbp)
	pushq -3888(%rbp)
	pushq -3896(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -5944(%rbp)
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -5320(%rbp), %r15
	movq %r15, -5216(%rbp)
	movq -5312(%rbp), %r15
	movq %r15, -5208(%rbp)
	movq -5304(%rbp), %r15
	movq %r15, -5200(%rbp)
uuid_00000000000de946:
	mov -5248(%RBP),%RSP
	add $-5960, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $152, %rsp
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000de947
uuid_00000000000de949:
uuid_00000000000deaee:
	mov -3680(%RBP),%RSP
	add $-5216, %RSP
	jmp uuid_00000000000deaf1
uuid_00000000000deaef:
#call function fragment-context::lookup-soft : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -2712(%rbp)
	pushq $0
	pushq $0
	pushq $3
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_SB_soft_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
uuid_00000000000de8d9:
#call function non-zero : Arrow<List<Array<Fragment,?>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000de8da
	jmp uuid_00000000000de8db
uuid_00000000000de8da:
	pushq -3832(%rbp)
	pushq -3840(%rbp)
	pushq -3848(%rbp)
	push %RBP
	pushq -3856(%rbp)
	pushq -3864(%rbp)
	pushq -3872(%rbp)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000de8d2
	jmp uuid_00000000000de8d4
uuid_00000000000de8d2:
	push %RBP
	mov -3896(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8cf
	jmp uuid_00000000000de8d1
uuid_00000000000de8cf:
	push %RBP
	mov -3888(%RBP), %RAX
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000de8cc
	jmp uuid_00000000000de8ce
uuid_00000000000de8cc:
	movb $1, -3912(%rbp)
uuid_00000000000de8ce:
	mov -3960(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000de8d1:
	mov -3928(%RBP),%RSP
	add $-4112, %RSP
uuid_00000000000de8d4:
	mov -3920(%RBP),%RSP
	add $-4112, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000de8d6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000de8d5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000de8d8
uuid_00000000000de8d6:
#call function fragment-context::bind : Arrow<Cons<Cons<Cons<FContext,String>,Type>,Fragment>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -3136(%rbp)
	pushq -3768(%RBP)
	pushq -3776(%RBP)
	pushq -3784(%RBP)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	pushq -4056(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_bind_CL_ArrowFContextConsFragmentConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
	push -416(%RSP)
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	pushq -4136(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -4232(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -4312(%rbp)
	pushq -208(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -4520(%RBP)
	pushq -4528(%RBP)
	pushq -4536(%RBP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4568(%rbp)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	movq -3952(%rbp), %r15
	movq %r15, -3848(%rbp)
	movq -3944(%rbp), %r15
	movq %r15, -3840(%rbp)
	movq -3936(%rbp), %r15
	movq %r15, -3832(%rbp)
uuid_00000000000de8d8:
	mov -3880(%RBP),%RSP
	add $-4568, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $24, %rsp
	add $152, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $200, %rsp
	add $232, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000de8d9
uuid_00000000000de8db:
uuid_00000000000deaf1:
	mov -2136(%RBP),%RSP
	add $-3848, %RSP
	jmp uuid_00000000000deaf4
uuid_00000000000deaf2:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2336(%RBP)
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deaf4:
	mov -1840(%RBP),%RSP
	add $-2360, %RSP
	jmp uuid_00000000000deaf7
uuid_00000000000deaf5:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deaf7:
	mov -1320(%RBP),%RSP
	add $-2064, %RSP
	jmp uuid_00000000000deafa
uuid_00000000000deaf8:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -288(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deafa:
	mov -800(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000deafd
uuid_00000000000deafb:
	pushq $0
	pushq -792(%rbp)
	pushq $2
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deafd:
	mov -680(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000deb00
uuid_00000000000deafe:
#call function fragment-context::lookup : Arrow<Cons<Cons<Cons<FContext,String>,Type>,AST>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -672(%rbp)
#call function typeof : Arrow<AST,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call typeof_CL_ArrowTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_lookup_CL_ArrowFragmentConsASTConsTypeConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
uuid_00000000000deb00:
	mov -560(%RBP),%RSP
	add $-824, %RSP
	jmp uuid_00000000000deb03
uuid_00000000000deb01:
uuid_00000000000deb03:
	mov -480(%RBP),%RSP
	add $-552, %RSP
	jmp uuid_00000000000deb06
uuid_00000000000deb04:
uuid_00000000000deb06:
	mov -400(%RBP),%RSP
	add $-472, %RSP
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	subq $232, %rsp
	pushq 232(%rsp)
	pushq 248(%rsp)
	pushq 264(%rsp)
	pushq 280(%rsp)
	pushq 296(%rsp)
	pushq 312(%rsp)
	pushq 328(%rsp)
	pushq 344(%rsp)
	pushq 360(%rsp)
	pushq 376(%rsp)
	pushq 392(%rsp)
	pushq 408(%rsp)
	pushq 424(%rsp)
	pushq 440(%rsp)
	pushq 456(%rsp)
	pushq 472(%rsp)
	pushq 488(%rsp)
	pushq 504(%rsp)
	pushq 520(%rsp)
	pushq 536(%rsp)
	pushq 552(%rsp)
	pushq 568(%rsp)
	pushq 584(%rsp)
	pushq 600(%rsp)
	pushq 616(%rsp)
	pushq 632(%rsp)
	pushq 648(%rsp)
	pushq 664(%rsp)
	pushq 680(%rsp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	addq $232, %rsp
	mov %rbp, %rsp
	sub $296, %rsp
	ret
blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb25
	jmp uuid_00000000000deb27
uuid_00000000000deb25:
	push %RBP
	mov -584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb13
	jmp uuid_00000000000deb15
uuid_00000000000deb13:
	push %RBP
	mov -680(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -784(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb0a
	jmp uuid_00000000000deb0c
uuid_00000000000deb0a:
	push %RBP
	jmp uuid_00000000000deb07
	jmp uuid_00000000000deb09
uuid_00000000000deb07:
	movb $1, -792(%rbp)
uuid_00000000000deb09:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000deb0c:
	mov -800(%RBP),%RSP
	add $-808, %RSP
	mov -792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb10
	jmp uuid_00000000000deb12
uuid_00000000000deb10:
	push %RBP
	mov -672(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb0d
	jmp uuid_00000000000deb0f
uuid_00000000000deb0d:
	movb $1, -696(%rbp)
uuid_00000000000deb0f:
	mov -816(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000deb12:
	mov -712(%RBP),%RSP
	add $-888, %RSP
uuid_00000000000deb15:
	mov -704(%RBP),%RSP
	add $-888, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb22
	jmp uuid_00000000000deb24
uuid_00000000000deb22:
	push %RBP
	mov -576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb1c
	jmp uuid_00000000000deb1e
uuid_00000000000deb1c:
	push %RBP
	jmp uuid_00000000000deb19
	jmp uuid_00000000000deb1b
uuid_00000000000deb19:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb16
	jmp uuid_00000000000deb18
uuid_00000000000deb16:
	movb $1, -976(%rbp)
uuid_00000000000deb18:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deb1b:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deb1e:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb1f
	jmp uuid_00000000000deb21
uuid_00000000000deb1f:
	movb $1, -600(%rbp)
uuid_00000000000deb21:
	mov -896(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deb24:
	mov -616(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deb27:
	mov -608(%RBP),%RSP
	add $-1008, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb65
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb37
	jmp uuid_00000000000deb39
uuid_00000000000deb37:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb34
	jmp uuid_00000000000deb36
uuid_00000000000deb34:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb2e
	jmp uuid_00000000000deb30
uuid_00000000000deb2e:
	push %RBP
	jmp uuid_00000000000deb2b
	jmp uuid_00000000000deb2d
uuid_00000000000deb2b:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deb28
	jmp uuid_00000000000deb2a
uuid_00000000000deb28:
	movb $1, -1272(%rbp)
uuid_00000000000deb2a:
	mov -1296(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000deb2d:
	mov -1288(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000deb30:
	mov -1280(%RBP),%RSP
	add $-1304, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb31
	jmp uuid_00000000000deb33
uuid_00000000000deb31:
	movb $1, -1096(%rbp)
uuid_00000000000deb33:
	mov -1192(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000deb36:
	mov -1112(%RBP),%RSP
	add $-1304, %RSP
uuid_00000000000deb39:
	mov -1104(%RBP),%RSP
	add $-1304, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb62
	push %RBP
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -1384(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb55
	jmp uuid_00000000000deb57
uuid_00000000000deb55:
	push %RBP
	mov -1376(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb4c
	jmp uuid_00000000000deb4e
uuid_00000000000deb4c:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb49
	jmp uuid_00000000000deb4b
uuid_00000000000deb49:
	push %RBP
	mov -1464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb43
	jmp uuid_00000000000deb45
uuid_00000000000deb43:
	push %RBP
	jmp uuid_00000000000deb40
	jmp uuid_00000000000deb42
uuid_00000000000deb40:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deb3d
	jmp uuid_00000000000deb3f
uuid_00000000000deb3d:
	movb $1, -1664(%rbp)
uuid_00000000000deb3f:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000deb42:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000deb45:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb46
	jmp uuid_00000000000deb48
uuid_00000000000deb46:
	movb $1, -1488(%rbp)
uuid_00000000000deb48:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000deb4b:
	mov -1504(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000deb4e:
	mov -1496(%RBP),%RSP
	add $-1696, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb52
	jmp uuid_00000000000deb54
uuid_00000000000deb52:
	push %RBP
	mov -1368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb4f
	jmp uuid_00000000000deb51
uuid_00000000000deb4f:
	movb $1, -1392(%rbp)
uuid_00000000000deb51:
	mov -1704(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000deb54:
	mov -1408(%RBP),%RSP
	add $-1776, %RSP
uuid_00000000000deb57:
	mov -1400(%RBP),%RSP
	add $-1776, %RSP
	mov -1392(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb5f
	push %RBP
	jmp uuid_00000000000deb5c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000deb5b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deb5e
uuid_00000000000deb5c:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000deb5e:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000deb61
uuid_00000000000deb5f:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1744(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1696(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb58
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000deb5a
uuid_00000000000deb58:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1696(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000deb5a:
	mov -1784(%RBP),%RSP
	add $-2040, %RSP
uuid_00000000000deb61:
	mov -1312(%RBP),%RSP
	add $-2040, %RSP
	jmp uuid_00000000000deb64
uuid_00000000000deb62:
	push %RBP
#call function has-prefix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call has_SB_prefix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb3a
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	jmp uuid_00000000000deb3c
uuid_00000000000deb3a:
#call function blob-render-simple : Arrow<Cons<Cons<Cons<FContext,String>,AST>,I64>,Tuple<FContext,S>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_SB_simple_CL_ArrowTupleSFContextConsI64ConsASTConsStringFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used232
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	push -320(%RSP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	mov -1304(%RBP), %RAX
	inc %RAX
	push %RAX
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000deb3c:
	mov -1312(%RBP),%RSP
	add $-1568, %RSP
uuid_00000000000deb64:
	mov -1016(%RBP),%RSP
	add $-1568, %RSP
	jmp uuid_00000000000deb67
uuid_00000000000deb65:
#call function blob-render : Arrow<Cons<Cons<Cons<FContext,AST>,Fragment>,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	mov %RBX, %RBP
	call blob_SB_render_CL_ArrowFragmentConsI64ConsFragmentConsASTFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	push -464(%RSP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
uuid_00000000000deb67:
	mov -520(%RBP),%RSP
	add $-1008, %RSP
	subq $152, %rsp
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $440, %rsp
	ret
never_SB_as_SB_expr_SB_type_CL_ArrowFragmentConsTypeFragment:
#call function mangle-c-type : Arrow<Type,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mangle_SB_c_SB_type_CL_ArrowSType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function == : Arrow<Cons<S,S>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	pushq $uuid_00000000000dac40
	pushq $2
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb69
	jmp uuid_00000000000deb6b
uuid_00000000000deb69:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de307
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dad50
	pushq $2
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq $0
	pushq $uuid_00000000000deb68
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000deb6b:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb84
	jmp uuid_00000000000deb86
uuid_00000000000deb84:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb72
	jmp uuid_00000000000deb74
uuid_00000000000deb72:
	push %RBP
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	jmp uuid_00000000000deb6f
	jmp uuid_00000000000deb71
uuid_00000000000deb6f:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deb6c
	jmp uuid_00000000000deb6e
uuid_00000000000deb6c:
	movb $1, -560(%rbp)
uuid_00000000000deb6e:
	mov -640(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000deb71:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000deb74:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb81
	jmp uuid_00000000000deb83
uuid_00000000000deb81:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb7b
	jmp uuid_00000000000deb7d
uuid_00000000000deb7b:
	push %RBP
	jmp uuid_00000000000deb78
	jmp uuid_00000000000deb7a
uuid_00000000000deb78:
	push %RBP
	mov -664(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -768(%rbp)
	pushq $uuid_00000000000de969
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deb75
	jmp uuid_00000000000deb77
uuid_00000000000deb75:
	movb $1, -736(%rbp)
uuid_00000000000deb77:
	mov -760(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000deb7a:
	mov -752(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000deb7d:
	mov -744(%RBP),%RSP
	add $-768, %RSP
	mov -736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deb7e
	jmp uuid_00000000000deb80
uuid_00000000000deb7e:
	movb $1, -464(%rbp)
uuid_00000000000deb80:
	mov -656(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000deb83:
	mov -480(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000deb86:
	mov -472(%RBP),%RSP
	add $-768, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debee
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb8d
	jmp uuid_00000000000deb8f
uuid_00000000000deb8d:
	push %RBP
	mov -840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb8a
	jmp uuid_00000000000deb8c
uuid_00000000000deb8a:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb87
	jmp uuid_00000000000deb89
uuid_00000000000deb87:
	movb $1, -856(%rbp)
uuid_00000000000deb89:
	mov -952(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000deb8c:
	mov -872(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000deb8f:
	mov -864(%RBP),%RSP
	add $-1024, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debeb
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1104(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb99
	jmp uuid_00000000000deb9b
uuid_00000000000deb99:
	push %RBP
	pushq -1080(%RBP)
	pushq -1088(%RBP)
	pushq -1096(%RBP)
	jmp uuid_00000000000deb96
	jmp uuid_00000000000deb98
uuid_00000000000deb96:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb93
	jmp uuid_00000000000deb95
uuid_00000000000deb93:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deb90
	jmp uuid_00000000000deb92
uuid_00000000000deb90:
	movb $1, -1112(%rbp)
uuid_00000000000deb92:
	mov -1240(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000deb95:
	mov -1160(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000deb98:
	mov -1128(%RBP),%RSP
	add $-1312, %RSP
uuid_00000000000deb9b:
	mov -1120(%RBP),%RSP
	add $-1312, %RSP
	mov -1112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debe8
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1392(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debe5
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	mov -1472(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debe2
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1552(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deb9f
	jmp uuid_00000000000deba1
uuid_00000000000deb9f:
	push %RBP
	jmp uuid_00000000000deb9c
	jmp uuid_00000000000deb9e
uuid_00000000000deb9c:
	movb $1, -1560(%rbp)
uuid_00000000000deb9e:
	mov -1576(%RBP),%RSP
	add $-1576, %RSP
uuid_00000000000deba1:
	mov -1568(%RBP),%RSP
	add $-1576, %RSP
	mov -1560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debdf
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deba8
	jmp uuid_00000000000debaa
uuid_00000000000deba8:
	push %RBP
	jmp uuid_00000000000deba5
	jmp uuid_00000000000deba7
uuid_00000000000deba5:
	push %RBP
	mov -1592(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deba2
	jmp uuid_00000000000deba4
uuid_00000000000deba2:
	movb $1, -1664(%rbp)
uuid_00000000000deba4:
	mov -1688(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000deba7:
	mov -1680(%RBP),%RSP
	add $-1696, %RSP
uuid_00000000000debaa:
	mov -1672(%RBP),%RSP
	add $-1696, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debdc
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1776(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debb1
	jmp uuid_00000000000debb3
uuid_00000000000debb1:
	push %RBP
	jmp uuid_00000000000debae
	jmp uuid_00000000000debb0
uuid_00000000000debae:
	push %RBP
	mov -1712(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000debab
	jmp uuid_00000000000debad
uuid_00000000000debab:
	movb $1, -1784(%rbp)
uuid_00000000000debad:
	mov -1808(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000debb0:
	mov -1800(%RBP),%RSP
	add $-1816, %RSP
uuid_00000000000debb3:
	mov -1792(%RBP),%RSP
	add $-1816, %RSP
	mov -1784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debd9
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -1896(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debba
	jmp uuid_00000000000debbc
uuid_00000000000debba:
	push %RBP
	mov -1888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debb7
	jmp uuid_00000000000debb9
uuid_00000000000debb7:
	push %RBP
	mov -1880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debb4
	jmp uuid_00000000000debb6
uuid_00000000000debb4:
	movb $1, -1904(%rbp)
uuid_00000000000debb6:
	mov -2000(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000debb9:
	mov -1920(%RBP),%RSP
	add $-2072, %RSP
uuid_00000000000debbc:
	mov -1912(%RBP),%RSP
	add $-2072, %RSP
	mov -1904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debd6
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debc3
	jmp uuid_00000000000debc5
uuid_00000000000debc3:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debc0
	jmp uuid_00000000000debc2
uuid_00000000000debc0:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debbd
	jmp uuid_00000000000debbf
uuid_00000000000debbd:
	movb $1, -2160(%rbp)
uuid_00000000000debbf:
	mov -2256(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000debc2:
	mov -2176(%RBP),%RSP
	add $-2328, %RSP
uuid_00000000000debc5:
	mov -2168(%RBP),%RSP
	add $-2328, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debd3
	push %RBP
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq $0
	push %RBP
	mov -2408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debcc
	jmp uuid_00000000000debce
uuid_00000000000debcc:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debc9
	jmp uuid_00000000000debcb
uuid_00000000000debc9:
	push %RBP
	pushq -2344(%RBP)
	pushq -2352(%RBP)
	pushq -2360(%RBP)
	pushq -2368(%RBP)
	pushq -2376(%RBP)
	pushq -2384(%RBP)
	pushq -2392(%RBP)
	jmp uuid_00000000000debc6
	jmp uuid_00000000000debc8
uuid_00000000000debc6:
	movb $1, -2416(%rbp)
uuid_00000000000debc8:
	mov -2512(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000debcb:
	mov -2432(%RBP),%RSP
	add $-2568, %RSP
uuid_00000000000debce:
	mov -2424(%RBP),%RSP
	add $-2568, %RSP
	mov -2416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debd0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000debcf
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000debd2
uuid_00000000000debd0:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	pushq -2488(%rbp)
	pushq -2496(%rbp)
	pushq -2504(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2664(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2656(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2648(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2640(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2632(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2624(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2616(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2608(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2600(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2592(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2584(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2576(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000debd2:
	mov -2336(%RBP),%RSP
	add $-2664, %RSP
	jmp uuid_00000000000debd5
uuid_00000000000debd3:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	pushq -2296(%rbp)
	pushq -2304(%rbp)
	pushq -2312(%rbp)
	pushq -2320(%rbp)
	pushq -2328(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2520(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2512(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2504(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2496(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2488(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2480(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2472(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2464(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2456(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2448(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2440(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2432(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000debd5:
	mov -2080(%RBP),%RSP
	add $-2520, %RSP
	jmp uuid_00000000000debd8
uuid_00000000000debd6:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	pushq -2032(%rbp)
	pushq -2040(%rbp)
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -2264(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -2216(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -2208(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -2200(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -2192(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -2184(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -2176(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000debd8:
	mov -1824(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000debdb
uuid_00000000000debd9:
uuid_00000000000debdb:
	mov -1704(%RBP),%RSP
	add $-1816, %RSP
	jmp uuid_00000000000debde
uuid_00000000000debdc:
uuid_00000000000debde:
	mov -1584(%RBP),%RSP
	add $-1696, %RSP
	jmp uuid_00000000000debe1
uuid_00000000000debdf:
uuid_00000000000debe1:
	mov -1480(%RBP),%RSP
	add $-1576, %RSP
	jmp uuid_00000000000debe4
uuid_00000000000debe2:
uuid_00000000000debe4:
	mov -1400(%RBP),%RSP
	add $-1472, %RSP
	jmp uuid_00000000000debe7
uuid_00000000000debe5:
uuid_00000000000debe7:
	mov -1320(%RBP),%RSP
	add $-1392, %RSP
	jmp uuid_00000000000debea
uuid_00000000000debe8:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1504(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1496(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1488(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1480(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1472(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1464(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1456(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1448(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1440(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1432(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1424(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1416(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000debea:
	mov -1032(%RBP),%RSP
	add $-1504, %RSP
	jmp uuid_00000000000debed
uuid_00000000000debeb:
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	movq -1216(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000debed:
	mov -776(%RBP),%RSP
	add $-1216, %RSP
	jmp uuid_00000000000debf0
uuid_00000000000debee:
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -648(%rbp)
	pushq -776(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	pushq $0
	movq -872(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -856(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -848(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -840(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -832(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -824(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -816(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -808(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -800(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -792(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -784(%rbp), %r15
	movq %r15, -216(%rbp)
uuid_00000000000debf0:
	mov -384(%RBP),%RSP
	add $-872, %RSP
	subq $96, %rsp
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $208, %rsp
	ret
index_SB_typedefs_CL_ArrowNilAST:
uuid_00000000000dec16:
#call function non-zero : Arrow<AST,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec17
	jmp uuid_00000000000dec18
uuid_00000000000dec17:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec00
	jmp uuid_00000000000dec02
uuid_00000000000dec00:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -328(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000debf7
	jmp uuid_00000000000debf9
uuid_00000000000debf7:
	push %RBP
	mov -320(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debf4
	jmp uuid_00000000000debf6
uuid_00000000000debf4:
	push %RBP
	mov -312(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debf1
	jmp uuid_00000000000debf3
uuid_00000000000debf1:
	movb $1, -336(%rbp)
uuid_00000000000debf3:
	mov -432(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000debf6:
	mov -352(%RBP),%RSP
	add $-504, %RSP
uuid_00000000000debf9:
	mov -344(%RBP),%RSP
	add $-504, %RSP
	mov -336(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000debfd
	jmp uuid_00000000000debff
uuid_00000000000debfd:
	push %RBP
	mov -216(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000debfa
	jmp uuid_00000000000debfc
uuid_00000000000debfa:
	movb $1, -240(%rbp)
uuid_00000000000debfc:
	mov -512(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000debff:
	mov -256(%RBP),%RSP
	add $-584, %RSP
uuid_00000000000dec02:
	mov -248(%RBP),%RSP
	add $-584, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec13
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $0
	push %RBP
	mov -664(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec09
	jmp uuid_00000000000dec0b
uuid_00000000000dec09:
	push %RBP
	jmp uuid_00000000000dec06
	jmp uuid_00000000000dec08
uuid_00000000000dec06:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dec03
	jmp uuid_00000000000dec05
uuid_00000000000dec03:
	movb $1, -672(%rbp)
uuid_00000000000dec05:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dec08:
	mov -688(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000dec0b:
	mov -680(%RBP),%RSP
	add $-768, %RSP
	mov -672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec10
	push %RBP
	jmp uuid_00000000000dec0d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dec0c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dec0f
uuid_00000000000dec0d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000dec0f:
	mov -776(%RBP),%RSP
	add $-776, %RSP
	jmp uuid_00000000000dec12
uuid_00000000000dec10:
	movq -768(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -760(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -752(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -744(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -736(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -728(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -720(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dec12:
	mov -592(%RBP),%RSP
	add $-768, %RSP
	jmp uuid_00000000000dec15
uuid_00000000000dec13:
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq $0
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -584(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -552(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -544(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -536(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -528(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -520(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000dec15:
	mov -160(%RBP),%RSP
	add $-584, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dec16
uuid_00000000000dec18:
	mov %rbp, %rsp
	sub $80, %rsp
	ret
index_SB_typedefs_CL_ArrowNilConsU64AST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec3a
	jmp uuid_00000000000dec3c
uuid_00000000000dec3a:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec1f
	jmp uuid_00000000000dec21
uuid_00000000000dec1f:
	push %RBP
	jmp uuid_00000000000dec1c
	jmp uuid_00000000000dec1e
uuid_00000000000dec1c:
	push %RBP
	mov -272(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dec19
	jmp uuid_00000000000dec1b
uuid_00000000000dec19:
	movb $1, -344(%rbp)
uuid_00000000000dec1b:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dec1e:
	mov -360(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000dec21:
	mov -352(%RBP),%RSP
	add $-376, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec37
	jmp uuid_00000000000dec39
uuid_00000000000dec37:
	push %RBP
	mov -224(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec31
	jmp uuid_00000000000dec33
uuid_00000000000dec31:
	push %RBP
	mov -448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec28
	jmp uuid_00000000000dec2a
uuid_00000000000dec28:
	push %RBP
	jmp uuid_00000000000dec25
	jmp uuid_00000000000dec27
uuid_00000000000dec25:
	push %RBP
	mov -488(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -592(%rbp)
	pushq $uuid_00000000000dc810
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec22
	jmp uuid_00000000000dec24
uuid_00000000000dec22:
	movb $1, -560(%rbp)
uuid_00000000000dec24:
	mov -584(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dec27:
	mov -576(%RBP),%RSP
	add $-592, %RSP
uuid_00000000000dec2a:
	mov -568(%RBP),%RSP
	add $-592, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec2e
	jmp uuid_00000000000dec30
uuid_00000000000dec2e:
	push %RBP
	mov -440(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dec2b
	jmp uuid_00000000000dec2d
uuid_00000000000dec2b:
	movb $1, -464(%rbp)
uuid_00000000000dec2d:
	mov -600(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000dec30:
	mov -480(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000dec33:
	mov -472(%RBP),%RSP
	add $-672, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec34
	jmp uuid_00000000000dec36
uuid_00000000000dec34:
	movb $1, -248(%rbp)
uuid_00000000000dec36:
	mov -384(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000dec39:
	mov -264(%RBP),%RSP
	add $-672, %RSP
uuid_00000000000dec3c:
	mov -256(%RBP),%RSP
	add $-672, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec96
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec67
	jmp uuid_00000000000dec69
uuid_00000000000dec67:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -848(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec4c
	jmp uuid_00000000000dec4e
uuid_00000000000dec4c:
	push %RBP
	jmp uuid_00000000000dec49
	jmp uuid_00000000000dec4b
uuid_00000000000dec49:
	push %RBP
	mov -832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec43
	jmp uuid_00000000000dec45
uuid_00000000000dec43:
	push %RBP
	jmp uuid_00000000000dec40
	jmp uuid_00000000000dec42
uuid_00000000000dec40:
	push %RBP
	mov -888(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dec3d
	jmp uuid_00000000000dec3f
uuid_00000000000dec3d:
	movb $1, -960(%rbp)
uuid_00000000000dec3f:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dec42:
	mov -976(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dec45:
	mov -968(%RBP),%RSP
	add $-992, %RSP
	mov -960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec46
	jmp uuid_00000000000dec48
uuid_00000000000dec46:
	movb $1, -856(%rbp)
uuid_00000000000dec48:
	mov -880(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dec4b:
	mov -872(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000dec4e:
	mov -864(%RBP),%RSP
	add $-992, %RSP
	mov -856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec64
	jmp uuid_00000000000dec66
uuid_00000000000dec64:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec5e
	jmp uuid_00000000000dec60
uuid_00000000000dec5e:
	push %RBP
	mov -1064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1168(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec55
	jmp uuid_00000000000dec57
uuid_00000000000dec55:
	push %RBP
	jmp uuid_00000000000dec52
	jmp uuid_00000000000dec54
uuid_00000000000dec52:
	push %RBP
	mov -1104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1208(%rbp)
	pushq $uuid_00000000000dc810
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dec4f
	jmp uuid_00000000000dec51
uuid_00000000000dec4f:
	movb $1, -1176(%rbp)
uuid_00000000000dec51:
	mov -1200(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000dec54:
	mov -1192(%RBP),%RSP
	add $-1208, %RSP
uuid_00000000000dec57:
	mov -1184(%RBP),%RSP
	add $-1208, %RSP
	mov -1176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec5b
	jmp uuid_00000000000dec5d
uuid_00000000000dec5b:
	push %RBP
	mov -1056(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dec58
	jmp uuid_00000000000dec5a
uuid_00000000000dec58:
	movb $1, -1080(%rbp)
uuid_00000000000dec5a:
	mov -1216(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dec5d:
	mov -1096(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dec60:
	mov -1088(%RBP),%RSP
	add $-1288, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec61
	jmp uuid_00000000000dec63
uuid_00000000000dec61:
	movb $1, -760(%rbp)
uuid_00000000000dec63:
	mov -1000(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dec66:
	mov -776(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000dec69:
	mov -768(%RBP),%RSP
	add $-1288, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec93
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1368(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec70
	jmp uuid_00000000000dec72
uuid_00000000000dec70:
	push %RBP
	jmp uuid_00000000000dec6d
	jmp uuid_00000000000dec6f
uuid_00000000000dec6d:
	push %RBP
	mov -1304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dec6a
	jmp uuid_00000000000dec6c
uuid_00000000000dec6a:
	movb $1, -1376(%rbp)
uuid_00000000000dec6c:
	mov -1400(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000dec6f:
	mov -1392(%RBP),%RSP
	add $-1408, %RSP
uuid_00000000000dec72:
	mov -1384(%RBP),%RSP
	add $-1408, %RSP
	mov -1376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec90
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -1488(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec82
	jmp uuid_00000000000dec84
uuid_00000000000dec82:
	push %RBP
	jmp uuid_00000000000dec7f
	jmp uuid_00000000000dec81
uuid_00000000000dec7f:
	push %RBP
	mov -1472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1592(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec79
	jmp uuid_00000000000dec7b
uuid_00000000000dec79:
	push %RBP
	jmp uuid_00000000000dec76
	jmp uuid_00000000000dec78
uuid_00000000000dec76:
	push %RBP
	mov -1528(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dec73
	jmp uuid_00000000000dec75
uuid_00000000000dec73:
	movb $1, -1600(%rbp)
uuid_00000000000dec75:
	mov -1624(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000dec78:
	mov -1616(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000dec7b:
	mov -1608(%RBP),%RSP
	add $-1632, %RSP
	mov -1600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec7c
	jmp uuid_00000000000dec7e
uuid_00000000000dec7c:
	movb $1, -1496(%rbp)
uuid_00000000000dec7e:
	mov -1520(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000dec81:
	mov -1512(%RBP),%RSP
	add $-1632, %RSP
uuid_00000000000dec84:
	mov -1504(%RBP),%RSP
	add $-1632, %RSP
	mov -1496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dec8d
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	mov -1712(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec8a
	push %RBP
	jmp uuid_00000000000dec87
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dec86
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dec89
uuid_00000000000dec87:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dec85
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dec89:
	mov -1720(%RBP),%RSP
	add $-1720, %RSP
	jmp uuid_00000000000dec8c
uuid_00000000000dec8a:
uuid_00000000000dec8c:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
	jmp uuid_00000000000dec8f
uuid_00000000000dec8d:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1632(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dec8f:
	mov -1416(%RBP),%RSP
	add $-1632, %RSP
	jmp uuid_00000000000dec92
uuid_00000000000dec90:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1408(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dec92:
	mov -1296(%RBP),%RSP
	add $-1408, %RSP
	jmp uuid_00000000000dec95
uuid_00000000000dec93:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dec95:
	mov -680(%RBP),%RSP
	add $-1288, %RSP
	jmp uuid_00000000000dec98
uuid_00000000000dec96:
#call function index-index-of-tag : Arrow<Cons<String,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call index_SB_index_SB_of_SB_tag_CL_ArrowNilConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-lone-tag : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -376(%rbp)
	mov %RBX, %RBP
	call index_SB_lone_SB_tag_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function index-typedefs : Arrow<Cons<AST,U64>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	push %RAX
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilConsU64AST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000dec98:
	mov -168(%RBP),%RSP
	add $-672, %RSP
	mov %rbp, %rsp
	sub $88, %rsp
	ret
is_SB_macro_SB_head_CL_ArrowU64ConsU64String:
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000ded0d:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded0e
	jmp uuid_00000000000ded0f
uuid_00000000000ded0e:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decba
	jmp uuid_00000000000decbc
uuid_00000000000decba:
	push %RBP
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq $0
	push %RBP
	mov -720(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decb1
	jmp uuid_00000000000decb3
uuid_00000000000decb1:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	jmp uuid_00000000000decae
	jmp uuid_00000000000decb0
uuid_00000000000decae:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq $0
	push %RBP
	mov -896(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deca8
	jmp uuid_00000000000decaa
uuid_00000000000deca8:
	push %RBP
	mov -888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deca5
	jmp uuid_00000000000deca7
uuid_00000000000deca5:
	push %RBP
	mov -880(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1072(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dec9f
	jmp uuid_00000000000deca1
uuid_00000000000dec9f:
	push %RBP
	jmp uuid_00000000000dec9c
	jmp uuid_00000000000dec9e
uuid_00000000000dec9c:
	push %RBP
	mov -1008(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dec99
	jmp uuid_00000000000dec9b
uuid_00000000000dec99:
	movb $1, -1080(%rbp)
uuid_00000000000dec9b:
	mov -1104(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000dec9e:
	mov -1096(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000deca1:
	mov -1088(%RBP),%RSP
	add $-1112, %RSP
	mov -1080(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deca2
	jmp uuid_00000000000deca4
uuid_00000000000deca2:
	movb $1, -904(%rbp)
uuid_00000000000deca4:
	mov -1000(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000deca7:
	mov -920(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000decaa:
	mov -912(%RBP),%RSP
	add $-1112, %RSP
	mov -904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decab
	jmp uuid_00000000000decad
uuid_00000000000decab:
	movb $1, -728(%rbp)
uuid_00000000000decad:
	mov -824(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000decb0:
	mov -744(%RBP),%RSP
	add $-1112, %RSP
uuid_00000000000decb3:
	mov -736(%RBP),%RSP
	add $-1112, %RSP
	mov -728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decb7
	jmp uuid_00000000000decb9
uuid_00000000000decb7:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000decb4
	jmp uuid_00000000000decb6
uuid_00000000000decb4:
	movb $1, -552(%rbp)
uuid_00000000000decb6:
	mov -1120(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000decb9:
	mov -568(%RBP),%RSP
	add $-1288, %RSP
uuid_00000000000decbc:
	mov -560(%RBP),%RSP
	add $-1288, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded0a
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -1464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decea
	jmp uuid_00000000000decec
uuid_00000000000decea:
	push %RBP
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	pushq -1360(%RBP)
	pushq -1368(%RBP)
	pushq -1376(%RBP)
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	pushq -1448(%RBP)
	pushq -1456(%RBP)
	pushq $0
	push %RBP
	mov -1640(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dece1
	jmp uuid_00000000000dece3
uuid_00000000000dece1:
	push %RBP
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	pushq -1616(%RBP)
	pushq -1624(%RBP)
	pushq -1632(%RBP)
	jmp uuid_00000000000decde
	jmp uuid_00000000000dece0
uuid_00000000000decde:
	push %RBP
	pushq -1496(%RBP)
	pushq -1504(%RBP)
	pushq -1512(%RBP)
	pushq -1520(%RBP)
	pushq -1528(%RBP)
	pushq -1536(%RBP)
	pushq -1544(%RBP)
	pushq -1552(%RBP)
	pushq -1560(%RBP)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decd8
	jmp uuid_00000000000decda
uuid_00000000000decd8:
	push %RBP
	mov -1808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000decd5
	jmp uuid_00000000000decd7
uuid_00000000000decd5:
	push %RBP
	mov -1800(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1992(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deccf
	jmp uuid_00000000000decd1
uuid_00000000000deccf:
	push %RBP
	mov -1984(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deccc
	jmp uuid_00000000000decce
uuid_00000000000deccc:
	push %RBP
	mov -1976(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decc6
	jmp uuid_00000000000decc8
uuid_00000000000decc6:
	push %RBP
	jmp uuid_00000000000decc3
	jmp uuid_00000000000decc5
uuid_00000000000decc3:
	push %RBP
	mov -2104(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000decc0
	jmp uuid_00000000000decc2
uuid_00000000000decc0:
	movb $1, -2176(%rbp)
uuid_00000000000decc2:
	mov -2200(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000decc5:
	mov -2192(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000decc8:
	mov -2184(%RBP),%RSP
	add $-2208, %RSP
	mov -2176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decc9
	jmp uuid_00000000000deccb
uuid_00000000000decc9:
	movb $1, -2000(%rbp)
uuid_00000000000deccb:
	mov -2096(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000decce:
	mov -2016(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000decd1:
	mov -2008(%RBP),%RSP
	add $-2208, %RSP
	mov -2000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decd2
	jmp uuid_00000000000decd4
uuid_00000000000decd2:
	movb $1, -1824(%rbp)
uuid_00000000000decd4:
	mov -1920(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000decd7:
	mov -1840(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000decda:
	mov -1832(%RBP),%RSP
	add $-2208, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decdb
	jmp uuid_00000000000decdd
uuid_00000000000decdb:
	movb $1, -1648(%rbp)
uuid_00000000000decdd:
	mov -1744(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000dece0:
	mov -1664(%RBP),%RSP
	add $-2208, %RSP
uuid_00000000000dece3:
	mov -1656(%RBP),%RSP
	add $-2208, %RSP
	mov -1648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dece7
	jmp uuid_00000000000dece9
uuid_00000000000dece7:
	push %RBP
	mov -1304(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dece4
	jmp uuid_00000000000dece6
uuid_00000000000dece4:
	movb $1, -1472(%rbp)
uuid_00000000000dece6:
	mov -2216(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000dece9:
	mov -1488(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000decec:
	mov -1480(%RBP),%RSP
	add $-2384, %RSP
	mov -1472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded07
	push %RBP
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decff
	jmp uuid_00000000000ded01
uuid_00000000000decff:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	pushq -2464(%RBP)
	pushq -2472(%RBP)
	pushq -2480(%RBP)
	pushq -2488(%RBP)
	pushq -2496(%RBP)
	pushq -2504(%RBP)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decf6
	jmp uuid_00000000000decf8
uuid_00000000000decf6:
	push %RBP
	pushq -2664(%RBP)
	pushq -2672(%RBP)
	pushq -2680(%RBP)
	pushq -2688(%RBP)
	pushq -2696(%RBP)
	pushq -2704(%RBP)
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	jmp uuid_00000000000decf3
	jmp uuid_00000000000decf5
uuid_00000000000decf3:
	push %RBP
	pushq -2592(%RBP)
	pushq -2600(%RBP)
	pushq -2608(%RBP)
	pushq -2616(%RBP)
	pushq -2624(%RBP)
	pushq -2632(%RBP)
	pushq -2640(%RBP)
	pushq -2648(%RBP)
	pushq -2656(%RBP)
	jmp uuid_00000000000decf0
	jmp uuid_00000000000decf2
uuid_00000000000decf0:
	movb $1, -2744(%rbp)
uuid_00000000000decf2:
	mov -2840(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000decf5:
	mov -2760(%RBP),%RSP
	add $-2912, %RSP
uuid_00000000000decf8:
	mov -2752(%RBP),%RSP
	add $-2912, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000decfc
	jmp uuid_00000000000decfe
uuid_00000000000decfc:
	push %RBP
	mov -2400(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000decf9
	jmp uuid_00000000000decfb
uuid_00000000000decf9:
	movb $1, -2568(%rbp)
uuid_00000000000decfb:
	mov -2920(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000decfe:
	mov -2584(%RBP),%RSP
	add $-3088, %RSP
uuid_00000000000ded01:
	mov -2576(%RBP),%RSP
	add $-3088, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded04
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ded03
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ded06
uuid_00000000000ded04:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ded02
	pushq -2848(%rbp)
	pushq -2856(%rbp)
	pushq -2864(%rbp)
	pushq -2872(%rbp)
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ded06:
	mov -2392(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000ded09
uuid_00000000000ded07:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -2208(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deced
	jmp uuid_00000000000decef
uuid_00000000000deced:
	movq $1, -200(%rbp)
uuid_00000000000decef:
	mov -2392(%RBP),%RSP
	add $-2392, %RSP
	movq -2384(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -2376(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -2368(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -2360(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -2352(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -2272(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -2264(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -2256(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -2248(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -2240(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -2232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -2224(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000ded09:
	mov -1296(%RBP),%RSP
	add $-2392, %RSP
	jmp uuid_00000000000ded0c
uuid_00000000000ded0a:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000decbd
	jmp uuid_00000000000decbf
uuid_00000000000decbd:
	movq $1, -200(%rbp)
uuid_00000000000decbf:
	mov -1296(%RBP),%RSP
	add $-1296, %RSP
	movq -1288(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1280(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1272(%rbp), %r15
	movq %r15, -176(%rbp)
	movq -1264(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1256(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1248(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1240(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -1232(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -1224(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -1216(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000ded0c:
	mov -376(%RBP),%RSP
	add $-1296, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ded0d
uuid_00000000000ded0f:
	mov -200(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov $preprocess_SB_macros_CL_MacroListMacroList, %r15
	pushq 160(%r15)
	pushq 152(%r15)
	pushq 144(%r15)
	pushq 136(%r15)
	pushq 128(%r15)
	pushq 120(%r15)
	pushq 112(%r15)
	pushq 104(%r15)
	pushq 96(%r15)
	pushq 88(%r15)
	pushq 80(%r15)
	pushq 72(%r15)
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	pushq $0
uuid_00000000000ded70:
#call function non-zero : Arrow<MacroList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64MacroList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded71
	jmp uuid_00000000000ded72
uuid_00000000000ded71:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	push %RBP
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq $0
	push %RBP
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded1f
	jmp uuid_00000000000ded21
uuid_00000000000ded1f:
	push %RBP
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded16
	jmp uuid_00000000000ded18
uuid_00000000000ded16:
	push %RBP
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	jmp uuid_00000000000ded13
	jmp uuid_00000000000ded15
uuid_00000000000ded13:
	push %RBP
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	pushq -752(%RBP)
	pushq -760(%RBP)
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000ded10
	jmp uuid_00000000000ded12
uuid_00000000000ded10:
	movb $1, -872(%rbp)
uuid_00000000000ded12:
	mov -968(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ded15:
	mov -888(%RBP),%RSP
	add $-1040, %RSP
uuid_00000000000ded18:
	mov -880(%RBP),%RSP
	add $-1040, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded1c
	jmp uuid_00000000000ded1e
uuid_00000000000ded1c:
	push %RBP
	mov -528(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded19
	jmp uuid_00000000000ded1b
uuid_00000000000ded19:
	movb $1, -696(%rbp)
uuid_00000000000ded1b:
	mov -1048(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000ded1e:
	mov -712(%RBP),%RSP
	add $-1216, %RSP
uuid_00000000000ded21:
	mov -704(%RBP),%RSP
	add $-1216, %RSP
	mov -696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded6d
	push %RBP
	jmp uuid_00000000000ded6a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ded69
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ded6c
uuid_00000000000ded6a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000ded6c:
	mov -1224(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000ded6f
uuid_00000000000ded6d:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded31
	jmp uuid_00000000000ded33
uuid_00000000000ded31:
	push %RBP
	jmp uuid_00000000000ded2e
	jmp uuid_00000000000ded30
uuid_00000000000ded2e:
	push %RBP
	mov -1360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1480(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded28
	jmp uuid_00000000000ded2a
uuid_00000000000ded28:
	push %RBP
	jmp uuid_00000000000ded25
	jmp uuid_00000000000ded27
uuid_00000000000ded25:
	push %RBP
	mov -1416(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ded22
	jmp uuid_00000000000ded24
uuid_00000000000ded22:
	movb $1, -1488(%rbp)
uuid_00000000000ded24:
	mov -1512(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000ded27:
	mov -1504(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000ded2a:
	mov -1496(%RBP),%RSP
	add $-1520, %RSP
	mov -1488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded2b
	jmp uuid_00000000000ded2d
uuid_00000000000ded2b:
	movb $1, -1384(%rbp)
uuid_00000000000ded2d:
	mov -1408(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000ded30:
	mov -1400(%RBP),%RSP
	add $-1520, %RSP
uuid_00000000000ded33:
	mov -1392(%RBP),%RSP
	add $-1520, %RSP
	mov -1384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded59
	push %RBP
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq $0
	push %RBP
	mov -1600(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded4f
	jmp uuid_00000000000ded51
uuid_00000000000ded4f:
	push %RBP
	jmp uuid_00000000000ded4c
	jmp uuid_00000000000ded4e
uuid_00000000000ded4c:
	push %RBP
	mov -1584(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1704(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded46
	jmp uuid_00000000000ded48
uuid_00000000000ded46:
	push %RBP
	jmp uuid_00000000000ded43
	jmp uuid_00000000000ded45
uuid_00000000000ded43:
	push %RBP
	mov -1688(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1808(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded3d
	jmp uuid_00000000000ded3f
uuid_00000000000ded3d:
	push %RBP
	jmp uuid_00000000000ded3a
	jmp uuid_00000000000ded3c
uuid_00000000000ded3a:
	push %RBP
	mov -1744(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ded37
	jmp uuid_00000000000ded39
uuid_00000000000ded37:
	movb $1, -1816(%rbp)
uuid_00000000000ded39:
	mov -1840(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000ded3c:
	mov -1832(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000ded3f:
	mov -1824(%RBP),%RSP
	add $-1848, %RSP
	mov -1816(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded40
	jmp uuid_00000000000ded42
uuid_00000000000ded40:
	movb $1, -1712(%rbp)
uuid_00000000000ded42:
	mov -1736(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000ded45:
	mov -1728(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000ded48:
	mov -1720(%RBP),%RSP
	add $-1848, %RSP
	mov -1712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded49
	jmp uuid_00000000000ded4b
uuid_00000000000ded49:
	movb $1, -1608(%rbp)
uuid_00000000000ded4b:
	mov -1632(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000ded4e:
	mov -1624(%RBP),%RSP
	add $-1848, %RSP
uuid_00000000000ded51:
	mov -1616(%RBP),%RSP
	add $-1848, %RSP
	mov -1608(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded56
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ded55
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ded58
uuid_00000000000ded56:
	push %RBP
	mov -16(%RBP), %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1848(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded52
	jmp uuid_00000000000ded54
uuid_00000000000ded52:
	movb $1, -1224(%rbp)
uuid_00000000000ded54:
	mov -1856(%RBP),%RSP
	add $-1856, %RSP
uuid_00000000000ded58:
	mov -1528(%RBP),%RSP
	add $-1856, %RSP
	jmp uuid_00000000000ded5b
uuid_00000000000ded59:
	push %RBP
	mov -16(%RBP), %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -1520(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded34
	jmp uuid_00000000000ded36
uuid_00000000000ded34:
	movb $1, -1224(%rbp)
uuid_00000000000ded36:
	mov -1528(%RBP),%RSP
	add $-1528, %RSP
uuid_00000000000ded5b:
	mov -1304(%RBP),%RSP
	add $-1528, %RSP
	push %RBP
	mov -1224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded66
	jmp uuid_00000000000ded68
uuid_00000000000ded66:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	mov -1736(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded63
	push %RBP
	pushq -1544(%rbp)
	pushq -1552(%rbp)
	pushq -1560(%rbp)
	pushq -1568(%rbp)
	pushq -1576(%rbp)
	pushq -1584(%rbp)
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	jmp uuid_00000000000ded60
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000ded5f
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000ded62
uuid_00000000000ded60:
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -960(%RBP)
	popq -952(%RBP)
	popq -944(%RBP)
	popq -936(%RBP)
	popq -928(%RBP)
	popq -920(%RBP)
	popq -912(%RBP)
	popq -904(%RBP)
	popq -896(%RBP)
#call function apply : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call apply_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
#call function extract-uuids : Arrow<Cons<Cons<SourceLocation,Context>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call extract_SB_uuids_CL_ArrowContextConsASTConsContextSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push -232(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded5c
	jmp uuid_00000000000ded5e
uuid_00000000000ded5c:
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	popq -1912(%RBP)
	popq -1904(%RBP)
	popq -1896(%RBP)
	popq -1888(%RBP)
	popq -1880(%RBP)
	popq -1872(%RBP)
	popq -1864(%RBP)
	popq -1856(%RBP)
	popq -1848(%RBP)
uuid_00000000000ded5e:
	mov -2016(%RBP),%RSP
	add $-2016, %RSP
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movb $1, -344(%rbp)
uuid_00000000000ded62:
	mov -1744(%RBP),%RSP
	add $-2016, %RSP
	jmp uuid_00000000000ded65
uuid_00000000000ded63:
	movq -1216(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1208(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1200(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1192(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1184(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1176(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1168(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -256(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -1120(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -1112(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -1104(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -1096(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -176(%rbp)
uuid_00000000000ded65:
	mov -1640(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000ded68:
	mov -1536(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000ded6f:
	mov -520(%RBP),%RSP
	add $-1736, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000ded70
uuid_00000000000ded72:
	push %RBP
	mov -344(%RBP), %AL
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded74
	jmp uuid_00000000000ded76
uuid_00000000000ded74:
#call function exit-error : Arrow<Cons<String,AST>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000ded73
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call exit_SB_error_CL_ArrowNilConsASTString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000ded76:
	mov -352(%RBP),%RSP
	add $-352, %RSP
	subq $72, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $96, %rsp
	ret
preprocess_SB_apply_SB_literals_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded98
	jmp uuid_00000000000ded9a
uuid_00000000000ded98:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded7d
	jmp uuid_00000000000ded7f
uuid_00000000000ded7d:
	push %RBP
	jmp uuid_00000000000ded7a
	jmp uuid_00000000000ded7c
uuid_00000000000ded7a:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ded77
	jmp uuid_00000000000ded79
uuid_00000000000ded77:
	movb $1, -408(%rbp)
uuid_00000000000ded79:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000ded7c:
	mov -424(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000ded7f:
	mov -416(%RBP),%RSP
	add $-440, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded95
	jmp uuid_00000000000ded97
uuid_00000000000ded95:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -520(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded8f
	jmp uuid_00000000000ded91
uuid_00000000000ded8f:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000ded8c
	jmp uuid_00000000000ded8e
uuid_00000000000ded8c:
	push %RBP
	mov -504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000ded86
	jmp uuid_00000000000ded88
uuid_00000000000ded86:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000ded83
	jmp uuid_00000000000ded85
uuid_00000000000ded83:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -792(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000ded80
	jmp uuid_00000000000ded82
uuid_00000000000ded80:
	movb $1, -704(%rbp)
uuid_00000000000ded82:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000ded85:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000ded88:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded89
	jmp uuid_00000000000ded8b
uuid_00000000000ded89:
	movb $1, -528(%rbp)
uuid_00000000000ded8b:
	mov -624(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000ded8e:
	mov -544(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000ded91:
	mov -536(%RBP),%RSP
	add $-792, %RSP
	mov -528(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000ded92
	jmp uuid_00000000000ded94
uuid_00000000000ded92:
	movb $1, -312(%rbp)
uuid_00000000000ded94:
	mov -448(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000ded97:
	mov -328(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000ded9a:
	mov -320(%RBP),%RSP
	add $-792, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee27
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedbc
	jmp uuid_00000000000dedbe
uuid_00000000000dedbc:
	push %RBP
	mov -864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -968(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deda1
	jmp uuid_00000000000deda3
uuid_00000000000deda1:
	push %RBP
	jmp uuid_00000000000ded9e
	jmp uuid_00000000000deda0
uuid_00000000000ded9e:
	push %RBP
	mov -904(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000ded9b
	jmp uuid_00000000000ded9d
uuid_00000000000ded9b:
	movb $1, -976(%rbp)
uuid_00000000000ded9d:
	mov -1000(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deda0:
	mov -992(%RBP),%RSP
	add $-1008, %RSP
uuid_00000000000deda3:
	mov -984(%RBP),%RSP
	add $-1008, %RSP
	mov -976(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedb9
	jmp uuid_00000000000dedbb
uuid_00000000000dedb9:
	push %RBP
	mov -856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1088(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedb3
	jmp uuid_00000000000dedb5
uuid_00000000000dedb3:
	push %RBP
	mov -1080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedb0
	jmp uuid_00000000000dedb2
uuid_00000000000dedb0:
	push %RBP
	mov -1072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedaa
	jmp uuid_00000000000dedac
uuid_00000000000dedaa:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	jmp uuid_00000000000deda7
	jmp uuid_00000000000deda9
uuid_00000000000deda7:
	push %RBP
	mov -1200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1360(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deda4
	jmp uuid_00000000000deda6
uuid_00000000000deda4:
	movb $1, -1272(%rbp)
uuid_00000000000deda6:
	mov -1352(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000deda9:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dedac:
	mov -1280(%RBP),%RSP
	add $-1360, %RSP
	mov -1272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedad
	jmp uuid_00000000000dedaf
uuid_00000000000dedad:
	movb $1, -1096(%rbp)
uuid_00000000000dedaf:
	mov -1192(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dedb2:
	mov -1112(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dedb5:
	mov -1104(%RBP),%RSP
	add $-1360, %RSP
	mov -1096(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dedb6
	jmp uuid_00000000000dedb8
uuid_00000000000dedb6:
	movb $1, -880(%rbp)
uuid_00000000000dedb8:
	mov -1016(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dedbb:
	mov -896(%RBP),%RSP
	add $-1360, %RSP
uuid_00000000000dedbe:
	mov -888(%RBP),%RSP
	add $-1360, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee24
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedc5
	jmp uuid_00000000000dedc7
uuid_00000000000dedc5:
	push %RBP
	pushq -1384(%RBP)
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	jmp uuid_00000000000dedc2
	jmp uuid_00000000000dedc4
uuid_00000000000dedc2:
	push %RBP
	mov -1376(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dedbf
	jmp uuid_00000000000dedc1
uuid_00000000000dedbf:
	movb $1, -1448(%rbp)
uuid_00000000000dedc1:
	mov -1528(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dedc4:
	mov -1464(%RBP),%RSP
	add $-1536, %RSP
uuid_00000000000dedc7:
	mov -1456(%RBP),%RSP
	add $-1536, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee21
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedd5
	jmp uuid_00000000000dedd7
uuid_00000000000dedd5:
	push %RBP
	pushq -1560(%RBP)
	pushq -1568(%RBP)
	pushq -1576(%RBP)
	pushq -1584(%RBP)
	pushq -1592(%RBP)
	pushq -1600(%RBP)
	pushq -1608(%RBP)
	jmp uuid_00000000000dedd2
	jmp uuid_00000000000dedd4
uuid_00000000000dedd2:
	push %RBP
	mov -1552(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dedcf
	jmp uuid_00000000000dedd1
uuid_00000000000dedcf:
	movb $1, -1624(%rbp)
uuid_00000000000dedd1:
	mov -1704(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000dedd4:
	mov -1640(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000dedd7:
	mov -1632(%RBP),%RSP
	add $-1712, %RSP
	mov -1624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee1e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1792(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dede1
	jmp uuid_00000000000dede3
uuid_00000000000dede1:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedde
	jmp uuid_00000000000dede0
uuid_00000000000dedde:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deddb
	jmp uuid_00000000000deddd
uuid_00000000000deddb:
	movb $1, -1800(%rbp)
uuid_00000000000deddd:
	mov -1896(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000dede0:
	mov -1816(%RBP),%RSP
	add $-1968, %RSP
uuid_00000000000dede3:
	mov -1808(%RBP),%RSP
	add $-1968, %RSP
	mov -1800(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee1b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2048(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedea
	jmp uuid_00000000000dedec
uuid_00000000000dedea:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dede7
	jmp uuid_00000000000dede9
uuid_00000000000dede7:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dede4
	jmp uuid_00000000000dede6
uuid_00000000000dede4:
	movb $1, -2056(%rbp)
uuid_00000000000dede6:
	mov -2152(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000dede9:
	mov -2072(%RBP),%RSP
	add $-2224, %RSP
uuid_00000000000dedec:
	mov -2064(%RBP),%RSP
	add $-2224, %RSP
	mov -2056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee18
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedf3
	jmp uuid_00000000000dedf5
uuid_00000000000dedf3:
	push %RBP
	mov -2296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedf0
	jmp uuid_00000000000dedf2
uuid_00000000000dedf0:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deded
	jmp uuid_00000000000dedef
uuid_00000000000deded:
	movb $1, -2312(%rbp)
uuid_00000000000dedef:
	mov -2408(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000dedf2:
	mov -2328(%RBP),%RSP
	add $-2480, %RSP
uuid_00000000000dedf5:
	mov -2320(%RBP),%RSP
	add $-2480, %RSP
	mov -2312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee15
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dedff
	jmp uuid_00000000000dee01
uuid_00000000000dedff:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000dedfc
	jmp uuid_00000000000dedfe
uuid_00000000000dedfc:
	push %RBP
	mov -2528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedf9
	jmp uuid_00000000000dedfb
uuid_00000000000dedf9:
	push %RBP
	mov -2520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dedf6
	jmp uuid_00000000000dedf8
uuid_00000000000dedf6:
	movb $1, -2568(%rbp)
uuid_00000000000dedf8:
	mov -2696(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000dedfb:
	mov -2616(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000dedfe:
	mov -2584(%RBP),%RSP
	add $-2768, %RSP
uuid_00000000000dee01:
	mov -2576(%RBP),%RSP
	add $-2768, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee12
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2848(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee08
	jmp uuid_00000000000dee0a
uuid_00000000000dee08:
	push %RBP
	mov -2840(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee05
	jmp uuid_00000000000dee07
uuid_00000000000dee05:
	push %RBP
	pushq -2784(%RBP)
	pushq -2792(%RBP)
	pushq -2800(%RBP)
	pushq -2808(%RBP)
	pushq -2816(%RBP)
	pushq -2824(%RBP)
	pushq -2832(%RBP)
	jmp uuid_00000000000dee02
	jmp uuid_00000000000dee04
uuid_00000000000dee02:
	movb $1, -2856(%rbp)
uuid_00000000000dee04:
	mov -2952(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000dee07:
	mov -2872(%RBP),%RSP
	add $-3008, %RSP
uuid_00000000000dee0a:
	mov -2864(%RBP),%RSP
	add $-3008, %RSP
	mov -2856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee0f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000dee0c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dee0b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dee0e
uuid_00000000000dee0c:
	movq -3088(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -3080(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -3072(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -3064(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -3056(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -3048(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -3040(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -3032(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -3024(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000dee0e:
	mov -3016(%RBP),%RSP
	add $-3088, %RSP
	jmp uuid_00000000000dee11
uuid_00000000000dee0f:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2960(%rbp)
	pushq -2968(%rbp)
	pushq -2976(%rbp)
	pushq -2984(%rbp)
	pushq -2992(%rbp)
	pushq -3000(%rbp)
	pushq -3008(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2880(%rbp)
	pushq -2888(%rbp)
	pushq -2896(%rbp)
	pushq -2904(%rbp)
	pushq -2912(%rbp)
	pushq -2920(%rbp)
	pushq -2928(%rbp)
	pushq -2936(%rbp)
	pushq -2944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dee11:
	mov -2776(%RBP),%RSP
	add $-3008, %RSP
	jmp uuid_00000000000dee14
uuid_00000000000dee12:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2704(%rbp)
	pushq -2712(%rbp)
	pushq -2720(%rbp)
	pushq -2728(%rbp)
	pushq -2736(%rbp)
	pushq -2744(%rbp)
	pushq -2752(%rbp)
	pushq -2760(%rbp)
	pushq -2768(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dee14:
	mov -2488(%RBP),%RSP
	add $-2768, %RSP
	jmp uuid_00000000000dee17
uuid_00000000000dee15:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
	pushq -2464(%rbp)
	pushq -2472(%rbp)
	pushq -2480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	pushq -2400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dee17:
	mov -2232(%RBP),%RSP
	add $-2480, %RSP
	jmp uuid_00000000000dee1a
uuid_00000000000dee18:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dee1a:
	mov -1976(%RBP),%RSP
	add $-2224, %RSP
	jmp uuid_00000000000dee1d
uuid_00000000000dee1b:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dee1d:
	mov -1720(%RBP),%RSP
	add $-1968, %RSP
	jmp uuid_00000000000dee20
uuid_00000000000dee1e:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000dedc8
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dedd8
	jmp uuid_00000000000dedda
uuid_00000000000dedd8:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1712(%rbp)
	pushq $uuid_00000000000dedc8
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dedc9
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000dedc9
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1728(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1728(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dedcb
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000dedcb
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dedcb
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	pushq -1664(%rbp)
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq $uuid_00000000000dedcb
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dedda:
	mov -1720(%RBP),%RSP
	add $-1728, %RSP
uuid_00000000000dee20:
	mov -1544(%RBP),%RSP
	add $-1728, %RSP
	jmp uuid_00000000000dee23
uuid_00000000000dee21:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000dedc8
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dedcc
	jmp uuid_00000000000dedce
uuid_00000000000dedcc:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1536(%rbp)
	pushq $uuid_00000000000dedc8
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dedc9
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000dedc9
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1552(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1552(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dedca
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dedcb
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000dedcb
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dedcb
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq $uuid_00000000000dedcb
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dedce:
	mov -1544(%RBP),%RSP
	add $-1552, %RSP
uuid_00000000000dee23:
	mov -1368(%RBP),%RSP
	add $-1552, %RSP
	jmp uuid_00000000000dee26
uuid_00000000000dee24:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1008(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dee26:
	mov -800(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000dee29
uuid_00000000000dee27:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000dee29:
	mov -232(%RBP),%RSP
	add $-792, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_SB_locations_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee44
	jmp uuid_00000000000dee46
uuid_00000000000dee44:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee31
	jmp uuid_00000000000dee33
uuid_00000000000dee31:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dee2e
	jmp uuid_00000000000dee30
uuid_00000000000dee2e:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -496(%rbp)
	pushq $uuid_00000000000dee2a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dee2b
	jmp uuid_00000000000dee2d
uuid_00000000000dee2b:
	movb $1, -408(%rbp)
uuid_00000000000dee2d:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dee30:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dee33:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee41
	jmp uuid_00000000000dee43
uuid_00000000000dee41:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee3b
	jmp uuid_00000000000dee3d
uuid_00000000000dee3b:
	push %RBP
	jmp uuid_00000000000dee38
	jmp uuid_00000000000dee3a
uuid_00000000000dee38:
	push %RBP
	mov -512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -616(%rbp)
	pushq $uuid_00000000000dee34
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dee35
	jmp uuid_00000000000dee37
uuid_00000000000dee35:
	movb $1, -584(%rbp)
uuid_00000000000dee37:
	mov -608(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dee3a:
	mov -600(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dee3d:
	mov -592(%RBP),%RSP
	add $-616, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee3e
	jmp uuid_00000000000dee40
uuid_00000000000dee3e:
	movb $1, -312(%rbp)
uuid_00000000000dee40:
	mov -504(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dee43:
	mov -328(%RBP),%RSP
	add $-616, %RSP
uuid_00000000000dee46:
	mov -320(%RBP),%RSP
	add $-616, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeb6
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee61
	jmp uuid_00000000000dee63
uuid_00000000000dee61:
	push %RBP
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	pushq -688(%RBP)
	jmp uuid_00000000000dee5e
	jmp uuid_00000000000dee60
uuid_00000000000dee5e:
	push %RBP
	mov -632(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dee5b
	jmp uuid_00000000000dee5d
uuid_00000000000dee5b:
	movb $1, -704(%rbp)
uuid_00000000000dee5d:
	mov -784(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dee60:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dee63:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeb3
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee6a
	jmp uuid_00000000000dee6c
uuid_00000000000dee6a:
	push %RBP
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	jmp uuid_00000000000dee67
	jmp uuid_00000000000dee69
uuid_00000000000dee67:
	push %RBP
	mov -808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dee64
	jmp uuid_00000000000dee66
uuid_00000000000dee64:
	movb $1, -880(%rbp)
uuid_00000000000dee66:
	mov -960(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dee69:
	mov -896(%RBP),%RSP
	add $-968, %RSP
uuid_00000000000dee6c:
	mov -888(%RBP),%RSP
	add $-968, %RSP
	mov -880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeb0
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee73
	jmp uuid_00000000000dee75
uuid_00000000000dee73:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee70
	jmp uuid_00000000000dee72
uuid_00000000000dee70:
	push %RBP
	mov -1032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee6d
	jmp uuid_00000000000dee6f
uuid_00000000000dee6d:
	movb $1, -1056(%rbp)
uuid_00000000000dee6f:
	mov -1152(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000dee72:
	mov -1072(%RBP),%RSP
	add $-1224, %RSP
uuid_00000000000dee75:
	mov -1064(%RBP),%RSP
	add $-1224, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deead
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1304(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee7c
	jmp uuid_00000000000dee7e
uuid_00000000000dee7c:
	push %RBP
	mov -1296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee79
	jmp uuid_00000000000dee7b
uuid_00000000000dee79:
	push %RBP
	mov -1288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee76
	jmp uuid_00000000000dee78
uuid_00000000000dee76:
	movb $1, -1312(%rbp)
uuid_00000000000dee78:
	mov -1408(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dee7b:
	mov -1328(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000dee7e:
	mov -1320(%RBP),%RSP
	add $-1480, %RSP
	mov -1312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeaa
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee85
	jmp uuid_00000000000dee87
uuid_00000000000dee85:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee82
	jmp uuid_00000000000dee84
uuid_00000000000dee82:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee7f
	jmp uuid_00000000000dee81
uuid_00000000000dee7f:
	movb $1, -1568(%rbp)
uuid_00000000000dee81:
	mov -1664(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000dee84:
	mov -1584(%RBP),%RSP
	add $-1736, %RSP
uuid_00000000000dee87:
	mov -1576(%RBP),%RSP
	add $-1736, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deea7
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1816(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee91
	jmp uuid_00000000000dee93
uuid_00000000000dee91:
	push %RBP
	pushq -1792(%RBP)
	pushq -1800(%RBP)
	pushq -1808(%RBP)
	jmp uuid_00000000000dee8e
	jmp uuid_00000000000dee90
uuid_00000000000dee8e:
	push %RBP
	mov -1784(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee8b
	jmp uuid_00000000000dee8d
uuid_00000000000dee8b:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee88
	jmp uuid_00000000000dee8a
uuid_00000000000dee88:
	movb $1, -1824(%rbp)
uuid_00000000000dee8a:
	mov -1952(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000dee8d:
	mov -1872(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000dee90:
	mov -1840(%RBP),%RSP
	add $-2024, %RSP
uuid_00000000000dee93:
	mov -1832(%RBP),%RSP
	add $-2024, %RSP
	mov -1824(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deea4
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2104(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee9a
	jmp uuid_00000000000dee9c
uuid_00000000000dee9a:
	push %RBP
	mov -2096(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dee97
	jmp uuid_00000000000dee99
uuid_00000000000dee97:
	push %RBP
	pushq -2040(%RBP)
	pushq -2048(%RBP)
	pushq -2056(%RBP)
	pushq -2064(%RBP)
	pushq -2072(%RBP)
	pushq -2080(%RBP)
	pushq -2088(%RBP)
	jmp uuid_00000000000dee94
	jmp uuid_00000000000dee96
uuid_00000000000dee94:
	movb $1, -2112(%rbp)
uuid_00000000000dee96:
	mov -2208(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000dee99:
	mov -2128(%RBP),%RSP
	add $-2264, %RSP
uuid_00000000000dee9c:
	mov -2120(%RBP),%RSP
	add $-2264, %RSP
	mov -2112(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deea1
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000dee9e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dee9d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000deea0
uuid_00000000000dee9e:
	movq -2344(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -2336(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -2328(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -2320(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -2312(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -2304(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -2296(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -2288(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -2280(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000deea0:
	mov -2272(%RBP),%RSP
	add $-2344, %RSP
	jmp uuid_00000000000deea3
uuid_00000000000deea1:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2216(%rbp)
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2136(%rbp)
	pushq -2144(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deea3:
	mov -2032(%RBP),%RSP
	add $-2264, %RSP
	jmp uuid_00000000000deea6
uuid_00000000000deea4:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1960(%rbp)
	pushq -1968(%rbp)
	pushq -1976(%rbp)
	pushq -1984(%rbp)
	pushq -1992(%rbp)
	pushq -2000(%rbp)
	pushq -2008(%rbp)
	pushq -2016(%rbp)
	pushq -2024(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deea6:
	mov -1744(%RBP),%RSP
	add $-2024, %RSP
	jmp uuid_00000000000deea9
uuid_00000000000deea7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1672(%rbp)
	pushq -1680(%rbp)
	pushq -1688(%rbp)
	pushq -1696(%rbp)
	pushq -1704(%rbp)
	pushq -1712(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1592(%rbp)
	pushq -1600(%rbp)
	pushq -1608(%rbp)
	pushq -1616(%rbp)
	pushq -1624(%rbp)
	pushq -1632(%rbp)
	pushq -1640(%rbp)
	pushq -1648(%rbp)
	pushq -1656(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deea9:
	mov -1488(%RBP),%RSP
	add $-1736, %RSP
	jmp uuid_00000000000deeac
uuid_00000000000deeaa:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	pushq -1376(%rbp)
	pushq -1384(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deeac:
	mov -1232(%RBP),%RSP
	add $-1480, %RSP
	jmp uuid_00000000000deeaf
uuid_00000000000deead:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deeaf:
	mov -976(%RBP),%RSP
	add $-1224, %RSP
	jmp uuid_00000000000deeb2
uuid_00000000000deeb0:
	pushq -968(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deeb2:
	mov -800(%RBP),%RSP
	add $-968, %RSP
	jmp uuid_00000000000deeb5
uuid_00000000000deeb3:
	pushq -792(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deeb5:
	mov -624(%RBP),%RSP
	add $-792, %RSP
	jmp uuid_00000000000deeb8
uuid_00000000000deeb6:
	pushq $uuid_00000000000dee47
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	push %RBP
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dee51
	jmp uuid_00000000000dee53
uuid_00000000000dee51:
	push %RBP
	mov -688(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dee4e
	jmp uuid_00000000000dee50
uuid_00000000000dee4e:
	push %RBP
	mov -680(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dee4b
	jmp uuid_00000000000dee4d
uuid_00000000000dee4b:
	push %RBP
	mov -672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dee48
	jmp uuid_00000000000dee4a
uuid_00000000000dee48:
	movb $1, -704(%rbp)
uuid_00000000000dee4a:
	mov -752(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000dee4d:
	mov -736(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000dee50:
	mov -720(%RBP),%RSP
	add $-760, %RSP
uuid_00000000000dee53:
	mov -712(%RBP),%RSP
	add $-760, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dee58
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dee57
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dee5a
uuid_00000000000dee58:
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dee54
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -760(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dee55
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -744(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dee56
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq %RAX, -624(%rbp)
uuid_00000000000dee5a:
	mov -664(%RBP),%RSP
	add $-760, %RSP
	pushq -624(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000deeb8:
	mov -232(%RBP),%RSP
	add $-760, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_apply_CL_ArrowASTAST:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deee0
	jmp uuid_00000000000deee2
uuid_00000000000deee0:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deedd
	jmp uuid_00000000000deedf
uuid_00000000000deedd:
	push %RBP
	mov -288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deed7
	jmp uuid_00000000000deed9
uuid_00000000000deed7:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -576(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deec5
	jmp uuid_00000000000deec7
uuid_00000000000deec5:
	push %RBP
	mov -568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deebc
	jmp uuid_00000000000deebe
uuid_00000000000deebc:
	push %RBP
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000deeb9
	jmp uuid_00000000000deebb
uuid_00000000000deeb9:
	movb $1, -680(%rbp)
uuid_00000000000deebb:
	mov -696(%RBP),%RSP
	add $-720, %RSP
uuid_00000000000deebe:
	mov -688(%RBP),%RSP
	add $-720, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deec2
	jmp uuid_00000000000deec4
uuid_00000000000deec2:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deebf
	jmp uuid_00000000000deec1
uuid_00000000000deebf:
	movb $1, -584(%rbp)
uuid_00000000000deec1:
	mov -728(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000deec4:
	mov -600(%RBP),%RSP
	add $-800, %RSP
uuid_00000000000deec7:
	mov -592(%RBP),%RSP
	add $-800, %RSP
	mov -584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deed4
	jmp uuid_00000000000deed6
uuid_00000000000deed4:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -880(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deece
	jmp uuid_00000000000deed0
uuid_00000000000deece:
	push %RBP
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	jmp uuid_00000000000deecb
	jmp uuid_00000000000deecd
uuid_00000000000deecb:
	push %RBP
	mov -816(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -976(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deec8
	jmp uuid_00000000000deeca
uuid_00000000000deec8:
	movb $1, -888(%rbp)
uuid_00000000000deeca:
	mov -968(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000deecd:
	mov -904(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000deed0:
	mov -896(%RBP),%RSP
	add $-976, %RSP
	mov -888(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deed1
	jmp uuid_00000000000deed3
uuid_00000000000deed1:
	movb $1, -488(%rbp)
uuid_00000000000deed3:
	mov -808(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000deed6:
	mov -504(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000deed9:
	mov -496(%RBP),%RSP
	add $-976, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deeda
	jmp uuid_00000000000deedc
uuid_00000000000deeda:
	movb $1, -312(%rbp)
uuid_00000000000deedc:
	mov -408(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000deedf:
	mov -328(%RBP),%RSP
	add $-976, %RSP
uuid_00000000000deee2:
	mov -320(%RBP),%RSP
	add $-976, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df09c
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def04
	jmp uuid_00000000000def06
uuid_00000000000def04:
	push %RBP
	mov -1048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1152(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deee9
	jmp uuid_00000000000deeeb
uuid_00000000000deee9:
	push %RBP
	jmp uuid_00000000000deee6
	jmp uuid_00000000000deee8
uuid_00000000000deee6:
	push %RBP
	mov -1088(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deee3
	jmp uuid_00000000000deee5
uuid_00000000000deee3:
	movb $1, -1160(%rbp)
uuid_00000000000deee5:
	mov -1184(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000deee8:
	mov -1176(%RBP),%RSP
	add $-1192, %RSP
uuid_00000000000deeeb:
	mov -1168(%RBP),%RSP
	add $-1192, %RSP
	mov -1160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def01
	jmp uuid_00000000000def03
uuid_00000000000def01:
	push %RBP
	mov -1040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1272(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deefb
	jmp uuid_00000000000deefd
uuid_00000000000deefb:
	push %RBP
	mov -1264(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deef8
	jmp uuid_00000000000deefa
uuid_00000000000deef8:
	push %RBP
	mov -1256(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deef2
	jmp uuid_00000000000deef4
uuid_00000000000deef2:
	push %RBP
	pushq -1392(%RBP)
	pushq -1400(%RBP)
	pushq -1408(%RBP)
	pushq -1416(%RBP)
	pushq -1424(%RBP)
	pushq -1432(%RBP)
	pushq -1440(%RBP)
	jmp uuid_00000000000deeef
	jmp uuid_00000000000deef1
uuid_00000000000deeef:
	push %RBP
	mov -1384(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1544(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deeec
	jmp uuid_00000000000deeee
uuid_00000000000deeec:
	movb $1, -1456(%rbp)
uuid_00000000000deeee:
	mov -1536(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000deef1:
	mov -1472(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000deef4:
	mov -1464(%RBP),%RSP
	add $-1544, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deef5
	jmp uuid_00000000000deef7
uuid_00000000000deef5:
	movb $1, -1280(%rbp)
uuid_00000000000deef7:
	mov -1376(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000deefa:
	mov -1296(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000deefd:
	mov -1288(%RBP),%RSP
	add $-1544, %RSP
	mov -1280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000deefe
	jmp uuid_00000000000def00
uuid_00000000000deefe:
	movb $1, -1064(%rbp)
uuid_00000000000def00:
	mov -1200(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000def03:
	mov -1080(%RBP),%RSP
	add $-1544, %RSP
uuid_00000000000def06:
	mov -1072(%RBP),%RSP
	add $-1544, %RSP
	mov -1064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df099
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -1624(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def28
	jmp uuid_00000000000def2a
uuid_00000000000def28:
	push %RBP
	mov -1616(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1720(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def0d
	jmp uuid_00000000000def0f
uuid_00000000000def0d:
	push %RBP
	jmp uuid_00000000000def0a
	jmp uuid_00000000000def0c
uuid_00000000000def0a:
	push %RBP
	mov -1656(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def07
	jmp uuid_00000000000def09
uuid_00000000000def07:
	movb $1, -1728(%rbp)
uuid_00000000000def09:
	mov -1752(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000def0c:
	mov -1744(%RBP),%RSP
	add $-1760, %RSP
uuid_00000000000def0f:
	mov -1736(%RBP),%RSP
	add $-1760, %RSP
	mov -1728(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def25
	jmp uuid_00000000000def27
uuid_00000000000def25:
	push %RBP
	mov -1608(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1840(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def1f
	jmp uuid_00000000000def21
uuid_00000000000def1f:
	push %RBP
	mov -1832(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def1c
	jmp uuid_00000000000def1e
uuid_00000000000def1c:
	push %RBP
	mov -1824(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2016(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def16
	jmp uuid_00000000000def18
uuid_00000000000def16:
	push %RBP
	pushq -1960(%RBP)
	pushq -1968(%RBP)
	pushq -1976(%RBP)
	pushq -1984(%RBP)
	pushq -1992(%RBP)
	pushq -2000(%RBP)
	pushq -2008(%RBP)
	jmp uuid_00000000000def13
	jmp uuid_00000000000def15
uuid_00000000000def13:
	push %RBP
	mov -1952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2112(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000def10
	jmp uuid_00000000000def12
uuid_00000000000def10:
	movb $1, -2024(%rbp)
uuid_00000000000def12:
	mov -2104(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000def15:
	mov -2040(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000def18:
	mov -2032(%RBP),%RSP
	add $-2112, %RSP
	mov -2024(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def19
	jmp uuid_00000000000def1b
uuid_00000000000def19:
	movb $1, -1848(%rbp)
uuid_00000000000def1b:
	mov -1944(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000def1e:
	mov -1864(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000def21:
	mov -1856(%RBP),%RSP
	add $-2112, %RSP
	mov -1848(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def22
	jmp uuid_00000000000def24
uuid_00000000000def22:
	movb $1, -1632(%rbp)
uuid_00000000000def24:
	mov -1768(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000def27:
	mov -1648(%RBP),%RSP
	add $-2112, %RSP
uuid_00000000000def2a:
	mov -1640(%RBP),%RSP
	add $-2112, %RSP
	mov -1632(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df096
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2192(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def52
	jmp uuid_00000000000def54
uuid_00000000000def52:
	push %RBP
	mov -2184(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def4f
	jmp uuid_00000000000def51
uuid_00000000000def4f:
	push %RBP
	mov -2176(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def49
	jmp uuid_00000000000def4b
uuid_00000000000def49:
	push %RBP
	mov -2360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def37
	jmp uuid_00000000000def39
uuid_00000000000def37:
	push %RBP
	mov -2456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2560(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def2e
	jmp uuid_00000000000def30
uuid_00000000000def2e:
	push %RBP
	pushq -2536(%RBP)
	pushq -2544(%RBP)
	pushq -2552(%RBP)
	jmp uuid_00000000000def2b
	jmp uuid_00000000000def2d
uuid_00000000000def2b:
	movb $1, -2568(%rbp)
uuid_00000000000def2d:
	mov -2584(%RBP),%RSP
	add $-2608, %RSP
uuid_00000000000def30:
	mov -2576(%RBP),%RSP
	add $-2608, %RSP
	mov -2568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def34
	jmp uuid_00000000000def36
uuid_00000000000def34:
	push %RBP
	mov -2448(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def31
	jmp uuid_00000000000def33
uuid_00000000000def31:
	movb $1, -2472(%rbp)
uuid_00000000000def33:
	mov -2616(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000def36:
	mov -2488(%RBP),%RSP
	add $-2688, %RSP
uuid_00000000000def39:
	mov -2480(%RBP),%RSP
	add $-2688, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def46
	jmp uuid_00000000000def48
uuid_00000000000def46:
	push %RBP
	mov -2352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def40
	jmp uuid_00000000000def42
uuid_00000000000def40:
	push %RBP
	pushq -2712(%RBP)
	pushq -2720(%RBP)
	pushq -2728(%RBP)
	pushq -2736(%RBP)
	pushq -2744(%RBP)
	pushq -2752(%RBP)
	pushq -2760(%RBP)
	jmp uuid_00000000000def3d
	jmp uuid_00000000000def3f
uuid_00000000000def3d:
	push %RBP
	mov -2704(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2864(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000def3a
	jmp uuid_00000000000def3c
uuid_00000000000def3a:
	movb $1, -2776(%rbp)
uuid_00000000000def3c:
	mov -2856(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000def3f:
	mov -2792(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000def42:
	mov -2784(%RBP),%RSP
	add $-2864, %RSP
	mov -2776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def43
	jmp uuid_00000000000def45
uuid_00000000000def43:
	movb $1, -2376(%rbp)
uuid_00000000000def45:
	mov -2696(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000def48:
	mov -2392(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000def4b:
	mov -2384(%RBP),%RSP
	add $-2864, %RSP
	mov -2376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def4c
	jmp uuid_00000000000def4e
uuid_00000000000def4c:
	movb $1, -2200(%rbp)
uuid_00000000000def4e:
	mov -2296(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000def51:
	mov -2216(%RBP),%RSP
	add $-2864, %RSP
uuid_00000000000def54:
	mov -2208(%RBP),%RSP
	add $-2864, %RSP
	mov -2200(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df093
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -2944(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def76
	jmp uuid_00000000000def78
uuid_00000000000def76:
	push %RBP
	mov -2936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3040(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def5b
	jmp uuid_00000000000def5d
uuid_00000000000def5b:
	push %RBP
	jmp uuid_00000000000def58
	jmp uuid_00000000000def5a
uuid_00000000000def58:
	push %RBP
	mov -2976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def55
	jmp uuid_00000000000def57
uuid_00000000000def55:
	movb $1, -3048(%rbp)
uuid_00000000000def57:
	mov -3072(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000def5a:
	mov -3064(%RBP),%RSP
	add $-3080, %RSP
uuid_00000000000def5d:
	mov -3056(%RBP),%RSP
	add $-3080, %RSP
	mov -3048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def73
	jmp uuid_00000000000def75
uuid_00000000000def73:
	push %RBP
	mov -2928(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3160(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def6d
	jmp uuid_00000000000def6f
uuid_00000000000def6d:
	push %RBP
	mov -3152(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def6a
	jmp uuid_00000000000def6c
uuid_00000000000def6a:
	push %RBP
	mov -3144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3336(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def64
	jmp uuid_00000000000def66
uuid_00000000000def64:
	push %RBP
	pushq -3280(%RBP)
	pushq -3288(%RBP)
	pushq -3296(%RBP)
	pushq -3304(%RBP)
	pushq -3312(%RBP)
	pushq -3320(%RBP)
	pushq -3328(%RBP)
	jmp uuid_00000000000def61
	jmp uuid_00000000000def63
uuid_00000000000def61:
	push %RBP
	mov -3272(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3432(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000def5e
	jmp uuid_00000000000def60
uuid_00000000000def5e:
	movb $1, -3344(%rbp)
uuid_00000000000def60:
	mov -3424(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000def63:
	mov -3360(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000def66:
	mov -3352(%RBP),%RSP
	add $-3432, %RSP
	mov -3344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def67
	jmp uuid_00000000000def69
uuid_00000000000def67:
	movb $1, -3168(%rbp)
uuid_00000000000def69:
	mov -3264(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000def6c:
	mov -3184(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000def6f:
	mov -3176(%RBP),%RSP
	add $-3432, %RSP
	mov -3168(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def70
	jmp uuid_00000000000def72
uuid_00000000000def70:
	movb $1, -2952(%rbp)
uuid_00000000000def72:
	mov -3088(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000def75:
	mov -2968(%RBP),%RSP
	add $-3432, %RSP
uuid_00000000000def78:
	mov -2960(%RBP),%RSP
	add $-3432, %RSP
	mov -2952(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df090
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -3512(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def9a
	jmp uuid_00000000000def9c
uuid_00000000000def9a:
	push %RBP
	mov -3504(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3608(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def7f
	jmp uuid_00000000000def81
uuid_00000000000def7f:
	push %RBP
	jmp uuid_00000000000def7c
	jmp uuid_00000000000def7e
uuid_00000000000def7c:
	push %RBP
	mov -3544(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def79
	jmp uuid_00000000000def7b
uuid_00000000000def79:
	movb $1, -3616(%rbp)
uuid_00000000000def7b:
	mov -3640(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000def7e:
	mov -3632(%RBP),%RSP
	add $-3648, %RSP
uuid_00000000000def81:
	mov -3624(%RBP),%RSP
	add $-3648, %RSP
	mov -3616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def97
	jmp uuid_00000000000def99
uuid_00000000000def97:
	push %RBP
	mov -3496(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3728(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def91
	jmp uuid_00000000000def93
uuid_00000000000def91:
	push %RBP
	mov -3720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000def8e
	jmp uuid_00000000000def90
uuid_00000000000def8e:
	push %RBP
	mov -3712(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3904(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000def88
	jmp uuid_00000000000def8a
uuid_00000000000def88:
	push %RBP
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	jmp uuid_00000000000def85
	jmp uuid_00000000000def87
uuid_00000000000def85:
	push %RBP
	mov -3840(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4000(%rbp)
	pushq $uuid_00000000000dadb6
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000def82
	jmp uuid_00000000000def84
uuid_00000000000def82:
	movb $1, -3912(%rbp)
uuid_00000000000def84:
	mov -3992(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000def87:
	mov -3928(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000def8a:
	mov -3920(%RBP),%RSP
	add $-4000, %RSP
	mov -3912(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def8b
	jmp uuid_00000000000def8d
uuid_00000000000def8b:
	movb $1, -3736(%rbp)
uuid_00000000000def8d:
	mov -3832(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000def90:
	mov -3752(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000def93:
	mov -3744(%RBP),%RSP
	add $-4000, %RSP
	mov -3736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000def94
	jmp uuid_00000000000def96
uuid_00000000000def94:
	movb $1, -3520(%rbp)
uuid_00000000000def96:
	mov -3656(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000def99:
	mov -3536(%RBP),%RSP
	add $-4000, %RSP
uuid_00000000000def9c:
	mov -3528(%RBP),%RSP
	add $-4000, %RSP
	mov -3520(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df08d
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4080(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defb5
	jmp uuid_00000000000defb7
uuid_00000000000defb5:
	push %RBP
	mov -4072(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4176(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defa3
	jmp uuid_00000000000defa5
uuid_00000000000defa3:
	push %RBP
	jmp uuid_00000000000defa0
	jmp uuid_00000000000defa2
uuid_00000000000defa0:
	push %RBP
	mov -4112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000def9d
	jmp uuid_00000000000def9f
uuid_00000000000def9d:
	movb $1, -4184(%rbp)
uuid_00000000000def9f:
	mov -4208(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000defa2:
	mov -4200(%RBP),%RSP
	add $-4216, %RSP
uuid_00000000000defa5:
	mov -4192(%RBP),%RSP
	add $-4216, %RSP
	mov -4184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defb2
	jmp uuid_00000000000defb4
uuid_00000000000defb2:
	push %RBP
	mov -4064(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4296(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defac
	jmp uuid_00000000000defae
uuid_00000000000defac:
	push %RBP
	pushq -4240(%RBP)
	pushq -4248(%RBP)
	pushq -4256(%RBP)
	pushq -4264(%RBP)
	pushq -4272(%RBP)
	pushq -4280(%RBP)
	pushq -4288(%RBP)
	jmp uuid_00000000000defa9
	jmp uuid_00000000000defab
uuid_00000000000defa9:
	push %RBP
	mov -4232(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4392(%rbp)
	pushq $uuid_00000000000db131
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000defa6
	jmp uuid_00000000000defa8
uuid_00000000000defa6:
	movb $1, -4304(%rbp)
uuid_00000000000defa8:
	mov -4384(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000defab:
	mov -4320(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000defae:
	mov -4312(%RBP),%RSP
	add $-4392, %RSP
	mov -4304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defaf
	jmp uuid_00000000000defb1
uuid_00000000000defaf:
	movb $1, -4088(%rbp)
uuid_00000000000defb1:
	mov -4224(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000defb4:
	mov -4104(%RBP),%RSP
	add $-4392, %RSP
uuid_00000000000defb7:
	mov -4096(%RBP),%RSP
	add $-4392, %RSP
	mov -4088(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df08a
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4472(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defd0
	jmp uuid_00000000000defd2
uuid_00000000000defd0:
	push %RBP
	mov -4464(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4568(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defbe
	jmp uuid_00000000000defc0
uuid_00000000000defbe:
	push %RBP
	jmp uuid_00000000000defbb
	jmp uuid_00000000000defbd
uuid_00000000000defbb:
	push %RBP
	mov -4504(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000defb8
	jmp uuid_00000000000defba
uuid_00000000000defb8:
	movb $1, -4576(%rbp)
uuid_00000000000defba:
	mov -4600(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000defbd:
	mov -4592(%RBP),%RSP
	add $-4608, %RSP
uuid_00000000000defc0:
	mov -4584(%RBP),%RSP
	add $-4608, %RSP
	mov -4576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defcd
	jmp uuid_00000000000defcf
uuid_00000000000defcd:
	push %RBP
	mov -4456(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -4688(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defc7
	jmp uuid_00000000000defc9
uuid_00000000000defc7:
	push %RBP
	pushq -4632(%RBP)
	pushq -4640(%RBP)
	pushq -4648(%RBP)
	pushq -4656(%RBP)
	pushq -4664(%RBP)
	pushq -4672(%RBP)
	pushq -4680(%RBP)
	jmp uuid_00000000000defc4
	jmp uuid_00000000000defc6
uuid_00000000000defc4:
	push %RBP
	mov -4624(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4784(%rbp)
	pushq $uuid_00000000000db131
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000defc1
	jmp uuid_00000000000defc3
uuid_00000000000defc1:
	movb $1, -4696(%rbp)
uuid_00000000000defc3:
	mov -4776(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000defc6:
	mov -4712(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000defc9:
	mov -4704(%RBP),%RSP
	add $-4784, %RSP
	mov -4696(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defca
	jmp uuid_00000000000defcc
uuid_00000000000defca:
	movb $1, -4480(%rbp)
uuid_00000000000defcc:
	mov -4616(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000defcf:
	mov -4496(%RBP),%RSP
	add $-4784, %RSP
uuid_00000000000defd2:
	mov -4488(%RBP),%RSP
	add $-4784, %RSP
	mov -4480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df087
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -4864(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defd9
	jmp uuid_00000000000defdb
uuid_00000000000defd9:
	push %RBP
	pushq -4808(%RBP)
	pushq -4816(%RBP)
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	pushq -4848(%RBP)
	pushq -4856(%RBP)
	jmp uuid_00000000000defd6
	jmp uuid_00000000000defd8
uuid_00000000000defd6:
	push %RBP
	mov -4800(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000defd3
	jmp uuid_00000000000defd5
uuid_00000000000defd3:
	movb $1, -4872(%rbp)
uuid_00000000000defd5:
	mov -4952(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000defd8:
	mov -4888(%RBP),%RSP
	add $-4960, %RSP
uuid_00000000000defdb:
	mov -4880(%RBP),%RSP
	add $-4960, %RSP
	mov -4872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df084
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5040(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000deff8
	jmp uuid_00000000000deffa
uuid_00000000000deff8:
	push %RBP
	pushq -4984(%RBP)
	pushq -4992(%RBP)
	pushq -5000(%RBP)
	pushq -5008(%RBP)
	pushq -5016(%RBP)
	pushq -5024(%RBP)
	pushq -5032(%RBP)
	jmp uuid_00000000000deff5
	jmp uuid_00000000000deff7
uuid_00000000000deff5:
	push %RBP
	mov -4976(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deff2
	jmp uuid_00000000000deff4
uuid_00000000000deff2:
	movb $1, -5048(%rbp)
uuid_00000000000deff4:
	mov -5128(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000deff7:
	mov -5064(%RBP),%RSP
	add $-5136, %RSP
uuid_00000000000deffa:
	mov -5056(%RBP),%RSP
	add $-5136, %RSP
	mov -5048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df081
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df020
	jmp uuid_00000000000df022
uuid_00000000000df020:
	push %RBP
	mov -5208(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df01d
	jmp uuid_00000000000df01f
uuid_00000000000df01d:
	push %RBP
	mov -5200(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5392(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df017
	jmp uuid_00000000000df019
uuid_00000000000df017:
	push %RBP
	pushq -5336(%RBP)
	pushq -5344(%RBP)
	pushq -5352(%RBP)
	pushq -5360(%RBP)
	pushq -5368(%RBP)
	pushq -5376(%RBP)
	pushq -5384(%RBP)
	jmp uuid_00000000000df014
	jmp uuid_00000000000df016
uuid_00000000000df014:
	push %RBP
	mov -5328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df011
	jmp uuid_00000000000df013
uuid_00000000000df011:
	movb $1, -5400(%rbp)
uuid_00000000000df013:
	mov -5480(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df016:
	mov -5416(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df019:
	mov -5408(%RBP),%RSP
	add $-5488, %RSP
	mov -5400(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df01a
	jmp uuid_00000000000df01c
uuid_00000000000df01a:
	movb $1, -5224(%rbp)
uuid_00000000000df01c:
	mov -5320(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df01f:
	mov -5240(%RBP),%RSP
	add $-5488, %RSP
uuid_00000000000df022:
	mov -5232(%RBP),%RSP
	add $-5488, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df07e
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -5568(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df03e
	jmp uuid_00000000000df040
uuid_00000000000df03e:
	push %RBP
	mov -5560(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df03b
	jmp uuid_00000000000df03d
uuid_00000000000df03b:
	push %RBP
	mov -5552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5744(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df035
	jmp uuid_00000000000df037
uuid_00000000000df035:
	push %RBP
	mov -5736(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df032
	jmp uuid_00000000000df034
uuid_00000000000df032:
	push %RBP
	mov -5728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -5920(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df02c
	jmp uuid_00000000000df02e
uuid_00000000000df02c:
	push %RBP
	pushq -5864(%RBP)
	pushq -5872(%RBP)
	pushq -5880(%RBP)
	pushq -5888(%RBP)
	pushq -5896(%RBP)
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	jmp uuid_00000000000df029
	jmp uuid_00000000000df02b
uuid_00000000000df029:
	push %RBP
	mov -5856(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df026
	jmp uuid_00000000000df028
uuid_00000000000df026:
	movb $1, -5928(%rbp)
uuid_00000000000df028:
	mov -6008(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df02b:
	mov -5944(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df02e:
	mov -5936(%RBP),%RSP
	add $-6016, %RSP
	mov -5928(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df02f
	jmp uuid_00000000000df031
uuid_00000000000df02f:
	movb $1, -5752(%rbp)
uuid_00000000000df031:
	mov -5848(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df034:
	mov -5768(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df037:
	mov -5760(%RBP),%RSP
	add $-6016, %RSP
	mov -5752(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df038
	jmp uuid_00000000000df03a
uuid_00000000000df038:
	movb $1, -5576(%rbp)
uuid_00000000000df03a:
	mov -5672(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df03d:
	mov -5592(%RBP),%RSP
	add $-6016, %RSP
uuid_00000000000df040:
	mov -5584(%RBP),%RSP
	add $-6016, %RSP
	mov -5576(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df07b
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6096(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df04a
	jmp uuid_00000000000df04c
uuid_00000000000df04a:
	push %RBP
	mov -6088(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df047
	jmp uuid_00000000000df049
uuid_00000000000df047:
	push %RBP
	mov -6080(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df044
	jmp uuid_00000000000df046
uuid_00000000000df044:
	movb $1, -6104(%rbp)
uuid_00000000000df046:
	mov -6200(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000df049:
	mov -6120(%RBP),%RSP
	add $-6272, %RSP
uuid_00000000000df04c:
	mov -6112(%RBP),%RSP
	add $-6272, %RSP
	mov -6104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df078
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df053
	jmp uuid_00000000000df055
uuid_00000000000df053:
	push %RBP
	mov -6344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df050
	jmp uuid_00000000000df052
uuid_00000000000df050:
	push %RBP
	mov -6336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df04d
	jmp uuid_00000000000df04f
uuid_00000000000df04d:
	movb $1, -6360(%rbp)
uuid_00000000000df04f:
	mov -6456(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000df052:
	mov -6376(%RBP),%RSP
	add $-6528, %RSP
uuid_00000000000df055:
	mov -6368(%RBP),%RSP
	add $-6528, %RSP
	mov -6360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df075
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6608(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df05f
	jmp uuid_00000000000df061
uuid_00000000000df05f:
	push %RBP
	pushq -6584(%RBP)
	pushq -6592(%RBP)
	pushq -6600(%RBP)
	jmp uuid_00000000000df05c
	jmp uuid_00000000000df05e
uuid_00000000000df05c:
	push %RBP
	mov -6576(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df059
	jmp uuid_00000000000df05b
uuid_00000000000df059:
	push %RBP
	mov -6568(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df056
	jmp uuid_00000000000df058
uuid_00000000000df056:
	movb $1, -6616(%rbp)
uuid_00000000000df058:
	mov -6744(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000df05b:
	mov -6664(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000df05e:
	mov -6632(%RBP),%RSP
	add $-6816, %RSP
uuid_00000000000df061:
	mov -6624(%RBP),%RSP
	add $-6816, %RSP
	mov -6616(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df072
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -6896(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df068
	jmp uuid_00000000000df06a
uuid_00000000000df068:
	push %RBP
	mov -6888(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df065
	jmp uuid_00000000000df067
uuid_00000000000df065:
	push %RBP
	pushq -6832(%RBP)
	pushq -6840(%RBP)
	pushq -6848(%RBP)
	pushq -6856(%RBP)
	pushq -6864(%RBP)
	pushq -6872(%RBP)
	pushq -6880(%RBP)
	jmp uuid_00000000000df062
	jmp uuid_00000000000df064
uuid_00000000000df062:
	movb $1, -6904(%rbp)
uuid_00000000000df064:
	mov -7000(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000df067:
	mov -6920(%RBP),%RSP
	add $-7056, %RSP
uuid_00000000000df06a:
	mov -6912(%RBP),%RSP
	add $-7056, %RSP
	mov -6904(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df06f
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	jmp uuid_00000000000df06c
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df06b
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df06e
uuid_00000000000df06c:
	movq -7136(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -7128(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -7120(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -7112(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -7104(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -7096(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -7088(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -7080(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -7072(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df06e:
	mov -7064(%RBP),%RSP
	add $-7136, %RSP
	jmp uuid_00000000000df071
uuid_00000000000df06f:
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7008(%rbp)
	pushq -7016(%rbp)
	pushq -7024(%rbp)
	pushq -7032(%rbp)
	pushq -7040(%rbp)
	pushq -7048(%rbp)
	pushq -7056(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6928(%rbp)
	pushq -6936(%rbp)
	pushq -6944(%rbp)
	pushq -6952(%rbp)
	pushq -6960(%rbp)
	pushq -6968(%rbp)
	pushq -6976(%rbp)
	pushq -6984(%rbp)
	pushq -6992(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df071:
	mov -6824(%RBP),%RSP
	add $-7056, %RSP
	jmp uuid_00000000000df074
uuid_00000000000df072:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6752(%rbp)
	pushq -6760(%rbp)
	pushq -6768(%rbp)
	pushq -6776(%rbp)
	pushq -6784(%rbp)
	pushq -6792(%rbp)
	pushq -6800(%rbp)
	pushq -6808(%rbp)
	pushq -6816(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6672(%rbp)
	pushq -6680(%rbp)
	pushq -6688(%rbp)
	pushq -6696(%rbp)
	pushq -6704(%rbp)
	pushq -6712(%rbp)
	pushq -6720(%rbp)
	pushq -6728(%rbp)
	pushq -6736(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6640(%rbp)
	pushq -6648(%rbp)
	pushq -6656(%rbp)
	pushq $5
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df074:
	mov -6536(%RBP),%RSP
	add $-6816, %RSP
	jmp uuid_00000000000df077
uuid_00000000000df075:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6464(%rbp)
	pushq -6472(%rbp)
	pushq -6480(%rbp)
	pushq -6488(%rbp)
	pushq -6496(%rbp)
	pushq -6504(%rbp)
	pushq -6512(%rbp)
	pushq -6520(%rbp)
	pushq -6528(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6384(%rbp)
	pushq -6392(%rbp)
	pushq -6400(%rbp)
	pushq -6408(%rbp)
	pushq -6416(%rbp)
	pushq -6424(%rbp)
	pushq -6432(%rbp)
	pushq -6440(%rbp)
	pushq -6448(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df077:
	mov -6280(%RBP),%RSP
	add $-6528, %RSP
	jmp uuid_00000000000df07a
uuid_00000000000df078:
#call function + : Arrow<Cons<AST,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6208(%rbp)
	pushq -6216(%rbp)
	pushq -6224(%rbp)
	pushq -6232(%rbp)
	pushq -6240(%rbp)
	pushq -6248(%rbp)
	pushq -6256(%rbp)
	pushq -6264(%rbp)
	pushq -6272(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6128(%rbp)
	pushq -6136(%rbp)
	pushq -6144(%rbp)
	pushq -6152(%rbp)
	pushq -6160(%rbp)
	pushq -6168(%rbp)
	pushq -6176(%rbp)
	pushq -6184(%rbp)
	pushq -6192(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowASTConsASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	push -176(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df07a:
	mov -6024(%RBP),%RSP
	add $-6272, %RSP
	jmp uuid_00000000000df07d
uuid_00000000000df07b:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df041
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5952(%rbp)
	pushq -5960(%rbp)
	pushq -5968(%rbp)
	pushq -5976(%rbp)
	pushq -5984(%rbp)
	pushq -5992(%rbp)
	pushq -6000(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5776(%rbp)
	pushq -5784(%rbp)
	pushq -5792(%rbp)
	pushq -5800(%rbp)
	pushq -5808(%rbp)
	pushq -5816(%rbp)
	pushq -5824(%rbp)
	pushq -5832(%rbp)
	pushq -5840(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5600(%rbp)
	pushq -5608(%rbp)
	pushq -5616(%rbp)
	pushq -5624(%rbp)
	pushq -5632(%rbp)
	pushq -5640(%rbp)
	pushq -5648(%rbp)
	pushq -5656(%rbp)
	pushq -5664(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000df043
uuid_00000000000df041:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6016(%rbp)
	pushq $2
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -6096(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -6088(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -6080(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -6072(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -6064(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -6056(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -6048(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -6040(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -6032(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df043:
	mov -6024(%RBP),%RSP
	add $-6096, %RSP
uuid_00000000000df07d:
	mov -5496(%RBP),%RSP
	add $-6096, %RSP
	jmp uuid_00000000000df080
uuid_00000000000df07e:
	push %RBP
#call function is-macro-head : Arrow<Cons<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	mov %RBX, %RBP
	call is_SB_macro_SB_head_CL_ArrowU64ConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df023
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
	pushq -5432(%rbp)
	pushq -5440(%rbp)
	pushq -5448(%rbp)
	pushq -5456(%rbp)
	pushq -5464(%rbp)
	pushq -5472(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	pushq -5264(%rbp)
	pushq -5272(%rbp)
	pushq -5280(%rbp)
	pushq -5288(%rbp)
	pushq -5296(%rbp)
	pushq -5304(%rbp)
	pushq -5312(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	jmp uuid_00000000000df025
uuid_00000000000df023:
#call function preprocess-apply-hard : Arrow<Cons<Cons<String,U64>,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5488(%rbp)
	pushq $1
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_hard_CL_ArrowASTConsASTConsU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	push -120(%RSP)
	movq -5568(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -5560(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -5552(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -5544(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -5536(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -5528(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -5520(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -5512(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -5504(%rbp), %r15
	movq %r15, -88(%rbp)
uuid_00000000000df025:
	mov -5496(%RBP),%RSP
	add $-5568, %RSP
uuid_00000000000df080:
	mov -5144(%RBP),%RSP
	add $-5568, %RSP
	jmp uuid_00000000000df083
uuid_00000000000df081:
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000df00e:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df00f
	jmp uuid_00000000000df010
uuid_00000000000df00f:
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	push %RBP
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq $0
	push %RBP
	mov -5288(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df004
	jmp uuid_00000000000df006
uuid_00000000000df004:
	push %RBP
	pushq -5264(%RBP)
	pushq -5272(%RBP)
	pushq -5280(%RBP)
	jmp uuid_00000000000df001
	jmp uuid_00000000000df003
uuid_00000000000df001:
	push %RBP
	mov -5256(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000deffe
	jmp uuid_00000000000df000
uuid_00000000000deffe:
	push %RBP
	mov -5248(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000deffb
	jmp uuid_00000000000deffd
uuid_00000000000deffb:
	movb $1, -5296(%rbp)
uuid_00000000000deffd:
	mov -5360(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000df000:
	mov -5344(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000df003:
	mov -5312(%RBP),%RSP
	add $-5408, %RSP
uuid_00000000000df006:
	mov -5304(%RBP),%RSP
	add $-5408, %RSP
	mov -5296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df00b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df00a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df00d
uuid_00000000000df00b:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df007
	movq -5408(%rbp), %r15
	movq %r15, -5184(%rbp)
	movq -5400(%rbp), %r15
	movq %r15, -5176(%rbp)
	movq -5392(%rbp), %r15
	movq %r15, -5168(%rbp)
	movq -5384(%rbp), %r15
	movq %r15, -5160(%rbp)
	movq -5376(%rbp), %r15
	movq %r15, -5152(%rbp)
	movq -5368(%rbp), %r15
	movq %r15, -5144(%rbp)
	jmp uuid_00000000000df009
uuid_00000000000df007:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5136(%rbp)
	pushq -5352(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5424(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5424(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5320(%rbp)
	pushq -5328(%rbp)
	pushq -5336(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5184(%RBP)
	popq -5176(%RBP)
	popq -5168(%RBP)
	popq -5160(%RBP)
	popq -5152(%RBP)
	popq -5144(%RBP)
uuid_00000000000df009:
	mov -5416(%RBP),%RSP
	add $-5424, %RSP
uuid_00000000000df00d:
	mov -5240(%RBP),%RSP
	add $-5424, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df00e
uuid_00000000000df010:
uuid_00000000000df083:
	mov -4968(%RBP),%RSP
	add $-5184, %RSP
	jmp uuid_00000000000df086
uuid_00000000000df084:
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000defef:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000deff0
	jmp uuid_00000000000deff1
uuid_00000000000deff0:
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4984(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	push %RBP
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq $0
	push %RBP
	mov -5112(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000defe5
	jmp uuid_00000000000defe7
uuid_00000000000defe5:
	push %RBP
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	jmp uuid_00000000000defe2
	jmp uuid_00000000000defe4
uuid_00000000000defe2:
	push %RBP
	mov -5080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000defdf
	jmp uuid_00000000000defe1
uuid_00000000000defdf:
	push %RBP
	mov -5072(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000defdc
	jmp uuid_00000000000defde
uuid_00000000000defdc:
	movb $1, -5120(%rbp)
uuid_00000000000defde:
	mov -5184(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000defe1:
	mov -5168(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000defe4:
	mov -5136(%RBP),%RSP
	add $-5232, %RSP
uuid_00000000000defe7:
	mov -5128(%RBP),%RSP
	add $-5232, %RSP
	mov -5120(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000defec
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000defeb
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000defee
uuid_00000000000defec:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000defe8
	movq -5232(%rbp), %r15
	movq %r15, -5008(%rbp)
	movq -5224(%rbp), %r15
	movq %r15, -5000(%rbp)
	movq -5216(%rbp), %r15
	movq %r15, -4992(%rbp)
	movq -5208(%rbp), %r15
	movq %r15, -4984(%rbp)
	movq -5200(%rbp), %r15
	movq %r15, -4976(%rbp)
	movq -5192(%rbp), %r15
	movq %r15, -4968(%rbp)
	jmp uuid_00000000000defea
uuid_00000000000defe8:
#call function remove-suffix : Arrow<Cons<String,String>,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4960(%rbp)
	pushq -5176(%rbp)
	mov %RBX, %RBP
	call remove_SB_suffix_CL_ArrowStringConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5248(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4896(%rbp)
	pushq -4904(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -5248(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5160(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -5008(%RBP)
	popq -5000(%RBP)
	popq -4992(%RBP)
	popq -4984(%RBP)
	popq -4976(%RBP)
	popq -4968(%RBP)
uuid_00000000000defea:
	mov -5240(%RBP),%RSP
	add $-5248, %RSP
uuid_00000000000defee:
	mov -5064(%RBP),%RSP
	add $-5248, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000defef
uuid_00000000000deff1:
uuid_00000000000df086:
	mov -4792(%RBP),%RSP
	add $-5008, %RSP
	jmp uuid_00000000000df089
uuid_00000000000df087:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db131
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4608(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df089:
	mov -4400(%RBP),%RSP
	add $-4784, %RSP
	jmp uuid_00000000000df08c
uuid_00000000000df08a:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db131
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4216(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df08c:
	mov -4008(%RBP),%RSP
	add $-4392, %RSP
	jmp uuid_00000000000df08f
uuid_00000000000df08d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadb6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	pushq -3976(%rbp)
	pushq -3984(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq -3784(%rbp)
	pushq -3792(%rbp)
	pushq -3800(%rbp)
	pushq -3808(%rbp)
	pushq -3816(%rbp)
	pushq -3824(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3648(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df08f:
	mov -3440(%RBP),%RSP
	add $-4000, %RSP
	jmp uuid_00000000000df092
uuid_00000000000df090:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadb6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3368(%rbp)
	pushq -3376(%rbp)
	pushq -3384(%rbp)
	pushq -3392(%rbp)
	pushq -3400(%rbp)
	pushq -3408(%rbp)
	pushq -3416(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3192(%rbp)
	pushq -3200(%rbp)
	pushq -3208(%rbp)
	pushq -3216(%rbp)
	pushq -3224(%rbp)
	pushq -3232(%rbp)
	pushq -3240(%rbp)
	pushq -3248(%rbp)
	pushq -3256(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3080(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df092:
	mov -2872(%RBP),%RSP
	add $-3432, %RSP
	jmp uuid_00000000000df095
uuid_00000000000df093:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000dadb6
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2800(%rbp)
	pushq -2808(%rbp)
	pushq -2816(%rbp)
	pushq -2824(%rbp)
	pushq -2832(%rbp)
	pushq -2840(%rbp)
	pushq -2848(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $7
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2624(%rbp)
	pushq -2632(%rbp)
	pushq -2640(%rbp)
	pushq -2648(%rbp)
	pushq -2656(%rbp)
	pushq -2664(%rbp)
	pushq -2672(%rbp)
	pushq -2680(%rbp)
	pushq -2688(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -2592(%rbp)
	pushq -2600(%rbp)
	pushq -2608(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2224(%rbp)
	pushq -2232(%rbp)
	pushq -2240(%rbp)
	pushq -2248(%rbp)
	pushq -2256(%rbp)
	pushq -2264(%rbp)
	pushq -2272(%rbp)
	pushq -2280(%rbp)
	pushq -2288(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df095:
	mov -2120(%RBP),%RSP
	add $-2864, %RSP
	jmp uuid_00000000000df098
uuid_00000000000df096:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2048(%rbp)
	pushq -2056(%rbp)
	pushq -2064(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	pushq -1888(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1760(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df098:
	mov -1552(%RBP),%RSP
	add $-2112, %RSP
	jmp uuid_00000000000df09b
uuid_00000000000df099:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	pushq -1336(%rbp)
	pushq -1344(%rbp)
	pushq -1352(%rbp)
	pushq -1360(%rbp)
	pushq -1368(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1192(%rbp)
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df09b:
	mov -984(%RBP),%RSP
	add $-1544, %RSP
	jmp uuid_00000000000df09e
uuid_00000000000df09c:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function unique : Arrow<Token,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
	pushq -952(%rbp)
	pushq -960(%rbp)
	mov %RBX, %RBP
	call unique_CL_ArrowTokenToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	push -88(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
uuid_00000000000df09e:
	mov -232(%RBP),%RSP
	add $-976, %RSP
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
preprocess_SB_is_SB_suffixed_CL_ArrowU64String:
	pushq $0
	mov $parse_SB_suffixes_CL_SfxListSfxList, %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
uuid_00000000000df0b2:
#call function non-zero : Arrow<SfxList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64SfxList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df0b3
	jmp uuid_00000000000df0b4
uuid_00000000000df0b3:
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0a8
	jmp uuid_00000000000df0aa
uuid_00000000000df0a8:
	push %RBP
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	jmp uuid_00000000000df0a5
	jmp uuid_00000000000df0a7
uuid_00000000000df0a5:
	push %RBP
	mov -144(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df0a2
	jmp uuid_00000000000df0a4
uuid_00000000000df0a2:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df09f
	jmp uuid_00000000000df0a1
uuid_00000000000df09f:
	movb $1, -184(%rbp)
uuid_00000000000df0a1:
	mov -248(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000df0a4:
	mov -232(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000df0a7:
	mov -200(%RBP),%RSP
	add $-296, %RSP
uuid_00000000000df0aa:
	mov -192(%RBP),%RSP
	add $-296, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0af
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df0ae
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df0b1
uuid_00000000000df0af:
	push %RBP
#call function has-suffix : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call has_SB_suffix_CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df0ab
	jmp uuid_00000000000df0ad
uuid_00000000000df0ab:
	movq $1, -24(%rbp)
uuid_00000000000df0ad:
	mov -304(%RBP),%RSP
	add $-304, %RSP
	movq -296(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -32(%rbp)
uuid_00000000000df0b1:
	mov -128(%RBP),%RSP
	add $-304, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df0b2
uuid_00000000000df0b4:
	mov -24(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
preprocess_CL_ArrowNilNil:
#call function index-typedefs : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call index_SB_typedefs_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess-apply-literals : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_literals_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
#call function preprocess-apply-locations : Arrow<AST,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call preprocess_SB_apply_SB_locations_CL_ArrowASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	popq 0(%r15)
	popq 8(%r15)
	popq 16(%r15)
	popq 24(%r15)
	popq 32(%r15)
	popq 40(%r15)
	popq 48(%r15)
	popq 56(%r15)
	popq 64(%r15)
	mov %rbp, %rsp
	sub $8, %rsp
	ret
substitute_SB_uuids_CL_ArrowASTConsASTContext:
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0cd
	jmp uuid_00000000000df0cf
uuid_00000000000df0cd:
	push %RBP
	mov -392(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0bb
	jmp uuid_00000000000df0bd
uuid_00000000000df0bb:
	push %RBP
	jmp uuid_00000000000df0b8
	jmp uuid_00000000000df0ba
uuid_00000000000df0b8:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df0b5
	jmp uuid_00000000000df0b7
uuid_00000000000df0b5:
	movb $1, -504(%rbp)
uuid_00000000000df0b7:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000df0ba:
	mov -520(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000df0bd:
	mov -512(%RBP),%RSP
	add $-536, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0ca
	jmp uuid_00000000000df0cc
uuid_00000000000df0ca:
	push %RBP
	mov -384(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -616(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0c4
	jmp uuid_00000000000df0c6
uuid_00000000000df0c4:
	push %RBP
	jmp uuid_00000000000df0c1
	jmp uuid_00000000000df0c3
uuid_00000000000df0c1:
	push %RBP
	mov -552(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -656(%rbp)
	pushq $uuid_00000000000de969
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df0be
	jmp uuid_00000000000df0c0
uuid_00000000000df0be:
	movb $1, -624(%rbp)
uuid_00000000000df0c0:
	mov -648(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df0c3:
	mov -640(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df0c6:
	mov -632(%RBP),%RSP
	add $-656, %RSP
	mov -624(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0c7
	jmp uuid_00000000000df0c9
uuid_00000000000df0c7:
	movb $1, -408(%rbp)
uuid_00000000000df0c9:
	mov -544(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df0cc:
	mov -424(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000df0cf:
	mov -416(%RBP),%RSP
	add $-656, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df150
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0ef
	jmp uuid_00000000000df0f1
uuid_00000000000df0ef:
	push %RBP
	mov -728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0ec
	jmp uuid_00000000000df0ee
uuid_00000000000df0ec:
	push %RBP
	mov -720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0e9
	jmp uuid_00000000000df0eb
uuid_00000000000df0e9:
	movb $1, -744(%rbp)
uuid_00000000000df0eb:
	mov -840(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000df0ee:
	mov -760(%RBP),%RSP
	add $-912, %RSP
uuid_00000000000df0f1:
	mov -752(%RBP),%RSP
	add $-912, %RSP
	mov -744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df14d
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0fb
	jmp uuid_00000000000df0fd
uuid_00000000000df0fb:
	push %RBP
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000df0f8
	jmp uuid_00000000000df0fa
uuid_00000000000df0f8:
	push %RBP
	mov -960(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0f5
	jmp uuid_00000000000df0f7
uuid_00000000000df0f5:
	push %RBP
	mov -952(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0f2
	jmp uuid_00000000000df0f4
uuid_00000000000df0f2:
	movb $1, -1000(%rbp)
uuid_00000000000df0f4:
	mov -1128(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000df0f7:
	mov -1048(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000df0fa:
	mov -1016(%RBP),%RSP
	add $-1200, %RSP
uuid_00000000000df0fd:
	mov -1008(%RBP),%RSP
	add $-1200, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df14a
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1280(%RBP), %RAX
	mov %RAX, %RAX
	mov $10, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df147
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df144
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1440(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df101
	jmp uuid_00000000000df103
uuid_00000000000df101:
	push %RBP
	jmp uuid_00000000000df0fe
	jmp uuid_00000000000df100
uuid_00000000000df0fe:
	movb $1, -1448(%rbp)
uuid_00000000000df100:
	mov -1464(%RBP),%RSP
	add $-1464, %RSP
uuid_00000000000df103:
	mov -1456(%RBP),%RSP
	add $-1464, %RSP
	mov -1448(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df141
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df10a
	jmp uuid_00000000000df10c
uuid_00000000000df10a:
	push %RBP
	jmp uuid_00000000000df107
	jmp uuid_00000000000df109
uuid_00000000000df107:
	push %RBP
	mov -1480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df104
	jmp uuid_00000000000df106
uuid_00000000000df104:
	movb $1, -1552(%rbp)
uuid_00000000000df106:
	mov -1576(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000df109:
	mov -1568(%RBP),%RSP
	add $-1584, %RSP
uuid_00000000000df10c:
	mov -1560(%RBP),%RSP
	add $-1584, %RSP
	mov -1552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df13e
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1664(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df113
	jmp uuid_00000000000df115
uuid_00000000000df113:
	push %RBP
	jmp uuid_00000000000df110
	jmp uuid_00000000000df112
uuid_00000000000df110:
	push %RBP
	mov -1600(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df10d
	jmp uuid_00000000000df10f
uuid_00000000000df10d:
	movb $1, -1672(%rbp)
uuid_00000000000df10f:
	mov -1696(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000df112:
	mov -1688(%RBP),%RSP
	add $-1704, %RSP
uuid_00000000000df115:
	mov -1680(%RBP),%RSP
	add $-1704, %RSP
	mov -1672(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df13b
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -1784(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df11c
	jmp uuid_00000000000df11e
uuid_00000000000df11c:
	push %RBP
	mov -1776(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df119
	jmp uuid_00000000000df11b
uuid_00000000000df119:
	push %RBP
	mov -1768(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df116
	jmp uuid_00000000000df118
uuid_00000000000df116:
	movb $1, -1792(%rbp)
uuid_00000000000df118:
	mov -1888(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000df11b:
	mov -1808(%RBP),%RSP
	add $-1960, %RSP
uuid_00000000000df11e:
	mov -1800(%RBP),%RSP
	add $-1960, %RSP
	mov -1792(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df138
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2040(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df125
	jmp uuid_00000000000df127
uuid_00000000000df125:
	push %RBP
	mov -2032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df122
	jmp uuid_00000000000df124
uuid_00000000000df122:
	push %RBP
	mov -2024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df11f
	jmp uuid_00000000000df121
uuid_00000000000df11f:
	movb $1, -2048(%rbp)
uuid_00000000000df121:
	mov -2144(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000df124:
	mov -2064(%RBP),%RSP
	add $-2216, %RSP
uuid_00000000000df127:
	mov -2056(%RBP),%RSP
	add $-2216, %RSP
	mov -2048(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df135
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -2296(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df12e
	jmp uuid_00000000000df130
uuid_00000000000df12e:
	push %RBP
	mov -2288(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df12b
	jmp uuid_00000000000df12d
uuid_00000000000df12b:
	push %RBP
	pushq -2232(%RBP)
	pushq -2240(%RBP)
	pushq -2248(%RBP)
	pushq -2256(%RBP)
	pushq -2264(%RBP)
	pushq -2272(%RBP)
	pushq -2280(%RBP)
	jmp uuid_00000000000df128
	jmp uuid_00000000000df12a
uuid_00000000000df128:
	movb $1, -2304(%rbp)
uuid_00000000000df12a:
	mov -2400(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000df12d:
	mov -2320(%RBP),%RSP
	add $-2456, %RSP
uuid_00000000000df130:
	mov -2312(%RBP),%RSP
	add $-2456, %RSP
	mov -2304(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df132
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df131
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df134
uuid_00000000000df132:
	pushq -2408(%rbp)
	pushq -2416(%rbp)
	pushq -2424(%rbp)
	pushq -2432(%rbp)
	pushq -2440(%rbp)
	pushq -2448(%rbp)
	pushq -2456(%rbp)
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2328(%rbp)
	pushq -2336(%rbp)
	pushq -2344(%rbp)
	pushq -2352(%rbp)
	pushq -2360(%rbp)
	pushq -2368(%rbp)
	pushq -2376(%rbp)
	pushq -2384(%rbp)
	pushq -2392(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df134:
	mov -2224(%RBP),%RSP
	add $-2456, %RSP
	jmp uuid_00000000000df137
uuid_00000000000df135:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2152(%rbp)
	pushq -2160(%rbp)
	pushq -2168(%rbp)
	pushq -2176(%rbp)
	pushq -2184(%rbp)
	pushq -2192(%rbp)
	pushq -2200(%rbp)
	pushq -2208(%rbp)
	pushq -2216(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -2072(%rbp)
	pushq -2080(%rbp)
	pushq -2088(%rbp)
	pushq -2096(%rbp)
	pushq -2104(%rbp)
	pushq -2112(%rbp)
	pushq -2120(%rbp)
	pushq -2128(%rbp)
	pushq -2136(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df137:
	mov -1968(%RBP),%RSP
	add $-2216, %RSP
	jmp uuid_00000000000df13a
uuid_00000000000df138:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1896(%rbp)
	pushq -1904(%rbp)
	pushq -1912(%rbp)
	pushq -1920(%rbp)
	pushq -1928(%rbp)
	pushq -1936(%rbp)
	pushq -1944(%rbp)
	pushq -1952(%rbp)
	pushq -1960(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	pushq -1872(%rbp)
	pushq -1880(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $3
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df13a:
	mov -1712(%RBP),%RSP
	add $-1960, %RSP
	jmp uuid_00000000000df13d
uuid_00000000000df13b:
uuid_00000000000df13d:
	mov -1592(%RBP),%RSP
	add $-1704, %RSP
	jmp uuid_00000000000df140
uuid_00000000000df13e:
uuid_00000000000df140:
	mov -1472(%RBP),%RSP
	add $-1584, %RSP
	jmp uuid_00000000000df143
uuid_00000000000df141:
uuid_00000000000df143:
	mov -1368(%RBP),%RSP
	add $-1464, %RSP
	jmp uuid_00000000000df146
uuid_00000000000df144:
uuid_00000000000df146:
	mov -1288(%RBP),%RSP
	add $-1360, %RSP
	jmp uuid_00000000000df149
uuid_00000000000df147:
uuid_00000000000df149:
	mov -1208(%RBP),%RSP
	add $-1280, %RSP
	jmp uuid_00000000000df14c
uuid_00000000000df14a:
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq $5
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df14c:
	mov -920(%RBP),%RSP
	add $-1200, %RSP
	jmp uuid_00000000000df14f
uuid_00000000000df14d:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function substitute-uuids : Arrow<Cons<Context,AST>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	mov %RBX, %RBP
	call substitute_SB_uuids_CL_ArrowASTConsASTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	push -200(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
uuid_00000000000df14f:
	mov -664(%RBP),%RSP
	add $-912, %RSP
	jmp uuid_00000000000df152
uuid_00000000000df150:
uuid_00000000000df0e6:
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df0e7
	jmp uuid_00000000000df0e8
uuid_00000000000df0e7:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	push %RBP
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq $0
	push %RBP
	mov -856(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df0d9
	jmp uuid_00000000000df0db
uuid_00000000000df0d9:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	jmp uuid_00000000000df0d6
	jmp uuid_00000000000df0d8
uuid_00000000000df0d6:
	push %RBP
	mov -776(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df0d3
	jmp uuid_00000000000df0d5
uuid_00000000000df0d3:
	push %RBP
	mov -768(%RBP), %RAX
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df0d0
	jmp uuid_00000000000df0d2
uuid_00000000000df0d0:
	movb $1, -864(%rbp)
uuid_00000000000df0d2:
	mov -976(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df0d5:
	mov -960(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df0d8:
	mov -880(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df0db:
	mov -872(%RBP),%RSP
	add $-1072, %RSP
	mov -864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df0e3
	push %RBP
	jmp uuid_00000000000df0e0
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df0df
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df0e2
uuid_00000000000df0e0:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df0e2:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
	jmp uuid_00000000000df0e5
uuid_00000000000df0e3:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -536(%rbp)
	pushq -968(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df0dc
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
	jmp uuid_00000000000df0de
uuid_00000000000df0dc:
	movq -952(%rbp), %r15
	movq %r15, -248(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -240(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -232(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -224(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -216(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -208(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -200(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1072(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -1064(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -1056(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -1048(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -1040(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -1032(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -1024(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df0de:
	mov -1080(%RBP),%RSP
	add $-1080, %RSP
uuid_00000000000df0e5:
	mov -760(%RBP),%RSP
	add $-1080, %RSP
	add $96, %rsp
	add $96, %rsp
	add $8, %rsp
	add $72, %rsp
	add $8, %rsp
	add $96, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df0e6
uuid_00000000000df0e8:
uuid_00000000000df152:
	mov -328(%RBP),%RSP
	add $-656, %RSP
	subq $72, %rsp
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $176, %rsp
	ret
try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $2
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df159
	jmp uuid_00000000000df15b
uuid_00000000000df159:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	mov -688(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df156
	jmp uuid_00000000000df158
uuid_00000000000df156:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	mov -768(%RBP), %RAX
	mov %RAX, %RAX
	mov $9, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df153
	jmp uuid_00000000000df155
uuid_00000000000df153:
	movb $1, -600(%rbp)
uuid_00000000000df155:
	mov -696(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000df158:
	mov -616(%RBP),%RSP
	add $-768, %RSP
uuid_00000000000df15b:
	mov -608(%RBP),%RSP
	add $-768, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df407
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -928(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1aa
	jmp uuid_00000000000df1ac
uuid_00000000000df1aa:
	push %RBP
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq $0
	push %RBP
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df174
	jmp uuid_00000000000df176
uuid_00000000000df174:
	push %RBP
	jmp uuid_00000000000df171
	jmp uuid_00000000000df173
uuid_00000000000df171:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df16b
	jmp uuid_00000000000df16d
uuid_00000000000df16b:
	push %RBP
	jmp uuid_00000000000df168
	jmp uuid_00000000000df16a
uuid_00000000000df168:
	push %RBP
	mov -1112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1232(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df162
	jmp uuid_00000000000df164
uuid_00000000000df162:
	push %RBP
	jmp uuid_00000000000df15f
	jmp uuid_00000000000df161
uuid_00000000000df15f:
	push %RBP
	mov -1168(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df15c
	jmp uuid_00000000000df15e
uuid_00000000000df15c:
	movb $1, -1240(%rbp)
uuid_00000000000df15e:
	mov -1264(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df161:
	mov -1256(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df164:
	mov -1248(%RBP),%RSP
	add $-1272, %RSP
	mov -1240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df165
	jmp uuid_00000000000df167
uuid_00000000000df165:
	movb $1, -1136(%rbp)
uuid_00000000000df167:
	mov -1160(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df16a:
	mov -1152(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df16d:
	mov -1144(%RBP),%RSP
	add $-1272, %RSP
	mov -1136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df16e
	jmp uuid_00000000000df170
uuid_00000000000df16e:
	movb $1, -1032(%rbp)
uuid_00000000000df170:
	mov -1056(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df173:
	mov -1048(%RBP),%RSP
	add $-1272, %RSP
uuid_00000000000df176:
	mov -1040(%RBP),%RSP
	add $-1272, %RSP
	mov -1032(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1a7
	jmp uuid_00000000000df1a9
uuid_00000000000df1a7:
	push %RBP
	pushq -784(%RBP)
	pushq -792(%RBP)
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	pushq -824(%RBP)
	pushq -832(%RBP)
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq $0
	push %RBP
	mov -1352(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1a1
	jmp uuid_00000000000df1a3
uuid_00000000000df1a1:
	push %RBP
	mov -1344(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1448(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df17d
	jmp uuid_00000000000df17f
uuid_00000000000df17d:
	push %RBP
	jmp uuid_00000000000df17a
	jmp uuid_00000000000df17c
uuid_00000000000df17a:
	push %RBP
	jmp uuid_00000000000df177
	jmp uuid_00000000000df179
uuid_00000000000df177:
	movb $1, -1456(%rbp)
uuid_00000000000df179:
	mov -1480(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000df17c:
	mov -1472(%RBP),%RSP
	add $-1480, %RSP
uuid_00000000000df17f:
	mov -1464(%RBP),%RSP
	add $-1480, %RSP
	mov -1456(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df19e
	jmp uuid_00000000000df1a0
uuid_00000000000df19e:
	push %RBP
	mov -1336(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1560(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df198
	jmp uuid_00000000000df19a
uuid_00000000000df198:
	push %RBP
	mov -1552(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1656(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df186
	jmp uuid_00000000000df188
uuid_00000000000df186:
	push %RBP
	jmp uuid_00000000000df183
	jmp uuid_00000000000df185
uuid_00000000000df183:
	push %RBP
	jmp uuid_00000000000df180
	jmp uuid_00000000000df182
uuid_00000000000df180:
	movb $1, -1664(%rbp)
uuid_00000000000df182:
	mov -1688(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000df185:
	mov -1680(%RBP),%RSP
	add $-1688, %RSP
uuid_00000000000df188:
	mov -1672(%RBP),%RSP
	add $-1688, %RSP
	mov -1664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df195
	jmp uuid_00000000000df197
uuid_00000000000df195:
	push %RBP
	mov -1544(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -1768(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df18f
	jmp uuid_00000000000df191
uuid_00000000000df18f:
	push %RBP
	jmp uuid_00000000000df18c
	jmp uuid_00000000000df18e
uuid_00000000000df18c:
	push %RBP
	jmp uuid_00000000000df189
	jmp uuid_00000000000df18b
uuid_00000000000df189:
	movb $1, -1776(%rbp)
uuid_00000000000df18b:
	mov -1800(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df18e:
	mov -1792(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df191:
	mov -1784(%RBP),%RSP
	add $-1800, %RSP
	mov -1776(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df192
	jmp uuid_00000000000df194
uuid_00000000000df192:
	movb $1, -1568(%rbp)
uuid_00000000000df194:
	mov -1696(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df197:
	mov -1584(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df19a:
	mov -1576(%RBP),%RSP
	add $-1800, %RSP
	mov -1568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df19b
	jmp uuid_00000000000df19d
uuid_00000000000df19b:
	movb $1, -1360(%rbp)
uuid_00000000000df19d:
	mov -1488(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df1a0:
	mov -1376(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df1a3:
	mov -1368(%RBP),%RSP
	add $-1800, %RSP
	mov -1360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1a4
	jmp uuid_00000000000df1a6
uuid_00000000000df1a4:
	movb $1, -936(%rbp)
uuid_00000000000df1a6:
	mov -1280(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df1a9:
	mov -952(%RBP),%RSP
	add $-1800, %RSP
uuid_00000000000df1ac:
	mov -944(%RBP),%RSP
	add $-1800, %RSP
	mov -936(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df404
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -1960(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1f9
	jmp uuid_00000000000df1fb
uuid_00000000000df1f9:
	push %RBP
	pushq -1888(%RBP)
	pushq -1896(%RBP)
	pushq -1904(%RBP)
	pushq -1912(%RBP)
	pushq -1920(%RBP)
	pushq -1928(%RBP)
	pushq -1936(%RBP)
	pushq -1944(%RBP)
	pushq -1952(%RBP)
	pushq $0
	push %RBP
	mov -2056(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1d4
	jmp uuid_00000000000df1d6
uuid_00000000000df1d4:
	push %RBP
	mov -2048(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1c2
	jmp uuid_00000000000df1c4
uuid_00000000000df1c2:
	push %RBP
	mov -2144(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2248(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1b0
	jmp uuid_00000000000df1b2
uuid_00000000000df1b0:
	push %RBP
	jmp uuid_00000000000df1ad
	jmp uuid_00000000000df1af
uuid_00000000000df1ad:
	movb $1, -2256(%rbp)
uuid_00000000000df1af:
	mov -2272(%RBP),%RSP
	add $-2272, %RSP
uuid_00000000000df1b2:
	mov -2264(%RBP),%RSP
	add $-2272, %RSP
	mov -2256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1bf
	jmp uuid_00000000000df1c1
uuid_00000000000df1bf:
	push %RBP
	mov -2136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2352(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1b9
	jmp uuid_00000000000df1bb
uuid_00000000000df1b9:
	push %RBP
	jmp uuid_00000000000df1b6
	jmp uuid_00000000000df1b8
uuid_00000000000df1b6:
	push %RBP
	jmp uuid_00000000000df1b3
	jmp uuid_00000000000df1b5
uuid_00000000000df1b3:
	movb $1, -2360(%rbp)
uuid_00000000000df1b5:
	mov -2384(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df1b8:
	mov -2376(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df1bb:
	mov -2368(%RBP),%RSP
	add $-2384, %RSP
	mov -2360(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1bc
	jmp uuid_00000000000df1be
uuid_00000000000df1bc:
	movb $1, -2160(%rbp)
uuid_00000000000df1be:
	mov -2280(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df1c1:
	mov -2176(%RBP),%RSP
	add $-2384, %RSP
uuid_00000000000df1c4:
	mov -2168(%RBP),%RSP
	add $-2384, %RSP
	mov -2160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1d1
	jmp uuid_00000000000df1d3
uuid_00000000000df1d1:
	push %RBP
	mov -2040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2464(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1cb
	jmp uuid_00000000000df1cd
uuid_00000000000df1cb:
	push %RBP
	pushq -2408(%RBP)
	pushq -2416(%RBP)
	pushq -2424(%RBP)
	pushq -2432(%RBP)
	pushq -2440(%RBP)
	pushq -2448(%RBP)
	pushq -2456(%RBP)
	jmp uuid_00000000000df1c8
	jmp uuid_00000000000df1ca
uuid_00000000000df1c8:
	push %RBP
	mov -2400(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2560(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df1c5
	jmp uuid_00000000000df1c7
uuid_00000000000df1c5:
	movb $1, -2472(%rbp)
uuid_00000000000df1c7:
	mov -2552(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df1ca:
	mov -2488(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df1cd:
	mov -2480(%RBP),%RSP
	add $-2560, %RSP
	mov -2472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1ce
	jmp uuid_00000000000df1d0
uuid_00000000000df1ce:
	movb $1, -2064(%rbp)
uuid_00000000000df1d0:
	mov -2392(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df1d3:
	mov -2080(%RBP),%RSP
	add $-2560, %RSP
uuid_00000000000df1d6:
	mov -2072(%RBP),%RSP
	add $-2560, %RSP
	mov -2064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1f6
	jmp uuid_00000000000df1f8
uuid_00000000000df1f6:
	push %RBP
	pushq -1816(%RBP)
	pushq -1824(%RBP)
	pushq -1832(%RBP)
	pushq -1840(%RBP)
	pushq -1848(%RBP)
	pushq -1856(%RBP)
	pushq -1864(%RBP)
	pushq -1872(%RBP)
	pushq -1880(%RBP)
	pushq $0
	push %RBP
	mov -2640(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1f0
	jmp uuid_00000000000df1f2
uuid_00000000000df1f0:
	push %RBP
	mov -2632(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2736(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1dd
	jmp uuid_00000000000df1df
uuid_00000000000df1dd:
	push %RBP
	jmp uuid_00000000000df1da
	jmp uuid_00000000000df1dc
uuid_00000000000df1da:
	push %RBP
	mov -2672(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df1d7
	jmp uuid_00000000000df1d9
uuid_00000000000df1d7:
	movb $1, -2744(%rbp)
uuid_00000000000df1d9:
	mov -2768(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000df1dc:
	mov -2760(%RBP),%RSP
	add $-2776, %RSP
uuid_00000000000df1df:
	mov -2752(%RBP),%RSP
	add $-2776, %RSP
	mov -2744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1ed
	jmp uuid_00000000000df1ef
uuid_00000000000df1ed:
	push %RBP
	mov -2624(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -2856(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df1e7
	jmp uuid_00000000000df1e9
uuid_00000000000df1e7:
	push %RBP
	jmp uuid_00000000000df1e4
	jmp uuid_00000000000df1e6
uuid_00000000000df1e4:
	push %RBP
	mov -2792(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -2896(%rbp)
	pushq $uuid_00000000000df1e0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df1e1
	jmp uuid_00000000000df1e3
uuid_00000000000df1e1:
	movb $1, -2864(%rbp)
uuid_00000000000df1e3:
	mov -2888(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df1e6:
	mov -2880(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df1e9:
	mov -2872(%RBP),%RSP
	add $-2896, %RSP
	mov -2864(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1ea
	jmp uuid_00000000000df1ec
uuid_00000000000df1ea:
	movb $1, -2648(%rbp)
uuid_00000000000df1ec:
	mov -2784(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df1ef:
	mov -2664(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df1f2:
	mov -2656(%RBP),%RSP
	add $-2896, %RSP
	mov -2648(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df1f3
	jmp uuid_00000000000df1f5
uuid_00000000000df1f3:
	movb $1, -1968(%rbp)
uuid_00000000000df1f5:
	mov -2568(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df1f8:
	mov -1984(%RBP),%RSP
	add $-2896, %RSP
uuid_00000000000df1fb:
	mov -1976(%RBP),%RSP
	add $-2896, %RSP
	mov -1968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df401
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3056(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df22f
	jmp uuid_00000000000df231
uuid_00000000000df22f:
	push %RBP
	pushq -2984(%RBP)
	pushq -2992(%RBP)
	pushq -3000(%RBP)
	pushq -3008(%RBP)
	pushq -3016(%RBP)
	pushq -3024(%RBP)
	pushq -3032(%RBP)
	pushq -3040(%RBP)
	pushq -3048(%RBP)
	pushq $0
	push %RBP
	mov -3152(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df20b
	jmp uuid_00000000000df20d
uuid_00000000000df20b:
	push %RBP
	jmp uuid_00000000000df208
	jmp uuid_00000000000df20a
uuid_00000000000df208:
	push %RBP
	mov -3136(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3256(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df202
	jmp uuid_00000000000df204
uuid_00000000000df202:
	push %RBP
	jmp uuid_00000000000df1ff
	jmp uuid_00000000000df201
uuid_00000000000df1ff:
	push %RBP
	mov -3192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df1fc
	jmp uuid_00000000000df1fe
uuid_00000000000df1fc:
	movb $1, -3264(%rbp)
uuid_00000000000df1fe:
	mov -3288(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df201:
	mov -3280(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df204:
	mov -3272(%RBP),%RSP
	add $-3296, %RSP
	mov -3264(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df205
	jmp uuid_00000000000df207
uuid_00000000000df205:
	movb $1, -3160(%rbp)
uuid_00000000000df207:
	mov -3184(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df20a:
	mov -3176(%RBP),%RSP
	add $-3296, %RSP
uuid_00000000000df20d:
	mov -3168(%RBP),%RSP
	add $-3296, %RSP
	mov -3160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df22c
	jmp uuid_00000000000df22e
uuid_00000000000df22c:
	push %RBP
	pushq -2912(%RBP)
	pushq -2920(%RBP)
	pushq -2928(%RBP)
	pushq -2936(%RBP)
	pushq -2944(%RBP)
	pushq -2952(%RBP)
	pushq -2960(%RBP)
	pushq -2968(%RBP)
	pushq -2976(%RBP)
	pushq $0
	push %RBP
	mov -3376(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df226
	jmp uuid_00000000000df228
uuid_00000000000df226:
	push %RBP
	mov -3368(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3472(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df214
	jmp uuid_00000000000df216
uuid_00000000000df214:
	push %RBP
	jmp uuid_00000000000df211
	jmp uuid_00000000000df213
uuid_00000000000df211:
	push %RBP
	jmp uuid_00000000000df20e
	jmp uuid_00000000000df210
uuid_00000000000df20e:
	movb $1, -3480(%rbp)
uuid_00000000000df210:
	mov -3504(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000df213:
	mov -3496(%RBP),%RSP
	add $-3504, %RSP
uuid_00000000000df216:
	mov -3488(%RBP),%RSP
	add $-3504, %RSP
	mov -3480(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df223
	jmp uuid_00000000000df225
uuid_00000000000df223:
	push %RBP
	mov -3360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -3584(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df21d
	jmp uuid_00000000000df21f
uuid_00000000000df21d:
	push %RBP
	jmp uuid_00000000000df21a
	jmp uuid_00000000000df21c
uuid_00000000000df21a:
	push %RBP
	jmp uuid_00000000000df217
	jmp uuid_00000000000df219
uuid_00000000000df217:
	movb $1, -3592(%rbp)
uuid_00000000000df219:
	mov -3616(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df21c:
	mov -3608(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df21f:
	mov -3600(%RBP),%RSP
	add $-3616, %RSP
	mov -3592(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df220
	jmp uuid_00000000000df222
uuid_00000000000df220:
	movb $1, -3384(%rbp)
uuid_00000000000df222:
	mov -3512(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df225:
	mov -3400(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df228:
	mov -3392(%RBP),%RSP
	add $-3616, %RSP
	mov -3384(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df229
	jmp uuid_00000000000df22b
uuid_00000000000df229:
	movb $1, -3064(%rbp)
uuid_00000000000df22b:
	mov -3304(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df22e:
	mov -3080(%RBP),%RSP
	add $-3616, %RSP
uuid_00000000000df231:
	mov -3072(%RBP),%RSP
	add $-3616, %RSP
	mov -3064(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3fe
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -3776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df272
	jmp uuid_00000000000df274
uuid_00000000000df272:
	push %RBP
	pushq -3704(%RBP)
	pushq -3712(%RBP)
	pushq -3720(%RBP)
	pushq -3728(%RBP)
	pushq -3736(%RBP)
	pushq -3744(%RBP)
	pushq -3752(%RBP)
	pushq -3760(%RBP)
	pushq -3768(%RBP)
	pushq $0
	push %RBP
	mov -3872(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df260
	jmp uuid_00000000000df262
uuid_00000000000df260:
	push %RBP
	mov -3864(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df25d
	jmp uuid_00000000000df25f
uuid_00000000000df25d:
	push %RBP
	mov -3856(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df25a
	jmp uuid_00000000000df25c
uuid_00000000000df25a:
	movb $1, -3880(%rbp)
uuid_00000000000df25c:
	mov -3976(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000df25f:
	mov -3896(%RBP),%RSP
	add $-4048, %RSP
uuid_00000000000df262:
	mov -3888(%RBP),%RSP
	add $-4048, %RSP
	mov -3880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df26f
	jmp uuid_00000000000df271
uuid_00000000000df26f:
	push %RBP
	pushq -3632(%RBP)
	pushq -3640(%RBP)
	pushq -3648(%RBP)
	pushq -3656(%RBP)
	pushq -3664(%RBP)
	pushq -3672(%RBP)
	pushq -3680(%RBP)
	pushq -3688(%RBP)
	pushq -3696(%RBP)
	pushq $0
	push %RBP
	mov -4128(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df269
	jmp uuid_00000000000df26b
uuid_00000000000df269:
	push %RBP
	mov -4120(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df266
	jmp uuid_00000000000df268
uuid_00000000000df266:
	push %RBP
	mov -4112(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df263
	jmp uuid_00000000000df265
uuid_00000000000df263:
	movb $1, -4136(%rbp)
uuid_00000000000df265:
	mov -4232(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df268:
	mov -4152(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df26b:
	mov -4144(%RBP),%RSP
	add $-4304, %RSP
	mov -4136(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df26c
	jmp uuid_00000000000df26e
uuid_00000000000df26c:
	movb $1, -3784(%rbp)
uuid_00000000000df26e:
	mov -4056(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df271:
	mov -3800(%RBP),%RSP
	add $-4304, %RSP
uuid_00000000000df274:
	mov -3792(%RBP),%RSP
	add $-4304, %RSP
	mov -3784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3fb
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -4464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df299
	jmp uuid_00000000000df29b
uuid_00000000000df299:
	push %RBP
	pushq -4392(%RBP)
	pushq -4400(%RBP)
	pushq -4408(%RBP)
	pushq -4416(%RBP)
	pushq -4424(%RBP)
	pushq -4432(%RBP)
	pushq -4440(%RBP)
	pushq -4448(%RBP)
	pushq -4456(%RBP)
	pushq $0
	push %RBP
	mov -4560(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df284
	jmp uuid_00000000000df286
uuid_00000000000df284:
	push %RBP
	pushq -4536(%RBP)
	pushq -4544(%RBP)
	pushq -4552(%RBP)
	jmp uuid_00000000000df281
	jmp uuid_00000000000df283
uuid_00000000000df281:
	push %RBP
	mov -4528(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df27e
	jmp uuid_00000000000df280
uuid_00000000000df27e:
	push %RBP
	mov -4520(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df27b
	jmp uuid_00000000000df27d
uuid_00000000000df27b:
	movb $1, -4568(%rbp)
uuid_00000000000df27d:
	mov -4696(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000df280:
	mov -4616(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000df283:
	mov -4584(%RBP),%RSP
	add $-4768, %RSP
uuid_00000000000df286:
	mov -4576(%RBP),%RSP
	add $-4768, %RSP
	mov -4568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df296
	jmp uuid_00000000000df298
uuid_00000000000df296:
	push %RBP
	pushq -4320(%RBP)
	pushq -4328(%RBP)
	pushq -4336(%RBP)
	pushq -4344(%RBP)
	pushq -4352(%RBP)
	pushq -4360(%RBP)
	pushq -4368(%RBP)
	pushq -4376(%RBP)
	pushq -4384(%RBP)
	pushq $0
	push %RBP
	mov -4848(%RBP), %RAX
	mov %RAX, %RAX
	mov $5, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df290
	jmp uuid_00000000000df292
uuid_00000000000df290:
	push %RBP
	pushq -4824(%RBP)
	pushq -4832(%RBP)
	pushq -4840(%RBP)
	jmp uuid_00000000000df28d
	jmp uuid_00000000000df28f
uuid_00000000000df28d:
	push %RBP
	mov -4816(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df28a
	jmp uuid_00000000000df28c
uuid_00000000000df28a:
	push %RBP
	mov -4808(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df287
	jmp uuid_00000000000df289
uuid_00000000000df287:
	movb $1, -4856(%rbp)
uuid_00000000000df289:
	mov -4984(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df28c:
	mov -4904(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df28f:
	mov -4872(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df292:
	mov -4864(%RBP),%RSP
	add $-5056, %RSP
	mov -4856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df293
	jmp uuid_00000000000df295
uuid_00000000000df293:
	movb $1, -4472(%rbp)
uuid_00000000000df295:
	mov -4776(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df298:
	mov -4488(%RBP),%RSP
	add $-5056, %RSP
uuid_00000000000df29b:
	mov -4480(%RBP),%RSP
	add $-5056, %RSP
	mov -4472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3f8
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5216(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2bb
	jmp uuid_00000000000df2bd
uuid_00000000000df2bb:
	push %RBP
	pushq -5144(%RBP)
	pushq -5152(%RBP)
	pushq -5160(%RBP)
	pushq -5168(%RBP)
	pushq -5176(%RBP)
	pushq -5184(%RBP)
	pushq -5192(%RBP)
	pushq -5200(%RBP)
	pushq -5208(%RBP)
	pushq $0
	push %RBP
	mov -5312(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2a8
	jmp uuid_00000000000df2aa
uuid_00000000000df2a8:
	push %RBP
	jmp uuid_00000000000df2a5
	jmp uuid_00000000000df2a7
uuid_00000000000df2a5:
	push %RBP
	mov -5248(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5352(%rbp)
	pushq $uuid_00000000000dedcb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df2a2
	jmp uuid_00000000000df2a4
uuid_00000000000df2a2:
	movb $1, -5320(%rbp)
uuid_00000000000df2a4:
	mov -5344(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000df2a7:
	mov -5336(%RBP),%RSP
	add $-5352, %RSP
uuid_00000000000df2aa:
	mov -5328(%RBP),%RSP
	add $-5352, %RSP
	mov -5320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2b8
	jmp uuid_00000000000df2ba
uuid_00000000000df2b8:
	push %RBP
	pushq -5072(%RBP)
	pushq -5080(%RBP)
	pushq -5088(%RBP)
	pushq -5096(%RBP)
	pushq -5104(%RBP)
	pushq -5112(%RBP)
	pushq -5120(%RBP)
	pushq -5128(%RBP)
	pushq -5136(%RBP)
	pushq $0
	push %RBP
	mov -5432(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2b2
	jmp uuid_00000000000df2b4
uuid_00000000000df2b2:
	push %RBP
	jmp uuid_00000000000df2af
	jmp uuid_00000000000df2b1
uuid_00000000000df2af:
	push %RBP
	mov -5368(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5472(%rbp)
	pushq $uuid_00000000000df2ab
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df2ac
	jmp uuid_00000000000df2ae
uuid_00000000000df2ac:
	movb $1, -5440(%rbp)
uuid_00000000000df2ae:
	mov -5464(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df2b1:
	mov -5456(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df2b4:
	mov -5448(%RBP),%RSP
	add $-5472, %RSP
	mov -5440(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2b5
	jmp uuid_00000000000df2b7
uuid_00000000000df2b5:
	movb $1, -5224(%rbp)
uuid_00000000000df2b7:
	mov -5360(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df2ba:
	mov -5240(%RBP),%RSP
	add $-5472, %RSP
uuid_00000000000df2bd:
	mov -5232(%RBP),%RSP
	add $-5472, %RSP
	mov -5224(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3f5
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -5632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2d6
	jmp uuid_00000000000df2d8
uuid_00000000000df2d6:
	push %RBP
	pushq -5560(%RBP)
	pushq -5568(%RBP)
	pushq -5576(%RBP)
	pushq -5584(%RBP)
	pushq -5592(%RBP)
	pushq -5600(%RBP)
	pushq -5608(%RBP)
	pushq -5616(%RBP)
	pushq -5624(%RBP)
	pushq $0
	push %RBP
	mov -5728(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2c4
	jmp uuid_00000000000df2c6
uuid_00000000000df2c4:
	push %RBP
	jmp uuid_00000000000df2c1
	jmp uuid_00000000000df2c3
uuid_00000000000df2c1:
	push %RBP
	mov -5664(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df2be
	jmp uuid_00000000000df2c0
uuid_00000000000df2be:
	movb $1, -5736(%rbp)
uuid_00000000000df2c0:
	mov -5760(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000df2c3:
	mov -5752(%RBP),%RSP
	add $-5768, %RSP
uuid_00000000000df2c6:
	mov -5744(%RBP),%RSP
	add $-5768, %RSP
	mov -5736(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2d3
	jmp uuid_00000000000df2d5
uuid_00000000000df2d3:
	push %RBP
	pushq -5488(%RBP)
	pushq -5496(%RBP)
	pushq -5504(%RBP)
	pushq -5512(%RBP)
	pushq -5520(%RBP)
	pushq -5528(%RBP)
	pushq -5536(%RBP)
	pushq -5544(%RBP)
	pushq -5552(%RBP)
	pushq $0
	push %RBP
	mov -5848(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2cd
	jmp uuid_00000000000df2cf
uuid_00000000000df2cd:
	push %RBP
	jmp uuid_00000000000df2ca
	jmp uuid_00000000000df2cc
uuid_00000000000df2ca:
	push %RBP
	mov -5784(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df2c7
	jmp uuid_00000000000df2c9
uuid_00000000000df2c7:
	movb $1, -5856(%rbp)
uuid_00000000000df2c9:
	mov -5880(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df2cc:
	mov -5872(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df2cf:
	mov -5864(%RBP),%RSP
	add $-5888, %RSP
	mov -5856(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2d0
	jmp uuid_00000000000df2d2
uuid_00000000000df2d0:
	movb $1, -5640(%rbp)
uuid_00000000000df2d2:
	mov -5776(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df2d5:
	mov -5656(%RBP),%RSP
	add $-5888, %RSP
uuid_00000000000df2d8:
	mov -5648(%RBP),%RSP
	add $-5888, %RSP
	mov -5640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3f2
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2f4
	jmp uuid_00000000000df2f6
uuid_00000000000df2f4:
	push %RBP
	pushq -5976(%RBP)
	pushq -5984(%RBP)
	pushq -5992(%RBP)
	pushq -6000(%RBP)
	pushq -6008(%RBP)
	pushq -6016(%RBP)
	pushq -6024(%RBP)
	pushq -6032(%RBP)
	pushq -6040(%RBP)
	pushq $0
	push %RBP
	mov -6144(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2e2
	jmp uuid_00000000000df2e4
uuid_00000000000df2e2:
	push %RBP
	jmp uuid_00000000000df2df
	jmp uuid_00000000000df2e1
uuid_00000000000df2df:
	push %RBP
	mov -6080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df2dc
	jmp uuid_00000000000df2de
uuid_00000000000df2dc:
	movb $1, -6152(%rbp)
uuid_00000000000df2de:
	mov -6176(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000df2e1:
	mov -6168(%RBP),%RSP
	add $-6184, %RSP
uuid_00000000000df2e4:
	mov -6160(%RBP),%RSP
	add $-6184, %RSP
	mov -6152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2f1
	jmp uuid_00000000000df2f3
uuid_00000000000df2f1:
	push %RBP
	pushq -5904(%RBP)
	pushq -5912(%RBP)
	pushq -5920(%RBP)
	pushq -5928(%RBP)
	pushq -5936(%RBP)
	pushq -5944(%RBP)
	pushq -5952(%RBP)
	pushq -5960(%RBP)
	pushq -5968(%RBP)
	pushq $0
	push %RBP
	mov -6264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df2eb
	jmp uuid_00000000000df2ed
uuid_00000000000df2eb:
	push %RBP
	jmp uuid_00000000000df2e8
	jmp uuid_00000000000df2ea
uuid_00000000000df2e8:
	push %RBP
	mov -6200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df2e5
	jmp uuid_00000000000df2e7
uuid_00000000000df2e5:
	movb $1, -6272(%rbp)
uuid_00000000000df2e7:
	mov -6296(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df2ea:
	mov -6288(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df2ed:
	mov -6280(%RBP),%RSP
	add $-6304, %RSP
	mov -6272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df2ee
	jmp uuid_00000000000df2f0
uuid_00000000000df2ee:
	movb $1, -6056(%rbp)
uuid_00000000000df2f0:
	mov -6192(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df2f3:
	mov -6072(%RBP),%RSP
	add $-6304, %RSP
uuid_00000000000df2f6:
	mov -6064(%RBP),%RSP
	add $-6304, %RSP
	mov -6056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3ef
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -6464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df324
	jmp uuid_00000000000df326
uuid_00000000000df324:
	push %RBP
	pushq -6392(%RBP)
	pushq -6400(%RBP)
	pushq -6408(%RBP)
	pushq -6416(%RBP)
	pushq -6424(%RBP)
	pushq -6432(%RBP)
	pushq -6440(%RBP)
	pushq -6448(%RBP)
	pushq -6456(%RBP)
	pushq $0
	push %RBP
	mov -6560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df300
	jmp uuid_00000000000df302
uuid_00000000000df300:
	push %RBP
	pushq -6504(%RBP)
	pushq -6512(%RBP)
	pushq -6520(%RBP)
	pushq -6528(%RBP)
	pushq -6536(%RBP)
	pushq -6544(%RBP)
	pushq -6552(%RBP)
	jmp uuid_00000000000df2fd
	jmp uuid_00000000000df2ff
uuid_00000000000df2fd:
	push %RBP
	mov -6496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df2fa
	jmp uuid_00000000000df2fc
uuid_00000000000df2fa:
	movb $1, -6568(%rbp)
uuid_00000000000df2fc:
	mov -6648(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000df2ff:
	mov -6584(%RBP),%RSP
	add $-6656, %RSP
uuid_00000000000df302:
	mov -6576(%RBP),%RSP
	add $-6656, %RSP
	mov -6568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df321
	jmp uuid_00000000000df323
uuid_00000000000df321:
	push %RBP
	pushq -6320(%RBP)
	pushq -6328(%RBP)
	pushq -6336(%RBP)
	pushq -6344(%RBP)
	pushq -6352(%RBP)
	pushq -6360(%RBP)
	pushq -6368(%RBP)
	pushq -6376(%RBP)
	pushq -6384(%RBP)
	pushq $0
	push %RBP
	mov -6736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df31b
	jmp uuid_00000000000df31d
uuid_00000000000df31b:
	push %RBP
	mov -6728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df309
	jmp uuid_00000000000df30b
uuid_00000000000df309:
	push %RBP
	jmp uuid_00000000000df306
	jmp uuid_00000000000df308
uuid_00000000000df306:
	push %RBP
	mov -6768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df303
	jmp uuid_00000000000df305
uuid_00000000000df303:
	movb $1, -6840(%rbp)
uuid_00000000000df305:
	mov -6864(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000df308:
	mov -6856(%RBP),%RSP
	add $-6872, %RSP
uuid_00000000000df30b:
	mov -6848(%RBP),%RSP
	add $-6872, %RSP
	mov -6840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df318
	jmp uuid_00000000000df31a
uuid_00000000000df318:
	push %RBP
	mov -6720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -6952(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df312
	jmp uuid_00000000000df314
uuid_00000000000df312:
	push %RBP
	jmp uuid_00000000000df30f
	jmp uuid_00000000000df311
uuid_00000000000df30f:
	push %RBP
	mov -6888(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6992(%rbp)
	pushq $uuid_00000000000df1e0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df30c
	jmp uuid_00000000000df30e
uuid_00000000000df30c:
	movb $1, -6960(%rbp)
uuid_00000000000df30e:
	mov -6984(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df311:
	mov -6976(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df314:
	mov -6968(%RBP),%RSP
	add $-6992, %RSP
	mov -6960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df315
	jmp uuid_00000000000df317
uuid_00000000000df315:
	movb $1, -6744(%rbp)
uuid_00000000000df317:
	mov -6880(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df31a:
	mov -6760(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df31d:
	mov -6752(%RBP),%RSP
	add $-6992, %RSP
	mov -6744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df31e
	jmp uuid_00000000000df320
uuid_00000000000df31e:
	movb $1, -6472(%rbp)
uuid_00000000000df320:
	mov -6664(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df323:
	mov -6488(%RBP),%RSP
	add $-6992, %RSP
uuid_00000000000df326:
	mov -6480(%RBP),%RSP
	add $-6992, %RSP
	mov -6472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3ec
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df355
	jmp uuid_00000000000df357
uuid_00000000000df355:
	push %RBP
	pushq -7080(%RBP)
	pushq -7088(%RBP)
	pushq -7096(%RBP)
	pushq -7104(%RBP)
	pushq -7112(%RBP)
	pushq -7120(%RBP)
	pushq -7128(%RBP)
	pushq -7136(%RBP)
	pushq -7144(%RBP)
	pushq $0
	push %RBP
	mov -7248(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df330
	jmp uuid_00000000000df332
uuid_00000000000df330:
	push %RBP
	jmp uuid_00000000000df32d
	jmp uuid_00000000000df32f
uuid_00000000000df32d:
	push %RBP
	mov -7184(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7288(%rbp)
	pushq $uuid_00000000000dedcb
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df32a
	jmp uuid_00000000000df32c
uuid_00000000000df32a:
	movb $1, -7256(%rbp)
uuid_00000000000df32c:
	mov -7280(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000df32f:
	mov -7272(%RBP),%RSP
	add $-7288, %RSP
uuid_00000000000df332:
	mov -7264(%RBP),%RSP
	add $-7288, %RSP
	mov -7256(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df352
	jmp uuid_00000000000df354
uuid_00000000000df352:
	push %RBP
	pushq -7008(%RBP)
	pushq -7016(%RBP)
	pushq -7024(%RBP)
	pushq -7032(%RBP)
	pushq -7040(%RBP)
	pushq -7048(%RBP)
	pushq -7056(%RBP)
	pushq -7064(%RBP)
	pushq -7072(%RBP)
	pushq $0
	push %RBP
	mov -7368(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df34c
	jmp uuid_00000000000df34e
uuid_00000000000df34c:
	push %RBP
	mov -7360(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7464(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df339
	jmp uuid_00000000000df33b
uuid_00000000000df339:
	push %RBP
	jmp uuid_00000000000df336
	jmp uuid_00000000000df338
uuid_00000000000df336:
	push %RBP
	jmp uuid_00000000000df333
	jmp uuid_00000000000df335
uuid_00000000000df333:
	movb $1, -7472(%rbp)
uuid_00000000000df335:
	mov -7496(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000df338:
	mov -7488(%RBP),%RSP
	add $-7496, %RSP
uuid_00000000000df33b:
	mov -7480(%RBP),%RSP
	add $-7496, %RSP
	mov -7472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df349
	jmp uuid_00000000000df34b
uuid_00000000000df349:
	push %RBP
	mov -7352(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -7576(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df343
	jmp uuid_00000000000df345
uuid_00000000000df343:
	push %RBP
	jmp uuid_00000000000df340
	jmp uuid_00000000000df342
uuid_00000000000df340:
	push %RBP
	mov -7512(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -7616(%rbp)
	pushq $uuid_00000000000df33c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df33d
	jmp uuid_00000000000df33f
uuid_00000000000df33d:
	movb $1, -7584(%rbp)
uuid_00000000000df33f:
	mov -7608(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df342:
	mov -7600(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df345:
	mov -7592(%RBP),%RSP
	add $-7616, %RSP
	mov -7584(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df346
	jmp uuid_00000000000df348
uuid_00000000000df346:
	movb $1, -7376(%rbp)
uuid_00000000000df348:
	mov -7504(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df34b:
	mov -7392(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df34e:
	mov -7384(%RBP),%RSP
	add $-7616, %RSP
	mov -7376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df34f
	jmp uuid_00000000000df351
uuid_00000000000df34f:
	movb $1, -7160(%rbp)
uuid_00000000000df351:
	mov -7296(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df354:
	mov -7176(%RBP),%RSP
	add $-7616, %RSP
uuid_00000000000df357:
	mov -7168(%RBP),%RSP
	add $-7616, %RSP
	mov -7160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3e9
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -7776(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df382
	jmp uuid_00000000000df384
uuid_00000000000df382:
	push %RBP
	pushq -7704(%RBP)
	pushq -7712(%RBP)
	pushq -7720(%RBP)
	pushq -7728(%RBP)
	pushq -7736(%RBP)
	pushq -7744(%RBP)
	pushq -7752(%RBP)
	pushq -7760(%RBP)
	pushq -7768(%RBP)
	pushq $0
	push %RBP
	mov -7872(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df35e
	jmp uuid_00000000000df360
uuid_00000000000df35e:
	push %RBP
	pushq -7816(%RBP)
	pushq -7824(%RBP)
	pushq -7832(%RBP)
	pushq -7840(%RBP)
	pushq -7848(%RBP)
	pushq -7856(%RBP)
	pushq -7864(%RBP)
	jmp uuid_00000000000df35b
	jmp uuid_00000000000df35d
uuid_00000000000df35b:
	push %RBP
	mov -7808(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df358
	jmp uuid_00000000000df35a
uuid_00000000000df358:
	movb $1, -7880(%rbp)
uuid_00000000000df35a:
	mov -7960(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000df35d:
	mov -7896(%RBP),%RSP
	add $-7968, %RSP
uuid_00000000000df360:
	mov -7888(%RBP),%RSP
	add $-7968, %RSP
	mov -7880(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df37f
	jmp uuid_00000000000df381
uuid_00000000000df37f:
	push %RBP
	pushq -7632(%RBP)
	pushq -7640(%RBP)
	pushq -7648(%RBP)
	pushq -7656(%RBP)
	pushq -7664(%RBP)
	pushq -7672(%RBP)
	pushq -7680(%RBP)
	pushq -7688(%RBP)
	pushq -7696(%RBP)
	pushq $0
	push %RBP
	mov -8048(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df379
	jmp uuid_00000000000df37b
uuid_00000000000df379:
	push %RBP
	mov -8040(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8144(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df367
	jmp uuid_00000000000df369
uuid_00000000000df367:
	push %RBP
	jmp uuid_00000000000df364
	jmp uuid_00000000000df366
uuid_00000000000df364:
	push %RBP
	mov -8080(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df361
	jmp uuid_00000000000df363
uuid_00000000000df361:
	movb $1, -8152(%rbp)
uuid_00000000000df363:
	mov -8176(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000df366:
	mov -8168(%RBP),%RSP
	add $-8184, %RSP
uuid_00000000000df369:
	mov -8160(%RBP),%RSP
	add $-8184, %RSP
	mov -8152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df376
	jmp uuid_00000000000df378
uuid_00000000000df376:
	push %RBP
	mov -8032(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8264(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df370
	jmp uuid_00000000000df372
uuid_00000000000df370:
	push %RBP
	jmp uuid_00000000000df36d
	jmp uuid_00000000000df36f
uuid_00000000000df36d:
	push %RBP
	mov -8200(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8304(%rbp)
	pushq $uuid_00000000000df33c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df36a
	jmp uuid_00000000000df36c
uuid_00000000000df36a:
	movb $1, -8272(%rbp)
uuid_00000000000df36c:
	mov -8296(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df36f:
	mov -8288(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df372:
	mov -8280(%RBP),%RSP
	add $-8304, %RSP
	mov -8272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df373
	jmp uuid_00000000000df375
uuid_00000000000df373:
	movb $1, -8056(%rbp)
uuid_00000000000df375:
	mov -8192(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df378:
	mov -8072(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df37b:
	mov -8064(%RBP),%RSP
	add $-8304, %RSP
	mov -8056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df37c
	jmp uuid_00000000000df37e
uuid_00000000000df37c:
	movb $1, -7784(%rbp)
uuid_00000000000df37e:
	mov -7976(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df381:
	mov -7800(%RBP),%RSP
	add $-8304, %RSP
uuid_00000000000df384:
	mov -7792(%RBP),%RSP
	add $-8304, %RSP
	mov -7784(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3e6
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -8464(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3c2
	jmp uuid_00000000000df3c4
uuid_00000000000df3c2:
	push %RBP
	pushq -8392(%RBP)
	pushq -8400(%RBP)
	pushq -8408(%RBP)
	pushq -8416(%RBP)
	pushq -8424(%RBP)
	pushq -8432(%RBP)
	pushq -8440(%RBP)
	pushq -8448(%RBP)
	pushq -8456(%RBP)
	pushq $0
	push %RBP
	mov -8560(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df38b
	jmp uuid_00000000000df38d
uuid_00000000000df38b:
	push %RBP
	pushq -8504(%RBP)
	pushq -8512(%RBP)
	pushq -8520(%RBP)
	pushq -8528(%RBP)
	pushq -8536(%RBP)
	pushq -8544(%RBP)
	pushq -8552(%RBP)
	jmp uuid_00000000000df388
	jmp uuid_00000000000df38a
uuid_00000000000df388:
	push %RBP
	mov -8496(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df385
	jmp uuid_00000000000df387
uuid_00000000000df385:
	movb $1, -8568(%rbp)
uuid_00000000000df387:
	mov -8648(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000df38a:
	mov -8584(%RBP),%RSP
	add $-8656, %RSP
uuid_00000000000df38d:
	mov -8576(%RBP),%RSP
	add $-8656, %RSP
	mov -8568(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3bf
	jmp uuid_00000000000df3c1
uuid_00000000000df3bf:
	push %RBP
	pushq -8320(%RBP)
	pushq -8328(%RBP)
	pushq -8336(%RBP)
	pushq -8344(%RBP)
	pushq -8352(%RBP)
	pushq -8360(%RBP)
	pushq -8368(%RBP)
	pushq -8376(%RBP)
	pushq -8384(%RBP)
	pushq $0
	push %RBP
	mov -8736(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3b9
	jmp uuid_00000000000df3bb
uuid_00000000000df3b9:
	push %RBP
	mov -8728(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8832(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df394
	jmp uuid_00000000000df396
uuid_00000000000df394:
	push %RBP
	jmp uuid_00000000000df391
	jmp uuid_00000000000df393
uuid_00000000000df391:
	push %RBP
	mov -8768(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df38e
	jmp uuid_00000000000df390
uuid_00000000000df38e:
	movb $1, -8840(%rbp)
uuid_00000000000df390:
	mov -8864(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000df393:
	mov -8856(%RBP),%RSP
	add $-8872, %RSP
uuid_00000000000df396:
	mov -8848(%RBP),%RSP
	add $-8872, %RSP
	mov -8840(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3b6
	jmp uuid_00000000000df3b8
uuid_00000000000df3b6:
	push %RBP
	mov -8720(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -8952(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3b0
	jmp uuid_00000000000df3b2
uuid_00000000000df3b0:
	push %RBP
	mov -8944(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9048(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df39d
	jmp uuid_00000000000df39f
uuid_00000000000df39d:
	push %RBP
	jmp uuid_00000000000df39a
	jmp uuid_00000000000df39c
uuid_00000000000df39a:
	push %RBP
	mov -8984(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df397
	jmp uuid_00000000000df399
uuid_00000000000df397:
	movb $1, -9056(%rbp)
uuid_00000000000df399:
	mov -9080(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000df39c:
	mov -9072(%RBP),%RSP
	add $-9088, %RSP
uuid_00000000000df39f:
	mov -9064(%RBP),%RSP
	add $-9088, %RSP
	mov -9056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3ad
	jmp uuid_00000000000df3af
uuid_00000000000df3ad:
	push %RBP
	mov -8936(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -9168(%RBP), %RAX
	mov %RAX, %RAX
	mov $6, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3a7
	jmp uuid_00000000000df3a9
uuid_00000000000df3a7:
	push %RBP
	jmp uuid_00000000000df3a4
	jmp uuid_00000000000df3a6
uuid_00000000000df3a4:
	push %RBP
	mov -9104(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9208(%rbp)
	pushq $uuid_00000000000df3a0
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df3a1
	jmp uuid_00000000000df3a3
uuid_00000000000df3a1:
	movb $1, -9176(%rbp)
uuid_00000000000df3a3:
	mov -9200(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3a6:
	mov -9192(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3a9:
	mov -9184(%RBP),%RSP
	add $-9208, %RSP
	mov -9176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3aa
	jmp uuid_00000000000df3ac
uuid_00000000000df3aa:
	movb $1, -8960(%rbp)
uuid_00000000000df3ac:
	mov -9096(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3af:
	mov -8976(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3b2:
	mov -8968(%RBP),%RSP
	add $-9208, %RSP
	mov -8960(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3b3
	jmp uuid_00000000000df3b5
uuid_00000000000df3b3:
	movb $1, -8744(%rbp)
uuid_00000000000df3b5:
	mov -8880(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3b8:
	mov -8760(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3bb:
	mov -8752(%RBP),%RSP
	add $-9208, %RSP
	mov -8744(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3bc
	jmp uuid_00000000000df3be
uuid_00000000000df3bc:
	movb $1, -8472(%rbp)
uuid_00000000000df3be:
	mov -8664(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3c1:
	mov -8488(%RBP),%RSP
	add $-9208, %RSP
uuid_00000000000df3c4:
	mov -8480(%RBP),%RSP
	add $-9208, %RSP
	mov -8472(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3e3
	push %RBP
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq $0
	push %RBP
	mov -9368(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3d9
	jmp uuid_00000000000df3db
uuid_00000000000df3d9:
	push %RBP
	pushq -9296(%RBP)
	pushq -9304(%RBP)
	pushq -9312(%RBP)
	pushq -9320(%RBP)
	pushq -9328(%RBP)
	pushq -9336(%RBP)
	pushq -9344(%RBP)
	pushq -9352(%RBP)
	pushq -9360(%RBP)
	jmp uuid_00000000000df3d6
	jmp uuid_00000000000df3d8
uuid_00000000000df3d6:
	push %RBP
	pushq -9224(%RBP)
	pushq -9232(%RBP)
	pushq -9240(%RBP)
	pushq -9248(%RBP)
	pushq -9256(%RBP)
	pushq -9264(%RBP)
	pushq -9272(%RBP)
	pushq -9280(%RBP)
	pushq -9288(%RBP)
	pushq $0
	push %RBP
	mov -9544(%RBP), %RAX
	mov %RAX, %RAX
	mov $7, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3d0
	jmp uuid_00000000000df3d2
uuid_00000000000df3d0:
	push %RBP
	jmp uuid_00000000000df3cd
	jmp uuid_00000000000df3cf
uuid_00000000000df3cd:
	push %RBP
	mov -9480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df3ca
	jmp uuid_00000000000df3cc
uuid_00000000000df3ca:
	movb $1, -9552(%rbp)
uuid_00000000000df3cc:
	mov -9576(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df3cf:
	mov -9568(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df3d2:
	mov -9560(%RBP),%RSP
	add $-9584, %RSP
	mov -9552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3d3
	jmp uuid_00000000000df3d5
uuid_00000000000df3d3:
	movb $1, -9376(%rbp)
uuid_00000000000df3d5:
	mov -9472(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df3d8:
	mov -9392(%RBP),%RSP
	add $-9584, %RSP
uuid_00000000000df3db:
	mov -9384(%RBP),%RSP
	add $-9584, %RSP
	mov -9376(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df3e0
	push %RBP
	jmp uuid_00000000000df3dd
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df3dc
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df3df
uuid_00000000000df3dd:
uuid_00000000000df3df:
	mov -9592(%RBP),%RSP
	add $-9592, %RSP
	jmp uuid_00000000000df3e2
uuid_00000000000df3e0:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9584(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function location-of : Arrow<AST,SourceLocation+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9400(%rbp)
	pushq -9408(%rbp)
	pushq -9416(%rbp)
	pushq -9424(%rbp)
	pushq -9432(%rbp)
	pushq -9440(%rbp)
	pushq -9448(%rbp)
	pushq -9456(%rbp)
	pushq -9464(%rbp)
	mov %RBX, %RBP
	call location_SB_of_CL_ArrowSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used32
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	push -104(%RSP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df3e2:
	mov -9216(%RBP),%RSP
	add $-9584, %RSP
	jmp uuid_00000000000df3e5
uuid_00000000000df3e3:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df3c7
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function to-string : Arrow<U64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -9088(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db01d
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq $uuid_00000000000db01d
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -9224(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9224(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<AST,Array<AST,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
#call function parse-type : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df3c5
	mov %RBX, %RBP
	call parse_SB_type_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	pushq $4
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ASTAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $8
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
#call function clone-rope : Arrow<S,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000df3c6
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -8656(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000daeef
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call clone_SB_rope_CL_ArrowStringS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8872(%rbp)
	pushq -9232(%rbp)
#call function with-key : Arrow<Cons<Token,String>,Token+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8592(%rbp)
	pushq -8600(%rbp)
	pushq -8608(%rbp)
	pushq -8616(%rbp)
	pushq -8624(%rbp)
	pushq -8632(%rbp)
	pushq -8640(%rbp)
	pushq -9232(%rbp)
	mov %RBX, %RBP
	call with_SB_key_CL_ArrowTokenConsStringToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used56
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	pushq $6
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	jmp uuid_00000000000df3c9
uuid_00000000000df3c7:
uuid_00000000000df3c9:
	mov -9216(%RBP),%RSP
	add $-9216, %RSP
uuid_00000000000df3e5:
	mov -8312(%RBP),%RSP
	add $-9216, %RSP
	jmp uuid_00000000000df3e8
uuid_00000000000df3e6:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -8184(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -7920(%RBP)
	pushq -7928(%RBP)
	pushq -7936(%RBP)
	pushq -7944(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df3e8:
	mov -7624(%RBP),%RSP
	add $-8304, %RSP
	jmp uuid_00000000000df3eb
uuid_00000000000df3e9:
uuid_00000000000df3eb:
	mov -7000(%RBP),%RSP
	add $-7616, %RSP
	jmp uuid_00000000000df3ee
uuid_00000000000df3ec:
	push %RBP
#call function index-of-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6656(%rbp)
	mov %RBX, %RBP
	call index_SB_of_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov $unknown_SB_index_SB_of_SB_tag_CL_U64, %R14
	mov 0(%R14), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df327
	jmp uuid_00000000000df329
uuid_00000000000df327:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -6872(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -6608(%RBP)
	pushq -6616(%RBP)
	pushq -6624(%RBP)
	pushq -6632(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df329:
	mov -7000(%RBP),%RSP
	add $-7000, %RSP
uuid_00000000000df3ee:
	mov -6312(%RBP),%RSP
	add $-7000, %RSP
	jmp uuid_00000000000df3f1
uuid_00000000000df3ef:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -6304(%rbp)
	pushq -6184(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df2f7
	jmp uuid_00000000000df2f9
uuid_00000000000df2f7:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df2f9:
	mov -6312(%RBP),%RSP
	add $-6312, %RSP
uuid_00000000000df3f1:
	mov -5896(%RBP),%RSP
	add $-6312, %RSP
	jmp uuid_00000000000df3f4
uuid_00000000000df3f2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5888(%rbp)
	pushq -5768(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df2d9
	jmp uuid_00000000000df2db
uuid_00000000000df2d9:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df2db:
	mov -5896(%RBP),%RSP
	add $-5896, %RSP
uuid_00000000000df3f4:
	mov -5480(%RBP),%RSP
	add $-5896, %RSP
	jmp uuid_00000000000df3f7
uuid_00000000000df3f5:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df3f7:
	mov -5064(%RBP),%RSP
	add $-5472, %RSP
	jmp uuid_00000000000df3fa
uuid_00000000000df3f8:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4992(%rbp)
	pushq -5000(%rbp)
	pushq -5008(%rbp)
	pushq -5016(%rbp)
	pushq -5024(%rbp)
	pushq -5032(%rbp)
	pushq -5040(%rbp)
	pushq -5048(%rbp)
	pushq -5056(%rbp)
	pushq -4704(%rbp)
	pushq -4712(%rbp)
	pushq -4720(%rbp)
	pushq -4728(%rbp)
	pushq -4736(%rbp)
	pushq -4744(%rbp)
	pushq -4752(%rbp)
	pushq -4760(%rbp)
	pushq -4768(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df29f
	jmp uuid_00000000000df2a1
uuid_00000000000df29f:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4912(%rbp)
	pushq -4920(%rbp)
	pushq -4928(%rbp)
	pushq -4936(%rbp)
	pushq -4944(%rbp)
	pushq -4952(%rbp)
	pushq -4960(%rbp)
	pushq -4968(%rbp)
	pushq -4976(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	pushq -4672(%rbp)
	pushq -4680(%rbp)
	pushq -4688(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df29c
	jmp uuid_00000000000df29e
uuid_00000000000df29c:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -5064(%rbp)
	pushq -5072(%rbp)
	pushq -5080(%rbp)
	pushq -5088(%rbp)
	pushq -5096(%rbp)
	pushq -5104(%rbp)
	pushq -5112(%rbp)
	pushq -5120(%rbp)
	pushq -5128(%rbp)
	pushq -5136(%rbp)
	pushq -5144(%rbp)
	pushq -5152(%rbp)
	pushq -5168(%rbp)
	pushq -5176(%rbp)
	pushq -5184(%rbp)
	pushq -5192(%rbp)
	pushq -5200(%rbp)
	pushq -5208(%rbp)
	pushq -5216(%rbp)
	pushq -5224(%rbp)
	pushq -5232(%rbp)
	pushq -5240(%rbp)
	pushq -5248(%rbp)
	pushq -5256(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df29e:
	mov -5264(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000df2a1:
	mov -5160(%RBP),%RSP
	add $-5264, %RSP
uuid_00000000000df3fa:
	mov -4312(%RBP),%RSP
	add $-5264, %RSP
	jmp uuid_00000000000df3fd
uuid_00000000000df3fb:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4240(%rbp)
	pushq -4248(%rbp)
	pushq -4256(%rbp)
	pushq -4264(%rbp)
	pushq -4272(%rbp)
	pushq -4280(%rbp)
	pushq -4288(%rbp)
	pushq -4296(%rbp)
	pushq -4304(%rbp)
	pushq -3984(%rbp)
	pushq -3992(%rbp)
	pushq -4000(%rbp)
	pushq -4008(%rbp)
	pushq -4016(%rbp)
	pushq -4024(%rbp)
	pushq -4032(%rbp)
	pushq -4040(%rbp)
	pushq -4048(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df278
	jmp uuid_00000000000df27a
uuid_00000000000df278:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	pushq -4216(%rbp)
	pushq -4224(%rbp)
	pushq -3904(%rbp)
	pushq -3912(%rbp)
	pushq -3920(%rbp)
	pushq -3928(%rbp)
	pushq -3936(%rbp)
	pushq -3944(%rbp)
	pushq -3952(%rbp)
	pushq -3960(%rbp)
	pushq -3968(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df275
	jmp uuid_00000000000df277
uuid_00000000000df275:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4312(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4392(%rbp)
	pushq -4400(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df277:
	mov -4512(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000df27a:
	mov -4408(%RBP),%RSP
	add $-4512, %RSP
uuid_00000000000df3fd:
	mov -3624(%RBP),%RSP
	add $-4512, %RSP
	jmp uuid_00000000000df400
uuid_00000000000df3fe:
	push %RBP
#call function preprocess-is-suffixed : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call preprocess_SB_is_SB_suffixed_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function is-lone-tag : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -3296(%rbp)
	mov %RBX, %RBP
	call is_SB_lone_SB_tag_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	orq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df257
	jmp uuid_00000000000df259
uuid_00000000000df257:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	pushq -3632(%rbp)
	pushq -3640(%rbp)
	pushq -3648(%rbp)
	pushq -3656(%rbp)
	pushq -3664(%rbp)
	pushq -3672(%rbp)
	pushq -3680(%rbp)
	pushq -3688(%rbp)
	pushq -3696(%rbp)
	pushq -3704(%rbp)
	pushq -3712(%rbp)
	pushq -3720(%rbp)
	pushq -3728(%rbp)
	pushq -3736(%rbp)
	pushq -3744(%rbp)
	pushq -3752(%rbp)
	pushq -3760(%rbp)
	pushq -3768(%rbp)
	pushq -3776(%rbp)
	pushq $0
	push %RBP
	mov -3936(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df24a
	jmp uuid_00000000000df24c
uuid_00000000000df24a:
	push %RBP
	pushq -3864(%RBP)
	pushq -3872(%RBP)
	pushq -3880(%RBP)
	pushq -3888(%RBP)
	pushq -3896(%RBP)
	pushq -3904(%RBP)
	pushq -3912(%RBP)
	pushq -3920(%RBP)
	pushq -3928(%RBP)
	pushq $0
	push %RBP
	mov -4032(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df238
	jmp uuid_00000000000df23a
uuid_00000000000df238:
	push %RBP
	mov -4024(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df235
	jmp uuid_00000000000df237
uuid_00000000000df235:
	push %RBP
	mov -4016(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df232
	jmp uuid_00000000000df234
uuid_00000000000df232:
	movb $1, -4040(%rbp)
uuid_00000000000df234:
	mov -4136(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000df237:
	mov -4056(%RBP),%RSP
	add $-4208, %RSP
uuid_00000000000df23a:
	mov -4048(%RBP),%RSP
	add $-4208, %RSP
	mov -4040(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df247
	jmp uuid_00000000000df249
uuid_00000000000df247:
	push %RBP
	pushq -3792(%RBP)
	pushq -3800(%RBP)
	pushq -3808(%RBP)
	pushq -3816(%RBP)
	pushq -3824(%RBP)
	pushq -3832(%RBP)
	pushq -3840(%RBP)
	pushq -3848(%RBP)
	pushq -3856(%RBP)
	pushq $0
	push %RBP
	mov -4288(%RBP), %RAX
	mov %RAX, %RAX
	mov $8, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df241
	jmp uuid_00000000000df243
uuid_00000000000df241:
	push %RBP
	mov -4280(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df23e
	jmp uuid_00000000000df240
uuid_00000000000df23e:
	push %RBP
	mov -4272(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df23b
	jmp uuid_00000000000df23d
uuid_00000000000df23b:
	movb $1, -4296(%rbp)
uuid_00000000000df23d:
	mov -4392(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df240:
	mov -4312(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df243:
	mov -4304(%RBP),%RSP
	add $-4464, %RSP
	mov -4296(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df244
	jmp uuid_00000000000df246
uuid_00000000000df244:
	movb $1, -3944(%rbp)
uuid_00000000000df246:
	mov -4216(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df249:
	mov -3960(%RBP),%RSP
	add $-4464, %RSP
uuid_00000000000df24c:
	mov -3952(%RBP),%RSP
	add $-4464, %RSP
	mov -3944(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df254
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df253
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df256
uuid_00000000000df254:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4400(%rbp)
	pushq -4408(%rbp)
	pushq -4416(%rbp)
	pushq -4424(%rbp)
	pushq -4432(%rbp)
	pushq -4440(%rbp)
	pushq -4448(%rbp)
	pushq -4456(%rbp)
	pushq -4464(%rbp)
	pushq -4144(%rbp)
	pushq -4152(%rbp)
	pushq -4160(%rbp)
	pushq -4168(%rbp)
	pushq -4176(%rbp)
	pushq -4184(%rbp)
	pushq -4192(%rbp)
	pushq -4200(%rbp)
	pushq -4208(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df250
	jmp uuid_00000000000df252
uuid_00000000000df250:
#call function try-destructure-macro : Arrow<Cons<Cons<SourceLocation,AST>,AST>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -4320(%rbp)
	pushq -4328(%rbp)
	pushq -4336(%rbp)
	pushq -4344(%rbp)
	pushq -4352(%rbp)
	pushq -4360(%rbp)
	pushq -4368(%rbp)
	pushq -4376(%rbp)
	pushq -4384(%rbp)
	pushq -4064(%rbp)
	pushq -4072(%rbp)
	pushq -4080(%rbp)
	pushq -4088(%rbp)
	pushq -4096(%rbp)
	pushq -4104(%rbp)
	pushq -4112(%rbp)
	pushq -4120(%rbp)
	pushq -4128(%rbp)
	mov %RBX, %RBP
	call try_SB_destructure_SB_macro_CL_ArrowContextConsASTConsASTSourceLocation
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push %RBP
#call function non-zero : Arrow<Context,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Context
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df24d
	jmp uuid_00000000000df24f
uuid_00000000000df24d:
#call function union : Arrow<Cons<Context,Context>,Context+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -4472(%rbp)
	pushq -4480(%rbp)
	pushq -4488(%rbp)
	pushq -4496(%rbp)
	pushq -4504(%rbp)
	pushq -4512(%rbp)
	pushq -4520(%rbp)
	pushq -4528(%rbp)
	pushq -4536(%rbp)
	pushq -4544(%rbp)
	pushq -4552(%rbp)
	pushq -4560(%rbp)
	pushq -4576(%rbp)
	pushq -4584(%rbp)
	pushq -4592(%rbp)
	pushq -4600(%rbp)
	pushq -4608(%rbp)
	pushq -4616(%rbp)
	pushq -4624(%rbp)
	pushq -4632(%rbp)
	pushq -4640(%rbp)
	pushq -4648(%rbp)
	pushq -4656(%rbp)
	pushq -4664(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowContextConsContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used96
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	push -224(%RSP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df24f:
	mov -4672(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df252:
	mov -4568(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df256:
	mov -3784(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df259:
	mov -3624(%RBP),%RSP
	add $-4672, %RSP
uuid_00000000000df400:
	mov -2904(%RBP),%RSP
	add $-4672, %RSP
	jmp uuid_00000000000df403
uuid_00000000000df401:
#call function close : Arrow<Context,Array<Context,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ContextContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -2776(%rbp)
#call function with-location : Arrow<Cons<AST,SourceLocation>,AST+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -2512(%RBP)
	pushq -2520(%RBP)
	pushq -2528(%RBP)
	pushq -2536(%RBP)
	mov %RBX, %RBP
	call with_SB_location_CL_ArrowASTConsSourceLocationAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used72
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	push -136(%RSP)
	pushq $0
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df403:
	mov -1808(%RBP),%RSP
	add $-2896, %RSP
	jmp uuid_00000000000df406
uuid_00000000000df404:
uuid_00000000000df406:
	mov -776(%RBP),%RSP
	add $-1800, %RSP
	jmp uuid_00000000000df409
uuid_00000000000df407:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
uuid_00000000000df409:
	mov -440(%RBP),%RSP
	add $-768, %RSP
	subq $96, %rsp
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	addq $96, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext:
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -480(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df41c
	jmp uuid_00000000000df41e
uuid_00000000000df41c:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df40d
	jmp uuid_00000000000df40f
uuid_00000000000df40d:
	push %RBP
	mov -520(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df40a
	jmp uuid_00000000000df40c
uuid_00000000000df40a:
	movb $1, -536(%rbp)
uuid_00000000000df40c:
	mov -552(%RBP),%RSP
	add $-560, %RSP
uuid_00000000000df40f:
	mov -544(%RBP),%RSP
	add $-560, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df419
	jmp uuid_00000000000df41b
uuid_00000000000df419:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -592(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df413
	jmp uuid_00000000000df415
uuid_00000000000df413:
	push %RBP
	mov -584(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -624(%rbp)
	pushq $uuid_00000000000db6b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df410
	jmp uuid_00000000000df412
uuid_00000000000df410:
	movb $1, -600(%rbp)
uuid_00000000000df412:
	mov -616(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000df415:
	mov -608(%RBP),%RSP
	add $-624, %RSP
	mov -600(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df416
	jmp uuid_00000000000df418
uuid_00000000000df416:
	movb $1, -488(%rbp)
uuid_00000000000df418:
	mov -568(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000df41b:
	mov -504(%RBP),%RSP
	add $-624, %RSP
uuid_00000000000df41e:
	mov -496(%RBP),%RSP
	add $-624, %RSP
	mov -488(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df478
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq $0
	push %RBP
	mov -656(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df45a
	jmp uuid_00000000000df45c
uuid_00000000000df45a:
	push %RBP
	mov -648(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -704(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df44b
	jmp uuid_00000000000df44d
uuid_00000000000df44b:
	push %RBP
	mov -696(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -752(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df442
	jmp uuid_00000000000df444
uuid_00000000000df442:
	push %RBP
	mov -744(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -800(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df433
	jmp uuid_00000000000df435
uuid_00000000000df433:
	push %RBP
	mov -792(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df430
	jmp uuid_00000000000df432
uuid_00000000000df430:
	movb $1, -808(%rbp)
uuid_00000000000df432:
	mov -824(%RBP),%RSP
	add $-832, %RSP
uuid_00000000000df435:
	mov -816(%RBP),%RSP
	add $-832, %RSP
	mov -808(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df43f
	jmp uuid_00000000000df441
uuid_00000000000df43f:
	push %RBP
	mov -736(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -864(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df439
	jmp uuid_00000000000df43b
uuid_00000000000df439:
	push %RBP
	mov -856(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -896(%rbp)
	pushq $uuid_00000000000db6b9
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df436
	jmp uuid_00000000000df438
uuid_00000000000df436:
	movb $1, -872(%rbp)
uuid_00000000000df438:
	mov -888(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000df43b:
	mov -880(%RBP),%RSP
	add $-896, %RSP
	mov -872(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df43c
	jmp uuid_00000000000df43e
uuid_00000000000df43c:
	movb $1, -760(%rbp)
uuid_00000000000df43e:
	mov -840(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000df441:
	mov -776(%RBP),%RSP
	add $-896, %RSP
uuid_00000000000df444:
	mov -768(%RBP),%RSP
	add $-896, %RSP
	mov -760(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df448
	jmp uuid_00000000000df44a
uuid_00000000000df448:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df445
	jmp uuid_00000000000df447
uuid_00000000000df445:
	movb $1, -712(%rbp)
uuid_00000000000df447:
	mov -904(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000df44a:
	mov -728(%RBP),%RSP
	add $-928, %RSP
uuid_00000000000df44d:
	mov -720(%RBP),%RSP
	add $-928, %RSP
	mov -712(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df457
	jmp uuid_00000000000df459
uuid_00000000000df457:
	push %RBP
	mov -640(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -960(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df451
	jmp uuid_00000000000df453
uuid_00000000000df451:
	push %RBP
	mov -952(%RBP), %RAX
	push %RAX
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -992(%rbp)
	pushq $uuid_00000000000db70f
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df44e
	jmp uuid_00000000000df450
uuid_00000000000df44e:
	movb $1, -968(%rbp)
uuid_00000000000df450:
	mov -984(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df453:
	mov -976(%RBP),%RSP
	add $-992, %RSP
	mov -968(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df454
	jmp uuid_00000000000df456
uuid_00000000000df454:
	movb $1, -664(%rbp)
uuid_00000000000df456:
	mov -936(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df459:
	mov -680(%RBP),%RSP
	add $-992, %RSP
uuid_00000000000df45c:
	mov -672(%RBP),%RSP
	add $-992, %RSP
	mov -664(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df475
	push %RBP
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	mov -1024(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df472
	push %RBP
	jmp uuid_00000000000df46f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df46e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df471
uuid_00000000000df46f:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df46d
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<S,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa93
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df471:
	mov -1032(%RBP),%RSP
	add $-1032, %RSP
	jmp uuid_00000000000df474
uuid_00000000000df472:
uuid_00000000000df474:
	mov -1000(%RBP),%RSP
	add $-1024, %RSP
	jmp uuid_00000000000df477
uuid_00000000000df475:
#call function p1 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p1_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	pushq $0
	push %RBP
	mov -1360(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df463
	jmp uuid_00000000000df465
uuid_00000000000df463:
	push %RBP
	pushq -1208(%RBP)
	pushq -1216(%RBP)
	pushq -1224(%RBP)
	pushq -1232(%RBP)
	pushq -1240(%RBP)
	pushq -1248(%RBP)
	pushq -1256(%RBP)
	pushq -1264(%RBP)
	pushq -1272(%RBP)
	pushq -1280(%RBP)
	pushq -1288(%RBP)
	pushq -1296(%RBP)
	pushq -1304(%RBP)
	pushq -1312(%RBP)
	pushq -1320(%RBP)
	pushq -1328(%RBP)
	pushq -1336(%RBP)
	pushq -1344(%RBP)
	pushq -1352(%RBP)
	jmp uuid_00000000000df460
	jmp uuid_00000000000df462
uuid_00000000000df460:
	push %RBP
	mov -1200(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df45d
	jmp uuid_00000000000df45f
uuid_00000000000df45d:
	movb $1, -1368(%rbp)
uuid_00000000000df45f:
	mov -1544(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000df462:
	mov -1384(%RBP),%RSP
	add $-1712, %RSP
uuid_00000000000df465:
	mov -1376(%RBP),%RSP
	add $-1712, %RSP
	mov -1368(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df46a
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df469
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df46c
uuid_00000000000df46a:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1480(%RBP)
	pushq -1488(%RBP)
	pushq -1496(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df466
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df428
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df468
uuid_00000000000df466:
uuid_00000000000df468:
	mov -1744(%RBP),%RSP
	add $-1744, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1000(%rbp)
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1752(%rbp)
	pushq -1760(%rbp)
	pushq -1768(%rbp)
	pushq -1776(%rbp)
	pushq -1784(%rbp)
	pushq -1792(%rbp)
	pushq -1800(%rbp)
	pushq -1808(%rbp)
	pushq -1816(%rbp)
	pushq -1824(%rbp)
	pushq -1832(%rbp)
	pushq -1840(%rbp)
	pushq -1848(%rbp)
	pushq -1856(%rbp)
	pushq -1864(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -832(%rbp)
	pushq -1720(%rbp)
	pushq -1728(%rbp)
	pushq -1736(%rbp)
	pushq -1392(%rbp)
	pushq -1400(%rbp)
	pushq -1408(%rbp)
	pushq -1416(%rbp)
	pushq -1424(%rbp)
	pushq -1432(%rbp)
	pushq -1440(%rbp)
	pushq -1448(%rbp)
	pushq -1456(%rbp)
	pushq -1464(%rbp)
	pushq -1472(%rbp)
	pushq -1480(%rbp)
	pushq -1488(%rbp)
	pushq -1496(%rbp)
	pushq -1504(%rbp)
	pushq -1512(%rbp)
	pushq -1520(%rbp)
	pushq -1528(%rbp)
	pushq -1536(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	movq -1712(%rbp), %r15
	movq %r15, -416(%rbp)
	movq -1704(%rbp), %r15
	movq %r15, -408(%rbp)
	movq -1696(%rbp), %r15
	movq %r15, -400(%rbp)
	movq -1688(%rbp), %r15
	movq %r15, -392(%rbp)
	movq -1680(%rbp), %r15
	movq %r15, -384(%rbp)
	movq -1672(%rbp), %r15
	movq %r15, -376(%rbp)
	movq -1664(%rbp), %r15
	movq %r15, -368(%rbp)
	movq -1656(%rbp), %r15
	movq %r15, -360(%rbp)
	movq -1648(%rbp), %r15
	movq %r15, -352(%rbp)
	movq -1640(%rbp), %r15
	movq %r15, -344(%rbp)
	movq -1632(%rbp), %r15
	movq %r15, -336(%rbp)
	movq -1624(%rbp), %r15
	movq %r15, -328(%rbp)
	movq -1616(%rbp), %r15
	movq %r15, -320(%rbp)
	movq -1608(%rbp), %r15
	movq %r15, -312(%rbp)
	movq -1600(%rbp), %r15
	movq %r15, -304(%rbp)
	movq -1592(%rbp), %r15
	movq %r15, -296(%rbp)
	movq -1584(%rbp), %r15
	movq %r15, -288(%rbp)
	movq -1576(%rbp), %r15
	movq %r15, -280(%rbp)
	movq -1568(%rbp), %r15
	movq %r15, -272(%rbp)
	movq -1560(%rbp), %r15
	movq %r15, -264(%rbp)
	movq -1552(%rbp), %r15
	movq %r15, -256(%rbp)
uuid_00000000000df46c:
	mov -1192(%RBP),%RSP
	add $-1864, %RSP
#call function destructure-lhs : Arrow<Cons<Cons<Cons<FContext,Type>,S>,FragmentList>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
#call function p2 : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	mov %RBX, %RBP
	call p2_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	mov %RBX, %RBP
	call destructure_SB_lhs_CL_ArrowFContextConsFragmentListConsSConsTypeFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	push -448(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df477:
	mov -632(%RBP),%RSP
	add $-1864, %RSP
	jmp uuid_00000000000df47a
uuid_00000000000df478:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	push %RBP
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq $0
	push %RBP
	mov -992(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df425
	jmp uuid_00000000000df427
uuid_00000000000df425:
	push %RBP
	pushq -840(%RBP)
	pushq -848(%RBP)
	pushq -856(%RBP)
	pushq -864(%RBP)
	pushq -872(%RBP)
	pushq -880(%RBP)
	pushq -888(%RBP)
	pushq -896(%RBP)
	pushq -904(%RBP)
	pushq -912(%RBP)
	pushq -920(%RBP)
	pushq -928(%RBP)
	pushq -936(%RBP)
	pushq -944(%RBP)
	pushq -952(%RBP)
	pushq -960(%RBP)
	pushq -968(%RBP)
	pushq -976(%RBP)
	pushq -984(%RBP)
	jmp uuid_00000000000df422
	jmp uuid_00000000000df424
uuid_00000000000df422:
	push %RBP
	jmp uuid_00000000000df41f
	jmp uuid_00000000000df421
uuid_00000000000df41f:
	movb $1, -1000(%rbp)
uuid_00000000000df421:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000df424:
	mov -1016(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000df427:
	mov -1008(%RBP),%RSP
	add $-1176, %RSP
	mov -1000(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df42d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df42c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df42f
uuid_00000000000df42d:
#call function with-size : Arrow<Type,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1112(%RBP)
	pushq -1120(%RBP)
	pushq -1128(%RBP)
	mov %RBX, %RBP
	call with_SB_size_CL_ArrowTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -56(%RSP)
	push -56(%RSP)
	push -56(%RSP)
	push %RBP
#call function non-zero : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df429
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df428
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function print : Arrow<Fragment,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function exit : Arrow<U64,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1
	mov %RBX, %RBP
	call exit_CL_ArrowNilU64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df42b
uuid_00000000000df429:
uuid_00000000000df42b:
	mov -1208(%RBP),%RSP
	add $-1208, %RSP
#call function unify : Arrow<Cons<Type,Type>,TContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	mov %RBX, %RBP
	call unify_CL_ArrowTContextConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used120
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function union : Arrow<Cons<FContext,TContext>,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
	pushq -1272(%rbp)
	pushq -1280(%rbp)
	pushq -1288(%rbp)
	pushq -1296(%rbp)
	pushq -1304(%rbp)
	pushq -1312(%rbp)
	pushq -1320(%rbp)
	pushq -1328(%rbp)
	mov %RBX, %RBP
	call union_CL_ArrowFContextConsTContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	push -352(%RSP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -560(%rbp)
	pushq -1184(%rbp)
	pushq -1192(%rbp)
	pushq -1200(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
	pushq -1080(%rbp)
	pushq -1088(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
	pushq -1120(%rbp)
	pushq -1128(%rbp)
	pushq -1136(%rbp)
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq $0
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df42f:
	mov -824(%RBP),%RSP
	add $-1328, %RSP
uuid_00000000000df47a:
	mov -456(%RBP),%RSP
	add $-1328, %RSP
	subq $200, %rsp
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $424, %rsp
	ret
fragment_CL__CL_chain_SB_gnu_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd02d
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4da
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db1fb
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db1fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000db1fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4f9
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4f9
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de4f9
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db7b8
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db7b8
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000db7b8
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_SB_blob_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-offset : Arrow<Cons<Fragment,I64>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -240(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd02d
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4da
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db1fb
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db1fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000db1fb
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4f9
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4f9
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de4f9
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db7b8
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000db7b8
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000db7b8
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_SB_c_CL_ArrowFragmentConsFragmentFragment:
#call function fragment::set-context : Arrow<Cons<Fragment,FContext>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -272(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	push -384(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd02d
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000de307
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function + : Arrow<Cons<S,S>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $uuid_00000000000dd25d
	pushq $2
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000dd02d
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	pushq $0
	pushq $uuid_00000000000df47b
	pushq $2
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call _AD__CL_ArrowSConsSS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -80(%RSP)
	push -80(%RSP)
	push -80(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4da
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment::get : Arrow<Cons<Fragment,String>,S+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq $uuid_00000000000de4da
	mov %RBX, %RBP
	call fragment_CL__CL_get_CL_ArrowSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -192(%RSP)
	push -192(%RSP)
	push -192(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragmentList:
uuid_00000000000df489:
#call function non-zero : Arrow<FragmentList,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentList
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df48a
	jmp uuid_00000000000df48b
uuid_00000000000df48a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq $0
	push %RBP
	mov -672(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df482
	jmp uuid_00000000000df484
uuid_00000000000df482:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	pushq -560(%RBP)
	pushq -568(%RBP)
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	pushq -600(%RBP)
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	pushq -632(%RBP)
	pushq -640(%RBP)
	pushq -648(%RBP)
	pushq -656(%RBP)
	pushq -664(%RBP)
	jmp uuid_00000000000df47f
	jmp uuid_00000000000df481
uuid_00000000000df47f:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df47c
	jmp uuid_00000000000df47e
uuid_00000000000df47c:
	movb $1, -680(%rbp)
uuid_00000000000df47e:
	mov -856(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000df481:
	mov -696(%RBP),%RSP
	add $-1024, %RSP
uuid_00000000000df484:
	mov -688(%RBP),%RSP
	add $-1024, %RSP
	mov -680(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df486
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df485
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df488
uuid_00000000000df486:
#call function fragment::chain : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	movq -1024(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -1016(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -1008(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -1000(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -992(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -984(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -976(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -968(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -960(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -952(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -944(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -936(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -928(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -920(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -912(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -904(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -896(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -888(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -880(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -872(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -864(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df488:
	mov -504(%RBP),%RSP
	add $-1024, %RSP
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $152, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df489
uuid_00000000000df48b:
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
fragment_CL__CL_chain_CL_ArrowFragmentConsFragmentFragment:
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -320(%rbp)
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df493
	push %RBP
	pushq -320(%rbp)
	mov -352(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df490
	push %RBP
	pushq -320(%rbp)
	mov -368(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df48d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df48c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df48f
uuid_00000000000df48d:
#call function fragment::chain-gnu : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_gnu_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df48f:
	mov -360(%RBP),%RSP
	add $-368, %RSP
	jmp uuid_00000000000df492
uuid_00000000000df490:
#call function fragment::chain-blob : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_blob_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df492:
	mov -344(%RBP),%RSP
	add $-352, %RSP
	jmp uuid_00000000000df495
uuid_00000000000df493:
#call function fragment::chain-c : Arrow<Cons<Fragment,Fragment>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_chain_SB_c_CL_ArrowFragmentConsFragmentFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	push -336(%RSP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df495:
	mov -328(%RBP),%RSP
	add $-336, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $312, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_expression_CL_ArrowFragmentS:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $uuid_00000000000dd02d
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	subq $152, %rsp
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $32, %rsp
	ret
fragment_CL__CL_get_CL_ArrowSConsStringFragment:
	pushq $0
	pushq $0
	pushq $3
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4a8
	jmp uuid_00000000000df4aa
uuid_00000000000df4a8:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000df4a5
	jmp uuid_00000000000df4a7
uuid_00000000000df4a5:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4a2
	jmp uuid_00000000000df4a4
uuid_00000000000df4a2:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000df49f
	jmp uuid_00000000000df4a1
uuid_00000000000df49f:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df49c
	jmp uuid_00000000000df49e
uuid_00000000000df49c:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df499
	jmp uuid_00000000000df49b
uuid_00000000000df499:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000df496
	jmp uuid_00000000000df498
uuid_00000000000df496:
	movb $1, -512(%rbp)
uuid_00000000000df498:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df49b:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df49e:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df4a1:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df4a4:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df4a7:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df4aa:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df4c2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df4c1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df4c4
uuid_00000000000df4c2:
uuid_00000000000df4be:
#call function non-zero : Arrow<FragmentKV,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64FragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df4bf
	jmp uuid_00000000000df4c0
uuid_00000000000df4bf:
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	push %RBP
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	pushq $0
	push %RBP
	mov -1048(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4b4
	jmp uuid_00000000000df4b6
uuid_00000000000df4b4:
	push %RBP
	pushq -1024(%RBP)
	pushq -1032(%RBP)
	pushq -1040(%RBP)
	jmp uuid_00000000000df4b1
	jmp uuid_00000000000df4b3
uuid_00000000000df4b1:
	push %RBP
	mov -1016(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df4ae
	jmp uuid_00000000000df4b0
uuid_00000000000df4ae:
	push %RBP
	mov -1008(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4ab
	jmp uuid_00000000000df4ad
uuid_00000000000df4ab:
	movb $1, -1056(%rbp)
uuid_00000000000df4ad:
	mov -1120(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000df4b0:
	mov -1104(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000df4b3:
	mov -1072(%RBP),%RSP
	add $-1168, %RSP
uuid_00000000000df4b6:
	mov -1064(%RBP),%RSP
	add $-1168, %RSP
	mov -1056(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df4bb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df4ba
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df4bd
uuid_00000000000df4bb:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -1112(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df4b7
	movq -1168(%rbp), %r15
	movq %r15, -864(%rbp)
	movq -1160(%rbp), %r15
	movq %r15, -856(%rbp)
	movq -1152(%rbp), %r15
	movq %r15, -848(%rbp)
	movq -1144(%rbp), %r15
	movq %r15, -840(%rbp)
	movq -1136(%rbp), %r15
	movq %r15, -832(%rbp)
	movq -1128(%rbp), %r15
	movq %r15, -824(%rbp)
	jmp uuid_00000000000df4b9
uuid_00000000000df4b7:
	movq -1096(%rbp), %r15
	movq %r15, -192(%rbp)
	movq -1088(%rbp), %r15
	movq %r15, -184(%rbp)
	movq -1080(%rbp), %r15
	movq %r15, -176(%rbp)
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	popq -864(%RBP)
	popq -856(%RBP)
	popq -848(%RBP)
	popq -840(%RBP)
	popq -832(%RBP)
	popq -824(%RBP)
uuid_00000000000df4b9:
	mov -1176(%RBP),%RSP
	add $-1176, %RSP
uuid_00000000000df4bd:
	mov -1000(%RBP),%RSP
	add $-1176, %RSP
	add $48, %rsp
	add $48, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df4be
uuid_00000000000df4c0:
uuid_00000000000df4c4:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $24, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_label_CL_ArrowFragmentString:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
	pushq -8(%rbp)
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq $uuid_00000000000dd02b
	pushq $0
	pushq $uuid_00000000000db09c
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
#call function t1 : Arrow<String,Type+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000db09c
	mov %RBX, %RBP
	call t1_CL_ArrowTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used24
	push -40(%RSP)
	push -40(%RSP)
	push -40(%RSP)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	subq $152, %rsp
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $16, %rsp
	ret
fragment_CL__CL_local_SB_variable_CL_ArrowFragmentConsTypeI64:
#call function fragment::new : Arrow<Nil,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_CL__CL_new_CL_ArrowFragmentNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -200(%rbp)
	mov -216(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4c9
	push %RBP
	jmp uuid_00000000000df4c6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df4c5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df4c8
uuid_00000000000df4c6:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
#call function uuid : Arrow<Nil,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call uuid_CL_ArrowStringNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000df4c8:
	mov -224(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000df4cb
uuid_00000000000df4c9:
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000dd02d
	pushq $0
#call function to-string : Arrow<I64,String+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	mov %RBX, %RBP
	call to_SB_string_CL_ArrowStringI64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
uuid_00000000000df4cb:
	mov -208(%RBP),%RSP
	add $-216, %RSP
#call function fragment::set : Arrow<Cons<Cons<Fragment,String>,S>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq $uuid_00000000000dd02b
	pushq $0
	pushq $uuid_00000000000db45d
	pushq $2
	mov %RBX, %RBP
	call fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	push -216(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
#call function fragment::set-type : Arrow<Cons<Fragment,Type>,Fragment+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used152
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	push -208(%RSP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	subq $152, %rsp
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
fragment_CL__CL_new_CL_ArrowFragmentNil:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $10
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $0
	pushq $3
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function fragment-context::new : Arrow<Nil,FContext+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call fragment_SB_context_CL__CL_new_CL_ArrowFContextNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used200
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	push -32(%RSP)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	pushq $0
	pushq $1
	pushq $0
	subq $152, %rsp
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -16(%rbp)
	popq -24(%rbp)
	popq -32(%rbp)
	popq -40(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $8, %rsp
	ret
fragment_CL__CL_set_SB_context_CL_ArrowFragmentConsFContextFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -520(%rbp)
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq $0
	push %RBP
	mov -824(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4de
	jmp uuid_00000000000df4e0
uuid_00000000000df4de:
	push %RBP
	pushq -800(%RBP)
	pushq -808(%RBP)
	pushq -816(%RBP)
	jmp uuid_00000000000df4db
	jmp uuid_00000000000df4dd
uuid_00000000000df4db:
	push %RBP
	mov -792(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4d8
	jmp uuid_00000000000df4da
uuid_00000000000df4d8:
	push %RBP
	pushq -768(%RBP)
	pushq -776(%RBP)
	pushq -784(%RBP)
	jmp uuid_00000000000df4d5
	jmp uuid_00000000000df4d7
uuid_00000000000df4d5:
	push %RBP
	mov -760(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df4d2
	jmp uuid_00000000000df4d4
uuid_00000000000df4d2:
	push %RBP
	mov -752(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4cf
	jmp uuid_00000000000df4d1
uuid_00000000000df4cf:
	push %RBP
	pushq -680(%RBP)
	pushq -688(%RBP)
	pushq -696(%RBP)
	pushq -704(%RBP)
	pushq -712(%RBP)
	pushq -720(%RBP)
	pushq -728(%RBP)
	pushq -736(%RBP)
	pushq -744(%RBP)
	jmp uuid_00000000000df4cc
	jmp uuid_00000000000df4ce
uuid_00000000000df4cc:
	movb $1, -832(%rbp)
uuid_00000000000df4ce:
	mov -1192(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df4d1:
	mov -1136(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df4d4:
	mov -1120(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df4d7:
	mov -1088(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df4da:
	mov -880(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df4dd:
	mov -848(%RBP),%RSP
	add $-1264, %RSP
uuid_00000000000df4e0:
	mov -840(%RBP),%RSP
	add $-1264, %RSP
	mov -832(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df4e2
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df4e1
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df4e4
uuid_00000000000df4e2:
	pushq -1200(%rbp)
	pushq -1208(%rbp)
	pushq -1216(%rbp)
	pushq -1224(%rbp)
	pushq -1232(%rbp)
	pushq -1240(%rbp)
	pushq -1248(%rbp)
	pushq -1256(%rbp)
	pushq -1264(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -1144(%rbp)
	pushq -1152(%rbp)
	pushq -1160(%rbp)
	pushq -1168(%rbp)
	pushq -1176(%rbp)
	pushq -1184(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -1128(%rbp)
	pushq -1096(%rbp)
	pushq -1104(%rbp)
	pushq -1112(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq $0
	popq -512(%RBP)
	popq -504(%RBP)
	popq -496(%RBP)
	popq -488(%RBP)
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
uuid_00000000000df4e4:
	mov -672(%RBP),%RSP
	add $-1264, %RSP
	subq $152, %rsp
	pushq -512(%rbp)
	pushq -504(%rbp)
	pushq -496(%rbp)
	pushq -488(%rbp)
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $360, %rsp
	ret
fragment_CL__CL_set_SB_offset_CL_ArrowFragmentConsI64Fragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq $0
	push %RBP
	mov -632(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df4f7
	jmp uuid_00000000000df4f9
uuid_00000000000df4f7:
	push %RBP
	pushq -608(%RBP)
	pushq -616(%RBP)
	pushq -624(%RBP)
	jmp uuid_00000000000df4f4
	jmp uuid_00000000000df4f6
uuid_00000000000df4f4:
	push %RBP
	mov -600(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4f1
	jmp uuid_00000000000df4f3
uuid_00000000000df4f1:
	push %RBP
	pushq -576(%RBP)
	pushq -584(%RBP)
	pushq -592(%RBP)
	jmp uuid_00000000000df4ee
	jmp uuid_00000000000df4f0
uuid_00000000000df4ee:
	push %RBP
	mov -568(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df4eb
	jmp uuid_00000000000df4ed
uuid_00000000000df4eb:
	push %RBP
	mov -560(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df4e8
	jmp uuid_00000000000df4ea
uuid_00000000000df4e8:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	pushq -544(%RBP)
	pushq -552(%RBP)
	jmp uuid_00000000000df4e5
	jmp uuid_00000000000df4e7
uuid_00000000000df4e5:
	movb $1, -640(%rbp)
uuid_00000000000df4e7:
	mov -1000(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4ea:
	mov -944(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4ed:
	mov -928(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4f0:
	mov -896(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4f3:
	mov -688(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4f6:
	mov -656(%RBP),%RSP
	add $-1072, %RSP
uuid_00000000000df4f9:
	mov -648(%RBP),%RSP
	add $-1072, %RSP
	mov -640(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df4fb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df4fa
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df4fd
uuid_00000000000df4fb:
	pushq -1008(%rbp)
	pushq -1016(%rbp)
	pushq -1024(%rbp)
	pushq -1032(%rbp)
	pushq -1040(%rbp)
	pushq -1048(%rbp)
	pushq -1056(%rbp)
	pushq -1064(%rbp)
	pushq -1072(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -952(%rbp)
	pushq -960(%rbp)
	pushq -968(%rbp)
	pushq -976(%rbp)
	pushq -984(%rbp)
	pushq -992(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	pushq -808(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
uuid_00000000000df4fd:
	mov -480(%RBP),%RSP
	add $-1072, %RSP
	subq $152, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $168, %rsp
	ret
fragment_CL__CL_set_SB_term_CL_ArrowFragmentConsASTFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq $0
	push %RBP
	mov -544(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df510
	jmp uuid_00000000000df512
uuid_00000000000df510:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000df50d
	jmp uuid_00000000000df50f
uuid_00000000000df50d:
	push %RBP
	mov -512(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df50a
	jmp uuid_00000000000df50c
uuid_00000000000df50a:
	push %RBP
	pushq -488(%RBP)
	pushq -496(%RBP)
	pushq -504(%RBP)
	jmp uuid_00000000000df507
	jmp uuid_00000000000df509
uuid_00000000000df507:
	push %RBP
	mov -480(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df504
	jmp uuid_00000000000df506
uuid_00000000000df504:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df501
	jmp uuid_00000000000df503
uuid_00000000000df501:
	push %RBP
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000df4fe
	jmp uuid_00000000000df500
uuid_00000000000df4fe:
	movb $1, -552(%rbp)
uuid_00000000000df500:
	mov -912(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df503:
	mov -856(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df506:
	mov -840(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df509:
	mov -808(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df50c:
	mov -600(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df50f:
	mov -568(%RBP),%RSP
	add $-984, %RSP
uuid_00000000000df512:
	mov -560(%RBP),%RSP
	add $-984, %RSP
	mov -552(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df514
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df513
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df516
uuid_00000000000df514:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -864(%rbp)
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -848(%rbp)
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -800(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df516:
	mov -392(%RBP),%RSP
	add $-984, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $232, %rsp
	ret
fragment_CL__CL_set_SB_type_CL_ArrowFragmentConsTypeFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df529
	jmp uuid_00000000000df52b
uuid_00000000000df529:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000df526
	jmp uuid_00000000000df528
uuid_00000000000df526:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df523
	jmp uuid_00000000000df525
uuid_00000000000df523:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000df520
	jmp uuid_00000000000df522
uuid_00000000000df520:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df51d
	jmp uuid_00000000000df51f
uuid_00000000000df51d:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df51a
	jmp uuid_00000000000df51c
uuid_00000000000df51a:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000df517
	jmp uuid_00000000000df519
uuid_00000000000df517:
	movb $1, -504(%rbp)
uuid_00000000000df519:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df51c:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df51f:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df522:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df525:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df528:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df52b:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df52d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df52c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df52f
uuid_00000000000df52d:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -528(%rbp)
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df52f:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_SB_vararg_CL_ArrowFragmentConsListArray_QM_FragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq $0
	push %RBP
	mov -496(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df542
	jmp uuid_00000000000df544
uuid_00000000000df542:
	push %RBP
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	jmp uuid_00000000000df53f
	jmp uuid_00000000000df541
uuid_00000000000df53f:
	push %RBP
	mov -464(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df53c
	jmp uuid_00000000000df53e
uuid_00000000000df53c:
	push %RBP
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	jmp uuid_00000000000df539
	jmp uuid_00000000000df53b
uuid_00000000000df539:
	push %RBP
	mov -432(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df536
	jmp uuid_00000000000df538
uuid_00000000000df536:
	push %RBP
	mov -424(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df533
	jmp uuid_00000000000df535
uuid_00000000000df533:
	push %RBP
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	jmp uuid_00000000000df530
	jmp uuid_00000000000df532
uuid_00000000000df530:
	movb $1, -504(%rbp)
uuid_00000000000df532:
	mov -864(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df535:
	mov -808(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df538:
	mov -792(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df53b:
	mov -760(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df53e:
	mov -552(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df541:
	mov -520(%RBP),%RSP
	add $-936, %RSP
uuid_00000000000df544:
	mov -512(%RBP),%RSP
	add $-936, %RSP
	mov -504(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df546
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df545
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df548
uuid_00000000000df546:
	pushq -872(%rbp)
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -816(%rbp)
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -800(%rbp)
	pushq -768(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df548:
	mov -344(%RBP),%RSP
	add $-936, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $184, %rsp
	ret
fragment_CL__CL_set_CL_ArrowFragmentConsSConsStringFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	push %RBP
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq $0
	push %RBP
	mov -504(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df55b
	jmp uuid_00000000000df55d
uuid_00000000000df55b:
	push %RBP
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000df558
	jmp uuid_00000000000df55a
uuid_00000000000df558:
	push %RBP
	mov -472(%RBP), %RAX
	pushq 192(%RAX)
	pushq 184(%RAX)
	pushq 176(%RAX)
	pushq 168(%RAX)
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df555
	jmp uuid_00000000000df557
uuid_00000000000df555:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	jmp uuid_00000000000df552
	jmp uuid_00000000000df554
uuid_00000000000df552:
	push %RBP
	mov -440(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df54f
	jmp uuid_00000000000df551
uuid_00000000000df54f:
	push %RBP
	mov -432(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df54c
	jmp uuid_00000000000df54e
uuid_00000000000df54c:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	pushq -400(%RBP)
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	jmp uuid_00000000000df549
	jmp uuid_00000000000df54b
uuid_00000000000df549:
	movb $1, -512(%rbp)
uuid_00000000000df54b:
	mov -872(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df54e:
	mov -816(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df551:
	mov -800(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df554:
	mov -768(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df557:
	mov -560(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df55a:
	mov -528(%RBP),%RSP
	add $-944, %RSP
uuid_00000000000df55d:
	mov -520(%RBP),%RSP
	add $-944, %RSP
	mov -512(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df55f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df55e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df561
uuid_00000000000df55f:
	pushq -880(%rbp)
	pushq -888(%rbp)
	pushq -896(%rbp)
	pushq -904(%rbp)
	pushq -912(%rbp)
	pushq -920(%rbp)
	pushq -928(%rbp)
	pushq -936(%rbp)
	pushq -944(%rbp)
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
#call function close : Arrow<FragmentKV,Array<FragmentKV,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -824(%rbp)
	pushq -832(%rbp)
	pushq -840(%rbp)
	pushq -848(%rbp)
	pushq -856(%rbp)
	pushq -864(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FragmentKVFragmentKV
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -808(%rbp)
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
#call function close : Arrow<FContext,Array<FContext,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -568(%rbp)
	pushq -576(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -664(%rbp)
	pushq -672(%rbp)
	pushq -680(%rbp)
	pushq -688(%rbp)
	pushq -696(%rbp)
	pushq -704(%rbp)
	pushq -712(%rbp)
	pushq -720(%rbp)
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_FContextFContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq -536(%rbp)
	pushq -544(%rbp)
	pushq -552(%rbp)
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df561:
	mov -352(%RBP),%RSP
	add $-944, %RSP
	subq $152, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	pushq -8(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	popq -216(%rbp)
	popq -224(%rbp)
	popq -232(%rbp)
	popq -240(%rbp)
	popq -248(%rbp)
	popq -256(%rbp)
	popq -264(%rbp)
	popq -272(%rbp)
	popq -280(%rbp)
	popq -288(%rbp)
	popq -296(%rbp)
	popq -304(%rbp)
	popq -312(%rbp)
	popq -320(%rbp)
	popq -328(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	addq $152, %rsp
	mov %rbp, %rsp
	sub $192, %rsp
	ret
main:
	pushq $1
	pushq $0
	pushq $0
	pushq $3
uuid_00000000000df5ac:
	mov -32(%RBP), %RAX
	mov -8(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5ad
	jmp uuid_00000000000df5ae
uuid_00000000000df5ad:
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq $uuid_00000000000df562
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df5a9
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq $uuid_00000000000df568
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df5a6
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $uuid_00000000000df56d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df5a3
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $uuid_00000000000df573
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df5a0
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $uuid_00000000000df574
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df59d
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $uuid_00000000000df575
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df59a
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq $uuid_00000000000df576
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df597
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $uuid_00000000000df577
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df594
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq $uuid_00000000000df578
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df591
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq $uuid_00000000000df579
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df58e
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq $uuid_00000000000df57a
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df58b
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq $uuid_00000000000df57b
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df588
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -272(%rbp)
	pushq $uuid_00000000000df57c
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df585
	push %RBP
	pushq -64(%rbp)
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq $uuid_00000000000df57d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df582
	push %RBP
	pushq -64(%rbp)
	jmp uuid_00000000000df57f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df57e
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df581
uuid_00000000000df57f:
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function close : Arrow<S,Array<S,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $0
	pushq -304(%rbp)
	pushq $2
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_SS
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
uuid_00000000000df581:
	mov -296(%RBP),%RSP
	add $-304, %RSP
	jmp uuid_00000000000df584
uuid_00000000000df582:
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -16(%RBP), %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	movq %R15, %r15
	movq $config_SB_target_CL_String, %r14
	movq %r15, 0(%r14)
uuid_00000000000df584:
	mov -280(%RBP),%RSP
	add $-288, %RSP
	jmp uuid_00000000000df587
uuid_00000000000df585:
	mov $config_SB_profile_SB_invocations_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000df587:
	mov -264(%RBP),%RSP
	add $-272, %RSP
	jmp uuid_00000000000df58a
uuid_00000000000df588:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000df58a:
	mov -248(%RBP),%RSP
	add $-256, %RSP
	jmp uuid_00000000000df58d
uuid_00000000000df58b:
	mov $config_SB_preprocess_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000df58d:
	mov -232(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000df590
uuid_00000000000df58e:
	mov $config_SB_strict_CL_U8, %r15
	movb $0, 0(%r15)
uuid_00000000000df590:
	mov -216(%RBP),%RSP
	add $-224, %RSP
	jmp uuid_00000000000df593
uuid_00000000000df591:
	mov $config_SB_strict_CL_U8, %r15
	movb $1, 0(%r15)
uuid_00000000000df593:
	mov -200(%RBP),%RSP
	add $-208, %RSP
	jmp uuid_00000000000df596
uuid_00000000000df594:
	pushq $0
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df596:
	mov -184(%RBP),%RSP
	add $-192, %RSP
	jmp uuid_00000000000df599
uuid_00000000000df597:
	pushq $1
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df599:
	mov -168(%RBP),%RSP
	add $-176, %RSP
	jmp uuid_00000000000df59c
uuid_00000000000df59a:
	pushq $2
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df59c:
	mov -152(%RBP),%RSP
	add $-160, %RSP
	jmp uuid_00000000000df59f
uuid_00000000000df59d:
	pushq $3
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df59f:
	mov -136(%RBP),%RSP
	add $-144, %RSP
	jmp uuid_00000000000df5a2
uuid_00000000000df5a0:
	pushq $4
	movq $config_SB_mode_CL_CompileModeCompileMode, %R15
	popq 0(%R15)
uuid_00000000000df5a2:
	mov -120(%RBP),%RSP
	add $-128, %RSP
	jmp uuid_00000000000df5a5
uuid_00000000000df5a3:
	pushq $2
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000df56e, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000dab3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df570
	jmp uuid_00000000000df572
uuid_00000000000df570:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000df56f, 0(%r15)
uuid_00000000000df572:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000df5a5:
	mov -104(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000df5a8
uuid_00000000000df5a6:
	pushq $1
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000dab92, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000dab3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df56a
	jmp uuid_00000000000df56c
uuid_00000000000df56a:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000df569, 0(%r15)
uuid_00000000000df56c:
	mov -104(%RBP),%RSP
	add $-104, %RSP
uuid_00000000000df5a8:
	mov -88(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000df5ab
uuid_00000000000df5a9:
	pushq $0
	movq $config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode, %R15
	popq 0(%R15)
	mov $config_SB_platform_SB_prefix_CL_String, %r15
	movq $uuid_00000000000df563, 0(%r15)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $config_SB_target_CL_String, %r15
	pushq 0(%r15)
	pushq $uuid_00000000000dab3d
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df565
	jmp uuid_00000000000df567
uuid_00000000000df565:
	mov $config_SB_target_CL_String, %r15
	movq $uuid_00000000000df564, 0(%r15)
uuid_00000000000df567:
	mov -88(%RBP),%RSP
	add $-88, %RSP
uuid_00000000000df5ab:
	mov -72(%RBP),%RSP
	add $-88, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df5ac
uuid_00000000000df5ae:
	pushq $1
uuid_00000000000df5da:
	mov -64(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5db
	jmp uuid_00000000000df5dc
uuid_00000000000df5db:
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5d7
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5b5
	jmp uuid_00000000000df5b7
uuid_00000000000df5b5:
	push %RBP
	mov -144(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5b2
	jmp uuid_00000000000df5b4
uuid_00000000000df5b2:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df5af
	jmp uuid_00000000000df5b1
uuid_00000000000df5af:
	movb $1, -160(%rbp)
uuid_00000000000df5b1:
	mov -208(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000df5b4:
	mov -176(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000df5b7:
	mov -168(%RBP),%RSP
	add $-232, %RSP
	mov -160(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5d4
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -264(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5c4
	jmp uuid_00000000000df5c6
uuid_00000000000df5c4:
	push %RBP
	mov -256(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5bb
	jmp uuid_00000000000df5bd
uuid_00000000000df5bb:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df5b8
	jmp uuid_00000000000df5ba
uuid_00000000000df5b8:
	movb $1, -320(%rbp)
uuid_00000000000df5ba:
	mov -336(%RBP),%RSP
	add $-344, %RSP
uuid_00000000000df5bd:
	mov -328(%RBP),%RSP
	add $-344, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5c1
	jmp uuid_00000000000df5c3
uuid_00000000000df5c1:
	push %RBP
	mov -248(%RBP), %RAX
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df5be
	jmp uuid_00000000000df5c0
uuid_00000000000df5be:
	movb $1, -272(%rbp)
uuid_00000000000df5c0:
	mov -352(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000df5c3:
	mov -288(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000df5c6:
	mov -280(%RBP),%RSP
	add $-376, %RSP
	mov -272(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5d1
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq $0
	push %RBP
	mov -408(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5ca
	jmp uuid_00000000000df5cc
uuid_00000000000df5ca:
	push %RBP
	mov -400(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df5c7
	jmp uuid_00000000000df5c9
uuid_00000000000df5c7:
	movb $1, -416(%rbp)
uuid_00000000000df5c9:
	mov -432(%RBP),%RSP
	add $-440, %RSP
uuid_00000000000df5cc:
	mov -424(%RBP),%RSP
	add $-440, %RSP
	mov -416(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df5ce
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df5cd
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df5d0
uuid_00000000000df5ce:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -440(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $0, -64(%rbp)
uuid_00000000000df5d0:
	mov -384(%RBP),%RSP
	add $-440, %RSP
	jmp uuid_00000000000df5d3
uuid_00000000000df5d1:
#call function tokenize : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -344(%rbp)
	mov %RBX, %RBP
	call tokenize_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movq -376(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000df5d3:
	mov -240(%RBP),%RSP
	add $-376, %RSP
	jmp uuid_00000000000df5d6
uuid_00000000000df5d4:
	movq -232(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -40(%rbp)
uuid_00000000000df5d6:
	mov -128(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000df5d9
uuid_00000000000df5d7:
	movb $0, -64(%rbp)
uuid_00000000000df5d9:
	mov -96(%RBP),%RSP
	add $-120, %RSP
	add $24, %rsp
	add $24, %rsp
	add $8, %RSP
	jmp uuid_00000000000df5da
uuid_00000000000df5dc:
	mov $config_SB_mode_CL_CompileModeCompileMode, %r15
	pushq 0(%r15)
	push %RBP
	pushq -72(%rbp)
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $4, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5f2
	push %RBP
	pushq -72(%rbp)
	mov -104(%RBP), %RAX
	mov %RAX, %RAX
	mov $3, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5ef
	push %RBP
	pushq -72(%rbp)
	mov -120(%RBP), %RAX
	mov %RAX, %RAX
	mov $2, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5ec
	push %RBP
	pushq -72(%rbp)
	mov -136(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5e9
	push %RBP
	pushq -72(%rbp)
	mov -152(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5e6
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df5e5
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df5e8
uuid_00000000000df5e6:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function compile : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call compile_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df5e8:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000df5eb
uuid_00000000000df5e9:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function typecheck : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call typecheck_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df5eb:
	mov -128(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000df5ee
uuid_00000000000df5ec:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function preprocess : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call preprocess_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df5ee:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000df5f1
uuid_00000000000df5ef:
#call function parse : Arrow<Nil,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov %RBX, %RBP
	call parse_CL_ArrowNilNil
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#call function serialize-ast : Arrow<AST,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_parsed_SB_program_CL_ASTAST, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call serialize_SB_ast_CL_ArrowNilAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df5f1:
	mov -96(%RBP),%RSP
	add $-104, %RSP
	jmp uuid_00000000000df5f4
uuid_00000000000df5f2:
#call function print : Arrow<List<Token>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	mov $ast_SB_tokenized_SB_program_CL_ListTokenListToken, %r15
	pushq 64(%r15)
	pushq 56(%r15)
	pushq 48(%r15)
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	mov %RBX, %RBP
	call print_CL_ArrowNilListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df5f4:
	mov -80(%RBP),%RSP
	add $-88, %RSP
	mov %rbp, %rsp
	sub $24, %rsp
	ret
print_CL_ArrowNilListToken:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa77
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000df609:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df60a
	jmp uuid_00000000000df60b
uuid_00000000000df60a:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	push %RBP
	mov -240(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df5ff
	jmp uuid_00000000000df601
uuid_00000000000df5ff:
	push %RBP
	mov -232(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df5fc
	jmp uuid_00000000000df5fe
uuid_00000000000df5fc:
	push %RBP
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	jmp uuid_00000000000df5f9
	jmp uuid_00000000000df5fb
uuid_00000000000df5f9:
	movb $1, -248(%rbp)
uuid_00000000000df5fb:
	mov -344(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000df5fe:
	mov -264(%RBP),%RSP
	add $-400, %RSP
uuid_00000000000df601:
	mov -256(%RBP),%RSP
	add $-400, %RSP
	mov -248(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df606
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df605
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df608
uuid_00000000000df606:
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df602
	jmp uuid_00000000000df604
uuid_00000000000df602:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daeae
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df604:
	mov -408(%RBP),%RSP
	add $-408, %RSP
#call function print : Arrow<Token,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	mov %RBX, %RBP
	call print_CL_ArrowNilToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	movb $1, -88(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -328(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -320(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -312(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -304(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -296(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df608:
	mov -168(%RBP),%RSP
	add $-408, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df609
uuid_00000000000df60b:
#call function print : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000daa78
	mov %RBX, %RBP
	call print_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListToken:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_SS:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FContextFContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
close_CL_ArrowArray_QM_FragmentKVFragmentKV:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_ContextContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $96
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -96(%rbp), %r15
	movq %r15, 0(%r14)
	movq -88(%rbp), %r15
	movq %r15, 8(%r14)
	movq -80(%rbp), %r15
	movq %r15, 16(%r14)
	movq -72(%rbp), %r15
	movq %r15, 24(%r14)
	movq -64(%rbp), %r15
	movq %r15, 32(%r14)
	movq -56(%rbp), %r15
	movq %r15, 40(%r14)
	movq -48(%rbp), %r15
	movq %r15, 48(%r14)
	movq -40(%rbp), %r15
	movq %r15, 56(%r14)
	movq -32(%rbp), %r15
	movq %r15, 64(%r14)
	movq -24(%rbp), %r15
	movq %r15, 72(%r14)
	movq -16(%rbp), %r15
	movq %r15, 80(%r14)
	movq -8(%rbp), %r15
	movq %r15, 88(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $104, %rsp
	ret
close_CL_ArrowArray_QM_ASTAST:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
non_SB_zero_CL_ArrowU64ListArray_QM_Fragment:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListFragment:
	mov $1, %RAX
	push %RAX
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized8Sized8:
	pushq $0
	pushq $1
uuid_00000000000df617:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df618
	jmp uuid_00000000000df619
uuid_00000000000df618:
	mov %RBP, %R15
	add $-8, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-16, %R15
	mov -32(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -48(%RBP), %RAX
	mov -56(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df614
	movq $0, -40(%rbp)
	jmp uuid_00000000000df616
uuid_00000000000df614:
uuid_00000000000df616:
	mov -64(%RBP),%RSP
	add $-64, %RSP
	mov -32(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000df617
uuid_00000000000df619:
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_TypeType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_StringStringListStringStringList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $32
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -32(%rbp), %r15
	movq %r15, 0(%r14)
	movq -24(%rbp), %r15
	movq %r15, 8(%r14)
	movq -16(%rbp), %r15
	movq %r15, 16(%r14)
	movq -8(%rbp), %r15
	movq %r15, 24(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
_DT_lookup_CL_ArrowStringConsStringConsTypeHashtableEqStringType:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df636
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df62a
	jmp uuid_00000000000df62c
uuid_00000000000df62a:
	movq $1, -104(%rbp)
uuid_00000000000df62c:
	mov -184(%RBP),%RSP
	add $-184, %RSP
uuid_00000000000df630:
	mov -104(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df631
	jmp uuid_00000000000df632
uuid_00000000000df631:
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -112(%rbp)
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df62d
	jmp uuid_00000000000df62f
uuid_00000000000df62d:
	movq $1, -104(%rbp)
uuid_00000000000df62f:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	add $8, %RSP
	jmp uuid_00000000000df630
uuid_00000000000df632:
	push %RBP
	mov -104(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df633
	jmp uuid_00000000000df635
uuid_00000000000df633:
	mov -144(%RBP), %RAX
	push %RAX
	movq -200(%rbp), %r15
	movq %r15, -64(%rbp)
	mov -200(%rbp), %r15
	mov %r15, -64(%rbp)
uuid_00000000000df635:
	mov -192(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000df638
uuid_00000000000df636:
uuid_00000000000df638:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized40:
	pushq $0
	pushq $0
uuid_00000000000df63c:
	mov -56(%RBP), %RAX
	mov $40, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df63d
	jmp uuid_00000000000df63e
uuid_00000000000df63d:
	push %RBP
	mov %RBP, %R15
	add $-40, %R15
	mov -56(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df639
	jmp uuid_00000000000df63b
uuid_00000000000df639:
	movq $1, -64(%rbp)
uuid_00000000000df63b:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $8, %RSP
	jmp uuid_00000000000df63c
uuid_00000000000df63e:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
reverse_CL_ArrowListTokenListToken:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000df654:
#call function non-zero : Arrow<List<Token>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df655
	jmp uuid_00000000000df656
uuid_00000000000df655:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -304(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df64d
	jmp uuid_00000000000df64f
uuid_00000000000df64d:
	push %RBP
	mov -296(%RBP), %RAX
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df64a
	jmp uuid_00000000000df64c
uuid_00000000000df64a:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq -280(%RBP)
	pushq -288(%RBP)
	jmp uuid_00000000000df647
	jmp uuid_00000000000df649
uuid_00000000000df647:
	movb $1, -312(%rbp)
uuid_00000000000df649:
	mov -408(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000df64c:
	mov -328(%RBP),%RSP
	add $-464, %RSP
uuid_00000000000df64f:
	mov -320(%RBP),%RSP
	add $-464, %RSP
	mov -312(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df651
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df650
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df653
uuid_00000000000df651:
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	movq -400(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -392(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -368(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -360(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -352(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -344(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -336(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df653:
	mov -232(%RBP),%RSP
	add $-464, %RSP
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $72, %rsp
	add $56, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df654
uuid_00000000000df656:
	subq $72, %rsp
	pushq -152(%rbp)
	pushq -144(%rbp)
	pushq -136(%rbp)
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListTokenListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTokenConsListTokenToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Token>,Array<List<Token>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTokenListToken
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
head_CL_ArrowTokenListToken:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df66e
	push %RBP
	jmp uuid_00000000000df66b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df66a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df66d
uuid_00000000000df66b:
uuid_00000000000df66d:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	jmp uuid_00000000000df670
uuid_00000000000df66e:
#call function fail : Arrow<String,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000df669
	mov %RBX, %RBP
	call fail_CL_ArrowNilString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
uuid_00000000000df670:
	mov -160(%RBP),%RSP
	add $-232, %RSP
	pushq -8(%RBP)
	pushq -16(%RBP)
	pushq -24(%RBP)
	pushq -32(%RBP)
	pushq -40(%RBP)
	pushq -48(%RBP)
	pushq -56(%RBP)
	subq $56, %rsp
	pushq 56(%rsp)
	pushq 72(%rsp)
	pushq 88(%rsp)
	pushq 104(%rsp)
	pushq 120(%rsp)
	pushq 136(%rsp)
	pushq 152(%rsp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
cons_CL_ArrowListTypeConsListTypeType:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	subq $40, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	pushq -40(%rbp)
	pushq -32(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $40
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -40(%rbp), %r15
	movq %r15, 0(%r14)
	movq -32(%rbp), %r15
	movq %r15, 8(%r14)
	movq -24(%rbp), %r15
	movq %r15, 16(%r14)
	movq -16(%rbp), %r15
	movq %r15, 24(%r14)
	movq -8(%rbp), %r15
	movq %r15, 32(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
close_CL_ArrowArray_QM_SfxListSfxList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_MacroListMacroList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
close_CL_ArrowArray_QM_FragmentListFragmentList:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringHashtableEqU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6a0
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df694
	jmp uuid_00000000000df696
uuid_00000000000df694:
	movq $1, -88(%rbp)
uuid_00000000000df696:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000df69a:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df69b
	jmp uuid_00000000000df69c
uuid_00000000000df69b:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df697
	jmp uuid_00000000000df699
uuid_00000000000df697:
	movq $1, -88(%rbp)
uuid_00000000000df699:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000df69a
uuid_00000000000df69c:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df69d
	jmp uuid_00000000000df69f
uuid_00000000000df69d:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000df69f:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000df6a2
uuid_00000000000df6a0:
uuid_00000000000df6a2:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized24:
	pushq $0
	pushq $0
uuid_00000000000df6a6:
	mov -40(%RBP), %RAX
	mov $24, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6a7
	jmp uuid_00000000000df6a8
uuid_00000000000df6a7:
	push %RBP
	mov %RBP, %R15
	add $-24, %R15
	mov -40(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6a3
	jmp uuid_00000000000df6a5
uuid_00000000000df6a3:
	movq $1, -48(%rbp)
uuid_00000000000df6a5:
	mov -56(%RBP),%RSP
	add $-56, %RSP
	mov -40(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
	add $8, %RSP
	jmp uuid_00000000000df6a6
uuid_00000000000df6a8:
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64StringConsU64ConsStringHashtableEqU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6ce
	jmp uuid_00000000000df6d0
uuid_00000000000df6ce:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000df6cb:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6cc
	jmp uuid_00000000000df6cd
uuid_00000000000df6cc:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df6c8
	jmp uuid_00000000000df6ca
uuid_00000000000df6c8:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6c1
	jmp uuid_00000000000df6c3
uuid_00000000000df6c1:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df6be
	jmp uuid_00000000000df6c0
uuid_00000000000df6be:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df6bb
	jmp uuid_00000000000df6bd
uuid_00000000000df6bb:
	movb $1, -216(%rbp)
uuid_00000000000df6bd:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000df6c0:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000df6c3:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6c5
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df6c7
uuid_00000000000df6c5:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000df6c7:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000df6ca:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df6cb
uuid_00000000000df6cd:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000df6d0:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,U64>,?>,U64>,String>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df6d1
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000df6d3
uuid_00000000000df6d1:
uuid_00000000000df6d3:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsStringConsU64Array_QM_TupleU64String:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df6d8
	jmp uuid_00000000000df6da
uuid_00000000000df6d8:
	movq $1, -48(%rbp)
uuid_00000000000df6da:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000df6de:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6df
	jmp uuid_00000000000df6e0
uuid_00000000000df6df:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df6db
	jmp uuid_00000000000df6dd
uuid_00000000000df6db:
	movq $1, -48(%rbp)
uuid_00000000000df6dd:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000df6de
uuid_00000000000df6e0:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
max_CL_ArrowU64ConsU64U64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6e1
	jmp uuid_00000000000df6e3
uuid_00000000000df6e1:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000df6e3:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
max_CL_ArrowI64ConsI64I64:
	push %RBP
	mov -8(%RBP), %RAX
	mov -16(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df6e4
	jmp uuid_00000000000df6e6
uuid_00000000000df6e4:
	movq -16(%rbp), %r15
	movq %r15, -8(%rbp)
	mov -16(%rbp), %r15
	mov %r15, -8(%rbp)
uuid_00000000000df6e6:
	mov -32(%RBP),%RSP
	add $-32, %RSP
	mov -8(%rbp), %RAX
	mov %rbp, %rsp
	sub $24, %rsp
	ret
close_CL_ArrowArray_QM_ListTokenListToken:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListStringConsListStringString:
	pushq -8(%rbp)
#call function close : Arrow<List<String>,Array<List<String>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStringListString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListStringListString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
non_SB_zero_CL_ArrowU64ListString:
	mov $1, %RAX
	push %RAX
	mov -24(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
cons_CL_ArrowListArray_QM_FragmentConsListArray_QM_FragmentArray_QM_Fragment:
	pushq -8(%rbp)
#call function close : Arrow<List<Array<Fragment,?>>,Array<List<Array<Fragment,?>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	subq $24, %rsp
	pushq -32(%rbp)
	pushq -24(%rbp)
	pushq -16(%rbp)
	popq -48(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $40, %rsp
	ret
close_CL_ArrowArray_QM_ListArray_QM_FragmentListArray_QM_Fragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $24
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -24(%rbp), %r15
	movq %r15, 0(%r14)
	movq -16(%rbp), %r15
	movq %r15, 8(%r14)
	movq -8(%rbp), %r15
	movq %r15, 16(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_FragmentFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $152
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -152(%rbp), %r15
	movq %r15, 0(%r14)
	movq -144(%rbp), %r15
	movq %r15, 8(%r14)
	movq -136(%rbp), %r15
	movq %r15, 16(%r14)
	movq -128(%rbp), %r15
	movq %r15, 24(%r14)
	movq -120(%rbp), %r15
	movq %r15, 32(%r14)
	movq -112(%rbp), %r15
	movq %r15, 40(%r14)
	movq -104(%rbp), %r15
	movq %r15, 48(%r14)
	movq -96(%rbp), %r15
	movq %r15, 56(%r14)
	movq -88(%rbp), %r15
	movq %r15, 64(%r14)
	movq -80(%rbp), %r15
	movq %r15, 72(%r14)
	movq -72(%rbp), %r15
	movq %r15, 80(%r14)
	movq -64(%rbp), %r15
	movq %r15, 88(%r14)
	movq -56(%rbp), %r15
	movq %r15, 96(%r14)
	movq -48(%rbp), %r15
	movq %r15, 104(%r14)
	movq -40(%rbp), %r15
	movq %r15, 112(%r14)
	movq -32(%rbp), %r15
	movq %r15, 120(%r14)
	movq -24(%rbp), %r15
	movq %r15, 128(%r14)
	movq -16(%rbp), %r15
	movq %r15, 136(%r14)
	movq -8(%rbp), %r15
	movq %r15, 144(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $160, %rsp
	ret
_DT_length_CL_ArrowU64ListFragment:
	pushq $0
uuid_00000000000df70a:
#call function non-zero : Arrow<List<Fragment>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df70b
	jmp uuid_00000000000df70c
uuid_00000000000df70b:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df703
	jmp uuid_00000000000df705
uuid_00000000000df703:
	push %RBP
	mov -520(%RBP), %RAX
	pushq 160(%RAX)
	pushq 152(%RAX)
	pushq 144(%RAX)
	pushq 136(%RAX)
	pushq 128(%RAX)
	pushq 120(%RAX)
	pushq 112(%RAX)
	pushq 104(%RAX)
	pushq 96(%RAX)
	pushq 88(%RAX)
	pushq 80(%RAX)
	pushq 72(%RAX)
	pushq 64(%RAX)
	pushq 56(%RAX)
	pushq 48(%RAX)
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df700
	jmp uuid_00000000000df702
uuid_00000000000df700:
	push %RBP
	jmp uuid_00000000000df6fd
	jmp uuid_00000000000df6ff
uuid_00000000000df6fd:
	movb $1, -536(%rbp)
uuid_00000000000df6ff:
	mov -728(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000df702:
	mov -552(%RBP),%RSP
	add $-728, %RSP
uuid_00000000000df705:
	mov -544(%RBP),%RSP
	add $-728, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df707
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df706
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df709
uuid_00000000000df707:
	movq -720(%rbp), %r15
	movq %r15, -168(%rbp)
	movq -712(%rbp), %r15
	movq %r15, -160(%rbp)
	movq -704(%rbp), %r15
	movq %r15, -152(%rbp)
	movq -696(%rbp), %r15
	movq %r15, -144(%rbp)
	movq -688(%rbp), %r15
	movq %r15, -136(%rbp)
	movq -680(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -672(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -664(%rbp), %r15
	movq %r15, -112(%rbp)
	movq -656(%rbp), %r15
	movq %r15, -104(%rbp)
	movq -648(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -640(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -632(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -624(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -616(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -608(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -600(%rbp), %r15
	movq %r15, -48(%rbp)
	movq -592(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -584(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -576(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -568(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -560(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df709:
	mov -360(%RBP),%RSP
	add $-728, %RSP
	mov -184(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -184(%rbp)
	add $168, %rsp
	add $168, %rsp
	add $8, %rsp
	add $168, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df70a
uuid_00000000000df70c:
	mov -184(%rbp), %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
cons_CL_ArrowListFragmentConsListFragmentFragment:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
#call function close : Arrow<List<Fragment>,Array<List<Fragment>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListFragmentListFragment
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	subq $168, %rsp
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	pushq -184(%rbp)
	pushq -176(%rbp)
	pushq -168(%rbp)
	pushq -160(%rbp)
	popq -336(%rbp)
	popq -344(%rbp)
	popq -352(%rbp)
	popq -360(%rbp)
	popq -368(%rbp)
	popq -376(%rbp)
	popq -384(%rbp)
	popq -392(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	addq $168, %rsp
	mov %rbp, %rsp
	sub $328, %rsp
	ret
close_CL_ArrowArray_QM_ListFragmentListFragment:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $168
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -168(%rbp), %r15
	movq %r15, 0(%r14)
	movq -160(%rbp), %r15
	movq %r15, 8(%r14)
	movq -152(%rbp), %r15
	movq %r15, 16(%r14)
	movq -144(%rbp), %r15
	movq %r15, 24(%r14)
	movq -136(%rbp), %r15
	movq %r15, 32(%r14)
	movq -128(%rbp), %r15
	movq %r15, 40(%r14)
	movq -120(%rbp), %r15
	movq %r15, 48(%r14)
	movq -112(%rbp), %r15
	movq %r15, 56(%r14)
	movq -104(%rbp), %r15
	movq %r15, 64(%r14)
	movq -96(%rbp), %r15
	movq %r15, 72(%r14)
	movq -88(%rbp), %r15
	movq %r15, 80(%r14)
	movq -80(%rbp), %r15
	movq %r15, 88(%r14)
	movq -72(%rbp), %r15
	movq %r15, 96(%r14)
	movq -64(%rbp), %r15
	movq %r15, 104(%r14)
	movq -56(%rbp), %r15
	movq %r15, 112(%r14)
	movq -48(%rbp), %r15
	movq %r15, 120(%r14)
	movq -40(%rbp), %r15
	movq %r15, 128(%r14)
	movq -32(%rbp), %r15
	movq %r15, 136(%r14)
	movq -24(%rbp), %r15
	movq %r15, 144(%r14)
	movq -16(%rbp), %r15
	movq %r15, 152(%r14)
	movq -8(%rbp), %r15
	movq %r15, 160(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $176, %rsp
	ret
is_CL_ArrowU64ConsSized24Sized24:
	pushq $0
	pushq $1
uuid_00000000000df719:
	mov $24, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -64(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df71a
	jmp uuid_00000000000df71b
uuid_00000000000df71a:
	mov %RBP, %R15
	add $-24, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-48, %R15
	mov -64(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -80(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df716
	movq $0, -72(%rbp)
	jmp uuid_00000000000df718
uuid_00000000000df716:
uuid_00000000000df718:
	mov -96(%RBP),%RSP
	add $-96, %RSP
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000df719
uuid_00000000000df71b:
	mov -72(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64ListType:
	mov $1, %RAX
	push %RAX
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_lookup_CL_ArrowListTypeConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df74c
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df740
	jmp uuid_00000000000df742
uuid_00000000000df740:
	movq $1, -136(%rbp)
uuid_00000000000df742:
	mov -248(%RBP),%RSP
	add $-248, %RSP
uuid_00000000000df746:
	mov -136(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df747
	jmp uuid_00000000000df748
uuid_00000000000df747:
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -144(%rbp)
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df743
	jmp uuid_00000000000df745
uuid_00000000000df743:
	movq $1, -136(%rbp)
uuid_00000000000df745:
	mov -256(%RBP),%RSP
	add $-256, %RSP
	add $8, %RSP
	jmp uuid_00000000000df746
uuid_00000000000df748:
	push %RBP
	mov -136(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df749
	jmp uuid_00000000000df74b
uuid_00000000000df749:
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	movq -296(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -64(%rbp)
uuid_00000000000df74b:
	mov -256(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000df74e
uuid_00000000000df74c:
uuid_00000000000df74e:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	subq $40, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000df752:
	mov -88(%RBP), %RAX
	mov $72, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df753
	jmp uuid_00000000000df754
uuid_00000000000df753:
	push %RBP
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df74f
	jmp uuid_00000000000df751
uuid_00000000000df74f:
	movq $1, -96(%rbp)
uuid_00000000000df751:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	add $8, %RSP
	jmp uuid_00000000000df752
uuid_00000000000df754:
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	push %RBP
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -184(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df77f
	jmp uuid_00000000000df781
uuid_00000000000df77f:
	push %RBP
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq $0
	push %RBP
	mov -232(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df76d
	jmp uuid_00000000000df76f
uuid_00000000000df76d:
	push %RBP
	mov -224(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df76a
	jmp uuid_00000000000df76c
uuid_00000000000df76a:
	push %RBP
	mov -216(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df767
	jmp uuid_00000000000df769
uuid_00000000000df767:
	movb $1, -240(%rbp)
uuid_00000000000df769:
	mov -272(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000df76c:
	mov -256(%RBP),%RSP
	add $-280, %RSP
uuid_00000000000df76f:
	mov -248(%RBP),%RSP
	add $-280, %RSP
	mov -240(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df77c
	jmp uuid_00000000000df77e
uuid_00000000000df77c:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq $0
	push %RBP
	mov -312(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df776
	jmp uuid_00000000000df778
uuid_00000000000df776:
	push %RBP
	mov -304(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df773
	jmp uuid_00000000000df775
uuid_00000000000df773:
	push %RBP
	mov -296(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df770
	jmp uuid_00000000000df772
uuid_00000000000df770:
	movb $1, -320(%rbp)
uuid_00000000000df772:
	mov -352(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000df775:
	mov -336(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000df778:
	mov -328(%RBP),%RSP
	add $-360, %RSP
	mov -320(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df779
	jmp uuid_00000000000df77b
uuid_00000000000df779:
	movb $1, -192(%rbp)
uuid_00000000000df77b:
	mov -288(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000df77e:
	mov -208(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000df781:
	mov -200(%RBP),%RSP
	add $-360, %RSP
	mov -192(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df789
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df788
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df78b
uuid_00000000000df789:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -360(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df785
	jmp uuid_00000000000df787
uuid_00000000000df785:
	push %RBP
	mov -344(%RBP), %RAX
	mov -264(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df782
	jmp uuid_00000000000df784
uuid_00000000000df782:
	movq $1, -64(%rbp)
uuid_00000000000df784:
	mov -376(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000df787:
	mov -368(%RBP),%RSP
	add $-376, %RSP
uuid_00000000000df78b:
	mov -128(%RBP),%RSP
	add $-376, %RSP
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	push %RBP
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df79a
	jmp uuid_00000000000df79c
uuid_00000000000df79a:
	push %RBP
	mov -88(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df797
	jmp uuid_00000000000df799
uuid_00000000000df797:
	push %RBP
	mov -80(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df794
	jmp uuid_00000000000df796
uuid_00000000000df794:
	movb $1, -104(%rbp)
uuid_00000000000df796:
	mov -136(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000df799:
	mov -120(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000df79c:
	mov -112(%RBP),%RSP
	add $-144, %RSP
	mov -104(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df79e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df79d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df7a0
uuid_00000000000df79e:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -40(%rbp)
uuid_00000000000df7a0:
	mov -72(%RBP),%RSP
	add $-144, %RSP
	mov -40(%rbp), %RAX
	mov %rbp, %rsp
	sub $32, %rsp
	ret
_DT_length_CL_ArrowU64ListType:
	pushq $0
uuid_00000000000df7b1:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df7b2
	jmp uuid_00000000000df7b3
uuid_00000000000df7b2:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7ab
	jmp uuid_00000000000df7ad
uuid_00000000000df7ab:
	push %RBP
	mov -136(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df7a8
	jmp uuid_00000000000df7aa
uuid_00000000000df7a8:
	push %RBP
	jmp uuid_00000000000df7a5
	jmp uuid_00000000000df7a7
uuid_00000000000df7a5:
	movb $1, -152(%rbp)
uuid_00000000000df7a7:
	mov -216(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000df7aa:
	mov -168(%RBP),%RSP
	add $-216, %RSP
uuid_00000000000df7ad:
	mov -160(%RBP),%RSP
	add $-216, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7ae
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df706
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df7b0
uuid_00000000000df7ae:
	movq -208(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df7b0:
	mov -104(%RBP),%RSP
	add $-216, %RSP
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df7b1
uuid_00000000000df7b3:
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TypeConsU64ConsTypeHashtableEqU64Type:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7d8
	jmp uuid_00000000000df7da
uuid_00000000000df7d8:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000df7d5:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7d6
	jmp uuid_00000000000df7d7
uuid_00000000000df7d6:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df7d2
	jmp uuid_00000000000df7d4
uuid_00000000000df7d2:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7cc
	jmp uuid_00000000000df7ce
uuid_00000000000df7cc:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df7c9
	jmp uuid_00000000000df7cb
uuid_00000000000df7c9:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000df7c6
	jmp uuid_00000000000df7c8
uuid_00000000000df7c6:
	movb $1, -280(%rbp)
uuid_00000000000df7c8:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000df7cb:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000df7ce:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7cf
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df7d1
uuid_00000000000df7cf:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,U64>,?>,U64>,Type>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTypeConsU64Array_QM_TupleU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000df7d1:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000df7d4:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df7d5
uuid_00000000000df7d7:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000df7da:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,U64>,?>,U64>,Type>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTypeConsU64Array_QM_TupleU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df7db
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000df7dd
uuid_00000000000df7db:
uuid_00000000000df7dd:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTypeConsU64Array_QM_TupleU64Type:
	pushq $0
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df7e2
	jmp uuid_00000000000df7e4
uuid_00000000000df7e2:
	movq $1, -64(%rbp)
uuid_00000000000df7e4:
	mov -144(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000df7e8:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df7e9
	jmp uuid_00000000000df7ea
uuid_00000000000df7e9:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df7e5
	jmp uuid_00000000000df7e7
uuid_00000000000df7e5:
	movq $1, -64(%rbp)
uuid_00000000000df7e7:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	add $8, %RSP
	jmp uuid_00000000000df7e8
uuid_00000000000df7ea:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -184(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -176(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -168(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
cons_CL_ArrowListTupleASTTupleTypeTContextConsListTupleASTTupleTypeTContextTupleASTTupleTypeTContext:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
#call function close : Arrow<List<Tuple<Tuple<TContext,Type>,AST>>,Array<List<Tuple<Tuple<TContext,Type>,AST>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -424(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -480(%RBP)
	popq -472(%RBP)
	popq -464(%RBP)
	popq -456(%RBP)
	popq -448(%RBP)
	popq -440(%RBP)
	popq -432(%RBP)
	popq -424(%RBP)
	popq -416(%RBP)
	popq -408(%RBP)
	popq -400(%RBP)
	popq -392(%RBP)
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	subq $248, %rsp
	pushq -480(%rbp)
	pushq -472(%rbp)
	pushq -464(%rbp)
	pushq -456(%rbp)
	pushq -448(%rbp)
	pushq -440(%rbp)
	pushq -432(%rbp)
	pushq -424(%rbp)
	pushq -416(%rbp)
	pushq -408(%rbp)
	pushq -400(%rbp)
	pushq -392(%rbp)
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	popq -600(%rbp)
	popq -608(%rbp)
	popq -616(%rbp)
	popq -624(%rbp)
	popq -632(%rbp)
	popq -640(%rbp)
	popq -648(%rbp)
	popq -656(%rbp)
	popq -664(%rbp)
	popq -672(%rbp)
	popq -680(%rbp)
	popq -688(%rbp)
	popq -696(%rbp)
	popq -704(%rbp)
	popq -712(%rbp)
	popq -720(%rbp)
	popq -728(%rbp)
	popq -736(%rbp)
	addq $248, %rsp
	mov %rbp, %rsp
	sub $488, %rsp
	ret
close_CL_ArrowArray_QM_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $248
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -248(%rbp), %r15
	movq %r15, 0(%r14)
	movq -240(%rbp), %r15
	movq %r15, 8(%r14)
	movq -232(%rbp), %r15
	movq %r15, 16(%r14)
	movq -224(%rbp), %r15
	movq %r15, 24(%r14)
	movq -216(%rbp), %r15
	movq %r15, 32(%r14)
	movq -208(%rbp), %r15
	movq %r15, 40(%r14)
	movq -200(%rbp), %r15
	movq %r15, 48(%r14)
	movq -192(%rbp), %r15
	movq %r15, 56(%r14)
	movq -184(%rbp), %r15
	movq %r15, 64(%r14)
	movq -176(%rbp), %r15
	movq %r15, 72(%r14)
	movq -168(%rbp), %r15
	movq %r15, 80(%r14)
	movq -160(%rbp), %r15
	movq %r15, 88(%r14)
	movq -152(%rbp), %r15
	movq %r15, 96(%r14)
	movq -144(%rbp), %r15
	movq %r15, 104(%r14)
	movq -136(%rbp), %r15
	movq %r15, 112(%r14)
	movq -128(%rbp), %r15
	movq %r15, 120(%r14)
	movq -120(%rbp), %r15
	movq %r15, 128(%r14)
	movq -112(%rbp), %r15
	movq %r15, 136(%r14)
	movq -104(%rbp), %r15
	movq %r15, 144(%r14)
	movq -96(%rbp), %r15
	movq %r15, 152(%r14)
	movq -88(%rbp), %r15
	movq %r15, 160(%r14)
	movq -80(%rbp), %r15
	movq %r15, 168(%r14)
	movq -72(%rbp), %r15
	movq %r15, 176(%r14)
	movq -64(%rbp), %r15
	movq %r15, 184(%r14)
	movq -56(%rbp), %r15
	movq %r15, 192(%r14)
	movq -48(%rbp), %r15
	movq %r15, 200(%r14)
	movq -40(%rbp), %r15
	movq %r15, 208(%r14)
	movq -32(%rbp), %r15
	movq %r15, 216(%r14)
	movq -24(%rbp), %r15
	movq %r15, 224(%r14)
	movq -16(%rbp), %r15
	movq %r15, 232(%r14)
	movq -8(%rbp), %r15
	movq %r15, 240(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $256, %rsp
	ret
non_SB_zero_CL_ArrowU64ListTupleASTTupleTypeTContext:
	mov $1, %RAX
	push %RAX
	mov -248(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $256, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqStringTypeConsStringConsTypeHashtableEqStringType:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df867
	jmp uuid_00000000000df869
uuid_00000000000df867:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000df864:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df865
	jmp uuid_00000000000df866
uuid_00000000000df865:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df861
	jmp uuid_00000000000df863
uuid_00000000000df861:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df85b
	jmp uuid_00000000000df85d
uuid_00000000000df85b:
	push %RBP
	mov -264(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df858
	jmp uuid_00000000000df85a
uuid_00000000000df858:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	jmp uuid_00000000000df855
	jmp uuid_00000000000df857
uuid_00000000000df855:
	movb $1, -280(%rbp)
uuid_00000000000df857:
	mov -312(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000df85a:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000df85d:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df85e
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df860
uuid_00000000000df85e:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,String>,?>,U64>,Type>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsTypeConsU64Array_QM_TupleStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000df860:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000df863:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df864
uuid_00000000000df866:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000df869:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Type,String>,?>,U64>,Type>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsTypeConsU64Array_QM_TupleStringType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df86a
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000df86c
uuid_00000000000df86a:
uuid_00000000000df86c:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsStringConsTypeConsU64Array_QM_TupleStringType:
	pushq $0
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df871
	jmp uuid_00000000000df873
uuid_00000000000df871:
	movq $1, -64(%rbp)
uuid_00000000000df873:
	mov -144(%RBP),%RSP
	add $-144, %RSP
uuid_00000000000df877:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df878
	jmp uuid_00000000000df879
uuid_00000000000df878:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	pushq -80(%RBP)
	pushq -88(%RBP)
	pushq -96(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df874
	jmp uuid_00000000000df876
uuid_00000000000df874:
	movq $1, -64(%rbp)
uuid_00000000000df876:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	add $8, %RSP
	jmp uuid_00000000000df877
uuid_00000000000df879:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -184(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -176(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -168(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
close_CL_ArrowArray_QM_TContextTContext:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $120
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -120(%rbp), %r15
	movq %r15, 0(%r14)
	movq -112(%rbp), %r15
	movq %r15, 8(%r14)
	movq -104(%rbp), %r15
	movq %r15, 16(%r14)
	movq -96(%rbp), %r15
	movq %r15, 24(%r14)
	movq -88(%rbp), %r15
	movq %r15, 32(%r14)
	movq -80(%rbp), %r15
	movq %r15, 40(%r14)
	movq -72(%rbp), %r15
	movq %r15, 48(%r14)
	movq -64(%rbp), %r15
	movq %r15, 56(%r14)
	movq -56(%rbp), %r15
	movq %r15, 64(%r14)
	movq -48(%rbp), %r15
	movq %r15, 72(%r14)
	movq -40(%rbp), %r15
	movq %r15, 80(%r14)
	movq -32(%rbp), %r15
	movq %r15, 88(%r14)
	movq -24(%rbp), %r15
	movq %r15, 96(%r14)
	movq -16(%rbp), %r15
	movq %r15, 104(%r14)
	movq -8(%rbp), %r15
	movq %r15, 112(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $128, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTypeStringConsTypeConsStringHashtableEqTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df89e
	jmp uuid_00000000000df8a0
uuid_00000000000df89e:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -80(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $40, %RAX
	mov -112(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq $0
	pushq -120(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000df89b:
	mov -136(%RBP), %RAX
	mov -88(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df89c
	jmp uuid_00000000000df89d
uuid_00000000000df89c:
	mov -96(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df898
	jmp uuid_00000000000df89a
uuid_00000000000df898:
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	push %RBP
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq $0
	push %RBP
	mov -272(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df892
	jmp uuid_00000000000df894
uuid_00000000000df892:
	push %RBP
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	jmp uuid_00000000000df88f
	jmp uuid_00000000000df891
uuid_00000000000df88f:
	push %RBP
	mov -240(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df88c
	jmp uuid_00000000000df88e
uuid_00000000000df88c:
	movb $1, -280(%rbp)
uuid_00000000000df88e:
	mov -328(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000df891:
	mov -296(%RBP),%RSP
	add $-336, %RSP
uuid_00000000000df894:
	mov -288(%RBP),%RSP
	add $-336, %RSP
	mov -280(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df895
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df897
uuid_00000000000df895:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -112(%rbp)
	pushq -336(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000df897:
	pop %RAX
	mov -232(%RBP),%RSP
	add $-336, %RSP
	push %RAX
uuid_00000000000df89a:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-336, %RSP
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -136(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df89b
uuid_00000000000df89d:
	movq -128(%rbp), %r15
	movq %r15, -96(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -96(%rbp)
	movq -112(%rbp), %r15
	movq %r15, -88(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -88(%rbp)
uuid_00000000000df8a0:
	mov -104(%RBP),%RSP
	add $-136, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Type>,?>,U64>,String>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df8a1
	mov -80(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -80(%rbp)
	jmp uuid_00000000000df8a3
uuid_00000000000df8a1:
uuid_00000000000df8a3:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTypeConsStringConsU64Array_QM_TupleTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -80(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df8a8
	jmp uuid_00000000000df8aa
uuid_00000000000df8a8:
	movq $1, -64(%rbp)
uuid_00000000000df8aa:
	mov -128(%RBP),%RSP
	add $-128, %RSP
uuid_00000000000df8ae:
	mov -64(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df8af
	jmp uuid_00000000000df8b0
uuid_00000000000df8af:
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -72(%rbp)
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	mov -80(%RBP), %RAX
	movq %RAX, -120(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df8ab
	jmp uuid_00000000000df8ad
uuid_00000000000df8ab:
	movq $1, -64(%rbp)
uuid_00000000000df8ad:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	add $8, %RSP
	jmp uuid_00000000000df8ae
uuid_00000000000df8b0:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -72(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	mov -168(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -160(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -152(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -144(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -136(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
non_SB_zero_CL_ArrowU64ListStackToSpecialize:
	mov $1, %RAX
	push %RAX
	mov -200(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
cons_CL_ArrowListStackToSpecializeConsListStackToSpecializeStackToSpecialize:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
#call function close : Arrow<List<StackToSpecialize>,Array<List<StackToSpecialize>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -384(%RBP)
	popq -376(%RBP)
	popq -368(%RBP)
	popq -360(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	subq $200, %rsp
	pushq -384(%rbp)
	pushq -376(%rbp)
	pushq -368(%rbp)
	pushq -360(%rbp)
	pushq -352(%rbp)
	pushq -344(%rbp)
	pushq -336(%rbp)
	pushq -328(%rbp)
	pushq -320(%rbp)
	pushq -312(%rbp)
	pushq -304(%rbp)
	pushq -296(%rbp)
	pushq -288(%rbp)
	pushq -280(%rbp)
	pushq -272(%rbp)
	pushq -264(%rbp)
	pushq -256(%rbp)
	pushq -248(%rbp)
	pushq -240(%rbp)
	pushq -232(%rbp)
	pushq -224(%rbp)
	pushq -216(%rbp)
	pushq -208(%rbp)
	pushq -200(%rbp)
	pushq -192(%rbp)
	popq -400(%rbp)
	popq -408(%rbp)
	popq -416(%rbp)
	popq -424(%rbp)
	popq -432(%rbp)
	popq -440(%rbp)
	popq -448(%rbp)
	popq -456(%rbp)
	popq -464(%rbp)
	popq -472(%rbp)
	popq -480(%rbp)
	popq -488(%rbp)
	popq -496(%rbp)
	popq -504(%rbp)
	popq -512(%rbp)
	popq -520(%rbp)
	popq -528(%rbp)
	popq -536(%rbp)
	popq -544(%rbp)
	popq -552(%rbp)
	popq -560(%rbp)
	popq -568(%rbp)
	popq -576(%rbp)
	popq -584(%rbp)
	popq -592(%rbp)
	addq $200, %rsp
	mov %rbp, %rsp
	sub $392, %rsp
	ret
close_CL_ArrowArray_QM_ListStackToSpecializeListStackToSpecialize:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $200
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -200(%rbp), %r15
	movq %r15, 0(%r14)
	movq -192(%rbp), %r15
	movq %r15, 8(%r14)
	movq -184(%rbp), %r15
	movq %r15, 16(%r14)
	movq -176(%rbp), %r15
	movq %r15, 24(%r14)
	movq -168(%rbp), %r15
	movq %r15, 32(%r14)
	movq -160(%rbp), %r15
	movq %r15, 40(%r14)
	movq -152(%rbp), %r15
	movq %r15, 48(%r14)
	movq -144(%rbp), %r15
	movq %r15, 56(%r14)
	movq -136(%rbp), %r15
	movq %r15, 64(%r14)
	movq -128(%rbp), %r15
	movq %r15, 72(%r14)
	movq -120(%rbp), %r15
	movq %r15, 80(%r14)
	movq -112(%rbp), %r15
	movq %r15, 88(%r14)
	movq -104(%rbp), %r15
	movq %r15, 96(%r14)
	movq -96(%rbp), %r15
	movq %r15, 104(%r14)
	movq -88(%rbp), %r15
	movq %r15, 112(%r14)
	movq -80(%rbp), %r15
	movq %r15, 120(%r14)
	movq -72(%rbp), %r15
	movq %r15, 128(%r14)
	movq -64(%rbp), %r15
	movq %r15, 136(%r14)
	movq -56(%rbp), %r15
	movq %r15, 144(%r14)
	movq -48(%rbp), %r15
	movq %r15, 152(%r14)
	movq -40(%rbp), %r15
	movq %r15, 160(%r14)
	movq -32(%rbp), %r15
	movq %r15, 168(%r14)
	movq -24(%rbp), %r15
	movq %r15, 176(%r14)
	movq -16(%rbp), %r15
	movq %r15, 184(%r14)
	movq -8(%rbp), %r15
	movq %r15, 192(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $208, %rsp
	ret
_AD__CL_ArrowListTypeConsListTypeListType:
#call function reverse : Arrow<List<Type>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call reverse_CL_ArrowListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	push -72(%RSP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
uuid_00000000000df8d4:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df8d5
	jmp uuid_00000000000df8d6
uuid_00000000000df8d5:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df8cd
	jmp uuid_00000000000df8cf
uuid_00000000000df8cd:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8ca
	jmp uuid_00000000000df8cc
uuid_00000000000df8ca:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000df8c7
	jmp uuid_00000000000df8c9
uuid_00000000000df8c7:
	movb $1, -184(%rbp)
uuid_00000000000df8c9:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000df8cc:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000df8cf:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df8d1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df8d0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df8d3
uuid_00000000000df8d1:
#call function cons : Arrow<Cons<Type,List<Type>>,List<Type>+StackVariable>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call cons_CL_ArrowListTypeConsListTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
#YesIsUsed Used40
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	push -96(%RSP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	popq -48(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df8d3:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df8d4
uuid_00000000000df8d6:
	subq $40, %rsp
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
reverse_CL_ArrowListTypeListType:
	pushq $0
	pushq $0
	pushq $0
	pushq $0
	pushq $1
uuid_00000000000df8eb:
#call function non-zero : Arrow<List<Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call non_SB_zero_CL_ArrowU64ListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df8ec
	jmp uuid_00000000000df8ed
uuid_00000000000df8ec:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	push %RBP
	mov -176(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df8e5
	jmp uuid_00000000000df8e7
uuid_00000000000df8e5:
	push %RBP
	mov -168(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df8e2
	jmp uuid_00000000000df8e4
uuid_00000000000df8e2:
	push %RBP
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	jmp uuid_00000000000df8df
	jmp uuid_00000000000df8e1
uuid_00000000000df8df:
	movb $1, -184(%rbp)
uuid_00000000000df8e1:
	mov -248(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000df8e4:
	mov -200(%RBP),%RSP
	add $-272, %RSP
uuid_00000000000df8e7:
	mov -192(%RBP),%RSP
	add $-272, %RSP
	mov -184(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df8e8
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df650
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df8ea
uuid_00000000000df8e8:
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
#call function close : Arrow<List<Type>+List<Type>,Array<List<Type>+List<Type>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTypeListTypeListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	popq -56(%RBP)
	movq -240(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -232(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df8ea:
	mov -136(%RBP),%RSP
	add $-272, %RSP
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df8eb
uuid_00000000000df8ed:
	subq $40, %rsp
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -56(%rbp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $40, %rsp
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsStringHashtableEqTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df90a
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -120(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df8fe
	jmp uuid_00000000000df900
uuid_00000000000df8fe:
	movq $1, -104(%rbp)
uuid_00000000000df900:
	mov -168(%RBP),%RSP
	add $-168, %RSP
uuid_00000000000df904:
	mov -104(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<40>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized40
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df905
	jmp uuid_00000000000df906
uuid_00000000000df905:
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -80(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -112(%rbp)
	mov -96(%RBP), %R15
	mov -112(%RBP), %RAX
	mov $40,%R14
	mul %R14
	add %RAX, %R15
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	mov -120(%RBP), %RAX
	movq %RAX, -160(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df901
	jmp uuid_00000000000df903
uuid_00000000000df901:
	movq $1, -104(%rbp)
uuid_00000000000df903:
	mov -176(%RBP),%RSP
	add $-176, %RSP
	add $8, %RSP
	jmp uuid_00000000000df904
uuid_00000000000df906:
	push %RBP
	mov -104(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df907
	jmp uuid_00000000000df909
uuid_00000000000df907:
	pushq -128(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	movq -200(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -192(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -184(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000df909:
	mov -176(%RBP),%RSP
	add $-200, %RSP
	jmp uuid_00000000000df90c
uuid_00000000000df90a:
uuid_00000000000df90c:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	subq $24, %rsp
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_lookup_CL_ArrowTupleTypeTypeConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df935
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -152(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df929
	jmp uuid_00000000000df92b
uuid_00000000000df929:
	movq $1, -136(%rbp)
uuid_00000000000df92b:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000df92f:
	mov -136(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df930
	jmp uuid_00000000000df931
uuid_00000000000df930:
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -112(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -144(%rbp)
	mov -128(%RBP), %R15
	mov -144(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	mov -152(%RBP), %RAX
	movq %RAX, -224(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -224(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df92c
	jmp uuid_00000000000df92e
uuid_00000000000df92c:
	movq $1, -136(%rbp)
uuid_00000000000df92e:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000df92f
uuid_00000000000df931:
	push %RBP
	mov -136(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df932
	jmp uuid_00000000000df934
uuid_00000000000df932:
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	movq -296(%rbp), %r15
	movq %r15, -96(%rbp)
	movq -288(%rbp), %r15
	movq %r15, -88(%rbp)
	movq -280(%rbp), %r15
	movq %r15, -80(%rbp)
	movq -272(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -264(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -256(%rbp), %r15
	movq %r15, -56(%rbp)
	movq -248(%rbp), %r15
	movq %r15, -48(%rbp)
uuid_00000000000df934:
	mov -240(%RBP),%RSP
	add $-296, %RSP
	jmp uuid_00000000000df937
uuid_00000000000df935:
uuid_00000000000df937:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	subq $56, %rsp
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	pushq -48(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $56, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_nth_CL_ArrowTypeConsTypeConsU64ListType:
uuid_00000000000df94e:
	mov -48(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	setg %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df94f
	jmp uuid_00000000000df950
uuid_00000000000df94f:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df944
	jmp uuid_00000000000df946
uuid_00000000000df944:
	push %RBP
	mov -160(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000df941
	jmp uuid_00000000000df943
uuid_00000000000df941:
	push %RBP
	jmp uuid_00000000000df93e
	jmp uuid_00000000000df940
uuid_00000000000df93e:
	movb $1, -176(%rbp)
uuid_00000000000df940:
	mov -240(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000df943:
	mov -192(%RBP),%RSP
	add $-240, %RSP
uuid_00000000000df946:
	mov -184(%RBP),%RSP
	add $-240, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df94b
	push %RBP
	jmp uuid_00000000000df948
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df947
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df94a
uuid_00000000000df948:
uuid_00000000000df94a:
	mov -248(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000df94d
uuid_00000000000df94b:
	movq -232(%rbp), %r15
	movq %r15, -40(%rbp)
	movq -224(%rbp), %r15
	movq %r15, -32(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -24(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -16(%rbp)
	movq -200(%rbp), %r15
	movq %r15, -8(%rbp)
uuid_00000000000df94d:
	mov -128(%RBP),%RSP
	add $-240, %RSP
	mov -48(%RBP), %RAX
	mov $1, %R14
	subq %R14,%RAX
	movq %RAX, -48(%rbp)
	add $40, %rsp
	add $40, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df94e
uuid_00000000000df950:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq $0
	push %RBP
	mov -168(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df957
	jmp uuid_00000000000df959
uuid_00000000000df957:
	push %RBP
	jmp uuid_00000000000df954
	jmp uuid_00000000000df956
uuid_00000000000df954:
	push %RBP
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	jmp uuid_00000000000df951
	jmp uuid_00000000000df953
uuid_00000000000df951:
	movb $1, -176(%rbp)
uuid_00000000000df953:
	mov -200(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000df956:
	mov -192(%RBP),%RSP
	add $-224, %RSP
uuid_00000000000df959:
	mov -184(%RBP),%RSP
	add $-224, %RSP
	mov -176(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df95e
	push %RBP
	jmp uuid_00000000000df95b
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df95a
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df95d
uuid_00000000000df95b:
uuid_00000000000df95d:
	mov -232(%RBP),%RSP
	add $-232, %RSP
	jmp uuid_00000000000df960
uuid_00000000000df95e:
	movq -224(%rbp), %r15
	movq %r15, -72(%rbp)
	movq -216(%rbp), %r15
	movq %r15, -64(%rbp)
	movq -208(%rbp), %r15
	movq %r15, -56(%rbp)
uuid_00000000000df960:
	mov -128(%RBP),%RSP
	add $-224, %RSP
	subq $24, %rsp
	pushq -72(%rbp)
	pushq -64(%rbp)
	pushq -56(%rbp)
	popq -88(%rbp)
	popq -96(%rbp)
	popq -104(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqTupleTypeTypeStringConsTupleTypeTypeConsStringHashtableEqTupleTypeTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df992
	jmp uuid_00000000000df994
uuid_00000000000df992:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -112(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $72, %RAX
	mov -144(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $0
	pushq -152(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000df98f:
	mov -168(%RBP), %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df990
	jmp uuid_00000000000df991
uuid_00000000000df990:
	mov -128(%RBP), %R15
	mov -168(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df98c
	jmp uuid_00000000000df98e
uuid_00000000000df98c:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df986
	jmp uuid_00000000000df988
uuid_00000000000df986:
	push %RBP
	pushq -344(%RBP)
	pushq -352(%RBP)
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000df983
	jmp uuid_00000000000df985
uuid_00000000000df983:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000df980
	jmp uuid_00000000000df982
uuid_00000000000df980:
	movb $1, -408(%rbp)
uuid_00000000000df982:
	mov -488(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000df985:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000df988:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df989
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000df98b
uuid_00000000000df989:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -144(%rbp)
	pushq -496(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	pushq -472(%rbp)
	pushq -480(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000df98b:
	pop %RAX
	mov -328(%RBP),%RSP
	add $-496, %RSP
	push %RAX
uuid_00000000000df98e:
	pop %RAX
	mov -248(%RBP),%RSP
	add $-496, %RSP
	mov -168(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -168(%rbp)
	add $72, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df98f
uuid_00000000000df991:
	movq -160(%rbp), %r15
	movq %r15, -128(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -128(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -120(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -120(%rbp)
uuid_00000000000df994:
	mov -136(%RBP),%RSP
	add $-168, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,Tuple<Type,Type>>,?>,U64>,String>,Tuple<Type,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000df995
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	jmp uuid_00000000000df997
uuid_00000000000df995:
uuid_00000000000df997:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsTupleTypeTypeConsStringConsU64Array_QM_TupleTupleTypeTypeString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -112(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df9aa
	jmp uuid_00000000000df9ac
uuid_00000000000df9aa:
	movq $1, -96(%rbp)
uuid_00000000000df9ac:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000df9b0:
	mov -96(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9b1
	jmp uuid_00000000000df9b2
uuid_00000000000df9b1:
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -104(%rbp)
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	mov -112(%RBP), %RAX
	movq %RAX, -184(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df9ad
	jmp uuid_00000000000df9af
uuid_00000000000df9ad:
	movq $1, -96(%rbp)
uuid_00000000000df9af:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000df9b0
uuid_00000000000df9b2:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	mov -264(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -256(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -248(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsStringBTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
uuid_00000000000df9d1:
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9d2
	jmp uuid_00000000000df9d3
uuid_00000000000df9d2:
	mov -8(%RBP), %RAX
	push %RAX
	push %RBP
	mov -80(%RBP), %RAX
	mov -96(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9c2
	jmp uuid_00000000000df9c4
uuid_00000000000df9c2:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -56(%rbp)
	mov -16(%RBP), %RAX
	push %RAX
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df9bf
	jmp uuid_00000000000df9c1
uuid_00000000000df9bf:
	mov -24(%RBP), %RAX
	movq %RAX, -64(%rbp)
	movb $0, -88(%rbp)
uuid_00000000000df9c1:
	mov -112(%RBP),%RSP
	add $-112, %RSP
uuid_00000000000df9c4:
	mov -104(%RBP),%RSP
	add $-112, %RSP
	push %RBP
	mov -88(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9ce
	jmp uuid_00000000000df9d0
uuid_00000000000df9ce:
	push %RBP
	mov -96(%RBP), %RAX
	mov -80(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9cb
	push %RBP
	mov -32(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9c8
	mov -32(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000df9ca
uuid_00000000000df9c8:
	movb $0, -88(%rbp)
uuid_00000000000df9ca:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	jmp uuid_00000000000df9cd
uuid_00000000000df9cb:
	push %RBP
	mov -40(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9c5
	mov -40(%RBP), %RAX
	pushq 40(%RAX)
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	popq -48(%RBP)
	popq -40(%RBP)
	popq -32(%RBP)
	popq -24(%RBP)
	popq -16(%RBP)
	popq -8(%RBP)
	jmp uuid_00000000000df9c7
uuid_00000000000df9c5:
	movb $0, -88(%rbp)
uuid_00000000000df9c7:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000df9cd:
	mov -128(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000df9d0:
	mov -120(%RBP),%RSP
	add $-136, %RSP
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df9d1
uuid_00000000000df9d3:
	mov -64(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_bind_CL_ArrowNilConsU64ConsStringArray_QM_BTreeEqU64String:
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -16(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $1
#call function close : Arrow<BTreeEq<String,U64>,Array<BTreeEq<String,U64>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq $0
	pushq $0
	pushq $1
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000df9e1:
	mov -48(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000df9e2
	jmp uuid_00000000000df9e3
uuid_00000000000df9e2:
	mov -8(%rbp), %r15
	pushq 40(%r15)
	pushq 32(%r15)
	pushq 24(%r15)
	pushq 16(%r15)
	pushq 8(%r15)
	pushq 0(%r15)
	push %RBP
	mov -64(%RBP), %RAX
	mov %RAX, %RAX
	mov -40(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9de
	push %RBP
	mov -88(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9db
	mov -88(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000df9dd
uuid_00000000000df9db:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 16(%R15)
	movb $0, -48(%rbp)
uuid_00000000000df9dd:
	mov -120(%RBP),%RSP
	add $-120, %RSP
	jmp uuid_00000000000df9e0
uuid_00000000000df9de:
	push %RBP
	mov -96(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000df9d8
	mov -96(%RBP), %RAX
	movq %RAX, -8(%rbp)
	jmp uuid_00000000000df9da
uuid_00000000000df9d8:
	mov -56(%rbp), %R8
	mov -8(%RBP), %R15
	mov %R8, 8(%R15)
	movb $0, -48(%rbp)
uuid_00000000000df9da:
	mov -120(%RBP),%RSP
	add $-120, %RSP
uuid_00000000000df9e0:
	mov -112(%RBP),%RSP
	add $-120, %RSP
	add $48, %rsp
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000df9e1
uuid_00000000000df9e3:
	mov %rbp, %rsp
	sub $32, %rsp
	ret
close_CL_ArrowArray_QM_BTreeEqU64StringBTreeEqU64String:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $48
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -48(%rbp), %r15
	movq %r15, 0(%r14)
	movq -40(%rbp), %r15
	movq %r15, 8(%r14)
	movq -32(%rbp), %r15
	movq %r15, 16(%r14)
	movq -24(%rbp), %r15
	movq %r15, 24(%r14)
	movq -16(%rbp), %r15
	movq %r15, 32(%r14)
	movq -8(%rbp), %r15
	movq %r15, 40(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_lookup_CL_ArrowStringConsStringConsStringHashtableEqStringString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa0a
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -104(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000df9fe
	jmp uuid_00000000000dfa00
uuid_00000000000df9fe:
	movq $1, -88(%rbp)
uuid_00000000000dfa00:
	mov -136(%RBP),%RSP
	add $-136, %RSP
uuid_00000000000dfa04:
	mov -88(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa05
	jmp uuid_00000000000dfa06
uuid_00000000000dfa05:
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -64(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -96(%rbp)
	mov -80(%RBP), %R15
	mov -96(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	mov -104(%RBP), %RAX
	movq %RAX, -128(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa01
	jmp uuid_00000000000dfa03
uuid_00000000000dfa01:
	movq $1, -88(%rbp)
uuid_00000000000dfa03:
	mov -144(%RBP),%RSP
	add $-144, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa04
uuid_00000000000dfa06:
	push %RBP
	mov -88(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa07
	jmp uuid_00000000000dfa09
uuid_00000000000dfa07:
	mov -112(%RBP), %RAX
	push %RAX
	movq -152(%rbp), %r15
	movq %r15, -48(%rbp)
	mov -152(%rbp), %r15
	mov %r15, -48(%rbp)
uuid_00000000000dfa09:
	mov -144(%RBP),%RSP
	add $-152, %RSP
	jmp uuid_00000000000dfa0c
uuid_00000000000dfa0a:
uuid_00000000000dfa0c:
	mov -72(%RBP),%RSP
	add $-72, %RSP
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqStringStringConsStringConsStringHashtableEqStringString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -64(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa31
	jmp uuid_00000000000dfa33
uuid_00000000000dfa31:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -64(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $24, %RAX
	mov -96(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -104(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq $0
	pushq -104(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfa2e:
	mov -120(%RBP), %RAX
	mov -72(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa2f
	jmp uuid_00000000000dfa30
uuid_00000000000dfa2f:
	mov -80(%RBP), %R15
	mov -120(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa2b
	jmp uuid_00000000000dfa2d
uuid_00000000000dfa2b:
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	push %RBP
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq $0
	push %RBP
	mov -208(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa25
	jmp uuid_00000000000dfa27
uuid_00000000000dfa25:
	push %RBP
	mov -200(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfa22
	jmp uuid_00000000000dfa24
uuid_00000000000dfa22:
	push %RBP
	mov -192(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfa1f
	jmp uuid_00000000000dfa21
uuid_00000000000dfa1f:
	movb $1, -216(%rbp)
uuid_00000000000dfa21:
	mov -248(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dfa24:
	mov -232(%RBP),%RSP
	add $-256, %RSP
uuid_00000000000dfa27:
	mov -224(%RBP),%RSP
	add $-256, %RSP
	mov -216(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa28
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfa2a
uuid_00000000000dfa28:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -96(%rbp)
	pushq -256(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfa2a:
	pop %RAX
	mov -184(%RBP),%RSP
	add $-256, %RSP
	push %RAX
uuid_00000000000dfa2d:
	pop %RAX
	mov -152(%RBP),%RSP
	add $-256, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $24, %rsp
	add $24, %rsp
	add $24, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa2e
uuid_00000000000dfa30:
	movq -112(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -112(%rbp), %r15
	mov %r15, -80(%rbp)
	movq -96(%rbp), %r15
	movq %r15, -72(%rbp)
	mov -96(%rbp), %r15
	mov %r15, -72(%rbp)
uuid_00000000000dfa33:
	mov -88(%RBP),%RSP
	add $-120, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<String,String>,?>,U64>,String>,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -128(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa34
	mov -64(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -64(%rbp)
	jmp uuid_00000000000dfa36
uuid_00000000000dfa34:
uuid_00000000000dfa36:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -64(%rbp)
	popq -72(%rbp)
	popq -80(%rbp)
	popq -88(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $56, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsStringConsStringConsU64Array_QM_TupleStringString:
	pushq $0
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	mov -64(%RBP), %RAX
	push %RAX
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa3b
	jmp uuid_00000000000dfa3d
uuid_00000000000dfa3b:
	movq $1, -48(%rbp)
uuid_00000000000dfa3d:
	mov -96(%RBP),%RSP
	add $-96, %RSP
uuid_00000000000dfa41:
	mov -48(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<24>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized24
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa42
	jmp uuid_00000000000dfa43
uuid_00000000000dfa42:
	mov -56(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -56(%rbp)
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	mov -64(%RBP), %RAX
	movq %RAX, -88(%rbp)
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -88(%rbp)
	pushq -24(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa3e
	jmp uuid_00000000000dfa40
uuid_00000000000dfa3e:
	movq $1, -48(%rbp)
uuid_00000000000dfa40:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa41
uuid_00000000000dfa43:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -56(%RBP), %RAX
	mov $24,%R14
	mul %R14
	add %RAX, %R15
	mov -120(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -112(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -104(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -48(%rbp), %RAX
	mov %rbp, %rsp
	sub $40, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa6e
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa62
	jmp uuid_00000000000dfa64
uuid_00000000000dfa62:
	movq $1, -120(%rbp)
uuid_00000000000dfa64:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dfa68:
	mov -120(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa69
	jmp uuid_00000000000dfa6a
uuid_00000000000dfa69:
	mov -128(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -128(%rbp)
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfa65
	jmp uuid_00000000000dfa67
uuid_00000000000dfa65:
	movq $1, -120(%rbp)
uuid_00000000000dfa67:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfa68
uuid_00000000000dfa6a:
	push %RBP
	mov -120(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa6b
	jmp uuid_00000000000dfa6d
uuid_00000000000dfa6b:
	mov -176(%RBP), %RAX
	push %RAX
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -248(%rbp), %r15
	mov %r15, -80(%rbp)
uuid_00000000000dfa6d:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dfa70
uuid_00000000000dfa6e:
uuid_00000000000dfa70:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized56:
	pushq $0
	pushq $0
uuid_00000000000dfa74:
	mov -72(%RBP), %RAX
	mov $56, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa75
	jmp uuid_00000000000dfa76
uuid_00000000000dfa75:
	push %RBP
	mov %RBP, %R15
	add $-56, %R15
	mov -72(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa71
	jmp uuid_00000000000dfa73
uuid_00000000000dfa71:
	movq $1, -80(%rbp)
uuid_00000000000dfa73:
	mov -88(%RBP),%RSP
	add $-88, %RSP
	mov -72(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -72(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dfa74
uuid_00000000000dfa76:
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $64, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaa1
	jmp uuid_00000000000dfaa3
uuid_00000000000dfaa1:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa8f
	jmp uuid_00000000000dfa91
uuid_00000000000dfa8f:
	push %RBP
	pushq -320(%RBP)
	pushq -328(%RBP)
	pushq -336(%RBP)
	jmp uuid_00000000000dfa8c
	jmp uuid_00000000000dfa8e
uuid_00000000000dfa8c:
	push %RBP
	mov -312(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfa89
	jmp uuid_00000000000dfa8b
uuid_00000000000dfa89:
	movb $1, -352(%rbp)
uuid_00000000000dfa8b:
	mov -400(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dfa8e:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dfa91:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa9e
	jmp uuid_00000000000dfaa0
uuid_00000000000dfa9e:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa98
	jmp uuid_00000000000dfa9a
uuid_00000000000dfa98:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	jmp uuid_00000000000dfa95
	jmp uuid_00000000000dfa97
uuid_00000000000dfa95:
	push %RBP
	mov -424(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfa92
	jmp uuid_00000000000dfa94
uuid_00000000000dfa92:
	movb $1, -464(%rbp)
uuid_00000000000dfa94:
	mov -512(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfa97:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfa9a:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfa9b
	jmp uuid_00000000000dfa9d
uuid_00000000000dfa9b:
	movb $1, -288(%rbp)
uuid_00000000000dfa9d:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfaa0:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfaa3:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaaa
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df788
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfaac
uuid_00000000000dfaaa:
	push %RBP
#call function == : Arrow<Cons<String,String>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -520(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfaa7
	jmp uuid_00000000000dfaa9
uuid_00000000000dfaa7:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -504(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfaa4
	jmp uuid_00000000000dfaa6
uuid_00000000000dfaa4:
	movq $1, -96(%rbp)
uuid_00000000000dfaa6:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dfaa9:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dfaac:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleTypeString:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfabb
	jmp uuid_00000000000dfabd
uuid_00000000000dfabb:
	push %RBP
	pushq -120(%RBP)
	pushq -128(%RBP)
	pushq -136(%RBP)
	jmp uuid_00000000000dfab8
	jmp uuid_00000000000dfaba
uuid_00000000000dfab8:
	push %RBP
	mov -112(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfab5
	jmp uuid_00000000000dfab7
uuid_00000000000dfab5:
	movb $1, -152(%rbp)
uuid_00000000000dfab7:
	mov -200(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dfaba:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dfabd:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfabe
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df79d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfac0
uuid_00000000000dfabe:
#call function deep-hash : Arrow<Type,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64Type
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<String,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000dfac0:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TupleTypeStringConsU64ConsTupleTypeStringHashtableEqU64TupleTypeString:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaf4
	jmp uuid_00000000000dfaf6
uuid_00000000000dfaf4:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -96(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $56, %RAX
	mov -128(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $0
	pushq -136(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfaf1:
	mov -152(%RBP), %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaf2
	jmp uuid_00000000000dfaf3
uuid_00000000000dfaf2:
	mov -112(%RBP), %R15
	mov -152(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfaee
	jmp uuid_00000000000dfaf0
uuid_00000000000dfaee:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfae8
	jmp uuid_00000000000dfaea
uuid_00000000000dfae8:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfae5
	jmp uuid_00000000000dfae7
uuid_00000000000dfae5:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	jmp uuid_00000000000dfae2
	jmp uuid_00000000000dfae4
uuid_00000000000dfae2:
	movb $1, -344(%rbp)
uuid_00000000000dfae4:
	mov -376(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dfae7:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dfaea:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaeb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfaed
uuid_00000000000dfaeb:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,Type>,U64>,?>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -128(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfaed:
	pop %RAX
	mov -280(%RBP),%RSP
	add $-416, %RSP
	push %RAX
uuid_00000000000dfaf0:
	pop %RAX
	mov -216(%RBP),%RSP
	add $-416, %RSP
	mov -152(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -152(%rbp)
	add $56, %rsp
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfaf1
uuid_00000000000dfaf3:
	movq -144(%rbp), %r15
	movq %r15, -112(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -112(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000dfaf6:
	mov -120(%RBP),%RSP
	add $-152, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,Type>,U64>,?>,U64>,Tuple<String,Type>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -160(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfaf7
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000dfaf9
uuid_00000000000dfaf7:
uuid_00000000000dfaf9:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleTypeStringConsU64Array_QM_TupleU64TupleTypeString:
	pushq $0
#call function deep-hash : Arrow<Tuple<String,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb0e
	jmp uuid_00000000000dfb10
uuid_00000000000dfb0e:
	movq $1, -80(%rbp)
uuid_00000000000dfb10:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dfb14:
	mov -80(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb15
	jmp uuid_00000000000dfb16
uuid_00000000000dfb15:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -88(%rbp)
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,Type>,Tuple<String,Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleTypeStringTupleTypeString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb11
	jmp uuid_00000000000dfb13
uuid_00000000000dfb11:
	movq $1, -80(%rbp)
uuid_00000000000dfb13:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfb14
uuid_00000000000dfb16:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	mov -248(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
_DT_lookup_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb58
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb4c
	jmp uuid_00000000000dfb4e
uuid_00000000000dfb4c:
	movq $1, -120(%rbp)
uuid_00000000000dfb4e:
	mov -232(%RBP),%RSP
	add $-232, %RSP
uuid_00000000000dfb52:
	mov -120(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb53
	jmp uuid_00000000000dfb54
uuid_00000000000dfb53:
	mov -128(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -96(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -128(%rbp)
	mov -112(%RBP), %R15
	mov -128(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	pushq -136(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb4f
	jmp uuid_00000000000dfb51
uuid_00000000000dfb4f:
	movq $1, -120(%rbp)
uuid_00000000000dfb51:
	mov -240(%RBP),%RSP
	add $-240, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfb52
uuid_00000000000dfb54:
	push %RBP
	mov -120(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb55
	jmp uuid_00000000000dfb57
uuid_00000000000dfb55:
	mov -176(%RBP), %RAX
	push %RAX
	movq -248(%rbp), %r15
	movq %r15, -80(%rbp)
	mov -248(%rbp), %r15
	mov %r15, -80(%rbp)
uuid_00000000000dfb57:
	mov -240(%RBP),%RSP
	add $-248, %RSP
	jmp uuid_00000000000dfb5a
uuid_00000000000dfb58:
uuid_00000000000dfb5a:
	mov -104(%RBP),%RSP
	add $-104, %RSP
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb96
	jmp uuid_00000000000dfb98
uuid_00000000000dfb96:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	pushq $0
	push %RBP
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb84
	jmp uuid_00000000000dfb86
uuid_00000000000dfb84:
	push %RBP
	mov -336(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb81
	jmp uuid_00000000000dfb83
uuid_00000000000dfb81:
	push %RBP
	pushq -312(%RBP)
	pushq -320(%RBP)
	pushq -328(%RBP)
	jmp uuid_00000000000dfb7e
	jmp uuid_00000000000dfb80
uuid_00000000000dfb7e:
	movb $1, -352(%rbp)
uuid_00000000000dfb80:
	mov -384(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dfb83:
	mov -368(%RBP),%RSP
	add $-408, %RSP
uuid_00000000000dfb86:
	mov -360(%RBP),%RSP
	add $-408, %RSP
	mov -352(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb93
	jmp uuid_00000000000dfb95
uuid_00000000000dfb93:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq $0
	push %RBP
	mov -456(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb8d
	jmp uuid_00000000000dfb8f
uuid_00000000000dfb8d:
	push %RBP
	mov -448(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfb8a
	jmp uuid_00000000000dfb8c
uuid_00000000000dfb8a:
	push %RBP
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	jmp uuid_00000000000dfb87
	jmp uuid_00000000000dfb89
uuid_00000000000dfb87:
	movb $1, -464(%rbp)
uuid_00000000000dfb89:
	mov -496(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfb8c:
	mov -480(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfb8f:
	mov -472(%RBP),%RSP
	add $-520, %RSP
	mov -464(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb90
	jmp uuid_00000000000dfb92
uuid_00000000000dfb90:
	movb $1, -288(%rbp)
uuid_00000000000dfb92:
	mov -416(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfb95:
	mov -304(%RBP),%RSP
	add $-520, %RSP
uuid_00000000000dfb98:
	mov -296(%RBP),%RSP
	add $-520, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb9f
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df788
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfba1
uuid_00000000000dfb9f:
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -504(%rbp)
	pushq -512(%rbp)
	pushq -520(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfb9c
	jmp uuid_00000000000dfb9e
uuid_00000000000dfb9c:
	push %RBP
	mov -488(%RBP), %RAX
	mov -376(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfb99
	jmp uuid_00000000000dfb9b
uuid_00000000000dfb99:
	movq $1, -96(%rbp)
uuid_00000000000dfb9b:
	mov -536(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dfb9e:
	mov -528(%RBP),%RSP
	add $-536, %RSP
uuid_00000000000dfba1:
	mov -192(%RBP),%RSP
	add $-536, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
deep_SB_hash_CL_ArrowU64TupleU64TupleU64String:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	push %RBP
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq $0
	push %RBP
	mov -144(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfbb8
	jmp uuid_00000000000dfbba
uuid_00000000000dfbb8:
	push %RBP
	mov -136(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfbb5
	jmp uuid_00000000000dfbb7
uuid_00000000000dfbb5:
	push %RBP
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	jmp uuid_00000000000dfbb2
	jmp uuid_00000000000dfbb4
uuid_00000000000dfbb2:
	movb $1, -152(%rbp)
uuid_00000000000dfbb4:
	mov -184(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dfbb7:
	mov -168(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dfbba:
	mov -160(%RBP),%RSP
	add $-208, %RSP
	mov -152(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfbbb
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df79d
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfbbd
uuid_00000000000dfbbb:
#call function deep-hash : Arrow<U64,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	addq %R14,%RAX
	movq %RAX, -56(%rbp)
uuid_00000000000dfbbd:
	mov -104(%RBP),%RSP
	add $-208, %RSP
	mov -56(%rbp), %RAX
	mov %rbp, %rsp
	sub $48, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqU64TupleU64TupleU64StringConsU64ConsTupleU64TupleU64StringHashtableEqU64TupleU64TupleU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -96(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc09
	jmp uuid_00000000000dfc0b
uuid_00000000000dfc09:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -96(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $56, %RAX
	mov -128(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -136(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq $0
	pushq -136(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfc06:
	mov -152(%RBP), %RAX
	mov -104(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc07
	jmp uuid_00000000000dfc08
uuid_00000000000dfc07:
	mov -112(%RBP), %R15
	mov -152(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc03
	jmp uuid_00000000000dfc05
uuid_00000000000dfc03:
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	push %RBP
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq $0
	push %RBP
	mov -336(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfbfd
	jmp uuid_00000000000dfbff
uuid_00000000000dfbfd:
	push %RBP
	mov -328(%RBP), %RAX
	push %RAX
	jmp uuid_00000000000dfbfa
	jmp uuid_00000000000dfbfc
uuid_00000000000dfbfa:
	push %RBP
	pushq -288(%RBP)
	pushq -296(%RBP)
	pushq -304(%RBP)
	pushq -312(%RBP)
	pushq -320(%RBP)
	jmp uuid_00000000000dfbf7
	jmp uuid_00000000000dfbf9
uuid_00000000000dfbf7:
	movb $1, -344(%rbp)
uuid_00000000000dfbf9:
	mov -376(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dfbfc:
	mov -360(%RBP),%RSP
	add $-416, %RSP
uuid_00000000000dfbff:
	mov -352(%RBP),%RSP
	add $-416, %RSP
	mov -344(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc00
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfc02
uuid_00000000000dfc00:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<Tuple<String,U64>,U64>,U64>,?>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -128(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq -368(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfc02:
	pop %RAX
	mov -280(%RBP),%RSP
	add $-416, %RSP
	push %RAX
uuid_00000000000dfc05:
	pop %RAX
	mov -216(%RBP),%RSP
	add $-416, %RSP
	mov -152(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -152(%rbp)
	add $56, %rsp
	add $56, %rsp
	add $56, %rsp
	add $8, %rsp
	add $8, %rsp
	add $40, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfc06
uuid_00000000000dfc08:
	movq -144(%rbp), %r15
	movq %r15, -112(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -112(%rbp)
	movq -128(%rbp), %r15
	movq %r15, -104(%rbp)
	mov -128(%rbp), %r15
	mov %r15, -104(%rbp)
uuid_00000000000dfc0b:
	mov -120(%RBP),%RSP
	add $-152, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<Tuple<String,U64>,U64>,U64>,?>,U64>,Tuple<Tuple<String,U64>,U64>>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -160(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc0c
	mov -96(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000dfc0e
uuid_00000000000dfc0c:
uuid_00000000000dfc0e:
	mov -168(%RBP),%RSP
	add $-168, %RSP
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -96(%rbp)
	popq -104(%rbp)
	popq -112(%rbp)
	popq -120(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsU64ConsTupleU64TupleU64StringConsU64Array_QM_TupleU64TupleU64TupleU64String:
	pushq $0
#call function deep-hash : Arrow<Tuple<Tuple<String,U64>,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc34
	jmp uuid_00000000000dfc36
uuid_00000000000dfc34:
	movq $1, -80(%rbp)
uuid_00000000000dfc36:
	mov -192(%RBP),%RSP
	add $-192, %RSP
uuid_00000000000dfc3a:
	mov -80(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<56>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized56
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfc3b
	jmp uuid_00000000000dfc3c
uuid_00000000000dfc3b:
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -88(%rbp)
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	pushq -96(%RBP)
	pushq -104(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<Tuple<String,U64>,U64>,Tuple<Tuple<String,U64>,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64TupleU64StringTupleU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfc37
	jmp uuid_00000000000dfc39
uuid_00000000000dfc37:
	movq $1, -80(%rbp)
uuid_00000000000dfc39:
	mov -200(%RBP),%RSP
	add $-200, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfc3a
uuid_00000000000dfc3c:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -88(%RBP), %RAX
	mov $56,%R14
	mul %R14
	add %RAX, %R15
	mov -248(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -208(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -200(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -80(%rbp), %RAX
	mov %rbp, %rsp
	sub $72, %rsp
	ret
non_SB_zero_CL_ArrowU64ListTupleTypeTupleStringString:
	mov $1, %RAX
	push %RAX
	mov -72(%RBP), %RAX
	mov %RAX, %RAX
	popq %R14
	cmp %R14,%RAX
	setne %AL
	andq $1,%RAX
	mov	%RAX,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
cons_CL_ArrowListTupleTypeTupleStringStringConsListTupleTypeTupleStringStringTupleTypeTupleStringString:
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
#call function close : Arrow<List<Tuple<Tuple<String,String>,Type>>,Array<List<Tuple<Tuple<String,String>,Type>>,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	pushq $0
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	popq -104(%RBP)
	popq -96(%RBP)
	popq -88(%RBP)
	popq -80(%RBP)
	popq -72(%RBP)
	popq -64(%RBP)
	subq $72, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	pushq -104(%rbp)
	pushq -96(%rbp)
	pushq -88(%rbp)
	pushq -80(%rbp)
	pushq -72(%rbp)
	pushq -64(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	popq -176(%rbp)
	popq -184(%rbp)
	popq -192(%rbp)
	popq -200(%rbp)
	popq -208(%rbp)
	addq $72, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
close_CL_ArrowArray_QM_ListTupleTypeTupleStringStringListTupleTypeTupleStringString:
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $72
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov	%RAX, %R8
	mov %R8, %r14
	add $0, %r14
	movq -72(%rbp), %r15
	movq %r15, 0(%r14)
	movq -64(%rbp), %r15
	movq %r15, 8(%r14)
	movq -56(%rbp), %r15
	movq %r15, 16(%r14)
	movq -48(%rbp), %r15
	movq %r15, 24(%r14)
	movq -40(%rbp), %r15
	movq %r15, 32(%r14)
	movq -32(%rbp), %r15
	movq %r15, 40(%r14)
	movq -24(%rbp), %r15
	movq %r15, 48(%r14)
	movq -16(%rbp), %r15
	movq %r15, 56(%r14)
	movq -8(%rbp), %r15
	movq %r15, 64(%r14)
	mov	%R8,%RAX
	push %RAX
	pop %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_bind_CL_ArrowHashtableIsTypeASTConsTypeConsASTHashtableIsTypeAST:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcba
	jmp uuid_00000000000dfcbc
uuid_00000000000dfcba:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -144(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $104, %RAX
	mov -176(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq $0
	pushq -184(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfcb7:
	mov -200(%RBP), %RAX
	mov -152(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcb8
	jmp uuid_00000000000dfcb9
uuid_00000000000dfcb8:
	mov -160(%RBP), %R15
	mov -200(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcb4
	jmp uuid_00000000000dfcb6
uuid_00000000000dfcb4:
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	push %RBP
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -360(%rbp)
	pushq -368(%rbp)
	pushq -376(%rbp)
	pushq -384(%rbp)
	pushq -392(%rbp)
	pushq -400(%rbp)
	pushq -408(%rbp)
	pushq -416(%rbp)
	pushq $0
	push %RBP
	mov -528(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcad
	jmp uuid_00000000000dfcaf
uuid_00000000000dfcad:
	push %RBP
	pushq -504(%RBP)
	pushq -512(%RBP)
	pushq -520(%RBP)
	jmp uuid_00000000000dfcaa
	jmp uuid_00000000000dfcac
uuid_00000000000dfcaa:
	push %RBP
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq -488(%RBP)
	pushq -496(%RBP)
	jmp uuid_00000000000dfca7
	jmp uuid_00000000000dfca9
uuid_00000000000dfca7:
	movb $1, -536(%rbp)
uuid_00000000000dfca9:
	mov -584(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dfcac:
	mov -552(%RBP),%RSP
	add $-656, %RSP
uuid_00000000000dfcaf:
	mov -544(%RBP),%RSP
	add $-656, %RSP
	mov -536(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcb1
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dfcb0
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfcb3
uuid_00000000000dfcb1:
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -192(%rbp)
	pushq -176(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	pushq -624(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	pushq -656(%rbp)
	pushq -560(%rbp)
	pushq -568(%rbp)
	pushq -576(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfcb3:
	pop %RAX
	mov -424(%RBP),%RSP
	add $-656, %RSP
	push %RAX
uuid_00000000000dfcb6:
	pop %RAX
	mov -312(%RBP),%RSP
	add $-656, %RSP
	mov -200(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -200(%rbp)
	add $104, %rsp
	add $104, %rsp
	add $104, %rsp
	add $8, %rsp
	add $24, %rsp
	add $72, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfcb7
uuid_00000000000dfcb9:
	movq -192(%rbp), %r15
	movq %r15, -160(%rbp)
	mov -192(%rbp), %r15
	mov %r15, -160(%rbp)
	movq -176(%rbp), %r15
	movq %r15, -152(%rbp)
	mov -176(%rbp), %r15
	mov %r15, -152(%rbp)
uuid_00000000000dfcbc:
	mov -168(%RBP),%RSP
	add $-200, %RSP
#call function .bind-is : Arrow<Cons<Cons<Cons<Array<Tuple<AST,Type>,?>,U64>,AST>,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -152(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -208(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcbd
	mov -144(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -144(%rbp)
	jmp uuid_00000000000dfcbf
uuid_00000000000dfcbd:
uuid_00000000000dfcbf:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	popq -168(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_DT_bind_SB_is_CL_ArrowU64ConsTypeConsASTConsU64Array_QM_TupleTypeAST:
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcc4
	jmp uuid_00000000000dfcc6
uuid_00000000000dfcc4:
	movq $1, -128(%rbp)
uuid_00000000000dfcc6:
	mov -320(%RBP),%RSP
	add $-320, %RSP
uuid_00000000000dfcca:
	mov -128(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfccb
	jmp uuid_00000000000dfccc
uuid_00000000000dfccb:
	mov -136(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -136(%rbp)
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	pushq -144(%RBP)
	pushq -152(%RBP)
	pushq -160(%RBP)
	pushq -168(%RBP)
	pushq -176(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcc7
	jmp uuid_00000000000dfcc9
uuid_00000000000dfcc7:
	movq $1, -128(%rbp)
uuid_00000000000dfcc9:
	mov -328(%RBP),%RSP
	add $-328, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfcca
uuid_00000000000dfccc:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -136(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	mov -424(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -416(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -408(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -400(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -392(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -384(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -376(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -368(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -360(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -352(%RBP), %RAX
	mov %RAX, 72(%R15)
	mov -344(%RBP), %RAX
	mov %RAX, 80(%R15)
	mov -336(%RBP), %RAX
	mov %RAX, 88(%R15)
	mov -328(%RBP), %RAX
	mov %RAX, 96(%R15)
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $120, %rsp
	ret
mem_SB_is_SB_nonzero_CL_ArrowU64Sized104:
	pushq $0
	pushq $0
uuid_00000000000dfcd0:
	mov -120(%RBP), %RAX
	mov $104, %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcd1
	jmp uuid_00000000000dfcd2
uuid_00000000000dfcd1:
	push %RBP
	mov %RBP, %R15
	add $-104, %R15
	mov -120(%RBP), %R14
	add %R14, %R15
	mov 0(%R15), %R15B
	mov %R15B, %AL
	mov $0, %R14B
	cmpb %R14B,%AL
	setne %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfccd
	jmp uuid_00000000000dfccf
uuid_00000000000dfccd:
	movq $1, -128(%rbp)
uuid_00000000000dfccf:
	mov -136(%RBP),%RSP
	add $-136, %RSP
	mov -120(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -120(%rbp)
	add $8, %RSP
	jmp uuid_00000000000dfcd0
uuid_00000000000dfcd2:
	mov -128(%rbp), %RAX
	mov %rbp, %rsp
	sub $112, %rsp
	ret
is_CL_ArrowU64ConsSized72Sized72:
	pushq $0
	pushq $1
uuid_00000000000dfcd6:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -160(%RBP), %RAX
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcd7
	jmp uuid_00000000000dfcd8
uuid_00000000000dfcd7:
	mov %RBP, %R15
	add $-72, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	mov %RBP, %R15
	add $-144, %R15
	mov -160(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	push %R15
	push %RBP
	mov -176(%RBP), %RAX
	mov -184(%RBP), %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcd3
	movq $0, -168(%rbp)
	jmp uuid_00000000000dfcd5
uuid_00000000000dfcd3:
uuid_00000000000dfcd5:
	mov -192(%RBP),%RSP
	add $-192, %RSP
	mov -160(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -160(%rbp)
	add $8, %rsp
	add $8, %rsp
	add $8, %RSP
	jmp uuid_00000000000dfcd6
uuid_00000000000dfcd8:
	mov -168(%rbp), %RAX
	mov %rbp, %rsp
	sub $152, %rsp
	ret
hash_CL_ArrowU64Sized72:
	pushq $0
	pushq $0
uuid_00000000000dfcd9:
	mov $72, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -88(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcda
	jmp uuid_00000000000dfcdb
uuid_00000000000dfcda:
	mov %RBP, %R15
	add $-72, %R15
	mov -88(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -88(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -88(%rbp)
	mov -96(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	jmp uuid_00000000000dfcd9
uuid_00000000000dfcdb:
	mov -96(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -96(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -96(%rbp)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $80, %rsp
	ret
_DT_lookup_CL_ArrowTypeConsTypeConsASTHashtableIsTypeAST:
	mov -16(%RBP), %RAX
	push %RAX
	push %RBP
	mov -144(%RBP), %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcf8
	mov -24(%RBP), %RAX
	push %RAX
	pushq $0
#call function hash : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call hash_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcec
	jmp uuid_00000000000dfcee
uuid_00000000000dfcec:
	movq $1, -168(%rbp)
uuid_00000000000dfcee:
	mov -360(%RBP),%RSP
	add $-360, %RSP
uuid_00000000000dfcf2:
	mov -168(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<104>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	pushq -248(%rbp)
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized104
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcf3
	jmp uuid_00000000000dfcf4
uuid_00000000000dfcf3:
	mov -176(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -144(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -176(%rbp)
	mov -160(%RBP), %R15
	mov -176(%RBP), %RAX
	mov $104,%R14
	mul %R14
	add %RAX, %R15
	pushq 96(%R15)
	pushq 88(%R15)
	pushq 80(%R15)
	pushq 72(%R15)
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -280(%RBP)
	popq -272(%RBP)
	popq -264(%RBP)
	popq -256(%RBP)
	popq -248(%RBP)
	popq -240(%RBP)
	popq -232(%RBP)
	popq -224(%RBP)
	popq -216(%RBP)
	popq -208(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	pushq -184(%RBP)
	pushq -192(%RBP)
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	pushq -240(%RBP)
	pushq -248(%RBP)
	popq -352(%RBP)
	popq -344(%RBP)
	popq -336(%RBP)
	popq -328(%RBP)
	popq -320(%RBP)
	popq -312(%RBP)
	popq -304(%RBP)
	popq -296(%RBP)
	popq -288(%RBP)
	push %RBP
#call function is : Arrow<Cons<Sized<72>,Sized<72>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq -328(%rbp)
	pushq -336(%rbp)
	pushq -344(%rbp)
	pushq -352(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	pushq -104(%rbp)
	mov %RBX, %RBP
	call is_CL_ArrowU64ConsSized72Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfcef
	jmp uuid_00000000000dfcf1
uuid_00000000000dfcef:
	movq $1, -168(%rbp)
uuid_00000000000dfcf1:
	mov -368(%RBP),%RSP
	add $-368, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfcf2
uuid_00000000000dfcf4:
	push %RBP
	mov -168(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfcf5
	jmp uuid_00000000000dfcf7
uuid_00000000000dfcf5:
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	movq -392(%rbp), %r15
	movq %r15, -128(%rbp)
	movq -384(%rbp), %r15
	movq %r15, -120(%rbp)
	movq -376(%rbp), %r15
	movq %r15, -112(%rbp)
uuid_00000000000dfcf7:
	mov -368(%RBP),%RSP
	add $-392, %RSP
	jmp uuid_00000000000dfcfa
uuid_00000000000dfcf8:
uuid_00000000000dfcfa:
	mov -152(%RBP),%RSP
	add $-152, %RSP
	subq $24, %rsp
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -112(%rbp)
	popq -144(%rbp)
	popq -152(%rbp)
	popq -160(%rbp)
	addq $24, %rsp
	mov %rbp, %rsp
	sub $136, %rsp
	ret
_DT_bind_CL_ArrowHashtableEqListTypeTupleU64StringConsListTypeConsTupleU64StringHashtableEqListTypeTupleU64String:
	mov -8(%RBP), %RAX
	push %RAX
	mov -16(%RBP), %RAX
	push %RAX
	mov -24(%RBP), %RAX
	push %RAX
	push %RBP
	mov -112(%RBP), %RAX
	mov $3, %R14
	mul %R14
	mov %RAX, %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setge %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd30
	jmp uuid_00000000000dfd32
uuid_00000000000dfd30:
#call function max : Arrow<Cons<U64,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $1000
	mov -112(%RBP), %RAX
	mov $30, %R14
	mul %R14
	push %RAX
	mov %RBX, %RBP
	call max_CL_ArrowU64ConsU64U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	mov $72, %RAX
	mov -144(%RBP), %R14
	mul %R14
	push %RAX
#call function malloc : Arrow<U64,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -152(%rbp)
	mov %RBX, %RBP
	call malloc_CL_ArrowArray_QM__QM_U64
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
#call function memset : Arrow<Cons<Cons<Array<?,?>,U8>,U64>,Array<?,?>+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq $0
	pushq -152(%rbp)
	mov %RBX, %RBP
	call memset_CL_ArrowArray_QM__QM_ConsU64ConsU8Array_QM__QM_
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	pushq $0
uuid_00000000000dfd2d:
	mov -168(%RBP), %RAX
	mov -120(%RBP), %R14
	cmp %R14,%RAX
	setl %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd2e
	jmp uuid_00000000000dfd2f
uuid_00000000000dfd2e:
	mov -128(%RBP), %R15
	mov -168(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	push %RBP
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd2a
	jmp uuid_00000000000dfd2c
uuid_00000000000dfd2a:
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -208(%rbp)
	pushq -216(%rbp)
	pushq -224(%rbp)
	pushq -232(%rbp)
	pushq -240(%rbp)
	push %RBP
	pushq -256(%rbp)
	pushq -264(%rbp)
	pushq -272(%rbp)
	pushq -280(%rbp)
	pushq -288(%rbp)
	pushq -296(%rbp)
	pushq -304(%rbp)
	pushq -312(%rbp)
	pushq -320(%rbp)
	pushq $0
	push %RBP
	mov -400(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd24
	jmp uuid_00000000000dfd26
uuid_00000000000dfd24:
	push %RBP
	pushq -360(%RBP)
	pushq -368(%RBP)
	pushq -376(%RBP)
	pushq -384(%RBP)
	pushq -392(%RBP)
	jmp uuid_00000000000dfd21
	jmp uuid_00000000000dfd23
uuid_00000000000dfd21:
	push %RBP
	pushq -336(%RBP)
	pushq -344(%RBP)
	pushq -352(%RBP)
	jmp uuid_00000000000dfd1e
	jmp uuid_00000000000dfd20
uuid_00000000000dfd1e:
	movb $1, -408(%rbp)
uuid_00000000000dfd20:
	mov -472(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dfd23:
	mov -424(%RBP),%RSP
	add $-496, %RSP
uuid_00000000000dfd26:
	mov -416(%RBP),%RSP
	add $-496, %RSP
	mov -408(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd27
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000df6c4
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfd29
uuid_00000000000dfd27:
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,U64>,List<Type>>,?>,U64>,Tuple<String,U64>>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -160(%rbp)
	pushq -144(%rbp)
	pushq -480(%rbp)
	pushq -488(%rbp)
	pushq -496(%rbp)
	pushq -432(%rbp)
	pushq -440(%rbp)
	pushq -448(%rbp)
	pushq -456(%rbp)
	pushq -464(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsListTypeConsTupleU64StringConsU64Array_QM_TupleListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
uuid_00000000000dfd29:
	pop %RAX
	mov -328(%RBP),%RSP
	add $-496, %RSP
	push %RAX
uuid_00000000000dfd2c:
	pop %RAX
	mov -248(%RBP),%RSP
	add $-496, %RSP
	mov -168(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -168(%rbp)
	add $72, %rsp
	add $72, %rsp
	add $72, %rsp
	add $8, %rsp
	add $40, %rsp
	add $24, %rsp
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfd2d
uuid_00000000000dfd2f:
	movq -160(%rbp), %r15
	movq %r15, -128(%rbp)
	mov -160(%rbp), %r15
	mov %r15, -128(%rbp)
	movq -144(%rbp), %r15
	movq %r15, -120(%rbp)
	mov -144(%rbp), %r15
	mov %r15, -120(%rbp)
uuid_00000000000dfd32:
	mov -136(%RBP),%RSP
	add $-168, %RSP
#call function .bind-eq : Arrow<Cons<Cons<Cons<Array<Tuple<Tuple<String,U64>,List<Type>>,?>,U64>,Tuple<String,U64>>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -128(%rbp)
	pushq -120(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq -88(%rbp)
	pushq -96(%rbp)
	mov %RBX, %RBP
	call _DT_bind_SB_eq_CL_ArrowU64ConsListTypeConsTupleU64StringConsU64Array_QM_TupleListTypeTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	push %RAX
	push %RBP
	mov -176(%RBP), %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd33
	mov -112(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -112(%rbp)
	jmp uuid_00000000000dfd35
uuid_00000000000dfd33:
uuid_00000000000dfd35:
	mov -184(%RBP),%RSP
	add $-184, %RSP
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq $0
	subq $32, %rsp
	pushq 32(%rsp)
	pushq 48(%rsp)
	pushq 64(%rsp)
	pushq 80(%rsp)
	popq -112(%rbp)
	popq -120(%rbp)
	popq -128(%rbp)
	popq -136(%rbp)
	addq $32, %rsp
	mov %rbp, %rsp
	sub $104, %rsp
	ret
_DT_bind_SB_eq_CL_ArrowU64ConsListTypeConsTupleU64StringConsU64Array_QM_TupleListTypeTupleU64String:
	pushq $0
#call function deep-hash : Arrow<Tuple<String,U64>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call deep_SB_hash_CL_ArrowU64TupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	push %RAX
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd50
	jmp uuid_00000000000dfd52
uuid_00000000000dfd50:
	movq $1, -96(%rbp)
uuid_00000000000dfd52:
	mov -208(%RBP),%RSP
	add $-208, %RSP
uuid_00000000000dfd56:
	mov -96(%RBP), %RAX
	andq $1,%RAX
	xor $1,%RAX
	push %RAX
#call function mem-is-nonzero : Arrow<Sized<72>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	mov %RBX, %RBP
	call mem_SB_is_SB_nonzero_CL_ArrowU64Sized72
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	mov %RAX, %RAX
	popq %R14
	andq %R14,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd57
	jmp uuid_00000000000dfd58
uuid_00000000000dfd57:
	mov -104(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	mov %RAX, %RAX
	mov -16(%RBP), %R14
	mov $0, %RDX
	div %R14
	mov %RDX, %RAX
	movq %RAX, -104(%rbp)
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	pushq 64(%R15)
	pushq 56(%R15)
	pushq 48(%R15)
	pushq 40(%R15)
	pushq 32(%R15)
	pushq 24(%R15)
	pushq 16(%R15)
	pushq 8(%R15)
	pushq 0(%R15)
	popq -176(%RBP)
	popq -168(%RBP)
	popq -160(%RBP)
	popq -152(%RBP)
	popq -144(%RBP)
	popq -136(%RBP)
	popq -128(%RBP)
	popq -120(%RBP)
	popq -112(%RBP)
	pushq -112(%RBP)
	pushq -120(%RBP)
	pushq -128(%RBP)
	popq -200(%RBP)
	popq -192(%RBP)
	popq -184(%RBP)
	push %RBP
#call function == : Arrow<Cons<Tuple<String,U64>,Tuple<String,U64>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -184(%rbp)
	pushq -192(%rbp)
	pushq -200(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTupleU64StringTupleU64String
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd53
	jmp uuid_00000000000dfd55
uuid_00000000000dfd53:
	movq $1, -96(%rbp)
uuid_00000000000dfd55:
	mov -216(%RBP),%RSP
	add $-216, %RSP
	add $8, %RSP
	jmp uuid_00000000000dfd56
uuid_00000000000dfd58:
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	mov -8(%RBP), %R15
	mov -104(%RBP), %RAX
	mov $72,%R14
	mul %R14
	add %RAX, %R15
	mov -280(%RBP), %RAX
	mov %RAX, 0(%R15)
	mov -272(%RBP), %RAX
	mov %RAX, 8(%R15)
	mov -264(%RBP), %RAX
	mov %RAX, 16(%R15)
	mov -256(%RBP), %RAX
	mov %RAX, 24(%R15)
	mov -248(%RBP), %RAX
	mov %RAX, 32(%R15)
	mov -240(%RBP), %RAX
	mov %RAX, 40(%R15)
	mov -232(%RBP), %RAX
	mov %RAX, 48(%R15)
	mov -224(%RBP), %RAX
	mov %RAX, 56(%R15)
	mov -216(%RBP), %RAX
	mov %RAX, 64(%R15)
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
_EQ__EQ__CL_ArrowU64ConsListTypeListType:
	pushq $0
	pushq -8(%rbp)
	pushq -16(%rbp)
	pushq -24(%rbp)
	pushq -32(%rbp)
	pushq -40(%rbp)
	pushq -48(%rbp)
	pushq -56(%rbp)
	pushq -64(%rbp)
	pushq -72(%rbp)
	pushq -80(%rbp)
	pushq $0
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -280(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd68
	jmp uuid_00000000000dfd6a
uuid_00000000000dfd68:
	push %RBP
	pushq -240(%RBP)
	pushq -248(%RBP)
	pushq -256(%RBP)
	pushq -264(%RBP)
	pushq -272(%RBP)
	mov -344(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd65
	jmp uuid_00000000000dfd67
uuid_00000000000dfd65:
	push %RBP
	pushq -200(%RBP)
	pushq -208(%RBP)
	pushq -216(%RBP)
	pushq -224(%RBP)
	pushq -232(%RBP)
	mov -392(%RBP), %RAX
	mov %RAX, %RAX
	mov $1, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd62
	jmp uuid_00000000000dfd64
uuid_00000000000dfd62:
	movb $1, -288(%rbp)
uuid_00000000000dfd64:
	mov -352(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dfd67:
	mov -304(%RBP),%RSP
	add $-392, %RSP
uuid_00000000000dfd6a:
	mov -296(%RBP),%RSP
	add $-392, %RSP
	mov -288(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd93
	push %RBP
	pushq -104(%rbp)
	pushq -112(%rbp)
	pushq -120(%rbp)
	pushq -128(%rbp)
	pushq -136(%rbp)
	pushq -144(%rbp)
	pushq -152(%rbp)
	pushq -160(%rbp)
	pushq -168(%rbp)
	pushq -176(%rbp)
	pushq -184(%rbp)
	pushq $0
	push %RBP
	mov -488(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd83
	jmp uuid_00000000000dfd85
uuid_00000000000dfd83:
	push %RBP
	pushq -448(%RBP)
	pushq -456(%RBP)
	pushq -464(%RBP)
	pushq -472(%RBP)
	pushq -480(%RBP)
	pushq $0
	push %RBP
	mov -552(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd71
	jmp uuid_00000000000dfd73
uuid_00000000000dfd71:
	push %RBP
	mov -544(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfd6e
	jmp uuid_00000000000dfd70
uuid_00000000000dfd6e:
	push %RBP
	pushq -520(%RBP)
	pushq -528(%RBP)
	pushq -536(%RBP)
	jmp uuid_00000000000dfd6b
	jmp uuid_00000000000dfd6d
uuid_00000000000dfd6b:
	movb $1, -560(%rbp)
uuid_00000000000dfd6d:
	mov -624(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000dfd70:
	mov -576(%RBP),%RSP
	add $-648, %RSP
uuid_00000000000dfd73:
	mov -568(%RBP),%RSP
	add $-648, %RSP
	mov -560(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd80
	jmp uuid_00000000000dfd82
uuid_00000000000dfd80:
	push %RBP
	pushq -408(%RBP)
	pushq -416(%RBP)
	pushq -424(%RBP)
	pushq -432(%RBP)
	pushq -440(%RBP)
	pushq $0
	push %RBP
	mov -696(%RBP), %RAX
	mov %RAX, %RAX
	mov $0, %R14
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd7a
	jmp uuid_00000000000dfd7c
uuid_00000000000dfd7a:
	push %RBP
	mov -688(%RBP), %RAX
	pushq 32(%RAX)
	pushq 24(%RAX)
	pushq 16(%RAX)
	pushq 8(%RAX)
	pushq 0(%RAX)
	jmp uuid_00000000000dfd77
	jmp uuid_00000000000dfd79
uuid_00000000000dfd77:
	push %RBP
	pushq -664(%RBP)
	pushq -672(%RBP)
	pushq -680(%RBP)
	jmp uuid_00000000000dfd74
	jmp uuid_00000000000dfd76
uuid_00000000000dfd74:
	movb $1, -704(%rbp)
uuid_00000000000dfd76:
	mov -768(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dfd79:
	mov -720(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dfd7c:
	mov -712(%RBP),%RSP
	add $-792, %RSP
	mov -704(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd7d
	jmp uuid_00000000000dfd7f
uuid_00000000000dfd7d:
	movb $1, -496(%rbp)
uuid_00000000000dfd7f:
	mov -656(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dfd82:
	mov -512(%RBP),%RSP
	add $-792, %RSP
uuid_00000000000dfd85:
	mov -504(%RBP),%RSP
	add $-792, %RSP
	mov -496(%RBP), %AL
	mov $1, %R14B
	cmpb %R14B,%AL
	sete %AL
	andq $1, %RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd90
	push %RBP
	jmp uuid_00000000000dfd8d
#call function fail : Arrow<Cons<String,String>,Nil>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq $uuid_00000000000da9ec
	pushq $uuid_00000000000dfd8c
	mov %RBX, %RBP
	call fail_CL_ArrowNilConsStringString
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	jmp uuid_00000000000dfd8f
uuid_00000000000dfd8d:
uuid_00000000000dfd8f:
	mov -800(%RBP),%RSP
	add $-800, %RSP
	jmp uuid_00000000000dfd92
uuid_00000000000dfd90:
	push %RBP
#call function == : Arrow<Cons<List<Type>,List<Type>>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -728(%rbp)
	pushq -736(%rbp)
	pushq -744(%rbp)
	pushq -752(%rbp)
	pushq -760(%rbp)
	pushq -584(%rbp)
	pushq -592(%rbp)
	pushq -600(%rbp)
	pushq -608(%rbp)
	pushq -616(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsListTypeListType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd89
	jmp uuid_00000000000dfd8b
uuid_00000000000dfd89:
	push %RBP
#call function == : Arrow<Cons<Type,Type>,U64+Reg64>
	push %RBX
	push %RBP
	mov %RSP, %RBX
	pushq -776(%rbp)
	pushq -784(%rbp)
	pushq -792(%rbp)
	pushq -632(%rbp)
	pushq -640(%rbp)
	pushq -648(%rbp)
	mov %RBX, %RBP
	call _EQ__EQ__CL_ArrowU64ConsTypeType
	mov %RBP, %RSP
	pop %RBP
	pop %RBX
	cmp $0, %RAX
	jne uuid_00000000000dfd86
	jmp uuid_00000000000dfd88
uuid_00000000000dfd86:
	movq $1, -96(%rbp)
uuid_00000000000dfd88:
	mov -808(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dfd8b:
	mov -800(%RBP),%RSP
	add $-808, %RSP
uuid_00000000000dfd92:
	mov -400(%RBP),%RSP
	add $-808, %RSP
	jmp uuid_00000000000dfd95
uuid_00000000000dfd93:
	movq $1, -96(%rbp)
uuid_00000000000dfd95:
	mov -192(%RBP),%RSP
	add $-392, %RSP
	mov -96(%rbp), %RAX
	mov %rbp, %rsp
	sub $88, %rsp
	ret
hash_CL_ArrowU64Sized8:
	pushq $0
	pushq $0
uuid_00000000000dfd96:
	mov $8, %RAX
	mov $8, %R14
	mov $0, %RDX
	div %R14
	mov %RAX, %R14
	mov -24(%RBP), %RAX
	cmp %R14,%RAX
	sete %AL
	andq $1,%RAX
	mov %RAX, %RAX
	andq $1,%RAX
	xor $1,%RAX
	cmp $0, %RAX
	jne uuid_00000000000dfd97
	jmp uuid_00000000000dfd98
uuid_00000000000dfd97:
	mov %RBP, %R15
	add $-8, %R15
	mov -24(%RBP), %R14
	shl $3, %R14
	add %R14, %R15
	mov 0(%R15), %R15
	mov %R15, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -24(%RBP), %RAX
	mov $1, %R14
	addq %R14,%RAX
	movq %RAX, -24(%rbp)
	mov -32(%RBP),%RAX
	shl $10,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $6,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	jmp uuid_00000000000dfd96
uuid_00000000000dfd98:
	mov -32(%RBP),%RAX
	shl $3,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shr $11,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	xorq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%RBP),%RAX
	shl $15,%RAX
	mov %RAX, %R14
	mov -32(%RBP), %RAX
	addq %R14,%RAX
	movq %RAX, -32(%rbp)
	mov -32(%rbp), %RAX
	mov %rbp, %rsp
	sub $16, %rsp
	ret
.data
uuid_00000000000da9ec:
	.ascii "Pattern Match Failure"
	.zero 1
uuid_00000000000da9ed:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 83 Column: 5"
	.zero 1
uuid_00000000000daa4e:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 99 Column: 5"
	.zero 1
uuid_00000000000daa5e:
	.ascii "()"
	.zero 1
uuid_00000000000daa6e:
	.ascii "("
	.zero 1
uuid_00000000000daa6f:
	.ascii " "
	.zero 1
uuid_00000000000daa70:
	.ascii ")"
	.zero 1
uuid_00000000000daa77:
	.ascii "["
	.zero 1
uuid_00000000000daa78:
	.ascii "]"
	.zero 1
uuid_00000000000daa79:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 121 Column: 5"
	.zero 1
uuid_00000000000daa86:
	.ascii " at "
	.zero 1
uuid_00000000000daa92:
	.ascii "Unable to open file: "
	.zero 1
uuid_00000000000daa93:
	.ascii "\n"
	.zero 1
uuid_00000000000daa97:
	.ascii "File Read Error ["
	.zero 1
uuid_00000000000daa98:
	.ascii "]: "
	.zero 1
uuid_00000000000daab1:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 356 Column: 5"
	.zero 1
uuid_00000000000daac1:
	.ascii "0"
	.zero 1
uuid_00000000000daac5:
	.ascii "-"
	.zero 1
uuid_00000000000daad5:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 465 Column: 8"
	.zero 1
uuid_00000000000daafa:
	.ascii "1"
	.zero 1
uuid_00000000000daafb:
	.ascii "2"
	.zero 1
uuid_00000000000daafc:
	.ascii "3"
	.zero 1
uuid_00000000000daafd:
	.ascii "4"
	.zero 1
uuid_00000000000daafe:
	.ascii "5"
	.zero 1
uuid_00000000000daaff:
	.ascii "6"
	.zero 1
uuid_00000000000dab00:
	.ascii "7"
	.zero 1
uuid_00000000000dab01:
	.ascii "8"
	.zero 1
uuid_00000000000dab02:
	.ascii "9"
	.zero 1
uuid_00000000000dab03:
	.ascii "a"
	.zero 1
uuid_00000000000dab04:
	.ascii "b"
	.zero 1
uuid_00000000000dab05:
	.ascii "c"
	.zero 1
uuid_00000000000dab06:
	.ascii "d"
	.zero 1
uuid_00000000000dab07:
	.ascii "e"
	.zero 1
uuid_00000000000dab08:
	.ascii "f"
	.zero 1
uuid_00000000000dab09:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 498 Column: 8"
	.zero 1
uuid_00000000000dab3d:
	.ascii ""
	.zero 1
malloc_SB_block_SB_head_CL_U64:
.zero 8
malloc_SB_block_SB_tail_CL_U64:
.zero 8
malloc_SB_first_SB_free_CL_U64:
.zero 8
malloc_SB_page_SB_tail_CL_U64:
.zero 8
malloc_SB_large_SB_size_CL_U64:
.zero 8
point_SB_of_SB_interest_CL_U64:
.zero 8
rc_SB_magic_SB_number_CL_U64:
.zero 8
assemble_SB_header_SB_section_CL_SS:
.zero 24
assemble_SB_text_SB_section_CL_SS:
.zero 24
assemble_SB_init_SB_section_CL_SS:
.zero 24
assemble_SB_data_SB_section_CL_SS:
.zero 24
assemble_SB_profile_SB_onexit_CL_SS:
.zero 24
assemble_SB_global_SB_initializer_SB_section_CL_SS:
.zero 24
assemble_SB_final_CL_String:
.zero 8
assemble_SB_argv_SB_referenced_CL_U8:
.zero 8
main_SB_with_SB_argv_CL_U8:
.zero 8
main_SB_with_CL_U8:
.zero 8
config_SB_platform_SB_prefix_CL_String:
.zero 8
uuid_00000000000dab92:
	.ascii "PLATFORM/BLOB/"
	.zero 1
config_SB_profile_SB_invocations_CL_U8:
.zero 8
config_SB_strict_CL_U8:
.zero 8
config_SB_preprocess_CL_U8:
.zero 8
config_SB_target_CL_String:
.zero 8
config_SB_assemble_SB_mode_CL_AssembleModeAssembleMode:
.zero 8
config_SB_mode_CL_CompileModeCompileMode:
.zero 8
preprocess_SB_macros_CL_MacroListMacroList:
.zero 168
ast_SB_tokenized_SB_program_CL_ListTokenListToken:
.zero 72
ast_SB_parsed_SB_program_CL_ASTAST:
.zero 72
global_SB_type_SB_context_CL_TContextTContext:
.zero 120
global_SB_ctx_CL_FContextFContext:
.zero 200
parse_SB_suffixes_CL_SfxListSfxList:
.zero 48
stack_SB_to_SB_specialize_CL_ListStackToSpecializeListStackToSpecialize:
.zero 200
uuid_00000000000dab9b:
	.ascii "_EX_"
	.zero 1
uuid_00000000000dab9c:
	.ascii "_DL_"
	.zero 1
uuid_00000000000dab9d:
	.ascii "_MD_"
	.zero 1
uuid_00000000000dab9e:
	.ascii "_AM_"
	.zero 1
uuid_00000000000dab9f:
	.ascii "_ML_"
	.zero 1
uuid_00000000000daba0:
	.ascii "_AD_"
	.zero 1
uuid_00000000000daba1:
	.ascii "_SB_"
	.zero 1
uuid_00000000000daba2:
	.ascii "_DT_"
	.zero 1
uuid_00000000000daba3:
	.ascii "_DV_"
	.zero 1
uuid_00000000000daba4:
	.ascii "_CL_"
	.zero 1
uuid_00000000000daba5:
	.ascii "_SC_"
	.zero 1
uuid_00000000000daba6:
	.ascii "_LT_"
	.zero 1
uuid_00000000000daba7:
	.ascii "_EQ_"
	.zero 1
uuid_00000000000daba8:
	.ascii "_GT_"
	.zero 1
uuid_00000000000daba9:
	.ascii "_QM_"
	.zero 1
uuid_00000000000dabaa:
	.ascii "_AT_"
	.zero 1
uuid_00000000000dabab:
	.ascii "_LB_"
	.zero 1
uuid_00000000000dabac:
	.ascii "_RB_"
	.zero 1
uuid_00000000000dabad:
	.ascii "_HT_"
	.zero 1
uuid_00000000000dabae:
	.ascii "_US_"
	.zero 1
uuid_00000000000dabaf:
	.ascii "_TK_"
	.zero 1
uuid_00000000000dabb0:
	.ascii "_BR_"
	.zero 1
uuid_00000000000dabb1:
	.ascii "_TL_"
	.zero 1
uuid_00000000000dabb2:
	.ascii "File: SRC/mangle-identifier.lm Line: 10 Column: 8"
	.zero 1
uuid_00000000000dabfe:
	.ascii "?"
	.zero 1
uuid_00000000000dac17:
	.ascii "File: SRC/mangle-identifier.lm Line: 55 Column: 32"
	.zero 1
uuid_00000000000dac27:
	.ascii "File: SRC/mangle-identifier.lm Line: 49 Column: 5"
	.zero 1
uuid_00000000000dac40:
	.ascii "void"
	.zero 1
uuid_00000000000dac47:
	.ascii "Nil"
	.zero 1
uuid_00000000000dac51:
	.ascii "Never"
	.zero 1
uuid_00000000000dac5b:
	.ascii "U8"
	.zero 1
uuid_00000000000dac65:
	.ascii "unsigned char"
	.zero 1
uuid_00000000000dac66:
	.ascii "U16"
	.zero 1
uuid_00000000000dac70:
	.ascii "unsigned short"
	.zero 1
uuid_00000000000dac71:
	.ascii "U32"
	.zero 1
uuid_00000000000dac7b:
	.ascii "unsigned int"
	.zero 1
uuid_00000000000dac7c:
	.ascii "U64"
	.zero 1
uuid_00000000000dac86:
	.ascii "unsigned long"
	.zero 1
uuid_00000000000dac87:
	.ascii "I8"
	.zero 1
uuid_00000000000dac91:
	.ascii "signed char"
	.zero 1
uuid_00000000000dac92:
	.ascii "I16"
	.zero 1
uuid_00000000000dac9c:
	.ascii "signed short"
	.zero 1
uuid_00000000000dac9d:
	.ascii "I32"
	.zero 1
uuid_00000000000daca7:
	.ascii "signed int"
	.zero 1
uuid_00000000000daca8:
	.ascii "I64"
	.zero 1
uuid_00000000000dacb2:
	.ascii "signed long"
	.zero 1
uuid_00000000000dacb3:
	.ascii "String"
	.zero 1
uuid_00000000000dacbd:
	.ascii "char*"
	.zero 1
uuid_00000000000dacbe:
	.ascii "File"
	.zero 1
uuid_00000000000dacc8:
	.ascii "FILE"
	.zero 1
uuid_00000000000dacdb:
	.ascii "Array"
	.zero 1
uuid_00000000000dace5:
	.ascii "*"
	.zero 1
uuid_00000000000dacef:
	.ascii "UnknownCTypename"
	.zero 1
uuid_00000000000dacf3:
	.ascii "File: SRC/mangle-c-type.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dad27:
	.ascii "\\"
	.zero 1
uuid_00000000000dad28:
	.ascii "Illegal Character: "
	.zero 1
uuid_00000000000dad29:
	.ascii "Illegal Escape Sequence In String "
	.zero 1
uuid_00000000000dad2a:
	.ascii "File: SRC/escape-string.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000dad4f:
	.ascii "\\\\\""
	.zero 1
uuid_00000000000dad50:
	.ascii ";"
	.zero 1
uuid_00000000000dad51:
	.ascii "\\\\\\\\"
	.zero 1
uuid_00000000000dad52:
	.ascii "'"
	.zero 1
uuid_00000000000dad53:
	.ascii "λ"
	.zero 1
uuid_00000000000dad54:
	.ascii "\\\\n"
	.zero 1
uuid_00000000000dad55:
	.ascii "#"
	.zero 1
uuid_00000000000dad56:
	.ascii "	"
	.zero 1
uuid_00000000000dad57:
	.ascii "File: SRC/escape-string.lm Line: 50 Column: 14"
	.zero 1
uuid_00000000000dad79:
	.ascii "\\\\"
	.zero 1
uuid_00000000000dad7d:
	.ascii "\\n"
	.zero 1
uuid_00000000000dad7e:
	.ascii "File: SRC/escape-string.lm Line: 45 Column: 8"
	.zero 1
uuid_00000000000dad9d:
	.ascii "File: SRC/escape-string.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000dadb6:
	.ascii "as"
	.zero 1
uuid_00000000000dadc9:
	.ascii "In Coercion\n"
	.zero 1
uuid_00000000000dadca:
	.ascii ":\n"
	.zero 1
uuid_00000000000dadcb:
	.ascii "As: "
	.zero 1
uuid_00000000000dadd5:
	.ascii "In Function Application\n"
	.zero 1
uuid_00000000000dadd6:
	.ascii "Return:\n"
	.zero 1
uuid_00000000000dadd7:
	.ascii "File: SRC/error-formatting.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000dade1:
	.ascii "."
	.zero 1
uuid_00000000000dadeb:
	.ascii "File: SRC/is-variable.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000dae7f:
	.ascii "@"
	.zero 1
uuid_00000000000dae83:
	.ascii "Used"
	.zero 1
uuid_00000000000dae84:
	.ascii "Unused"
	.zero 1
uuid_00000000000dae85:
	.ascii "Return"
	.zero 1
uuid_00000000000dae86:
	.ascii "Tail"
	.zero 1
uuid_00000000000dae87:
	.ascii "Call"
	.zero 1
uuid_00000000000dae88:
	.ascii "File: SRC/to-string.lm Line: 9 Column: 5"
	.zero 1
uuid_00000000000daeae:
	.ascii ","
	.zero 1
uuid_00000000000daeaf:
	.ascii "File: SRC/to-string.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000daec8:
	.ascii "+"
	.zero 1
uuid_00000000000daedb:
	.ascii "..."
	.zero 1
uuid_00000000000daeee:
	.ascii "<"
	.zero 1
uuid_00000000000daeef:
	.ascii ">"
	.zero 1
uuid_00000000000daef0:
	.ascii "File: SRC/to-string.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000daf63:
	.ascii "File: SRC/is-equal.lm Line: 4 Column: 5"
	.zero 1
concrete_SB_type_SB_instances_SB_index_CL_HashtableEqListTypeTupleU64String:
.zero 32
uuid_00000000000daf99:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000dafa0:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 7 Column: 26"
	.zero 1
uuid_00000000000dafd3:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 31 Column: 11"
	.zero 1
uuid_00000000000dafda:
	.ascii "File: SRC/index-concrete-type-instances.lm Line: 26 Column: 5"
	.zero 1
type_SB_index_CL_HashtableIsTypeAST:
.zero 32
uuid_00000000000daffc:
	.ascii "GlobalVariable"
	.zero 1
uuid_00000000000daffd:
	.ascii "mov"
	.zero 1
uuid_00000000000daffe:
	.ascii "Cons"
	.zero 1
uuid_00000000000db01d:
	.ascii ":"
	.zero 1
uuid_00000000000db048:
	.ascii "File: SRC/infer-expr.lm Line: 28 Column: 11"
	.zero 1
uuid_00000000000db079:
	.ascii "File: SRC/infer-expr.lm Line: 57 Column: 14"
	.zero 1
uuid_00000000000db089:
	.ascii "gensym-label"
	.zero 1
uuid_00000000000db09c:
	.ascii "Label"
	.zero 1
uuid_00000000000db0a6:
	.ascii "label"
	.zero 1
uuid_00000000000db0b9:
	.ascii "if"
	.zero 1
uuid_00000000000db10b:
	.ascii "Reg8"
	.zero 1
uuid_00000000000db10f:
	.ascii "Reg16"
	.zero 1
uuid_00000000000db113:
	.ascii "Reg32"
	.zero 1
uuid_00000000000db117:
	.ascii "Reg64"
	.zero 1
uuid_00000000000db11b:
	.ascii "File: SRC/infer-expr.lm Line: 89 Column: 11"
	.zero 1
uuid_00000000000db131:
	.ascii "sizeof"
	.zero 1
uuid_00000000000db14d:
	.ascii "File: SRC/infer-expr.lm Line: 115 Column: 11"
	.zero 1
uuid_00000000000db151:
	.ascii "scope"
	.zero 1
uuid_00000000000db164:
	.ascii "open"
	.zero 1
uuid_00000000000db1ad:
	.ascii "push-deref"
	.zero 1
uuid_00000000000db1ae:
	.ascii "StackVariable"
	.zero 1
uuid_00000000000db1af:
	.ascii "File: SRC/infer-expr.lm Line: 127 Column: 11"
	.zero 1
uuid_00000000000db1d7:
	.ascii "Variable Name Is Already Bound In Outer Scope"
	.zero 1
uuid_00000000000db1de:
	.ascii "Unable to infer type of expression"
	.zero 1
uuid_00000000000db1f7:
	.ascii "File: SRC/infer-expr.lm Line: 152 Column: 11"
	.zero 1
uuid_00000000000db1fb:
	.ascii "del"
	.zero 1
uuid_00000000000db21d:
	.ascii "File: SRC/infer-expr.lm Line: 170 Column: 11"
	.zero 1
uuid_00000000000db227:
	.ascii "Rc"
	.zero 1
uuid_00000000000db228:
	.ascii "inc"
	.zero 1
uuid_00000000000db229:
	.ascii "Tuple"
	.zero 1
uuid_00000000000db236:
	.ascii "Constructor"
	.zero 1
uuid_00000000000db237:
	.ascii "CaseNumber"
	.zero 1
uuid_00000000000db238:
	.ascii "Sized"
	.zero 1
uuid_00000000000db239:
	.ascii "FieldsSized"
	.zero 1
uuid_00000000000db23a:
	.ascii "push"
	.zero 1
uuid_00000000000db23b:
	.ascii "File: SRC/infer-expr.lm Line: 214 Column: 14"
	.zero 1
uuid_00000000000db272:
	.ascii "File: SRC/infer-expr.lm Line: 232 Column: 14"
	.zero 1
uuid_00000000000db279:
	.ascii "Arrow"
	.zero 1
uuid_00000000000db27a:
	.ascii "cdecl::return"
	.zero 1
uuid_00000000000db2a2:
	.ascii "Unknown Term In Type Inference\n"
	.zero 1
uuid_00000000000db2a3:
	.ascii "File: SRC/infer-expr.lm Line: 8 Column: 5"
	.zero 1
alias_SB_index_CL_ListTupleTypeTupleStringStringListTupleTypeTupleStringString:
.zero 72
uuid_00000000000db35e:
	.ascii "File: SRC/alias.lm Line: 11 Column: 8"
	.zero 1
uuid_00000000000db362:
	.ascii "File: SRC/alias.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000db3a2:
	.ascii "File: SRC/alias.lm Line: 31 Column: 8"
	.zero 1
uuid_00000000000db3a6:
	.ascii "File: SRC/alias.lm Line: 30 Column: 5"
	.zero 1
class_SB_exists_SB_index_CL_HashtableEqU64String:
.zero 32
parameter_SB_is_SB_flat_SB_index_CL_HashtableEqU64TupleU64TupleU64String:
.zero 32
is_SB_special_SB_index_CL_HashtableEqU64TupleTypeString:
.zero 32
lone_SB_index_CL_HashtableEqU64String:
.zero 32
tag_SB_is_SB_fragment_SB_index_CL_HashtableEqU64String:
.zero 32
global_SB_symbol_SB_registry_CL_HashtableEqU64TupleTypeString:
.zero 32
uuid_00000000000db3ad:
	.ascii "Duplicate Global Symbol "
	.zero 1
uuid_00000000000db3ae:
	.ascii " : "
	.zero 1
class_SB_to_SB_only_SB_child_CL_HashtableEqStringString:
.zero 32
tag_SB_to_SB_index_SB_index_CL_HashtableEqU64String:
.zero 32
unknown_SB_index_SB_of_SB_tag_CL_U64:
.zero 8
class_SB_to_SB_size_SB_index_CL_BTreeEqU64StringBTreeEqU64String:
.zero 48
tag_SB_to_SB_class_SB_index_CL_HashtableEqTypeString:
.zero 32
uuid_00000000000db3d3:
	.ascii "Unexpected Class In index-class-of-tag: "
	.zero 1
uuid_00000000000db3d4:
	.ascii "File: SRC/class-of-tag.lm Line: 6 Column: 5"
	.zero 1
class_SB_to_SB_yes_SB_index_CL_HashtableEqU64String:
.zero 32
tag_SB_to_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString:
.zero 32
uuid_00000000000db3ed:
	.ascii "Tag"
	.zero 1
uuid_00000000000db409:
	.ascii "File: SRC/fields-of-tag.lm Line: 17 Column: 64"
	.zero 1
uuid_00000000000db410:
	.ascii "Invalid Tag In fields-of-tag "
	.zero 1
uuid_00000000000db411:
	.ascii "File: SRC/fields-of-tag.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000db418:
	.ascii "Fields"
	.zero 1
type_SB_constructors_SB_index_CL_HashtableEqTypeString:
.zero 32
type_SB_complex_SB_fields_SB_index_CL_HashtableEqTupleTypeTypeString:
.zero 32
uuid_00000000000db42a:
	.ascii "ERROR: set-type-fields\n"
	.zero 1
uuid_00000000000db42b:
	.ascii "File: SRC/type-complex-fields.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000db453:
	.ascii "File: SRC/get-vararg-inner.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db45d:
	.ascii "LocalVariable"
	.zero 1
uuid_00000000000db485:
	.ascii "File: SRC/is-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db4a7:
	.ascii "File: SRC/is-constructor.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000db4c3:
	.ascii "File: SRC/is-constructor.lm Line: 28 Column: 5"
	.zero 1
uuid_00000000000db52a:
	.ascii "Field"
	.zero 1
uuid_00000000000db549:
	.ascii "File: SRC/is-open.lm Line: 16 Column: 11"
	.zero 1
uuid_00000000000db550:
	.ascii "File: SRC/is-open.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db578:
	.ascii "File: SRC/is-vararg.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db5a3:
	.ascii "File: SRC/is-parameterized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db5d1:
	.ascii "File: SRC/is-sized.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db5ed:
	.ascii "Constant"
	.zero 1
uuid_00000000000db624:
	.ascii "File: SRC/has-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db63d:
	.ascii "File: SRC/guess-representation.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000db66e:
	.ascii "File: SRC/deep-hash.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db688:
	.ascii "File: SRC/deep-hash.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000db68f:
	.ascii " != "
	.zero 1
uuid_00000000000db690:
	.ascii "Type Ascription Inequality"
	.zero 1
uuid_00000000000db6a9:
	.ascii "File: SRC/typeof.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db6b9:
	.ascii "Var"
	.zero 1
uuid_00000000000db6c3:
	.ascii "Lit"
	.zero 1
uuid_00000000000db70f:
	.ascii "App"
	.zero 1
uuid_00000000000db71c:
	.ascii "Abs"
	.zero 1
uuid_00000000000db71d:
	.ascii "File: SRC/to-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db754:
	.ascii "File: SRC/p.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000db76d:
	.ascii "File: SRC/and.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db786:
	.ascii "File: SRC/union.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db79f:
	.ascii "File: SRC/union.lm Line: 21 Column: 8"
	.zero 1
uuid_00000000000db7b8:
	.ascii "program"
	.zero 1
uuid_00000000000db7b9:
	.ascii "File: SRC/union.lm Line: 36 Column: 28"
	.zero 1
uuid_00000000000db7cc:
	.ascii "File: SRC/tag-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db806:
	.ascii "File: SRC/can-unify.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000db822:
	.ascii "Meta"
	.zero 1
uuid_00000000000db994:
	.ascii "GT"
	.zero 1
uuid_00000000000db9c8:
	.ascii "File: SRC/can-unify.lm Line: 21 Column: 5"
	.zero 1
uuid_00000000000dba6b:
	.ascii "File: SRC/unify.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000dbaab:
	.ascii "File: SRC/unify.lm Line: 47 Column: 11"
	.zero 1
uuid_00000000000dbc0b:
	.ascii "File: SRC/unify.lm Line: 12 Column: 5"
	.zero 1
uuid_00000000000dbc66:
	.ascii "File: SRC/unify.lm Line: 130 Column: 5"
	.zero 1
uuid_00000000000dbc9b:
	.ascii "File: SRC/fields-of-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dbd44:
	.ascii "File: SRC/sizeof-type.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000dbd57:
	.ascii "Unexpected Type sizeof-type "
	.zero 1
uuid_00000000000dbd58:
	.ascii "File: SRC/sizeof-type.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbd8e:
	.ascii "File: SRC/has-infinite.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000dbde6:
	.ascii "File: SRC/has-infinite.lm Line: 26 Column: 5"
	.zero 1
uuid_00000000000dbe09:
	.ascii "File: SRC/has-forward.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbe52:
	.ascii "File: SRC/has-forward.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000dbe65:
	.ascii "AL"
	.zero 1
uuid_00000000000dbe66:
	.ascii "BL"
	.zero 1
uuid_00000000000dbe67:
	.ascii "CL"
	.zero 1
uuid_00000000000dbe68:
	.ascii "DL"
	.zero 1
uuid_00000000000dbe69:
	.ascii "SIL"
	.zero 1
uuid_00000000000dbe6a:
	.ascii "DIL"
	.zero 1
uuid_00000000000dbe6b:
	.ascii "BPL"
	.zero 1
uuid_00000000000dbe6c:
	.ascii "SPL"
	.zero 1
uuid_00000000000dbe6d:
	.ascii "R8B"
	.zero 1
uuid_00000000000dbe6e:
	.ascii "R9B"
	.zero 1
uuid_00000000000dbe6f:
	.ascii "R10B"
	.zero 1
uuid_00000000000dbe70:
	.ascii "R11B"
	.zero 1
uuid_00000000000dbe71:
	.ascii "R12B"
	.zero 1
uuid_00000000000dbe72:
	.ascii "R13B"
	.zero 1
uuid_00000000000dbe73:
	.ascii "R14B"
	.zero 1
uuid_00000000000dbe74:
	.ascii "R15B"
	.zero 1
uuid_00000000000dbe75:
	.ascii "File: SRC/is-reg8.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbebb:
	.ascii "File: SRC/is-reg8.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dbec5:
	.ascii "AX"
	.zero 1
uuid_00000000000dbec6:
	.ascii "BX"
	.zero 1
uuid_00000000000dbec7:
	.ascii "CX"
	.zero 1
uuid_00000000000dbec8:
	.ascii "DX"
	.zero 1
uuid_00000000000dbec9:
	.ascii "SI"
	.zero 1
uuid_00000000000dbeca:
	.ascii "DI"
	.zero 1
uuid_00000000000dbecb:
	.ascii "BP"
	.zero 1
uuid_00000000000dbecc:
	.ascii "SP"
	.zero 1
uuid_00000000000dbecd:
	.ascii "R8W"
	.zero 1
uuid_00000000000dbece:
	.ascii "R9W"
	.zero 1
uuid_00000000000dbecf:
	.ascii "R10W"
	.zero 1
uuid_00000000000dbed0:
	.ascii "R11W"
	.zero 1
uuid_00000000000dbed1:
	.ascii "R12W"
	.zero 1
uuid_00000000000dbed2:
	.ascii "R13W"
	.zero 1
uuid_00000000000dbed3:
	.ascii "R14W"
	.zero 1
uuid_00000000000dbed4:
	.ascii "R15W"
	.zero 1
uuid_00000000000dbed5:
	.ascii "File: SRC/is-reg16.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbf1b:
	.ascii "File: SRC/is-reg16.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dbf25:
	.ascii "EAX"
	.zero 1
uuid_00000000000dbf26:
	.ascii "EBX"
	.zero 1
uuid_00000000000dbf27:
	.ascii "ECX"
	.zero 1
uuid_00000000000dbf28:
	.ascii "EDX"
	.zero 1
uuid_00000000000dbf29:
	.ascii "ESI"
	.zero 1
uuid_00000000000dbf2a:
	.ascii "EDI"
	.zero 1
uuid_00000000000dbf2b:
	.ascii "EBP"
	.zero 1
uuid_00000000000dbf2c:
	.ascii "ESP"
	.zero 1
uuid_00000000000dbf2d:
	.ascii "R8D"
	.zero 1
uuid_00000000000dbf2e:
	.ascii "R9D"
	.zero 1
uuid_00000000000dbf2f:
	.ascii "R10D"
	.zero 1
uuid_00000000000dbf30:
	.ascii "R11D"
	.zero 1
uuid_00000000000dbf31:
	.ascii "R12D"
	.zero 1
uuid_00000000000dbf32:
	.ascii "R13D"
	.zero 1
uuid_00000000000dbf33:
	.ascii "R14D"
	.zero 1
uuid_00000000000dbf34:
	.ascii "R15D"
	.zero 1
uuid_00000000000dbf35:
	.ascii "File: SRC/is-reg32.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbf7b:
	.ascii "File: SRC/is-reg32.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dbf85:
	.ascii "RAX"
	.zero 1
uuid_00000000000dbf86:
	.ascii "RBX"
	.zero 1
uuid_00000000000dbf87:
	.ascii "RCX"
	.zero 1
uuid_00000000000dbf88:
	.ascii "RDX"
	.zero 1
uuid_00000000000dbf89:
	.ascii "RSI"
	.zero 1
uuid_00000000000dbf8a:
	.ascii "RDI"
	.zero 1
uuid_00000000000dbf8b:
	.ascii "RBP"
	.zero 1
uuid_00000000000dbf8c:
	.ascii "RSP"
	.zero 1
uuid_00000000000dbf8d:
	.ascii "R8"
	.zero 1
uuid_00000000000dbf8e:
	.ascii "R9"
	.zero 1
uuid_00000000000dbf8f:
	.ascii "R10"
	.zero 1
uuid_00000000000dbf90:
	.ascii "R11"
	.zero 1
uuid_00000000000dbf91:
	.ascii "R12"
	.zero 1
uuid_00000000000dbf92:
	.ascii "R13"
	.zero 1
uuid_00000000000dbf93:
	.ascii "R14"
	.zero 1
uuid_00000000000dbf94:
	.ascii "R15"
	.zero 1
uuid_00000000000dbf95:
	.ascii "File: SRC/is-reg64.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dbfdb:
	.ascii "File: SRC/is-reg64.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000dbff1:
	.ascii "File: SRC/with-tag.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000dc025:
	.ascii "File: SRC/with-tag.lm Line: 21 Column: 5"
	.zero 1
uuid_00000000000dc04d:
	.ascii "File: SRC/with-size.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000dc061:
	.ascii "File: SRC/with-size.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000dc0a7:
	.ascii "File: SRC/with-size.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000dc0cc:
	.ascii "File: SRC/with-fields.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc0dc:
	.ascii "LMStruct"
	.zero 1
uuid_00000000000dc0e0:
	.ascii "File: SRC/with-platform-props.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000dc10e:
	.ascii "File: SRC/without-tag.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000dc145:
	.ascii "File: SRC/without-tag.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc168:
	.ascii "File: SRC/without-tag.lm Line: 28 Column: 5"
	.zero 1
uuid_00000000000dc190:
	.ascii "File: SRC/without-constructor.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc1aa:
	.ascii "File: SRC/without-representation.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc1cc:
	.ascii "Literal"
	.zero 1
uuid_00000000000dc224:
	.ascii "File: SRC/without-representation.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000dc259:
	.ascii "File: SRC/without-size-unless-class.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc281:
	.ascii "File: SRC/without-size-unless-class.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000dc2c1:
	.ascii "File: SRC/without-size-unless-class.lm Line: 46 Column: 5"
	.zero 1
uuid_00000000000dc2e1:
	.ascii "File: SRC/without-size.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc31b:
	.ascii "File: SRC/without-size.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000dc358:
	.ascii "File: SRC/without-platform-props.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc380:
	.ascii "File: SRC/with-only-tag.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc3a8:
	.ascii "File: SRC/with-only-class.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc3bf:
	.ascii "File: SRC/with-only-representation.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc438:
	.ascii "File: SRC/with-only-representation.lm Line: 19 Column: 5"
	.zero 1
uuid_00000000000dc46f:
	.ascii "File: SRC/normalize.lm Line: 13 Column: 5"
	.zero 1
uuid_00000000000dc4a9:
	.ascii "Malformed Type Definition"
	.zero 1
uuid_00000000000dc4aa:
	.ascii "File: SRC/type-of-s.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc4d2:
	.ascii "Mark Field "
	.zero 1
uuid_00000000000dc4d3:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000dc4f5:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 25 Column: 11"
	.zero 1
uuid_00000000000dc517:
	.ascii "File: SRC/type-of-s-with-fields.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc56f:
	.ascii "Unknown LHS"
	.zero 1
uuid_00000000000dc570:
	.ascii "File: SRC/typeof-lhs.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc598:
	.ascii "File: SRC/cons-head.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc5ba:
	.ascii "File: SRC/cons-tail.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc5ca:
	.ascii "File: SRC/parameter-number.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc5e9:
	.ascii "File: SRC/parameter-number.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000dc5f3:
	.ascii "Function Application Yielded No Matches\n"
	.zero 1
uuid_00000000000dc5f4:
	.ascii "\nWith Argument : "
	.zero 1
uuid_00000000000dc5f5:
	.ascii "Options: "
	.zero 1
uuid_00000000000dc5f9:
	.ascii "Function Application Yielded An Irreducible Plurality Of Matches\n"
	.zero 1
uuid_00000000000dc5fa:
	.ascii "With Argument "
	.zero 1
uuid_00000000000dc5fb:
	.ascii "Matched "
	.zero 1
uuid_00000000000dc605:
	.ascii "File: SRC/apply.lm Line: 30 Column: 11"
	.zero 1
uuid_00000000000dc633:
	.ascii "Application Did Not Close Before Specialization:\n"
	.zero 1
uuid_00000000000dc634:
	.ascii "Function "
	.zero 1
uuid_00000000000dc635:
	.ascii "Argument "
	.zero 1
uuid_00000000000dc63c:
	.ascii "Function Not Simple Arrow: "
	.zero 1
uuid_00000000000dc63d:
	.ascii "File: SRC/apply.lm Line: 42 Column: 8"
	.zero 1
uuid_00000000000dc644:
	.ascii "File: SRC/apply.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000dc672:
	.ascii "File: SRC/apply.lm Line: 81 Column: 33"
	.zero 1
uuid_00000000000dc6ac:
	.ascii "File: SRC/apply.lm Line: 72 Column: 5"
	.zero 1
uuid_00000000000dc6f6:
	.ascii "File: SRC/apply-plural.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc714:
	.ascii "File: SRC/reduce-plural.lm Line: 5 Column: 41"
	.zero 1
uuid_00000000000dc736:
	.ascii "File: SRC/reduce-plural.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000dc740:
	.ascii "File: SRC/reduce-plural.lm Line: 15 Column: 27"
	.zero 1
uuid_00000000000dc75f:
	.ascii "File: SRC/reduce-plural.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000dc769:
	.ascii "File: SRC/reduce-plural.lm Line: 33 Column: 27"
	.zero 1
uuid_00000000000dc7a5:
	.ascii "File: SRC/try-specialize.lm Line: 17 Column: 20"
	.zero 1
uuid_00000000000dc7b5:
	.ascii "File: SRC/try-specialize.lm Line: 5 Column: 35"
	.zero 1
uuid_00000000000dc7ef:
	.ascii "File: SRC/unify-hint.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc806:
	.ascii "File: SRC/unify-hint.lm Line: 24 Column: 5"
	.zero 1
uuid_00000000000dc810:
	.ascii "|"
	.zero 1
uuid_00000000000dc847:
	.ascii "File: SRC/infer-type-definition.lm Line: 19 Column: 14"
	.zero 1
uuid_00000000000dc85a:
	.ascii "File: SRC/infer-type-definition.lm Line: 26 Column: 17"
	.zero 1
uuid_00000000000dc864:
	.ascii "File: SRC/infer-type-definition.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000dc878:
	.ascii "File: SRC/arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc888:
	.ascii "File: SRC/arity.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000dc8aa:
	.ascii "File: SRC/cons-arity.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dc8d2:
	.ascii "File: SRC/implicit-tail.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dc8d9:
	.ascii "Unknown Referenced Variable"
	.zero 1
uuid_00000000000dc8f8:
	.ascii "File: SRC/typeof-var-raw.lm Line: 4 Column: 28"
	.zero 1
types_SB_have_SB_changed_CL_U8:
.zero 8
uuid_00000000000dc90b:
	.ascii "File: SRC/typecheck.lm Line: 7 Column: 25"
	.zero 1
uuid_00000000000dc91b:
	.ascii "File: SRC/typecheck.lm Line: 14 Column: 42"
	.zero 1
uuid_00000000000dc94a:
	.ascii "File: SRC/typecheck.lm Line: 22 Column: 43"
	.zero 1
uuid_00000000000dc98d:
	.ascii "File: SRC/substitute.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000dc9aa:
	.ascii "File: SRC/substitute.lm Line: 27 Column: 5"
	.zero 1
uuid_00000000000dc9c9:
	.ascii "File: SRC/substitute.lm Line: 44 Column: 34"
	.zero 1
uuid_00000000000dc9e5:
	.ascii "File: SRC/substitute.lm Line: 41 Column: 5"
	.zero 1
uuid_00000000000dc9ff:
	.ascii "File: SRC/substitute.lm Line: 73 Column: 5"
	.zero 1
uuid_00000000000dca48:
	.ascii "File: SRC/substitute.lm Line: 90 Column: 34"
	.zero 1
uuid_00000000000dca6a:
	.ascii "File: SRC/substitute.lm Line: 87 Column: 5"
	.zero 1
uuid_00000000000dcaef:
	.ascii "Unexpected Substitute LHS"
	.zero 1
uuid_00000000000dcaf0:
	.ascii "File: SRC/substitute.lm Line: 128 Column: 5"
	.zero 1
uuid_00000000000dcb3f:
	.ascii "File: SRC/substitute.lm Line: 168 Column: 34"
	.zero 1
uuid_00000000000dcb85:
	.ascii "File: SRC/substitute.lm Line: 187 Column: 34"
	.zero 1
uuid_00000000000dcbd7:
	.ascii "Unexpected Substitution Term:"
	.zero 1
uuid_00000000000dcbd8:
	.ascii "File: SRC/substitute.lm Line: 159 Column: 5"
	.zero 1
uuid_00000000000dcc15:
	.ascii "File: SRC/substitute.lm Line: 247 Column: 34"
	.zero 1
uuid_00000000000dcc25:
	.ascii "File: SRC/substitute.lm Line: 243 Column: 5"
	.zero 1
uuid_00000000000dcc53:
	.ascii "File: SRC/specialize.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000dcc60:
	.ascii "File: SRC/specialize.lm Line: 7 Column: 38"
	.zero 1
uuid_00000000000dcc81:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dccb2:
	.ascii "File: SRC/mark-constructor-flat-parameters.lm Line: 16 Column: 5"
	.zero 1
uuid_00000000000dccda:
	.ascii "Size Of Type Cannot Be Determined Due To Forward Reference: "
	.zero 1
uuid_00000000000dccde:
	.ascii "Size Of Type Is Infinite: "
	.zero 1
uuid_00000000000dcce2:
	.ascii "File: SRC/infer-type-constructor.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dcd07:
	.ascii "File: SRC/infer-global-context.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000dcd53:
	.ascii "Hooks Must Not Return Values."
	.zero 1
uuid_00000000000dcd96:
	.ascii "Global Bindings Must Be Ascripted"
	.zero 1
uuid_00000000000dcd97:
	.ascii "File: SRC/infer-global-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dcdb0:
	.ascii "File: SRC/assert-well-typed.lm Line: 3 Column: 26"
	.zero 1
uuid_00000000000dce7d:
	.ascii "set"
	.zero 1
uuid_00000000000dcef9:
	.ascii "Unknown Term In Assert Well Typed "
	.zero 1
uuid_00000000000dcefa:
	.ascii "File: SRC/assert-well-typed.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000dcf9a:
	.ascii "Invalid LHS"
	.zero 1
uuid_00000000000dcf9b:
	.ascii "File: SRC/infer-ctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dcfb5:
	.ascii "File: SRC/infer-tctx.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dcfd4:
	.ascii "File: SRC/infer-tctx.lm Line: 15 Column: 5"
	.zero 1
uuid_00000000000dcfe1:
	.ascii "	mov $60, %rax\n"
	.zero 1
uuid_00000000000dcfe2:
	.ascii "	mov $0, %rdi\n"
	.zero 1
uuid_00000000000dcfe3:
	.ascii "	syscall\n"
	.zero 1
uuid_00000000000dcfe4:
	.ascii ".data\n"
	.zero 1
uuid_00000000000dcfe5:
	.ascii ".global _start\n"
	.zero 1
uuid_00000000000dcfe6:
	.ascii ".text\n"
	.zero 1
uuid_00000000000dcfe7:
	.ascii "_start:\n"
	.zero 1
uuid_00000000000dcfe8:
	.ascii "	mov %rsp,%rbp\n"
	.zero 1
uuid_00000000000dcfe9:
	.ascii "	mov %rbp,%rsp\n"
	.zero 1
uuid_00000000000dcfed:
	.ascii "	popq %r8\n"
	.zero 1
uuid_00000000000dcfee:
	.ascii "	movq %rsp, %r9\n"
	.zero 1
uuid_00000000000dcff2:
	.ascii "	push %rbp\n"
	.zero 1
uuid_00000000000dcff3:
	.ascii "	mov %rsp, %rbp\n"
	.zero 1
uuid_00000000000dcff4:
	.ascii "	pushq %r8\n"
	.zero 1
uuid_00000000000dcff5:
	.ascii "	pushq %r9\n"
	.zero 1
uuid_00000000000dcff9:
	.ascii "	call main\n"
	.zero 1
uuid_00000000000dcffa:
	.ascii "	mov %rbp, %rsp\n"
	.zero 1
uuid_00000000000dcffb:
	.ascii "	pop %rbp\n"
	.zero 1
uuid_00000000000dcfff:
	.ascii "File: SRC/compile.lm Line: 2 Column: 20"
	.zero 1
uuid_00000000000dd027:
	.ascii "main"
	.zero 1
uuid_00000000000dd02b:
	.ascii "fragment-type"
	.zero 1
uuid_00000000000dd02c:
	.ascii "Global"
	.zero 1
uuid_00000000000dd02d:
	.ascii "expression"
	.zero 1
uuid_00000000000dd049:
	.ascii "File: SRC/compile-c.lm Line: 5 Column: 39"
	.zero 1
uuid_00000000000dd071:
	.ascii "File: SRC/compile-c.lm Line: 48 Column: 36"
	.zero 1
uuid_00000000000dd093:
	.ascii "File: SRC/compile-c.lm Line: 55 Column: 32"
	.zero 1
uuid_00000000000dd0d6:
	.ascii "Function"
	.zero 1
uuid_00000000000dd0d7:
	.ascii "File: SRC/compile-blob.lm Line: 10 Column: 11"
	.zero 1
uuid_00000000000dd0e7:
	.ascii "File: SRC/compile-blob.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000dd13c:
	.ascii "File: SRC/compile-blob.lm Line: 31 Column: 39"
	.zero 1
uuid_00000000000dd191:
	.ascii "File: SRC/compile-gnu.lm Line: 4 Column: 39"
	.zero 1
uuid_00000000000dd19e:
	.ascii "File: SRC/compile-finish.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd1ab:
	.ascii "TODO: compile finish blob\n"
	.zero 1
uuid_00000000000dd1b8:
	.ascii "File: SRC/compile-program-ordered.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd1e9:
	.ascii "File: SRC/compile-program-ordered.lm Line: 11 Column: 5"
	.zero 1
uuid_00000000000dd250:
	.ascii "File: SRC/compile-c-function-args.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd25a:
	.ascii "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n"
	.zero 1
index_SB_c_SB_type_SB_ordinal_CL_HashtableEqStringType:
.zero 32
uuid_00000000000dd25b:
	.ascii "//predefine define "
	.zero 1
uuid_00000000000dd25c:
	.ascii "\ntypedef struct "
	.zero 1
uuid_00000000000dd25d:
	.ascii ";\n"
	.zero 1
uuid_00000000000dd27b:
	.ascii "File: SRC/compile-c-typedef.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000dd282:
	.ascii "File: SRC/compile-c-typedef.lm Line: 20 Column: 5"
	.zero 1
continue_SB_compile_SB_c_SB_typedefs_SB_concrete_CL_ListTupleASTTupleTypeTContextListTupleASTTupleTypeTContext:
.zero 248
continue_SB_compile_SB_c_SB_typedefs_SB_count_CL_U64:
.zero 8
uuid_00000000000dd2aa:
	.ascii "Unable To Resolve Circular Type Dependency During Compilation"
	.zero 1
uuid_00000000000dd2c9:
	.ascii "File: SRC/compile-c-typedef.lm Line: 41 Column: 8"
	.zero 1
uuid_00000000000dd37e:
	.ascii "File: SRC/compile-c-typedef.lm Line: 51 Column: 5"
	.zero 1
is_SB_cstruct_SB_hard_SB_compiled_SB_index_CL_HashtableEqU64Type:
.zero 32
uuid_00000000000dd3d0:
	.ascii "File: SRC/compile-c-typedef.lm Line: 90 Column: 31"
	.zero 1
uuid_00000000000dd3f2:
	.ascii "//define "
	.zero 1
uuid_00000000000dd3f3:
	.ascii "\nstruct "
	.zero 1
uuid_00000000000dd3f4:
	.ascii "{\n"
	.zero 1
uuid_00000000000dd3f5:
	.ascii "	long _0;\n"
	.zero 1
uuid_00000000000dd3f6:
	.ascii "	union {\n"
	.zero 1
uuid_00000000000dd3f7:
	.ascii "	};\n};\n"
	.zero 1
uuid_00000000000dd418:
	.ascii "File: SRC/compile-c-typedef.lm Line: 135 Column: 11"
	.zero 1
uuid_00000000000dd41f:
	.ascii "File: SRC/compile-c-typedef.lm Line: 131 Column: 5"
	.zero 1
uuid_00000000000dd435:
	.ascii "File: SRC/compile-c-typedef.lm Line: 145 Column: 5"
	.zero 1
uuid_00000000000dd43c:
	.ascii "struct {"
	.zero 1
uuid_00000000000dd43d:
	.ascii "};\n"
	.zero 1
uuid_00000000000dd462:
	.ascii " _"
	.zero 1
uuid_00000000000dd463:
	.ascii "File: SRC/compile-c-typedef.lm Line: 168 Column: 5"
	.zero 1
uuid_00000000000dd48b:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 11 Column: 27"
	.zero 1
uuid_00000000000dd492:
	.ascii "Context::lookup "
	.zero 1
uuid_00000000000dd493:
	.ascii "\nCandidates:\n"
	.zero 1
uuid_00000000000dd4a6:
	.ascii "File: SRC/fragment-context::lookup.lm Line: 43 Column: 30"
	.zero 1
uuid_00000000000dd4ad:
	.ascii "Context::lookup Could Not Find Symbol"
	.zero 1
uuid_00000000000dd4ff:
	.ascii "File: SRC/fragment-context::lookups.lm Line: 11 Column: 27"
	.zero 1
uuid_00000000000dd506:
	.ascii "Context::lookups "
	.zero 1
uuid_00000000000dd519:
	.ascii "File: SRC/fragment-context::lookups.lm Line: 60 Column: 30"
	.zero 1
uuid_00000000000dd520:
	.ascii "Context::lookups Could Not Find Symbol"
	.zero 1
uuid_00000000000dd536:
	.ascii "File: SRC/fragment-context::lookup-vararg.lm Line: 4 Column: 27"
	.zero 1
uuid_00000000000dd58e:
	.ascii "File: SRC/with-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd5b9:
	.ascii "File: SRC/with-location.lm Line: 57 Column: 5"
	.zero 1
uuid_00000000000dd605:
	.ascii "File: SRC/without-location.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd630:
	.ascii "File: SRC/without-location.lm Line: 52 Column: 5"
	.zero 1
uuid_00000000000dd640:
	.ascii "File: SRC/with-key.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd644:
	.ascii "Unknown"
	.zero 1
uuid_00000000000dd696:
	.ascii "File: SRC/location-of.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd6bb:
	.ascii "File: SRC/unique.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd6cb:
	.ascii "File: SRC/print-verbose.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd6de:
	.ascii "File: SRC/non-zero.lm Line: 4 Column: 5"
	.zero 1
already_SB_tokenized_CL_ListStringListString:
.zero 24
uuid_00000000000dd6fa:
	.ascii "File: SRC/tokenize.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000dd701:
	.ascii "LIB/"
	.zero 1
uuid_00000000000dd710:
	.ascii "File: SRC/tokenize.lm Line: 28 Column: 8"
	.zero 1
uuid_00000000000dd7a9:
	.ascii "File: SRC/tokenize.lm Line: 38 Column: 8"
	.zero 1
uuid_00000000000dd7db:
	.ascii "Hanging Parentheses In File: "
	.zero 1
uuid_00000000000dd7dc:
	.ascii " Count: "
	.zero 1
uuid_00000000000dd7e9:
	.ascii "FFI"
	.zero 1
uuid_00000000000dd7f3:
	.ascii "File: SRC/is-ffi.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd80f:
	.ascii "File: SRC/is-nil.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd82b:
	.ascii "File: SRC/is-never.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd83e:
	.ascii "File: SRC/is-seq.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd857:
	.ascii "File: SRC/is-arrow.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd873:
	.ascii "File: SRC/is-array.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd886:
	.ascii "Hook"
	.zero 1
uuid_00000000000dd890:
	.ascii "File: SRC/is-hook.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd8a3:
	.ascii "Blob"
	.zero 1
uuid_00000000000dd8ad:
	.ascii "File: SRC/is-blob.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd8c9:
	.ascii "File: SRC/is-stack-variable.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd8e5:
	.ascii "File: SRC/is-cons.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd8f8:
	.ascii "ImpureCtx"
	.zero 1
uuid_00000000000dd902:
	.ascii "File: SRC/is-impure-ctx.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd91e:
	.ascii "File: SRC/is-string.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd93a:
	.ascii "File: SRC/is-rc.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd94d:
	.ascii "OntoStack"
	.zero 1
uuid_00000000000dd969:
	.ascii "File: SRC/is-onto-stack.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd97c:
	.ascii "ImpureOffset"
	.zero 1
uuid_00000000000dd998:
	.ascii "File: SRC/is-impure-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dd9ab:
	.ascii "BranchConditional"
	.zero 1
uuid_00000000000dd9b5:
	.ascii "File: SRC/is-branchconditional.lm Line: 4 Column: 5"
	.zero 1
is_SB_lm_SB_struct_SB_index_CL_HashtableEqU64String:
.zero 32
uuid_00000000000dd9c8:
	.ascii "File: SRC/plus.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd9de:
	.ascii "File: SRC/print.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000dd9ee:
	.ascii " = "
	.zero 1
uuid_00000000000dd9ef:
	.ascii "File: SRC/print.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000dda08:
	.ascii "File: SRC/print.lm Line: 25 Column: 5"
	.zero 1
uuid_00000000000dda12:
	.ascii "EOF"
	.zero 1
uuid_00000000000dda3a:
	.ascii "type "
	.zero 1
uuid_00000000000dda44:
	.ascii " := "
	.zero 1
uuid_00000000000dda63:
	.ascii "File: SRC/print.lm Line: 40 Column: 5"
	.zero 1
uuid_00000000000dda85:
	.ascii "Fragment Context:\n"
	.zero 1
uuid_00000000000dda95:
	.ascii "File: SRC/print.lm Line: 84 Column: 27"
	.zero 1
uuid_00000000000ddab1:
	.ascii "Fragment\n"
	.zero 1
uuid_00000000000ddab2:
	.ascii "	Offset = "
	.zero 1
uuid_00000000000ddabf:
	.ascii "File: SRC/print.lm Line: 99 Column: 33"
	.zero 1
uuid_00000000000ddac6:
	.ascii "File: SRC/print.lm Line: 94 Column: 5"
	.zero 1
uuid_00000000000ddad3:
	.ascii "File: SRC/print.lm Line: 111 Column: 5"
	.zero 1
uuid_00000000000ddae6:
	.ascii "In File "
	.zero 1
uuid_00000000000ddae7:
	.ascii " Line "
	.zero 1
uuid_00000000000ddae8:
	.ascii " Column "
	.zero 1
uuid_00000000000ddae9:
	.ascii "File: SRC/print.lm Line: 122 Column: 5"
	.zero 1
uuid_00000000000ddb05:
	.ascii " +\n"
	.zero 1
uuid_00000000000ddb06:
	.ascii " + "
	.zero 1
uuid_00000000000ddb13:
	.ascii "File: SRC/print.lm Line: 135 Column: 29"
	.zero 1
uuid_00000000000ddb39:
	.ascii "File: SRC/print.lm Line: 159 Column: 35"
	.zero 1
uuid_00000000000ddb4c:
	.ascii "File: SRC/reverse.lm Line: 4 Column: 26"
	.zero 1
uuid_00000000000ddb62:
	.ascii "(Variable "
	.zero 1
uuid_00000000000ddb6c:
	.ascii "(Literal "
	.zero 1
uuid_00000000000ddb7c:
	.ascii "(Type ("
	.zero 1
uuid_00000000000ddb7d:
	.ascii "))"
	.zero 1
uuid_00000000000ddb87:
	.ascii "(Global ("
	.zero 1
uuid_00000000000ddb91:
	.ascii "(App ("
	.zero 1
uuid_00000000000ddb9e:
	.ascii "(Lambda ("
	.zero 1
uuid_00000000000ddbb1:
	.ascii "File: SRC/serialize-ast.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000ddbec:
	.ascii "File: SRC/serialize-ast.lm Line: 59 Column: 43"
	.zero 1
uuid_00000000000ddbf6:
	.ascii "(Variable ?)"
	.zero 1
uuid_00000000000ddc06:
	.ascii "(Literal And) "
	.zero 1
uuid_00000000000ddc19:
	.ascii ") "
	.zero 1
uuid_00000000000ddc1a:
	.ascii "File: SRC/serialize-ast.lm Line: 72 Column: 37"
	.zero 1
uuid_00000000000ddc42:
	.ascii "File: SRC/slot.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000ddc61:
	.ascii "File: SRC/slot.lm Line: 30 Column: 14"
	.zero 1
uuid_00000000000ddc77:
	.ascii "File: SRC/slot.lm Line: 26 Column: 5"
	.zero 1
uuid_SB_counter_CL_U64:
.zero 8
uuid_00000000000ddc81:
	.ascii "uuid_"
	.zero 1
uuid_00000000000ddc94:
	.ascii "File: SRC/var-name-if-var.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddcd9:
	.ascii "File: SRC/remove-parens.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000ddce3:
	.ascii "File: SRC/remove-parens.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000ddd19:
	.ascii "File: SRC/parse-lambda.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000ddd3f:
	.ascii "File: SRC/parse-lambda.lm Line: 16 Column: 38"
	.zero 1
uuid_00000000000ddd4c:
	.ascii "File: SRC/parse-lambda.lm Line: 14 Column: 5"
	.zero 1
uuid_00000000000ddd6e:
	.ascii "File: SRC/parse-lambda.lm Line: 33 Column: 14"
	.zero 1
uuid_00000000000ddd7b:
	.ascii "Expected Dot For Lambda Body\n"
	.zero 1
uuid_00000000000ddd85:
	.ascii "File: SRC/parse-lambda.lm Line: 30 Column: 8"
	.zero 1
uuid_00000000000dddd3:
	.ascii "File: SRC/parse-many-expressions.lm Line: 18 Column: 14"
	.zero 1
uuid_00000000000dddd7:
	.ascii "File: SRC/parse-many-expressions.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000dde0a:
	.ascii "File: SRC/parse-one-expression.lm Line: 12 Column: 11"
	.zero 1
uuid_00000000000dde23:
	.ascii "Unexpected Closing Parentheses"
	.zero 1
uuid_00000000000dde42:
	.ascii "File: SRC/parse-one-expression.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000dde70:
	.ascii "File: SRC/parse-one-expression.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000dde9c:
	.ascii "macro"
	.zero 1
uuid_00000000000ddecd:
	.ascii "File: SRC/parse-toplevel.lm Line: 18 Column: 26"
	.zero 1
uuid_00000000000dded4:
	.ascii "File: SRC/parse-toplevel.lm Line: 14 Column: 20"
	.zero 1
uuid_00000000000dded8:
	.ascii "File: SRC/parse-toplevel.lm Line: 11 Column: 14"
	.zero 1
uuid_00000000000ddedc:
	.ascii "meta"
	.zero 1
uuid_00000000000ddefb:
	.ascii "File: SRC/parse-toplevel.lm Line: 36 Column: 14"
	.zero 1
uuid_00000000000ddeff:
	.ascii "type"
	.zero 1
uuid_00000000000ddf15:
	.ascii "fragment"
	.zero 1
uuid_00000000000ddf3d:
	.ascii "File: SRC/parse-toplevel.lm Line: 50 Column: 34"
	.zero 1
uuid_00000000000ddf41:
	.ascii "File: SRC/parse-toplevel.lm Line: 48 Column: 14"
	.zero 1
uuid_00000000000ddf6c:
	.ascii "File: SRC/parse-toplevel.lm Line: 70 Column: 34"
	.zero 1
uuid_00000000000ddf70:
	.ascii "File: SRC/parse-toplevel.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000ddf9e:
	.ascii "suffix"
	.zero 1
uuid_00000000000ddfb4:
	.ascii "atom"
	.zero 1
uuid_00000000000de004:
	.ascii "size"
	.zero 1
uuid_00000000000de02f:
	.ascii "import"
	.zero 1
uuid_00000000000de063:
	.ascii "zero"
	.zero 1
uuid_00000000000de079:
	.ascii "non-zero"
	.zero 1
uuid_00000000000de07a:
	.ascii "t"
	.zero 1
uuid_00000000000de07b:
	.ascii "!="
	.zero 1
uuid_00000000000de07c:
	.ascii ".0"
	.zero 1
uuid_00000000000de07d:
	.ascii ":="
	.zero 1
uuid_00000000000de0a5:
	.ascii "File: SRC/parse-toplevel.lm Line: 150 Column: 14"
	.zero 1
uuid_00000000000de0b2:
	.ascii "File: SRC/parse-toplevel.lm Line: 162 Column: 14"
	.zero 1
uuid_00000000000de0b6:
	.ascii "File: SRC/parse-toplevel.lm Line: 5 Column: 8"
	.zero 1
uuid_00000000000de0df:
	.ascii "File: SRC/parse-type-comma-sep.lm Line: 7 Column: 8"
	.zero 1
uuid_00000000000de11a:
	.ascii "File: SRC/parse-type-single.lm Line: 9 Column: 11"
	.zero 1
uuid_00000000000de124:
	.ascii "File: SRC/parse-type-single.lm Line: 59 Column: 11"
	.zero 1
uuid_00000000000de146:
	.ascii "Unexpected Parameterized Type: "
	.zero 1
uuid_00000000000de147:
	.ascii "File: SRC/parse-type-single.lm Line: 86 Column: 25"
	.zero 1
uuid_00000000000de151:
	.ascii "File: SRC/parse-type-single.lm Line: 68 Column: 14"
	.zero 1
uuid_00000000000de175:
	.ascii "File: SRC/parse-type.lm Line: 12 Column: 8"
	.zero 1
uuid_00000000000de18e:
	.ascii "File: SRC/parse-type.lm Line: 22 Column: 14"
	.zero 1
uuid_00000000000de1a7:
	.ascii "File: SRC/parse-type.lm Line: 51 Column: 8"
	.zero 1
uuid_00000000000de20d:
	.ascii "File: SRC/take-one-expr.lm Line: 19 Column: 11"
	.zero 1
uuid_00000000000de217:
	.ascii "File: SRC/take-one-expr.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000de224:
	.ascii "({struct "
	.zero 1
uuid_00000000000de225:
	.ascii " rvalue={"
	.zero 1
uuid_00000000000de226:
	.ascii "};rvalue;})"
	.zero 1
uuid_00000000000de227:
	.ascii "src"
	.zero 1
cstring_SB_cache_CL_StringStringListStringStringList:
.zero 32
uuid_00000000000de22b:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000de235:
	.ascii "TODO declare cstring blob\n"
	.zero 1
uuid_00000000000de236:
	.ascii "\""
	.zero 1
uuid_00000000000de237:
	.ascii "\\\\t"
	.zero 1
uuid_00000000000de238:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 39 Column: 11"
	.zero 1
uuid_00000000000de26f:
	.ascii "File: SRC/compile-declare-cstring.lm Line: 75 Column: 32"
	.zero 1
uuid_00000000000de276:
	.ascii ":\n	.ascii \""
	.zero 1
uuid_00000000000de277:
	.ascii "\"\n	.zero 1\n"
	.zero 1
uuid_00000000000de2de:
	.ascii "File: SRC/compile-destructure-args.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000de2e8:
	.ascii "({})"
	.zero 1
uuid_00000000000de307:
	.ascii "({"
	.zero 1
uuid_00000000000de30b:
	.ascii "True"
	.zero 1
uuid_00000000000de30c:
	.ascii "False"
	.zero 1
uuid_00000000000de30d:
	.ascii "\\t"
	.zero 1
uuid_00000000000de30e:
	.ascii "10"
	.zero 1
uuid_00000000000de30f:
	.ascii "\\s"
	.zero 1
uuid_00000000000de310:
	.ascii "32"
	.zero 1
uuid_00000000000de311:
	.ascii "\\o"
	.zero 1
uuid_00000000000de312:
	.ascii "35"
	.zero 1
uuid_00000000000de313:
	.ascii "\\`"
	.zero 1
uuid_00000000000de314:
	.ascii "39"
	.zero 1
uuid_00000000000de315:
	.ascii "\\["
	.zero 1
uuid_00000000000de316:
	.ascii "40"
	.zero 1
uuid_00000000000de317:
	.ascii "\\]"
	.zero 1
uuid_00000000000de318:
	.ascii "41"
	.zero 1
uuid_00000000000de319:
	.ascii "\\:"
	.zero 1
uuid_00000000000de31a:
	.ascii "59"
	.zero 1
uuid_00000000000de31b:
	.ascii "File: SRC/compile-expr-direct.lm Line: 55 Column: 20"
	.zero 1
uuid_00000000000de3fa:
	.ascii "File: SRC/compile-expr-direct.lm Line: 107 Column: 17"
	.zero 1
uuid_00000000000de43a:
	.ascii "File: SRC/compile-expr-direct.lm Line: 121 Column: 17"
	.zero 1
uuid_00000000000de480:
	.ascii "(("
	.zero 1
uuid_00000000000de481:
	.ascii ")("
	.zero 1
uuid_00000000000de4a9:
	.ascii "into-branch-conditional"
	.zero 1
uuid_00000000000de4b3:
	.ascii "rsp-offset"
	.zero 1
uuid_00000000000de4b4:
	.ascii "end-offset"
	.zero 1
uuid_00000000000de4b5:
	.ascii "return-size"
	.zero 1
uuid_00000000000de4b6:
	.ascii "ImplicitContext"
	.zero 1
uuid_00000000000de4b7:
	.ascii "ictx"
	.zero 1
uuid_00000000000de4b8:
	.ascii "primitive::if"
	.zero 1
uuid_00000000000de4da:
	.ascii "frame"
	.zero 1
uuid_00000000000de4db:
	.ascii "="
	.zero 1
uuid_00000000000de4dc:
	.ascii ";({});})\n"
	.zero 1
uuid_00000000000de4f5:
	.ascii "File: SRC/compile-expr-direct.lm Line: 263 Column: 14"
	.zero 1
uuid_00000000000de4f9:
	.ascii "unframe"
	.zero 1
uuid_00000000000de4fa:
	.ascii "	add $"
	.zero 1
uuid_00000000000de4fb:
	.ascii ", %rsp\n"
	.zero 1
uuid_00000000000de56e:
	.ascii "File: SRC/compile-expr-direct.lm Line: 294 Column: 14"
	.zero 1
uuid_00000000000de581:
	.ascii "File: SRC/compile-expr-direct.lm Line: 6 Column: 5"
	.zero 1
uuid_00000000000de5ac:
	.ascii "File: SRC/compile-expr.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000de5b3:
	.ascii "File: SRC/compile-global.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000de5c9:
	.ascii "cdecl::args-size"
	.zero 1
uuid_00000000000de5cd:
	.ascii "int"
	.zero 1
uuid_00000000000de5d1:
	.ascii ");\n"
	.zero 1
uuid_00000000000de5d5:
	.ascii "){"
	.zero 1
uuid_00000000000de5d9:
	.ascii ";return 0;\n"
	.zero 1
uuid_00000000000de5dd:
	.ascii "}\n"
	.zero 1
uuid_00000000000de602:
	.ascii "File: SRC/compile-global.lm Line: 13 Column: 5"
	.zero 1
uuid_00000000000de609:
	.ascii "TODO Compile Global Blob\n"
	.zero 1
uuid_00000000000de616:
	.ascii "File: SRC/compile-global.lm Line: 112 Column: 14"
	.zero 1
uuid_00000000000de620:
	.ascii "_COUNTER"
	.zero 1
uuid_00000000000de621:
	.ascii ":\n.zero 8\n"
	.zero 1
uuid_00000000000de622:
	.ascii "_LABEL:\n	.ascii	\"\\\\t"
	.zero 1
uuid_00000000000de623:
	.ascii "\\\\n\"\n	.zero 1\n"
	.zero 1
uuid_00000000000de624:
	.ascii "	mov $"
	.zero 1
uuid_00000000000de625:
	.ascii ", %RBX\n	mov 0(%RBX), %RAX\n"
	.zero 1
uuid_00000000000de626:
	.ascii "	inc %RAX\n	mov %RAX, 0(%RBX)\n"
	.zero 1
uuid_00000000000de627:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push %RAX\n	call print_CL_ArrowNilU64\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000de628:
	.ascii "	push %RBP\n	mov %RSP, %RBP\n	push $"
	.zero 1
uuid_00000000000de629:
	.ascii "_LABEL\n"
	.zero 1
uuid_00000000000de62a:
	.ascii "	call print_CL_ArrowNilString\n	mov %RBP, %RSP\n	pop %RBP\n"
	.zero 1
uuid_00000000000de62e:
	.ascii "	sub $"
	.zero 1
uuid_00000000000de62f:
	.ascii "	ret\n"
	.zero 1
uuid_00000000000de654:
	.ascii ":\n.zero "
	.zero 1
uuid_00000000000de655:
	.ascii "File: SRC/compile-global.lm Line: 95 Column: 5"
	.zero 1
uuid_00000000000de692:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000de69f:
	.ascii "File: SRC/compile-push-rvalue.lm Line: 8 Column: 5"
	.zero 1
uuid_00000000000de6a6:
	.ascii "File: SRC/compile-stack-call-push-args.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000de6b3:
	.ascii "FunctionArguments"
	.zero 1
uuid_00000000000de6b7:
	.ascii "function-id"
	.zero 1
uuid_00000000000de6b8:
	.ascii "function-name"
	.zero 1
uuid_00000000000de6b9:
	.ascii "function-type"
	.zero 1
uuid_00000000000de6ba:
	.ascii "args-size"
	.zero 1
uuid_00000000000de6bb:
	.ascii "used"
	.zero 1
uuid_00000000000de6bc:
	.ascii "args"
	.zero 1
uuid_00000000000de6bd:
	.ascii "primitive::call"
	.zero 1
uuid_00000000000de6d3:
	.ascii "File: SRC/compile-stack-calls.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000de6f5:
	.ascii "File: SRC/translate-local-variables.lm Line: 11 Column: 17"
	.zero 1
uuid_00000000000de6f9:
	.ascii "File: SRC/translate-local-variables.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000de700:
	.ascii "File: SRC/translate-local-variables.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000de713:
	.ascii "L"
	.zero 1
uuid_00000000000de717:
	.ascii "File: SRC/cc-blob.lm Line: 7 Column: 5"
	.zero 1
uuid_00000000000de727:
	.ascii "File: SRC/cc-blob.lm Line: 30 Column: 5"
	.zero 1
uuid_00000000000de77c:
	.ascii "File: SRC/cc-args.lm Line: 9 Column: 14"
	.zero 1
uuid_00000000000de7ce:
	.ascii "Codegen Unexpected RHS"
	.zero 1
uuid_00000000000de7d2:
	.ascii "File: SRC/cc-args.lm Line: 75 Column: 14"
	.zero 1
uuid_00000000000de7e5:
	.ascii "File: SRC/cc-args.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000de85e:
	.ascii "for-arg-i"
	.zero 1
uuid_00000000000de89e:
	.ascii "for-arg"
	.zero 1
uuid_00000000000de8d5:
	.ascii "File: SRC/blob-render.lm Line: 37 Column: 11"
	.zero 1
uuid_00000000000de909:
	.ascii "for-atom"
	.zero 1
uuid_00000000000de940:
	.ascii "File: SRC/blob-render.lm Line: 53 Column: 34"
	.zero 1
uuid_00000000000de953:
	.ascii "range"
	.zero 1
uuid_00000000000de969:
	.ascii "uuid"
	.zero 1
uuid_00000000000de97c:
	.ascii "align"
	.zero 1
uuid_00000000000de998:
	.ascii "=="
	.zero 1
uuid_00000000000de9d5:
	.ascii "/"
	.zero 1
uuid_00000000000dea0c:
	.ascii "%"
	.zero 1
uuid_00000000000dea7f:
	.ascii "File: SRC/blob-render.lm Line: 151 Column: 11"
	.zero 1
uuid_00000000000deab9:
	.ascii "File: SRC/blob-render.lm Line: 175 Column: 14"
	.zero 1
uuid_00000000000deac0:
	.ascii "Unknown Render Term "
	.zero 1
uuid_00000000000deac1:
	.ascii "File: SRC/blob-render.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000deb5b:
	.ascii "File: SRC/blob-render.lm Line: 205 Column: 5"
	.zero 1
uuid_00000000000deb68:
	.ascii " rvalue;rvalue;})"
	.zero 1
uuid_00000000000debcf:
	.ascii "File: SRC/extract-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000dec0c:
	.ascii "File: SRC/index-typedefs.lm Line: 3 Column: 31"
	.zero 1
uuid_00000000000dec85:
	.ascii "Invalid Typedef"
	.zero 1
uuid_00000000000dec86:
	.ascii "File: SRC/index-typedefs.lm Line: 17 Column: 5"
	.zero 1
uuid_00000000000ded02:
	.ascii "Unrecognized Macro Pattern\n"
	.zero 1
uuid_00000000000ded03:
	.ascii "File: SRC/is-macro-head.lm Line: 5 Column: 30"
	.zero 1
uuid_00000000000ded55:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 11 Column: 11"
	.zero 1
uuid_00000000000ded5f:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 25 Column: 14"
	.zero 1
uuid_00000000000ded69:
	.ascii "File: SRC/preprocess-apply-hard.lm Line: 6 Column: 30"
	.zero 1
uuid_00000000000ded73:
	.ascii "Invalid Macro Application\n"
	.zero 1
uuid_00000000000dedc8:
	.ascii "_t"
	.zero 1
uuid_00000000000dedc9:
	.ascii "Token"
	.zero 1
uuid_00000000000dedca:
	.ascii "Literal+Constant+String"
	.zero 1
uuid_00000000000dedcb:
	.ascii "_"
	.zero 1
uuid_00000000000dee0b:
	.ascii "File: SRC/preprocess-apply-literals.lm Line: 5 Column: 5"
	.zero 1
uuid_00000000000dee2a:
	.ascii ":Location:"
	.zero 1
uuid_00000000000dee34:
	.ascii "p"
	.zero 1
uuid_00000000000dee47:
	.ascii "Location Unknown"
	.zero 1
uuid_00000000000dee54:
	.ascii "File: "
	.zero 1
uuid_00000000000dee55:
	.ascii " Line: "
	.zero 1
uuid_00000000000dee56:
	.ascii " Column: "
	.zero 1
uuid_00000000000dee57:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 8 Column: 11"
	.zero 1
uuid_00000000000dee9d:
	.ascii "File: SRC/preprocess-apply-locations.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000defeb:
	.ascii "File: SRC/preprocess-apply.lm Line: 38 Column: 38"
	.zero 1
uuid_00000000000df00a:
	.ascii "File: SRC/preprocess-apply.lm Line: 56 Column: 38"
	.zero 1
uuid_00000000000df06b:
	.ascii "File: SRC/preprocess-apply.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df0ae:
	.ascii "File: SRC/preprocess-is-suffixed.lm Line: 5 Column: 32"
	.zero 1
uuid_00000000000df0df:
	.ascii "File: SRC/substitute-uuids.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000df131:
	.ascii "File: SRC/substitute-uuids.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df1e0:
	.ascii ":Literal:"
	.zero 1
uuid_00000000000df253:
	.ascii "File: SRC/try-destructure-macro.lm Line: 13 Column: 14"
	.zero 1
uuid_00000000000df2ab:
	.ascii ":Any:"
	.zero 1
uuid_00000000000df33c:
	.ascii ":Variable:"
	.zero 1
uuid_00000000000df3a0:
	.ascii ":Tag:"
	.zero 1
uuid_00000000000df3c5:
	.ascii "Constant+Literal+U64"
	.zero 1
uuid_00000000000df3c6:
	.ascii "Tag<"
	.zero 1
uuid_00000000000df3dc:
	.ascii "File: SRC/try-destructure-macro.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df428:
	.ascii "Fragment Has No Type:\n"
	.zero 1
uuid_00000000000df42c:
	.ascii "File: SRC/destructure-lhs.lm Line: 7 Column: 11"
	.zero 1
uuid_00000000000df469:
	.ascii "File: SRC/destructure-lhs.lm Line: 24 Column: 11"
	.zero 1
uuid_00000000000df46d:
	.ascii "Unexpected Destructure LHS: "
	.zero 1
uuid_00000000000df46e:
	.ascii "File: SRC/destructure-lhs.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df47b:
	.ascii ";\n})"
	.zero 1
uuid_00000000000df485:
	.ascii "File: SRC/fragment::chain.lm Line: 74 Column: 36"
	.zero 1
uuid_00000000000df48c:
	.ascii "File: SRC/fragment::chain.lm Line: 85 Column: 5"
	.zero 1
uuid_00000000000df4ba:
	.ascii "File: SRC/fragment::get.lm Line: 7 Column: 33"
	.zero 1
uuid_00000000000df4c1:
	.ascii "File: SRC/fragment::get.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df4c5:
	.ascii "File: SRC/fragment::local-variable.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df4e1:
	.ascii "File: SRC/fragment::set-context.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df4fa:
	.ascii "File: SRC/fragment::set-offset.lm Line: 4 Column: 5"
	.zero 1
uuid_00000000000df513:
	.ascii "File: SRC/fragment::set-term.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df52c:
	.ascii "File: SRC/fragment::set-type.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df545:
	.ascii "File: SRC/fragment::set-vararg.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df55e:
	.ascii "File: SRC/fragment::set.lm Line: 3 Column: 5"
	.zero 1
uuid_00000000000df562:
	.ascii "--c"
	.zero 1
uuid_00000000000df563:
	.ascii "PLATFORM/C/"
	.zero 1
uuid_00000000000df564:
	.ascii "tmp.c"
	.zero 1
uuid_00000000000df568:
	.ascii "--blob"
	.zero 1
uuid_00000000000df569:
	.ascii "tmp.txt"
	.zero 1
uuid_00000000000df56d:
	.ascii "--gnu"
	.zero 1
uuid_00000000000df56e:
	.ascii "PLATFORM/GNU-X86/"
	.zero 1
uuid_00000000000df56f:
	.ascii "tmp.s"
	.zero 1
uuid_00000000000df573:
	.ascii "--tokenize"
	.zero 1
uuid_00000000000df574:
	.ascii "--parse"
	.zero 1
uuid_00000000000df575:
	.ascii "--preprocess"
	.zero 1
uuid_00000000000df576:
	.ascii "--typecheck"
	.zero 1
uuid_00000000000df577:
	.ascii "--compile"
	.zero 1
uuid_00000000000df578:
	.ascii "--strict"
	.zero 1
uuid_00000000000df579:
	.ascii "--gradual"
	.zero 1
uuid_00000000000df57a:
	.ascii "--macro"
	.zero 1
uuid_00000000000df57b:
	.ascii "--nomacro"
	.zero 1
uuid_00000000000df57c:
	.ascii "--profile-invocations"
	.zero 1
uuid_00000000000df57d:
	.ascii "-o"
	.zero 1
uuid_00000000000df57e:
	.ascii "File: SRC/main.lm Line: 6 Column: 8"
	.zero 1
uuid_00000000000df5cd:
	.ascii "File: SRC/main.lm Line: 48 Column: 37"
	.zero 1
uuid_00000000000df5e5:
	.ascii "File: SRC/main.lm Line: 56 Column: 5"
	.zero 1
uuid_00000000000df605:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 57 Column: 25"
	.zero 1
uuid_00000000000df650:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 44 Column: 25"
	.zero 1
uuid_00000000000df669:
	.ascii "List::head is fallible\n"
	.zero 1
uuid_00000000000df66a:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 10 Column: 5"
	.zero 1
uuid_00000000000df6c4:
	.ascii "File: PLATFORM/GNU-X86/LIB/hashtable.lm Line: 89 Column: 14"
	.zero 1
uuid_00000000000df706:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 33 Column: 8"
	.zero 1
uuid_00000000000df788:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 29 Column: 5"
	.zero 1
uuid_00000000000df79d:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 61 Column: 5"
	.zero 1
uuid_00000000000df8d0:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 20 Column: 26"
	.zero 1
uuid_00000000000df947:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 71 Column: 8"
	.zero 1
uuid_00000000000df95a:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-list.lm Line: 78 Column: 5"
	.zero 1
uuid_00000000000dfcb0:
	.ascii "File: PLATFORM/GNU-X86/LIB/hashtable.lm Line: 17 Column: 14"
	.zero 1
uuid_00000000000dfd8c:
	.ascii "File: PLATFORM/GNU-X86/LIB/default-stdlib.lm Line: 44 Column: 5"
	.zero 1
