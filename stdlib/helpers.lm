
# LM provides a concept of open vs closed structures
# a closed structure may always be referred to by a single pointer
# a closed structure may exist on the stack or the heap or even a file or mapped network resource
# an open structure by comparison is thought to exist in the registers
# multiple structures may be open at the same time as long as they don't conflict
# fields of open structures are referred to by their ordered position $0, $1, $2
# a mapping of registers is then applied to these field positions
# x.$0 = %rdi
# y.$3 = %r10
# etc.

# for the bootstrap compiler, only one expression will be open at a time

# S-Expressions are a common datastructure used heavily in the bootstrap compiler
# Not all structures need to be S-Expressions, but they will always be available
# Aside from the usual Cons,Atom,Nil information there is also a reference counter and some flags
#
# struct S {
#   $0 ref_counter : u64
#   $1 atom        : *char
#   $2 head        : *S
#   $3 tail        : *S
#   $4 flags       : bool[64]
# }

# bootstrap register allocation
# r12 , r13 , r14 , r15                : open this
# rsi , rdi                            : closed reference 1, 2
# r8, r9, r10, r11, rax, rbx, rcx, rdx : volatile internal registers

# put8 (%r8 bool[4], %r9: *char)
::put8 := (
    \t mov %r8b, %al                      \n # lower byte of %r11 goes into %rax
    \t and $0xf, %al                      \n # only show lower 4 bits
    \t mov $__hex_buffer, %r10            \n # %r10 is index into hex buffer
    \t add %al, %r10b                     \n # %r10 is index into char in hex buffer
    \t mov 0(%r10), %cl                   \n # %cl is a hexadecimal char
    \t mov %cl, 0(%r9)                    \n # write char into buffer
    \t inc %r9                            \n
);

# put64 (%r8: char[8])
::put64 := (
   \t push %rsi                  \n
   \t push %rdi                  \n

   \t mov $__put64_write_buffer, %r9  \n   # %r9 points to __put64_write_buffer

   \t rol $4, %r8                    \n   # %r8[0]
   ::put8
   \t rol $4, %r8                    \n   # %r8[1]
   ::put8
   \t rol $4, %r8                    \n   # %r8[2]
   ::put8
   \t rol $4, %r8                    \n   # %r8[3]
   ::put8
   \t rol $4, %r8                    \n   # %r8[4]
   ::put8
   \t rol $4, %r8                    \n   # %r8[5]
   ::put8
   \t rol $4, %r8                    \n   # %r8[6]
   ::put8
   \t rol $4, %r8                    \n   # %r8[7]
   ::put8
   \t rol $4, %r8                    \n   # %r8[8]
   ::put8
   \t rol $4, %r8                    \n   # %r8[9]
   ::put8
   \t rol $4, %r8                    \n   # %r8[10]
   ::put8
   \t rol $4, %r8                    \n   # %r8[11]
   ::put8
   \t rol $4, %r8                    \n   # %r8[12]
   ::put8
   \t rol $4, %r8                    \n   # %r8[13]
   ::put8
   \t rol $4, %r8                    \n   # %r8[14]
   ::put8
   \t rol $4, %r8                    \n   # %r8[15]
   ::put8

   \t mov $1, %rax              \n
   \t mov $1, %rdi              \n
   \t mov $__put64_buffer, %rsi \n
   \t mov $19, %rdx             \n
   \t syscall                   \n

   \t pop %rdi                  \n
   \t pop %rsi                  \n
);

::show-newline := (
   \t push %rsi                 \n
   \t push %rdi                 \n

   \t mov $1, %rax              \n
   \t mov $1, %rdi              \n
   \t mov $__newline, %rsi      \n
   \t mov $1, %rdx              \n
   \t syscall                   \n

   \t pop %rdi                  \n
   \t pop %rsi                  \n
);

::show-lparen := (
   \t push %rsi                 \n
   \t push %rdi                 \n

   \t mov $1, %rax              \n
   \t mov $1, %rdi              \n
   \t mov $__lparen, %rsi      \n
   \t mov $1, %rdx              \n
   \t syscall                   \n

   \t pop %rdi                  \n
   \t pop %rsi                  \n
);

::show-rparen := (
   \t push %rsi                 \n
   \t push %rdi                 \n

   \t mov $1, %rax              \n
   \t mov $1, %rdi              \n
   \t mov $__rparen, %rsi      \n
   \t mov $1, %rdx              \n
   \t syscall                   \n

   \t pop %rdi                  \n
   \t pop %rsi                  \n
);

::show-space := (
   \t push %rsi                 \n
   \t push %rdi                 \n

   \t mov $1, %rax              \n
   \t mov $1, %rdi              \n
   \t mov $__space, %rsi        \n
   \t mov $1, %rdx              \n
   \t syscall                   \n

   \t pop %rdi                  \n
   \t pop %rsi                  \n
);

::yield-nil := (
                         # $_.$0 ref_counter is unnecessary when open
                         # open structures are completely "owned" by the current context
   # these registers are supposed to be "preserved"
   \t mov $0, %r12   \n # $_.$1 = 0, .atom
   \t mov $0, %r13   \n # $_.$2 = 0, .head
   \t mov $0, %r14   \n # $_.$3 = 0, .tail
   \t mov $0, %r15   \n # $_.$4 = 0, .flags
);

::yield-atom := λlabel. (
                               # $_.$0 ref_counter is unnecessary when open
                               # open structures must be completely "owned" by the current context
   \t mov $ label , %r12     \n # $_.$1 = 0, .atom
   \t mov $0, %r13           \n # $_.$2 = 0, .head
   \t mov $0, %r14           \n # $_.$3 = 0, .tail
   \t mov $0, %r15           \n # $_.$4 = 0, .flags
);

::yield-cons := λhead tail. (
   head                        # this is head
   ::push-this

   tail                        # this is tail
   ::close-this                # %rsi is tail
   mov %rsi, %rdi           \n # %rdi is tail

   ::pop-this
   ::close-this                # %rsi is head

   \t mov $0, %r12          \n # this.atom is NULL
   \t mov %rsi, %r13        \n # this.head is head
   \t mov %rdi, %r14        \n # this.tail is tail
   \t mov $0, %r15          \n # this.flags is 0
);

::show-this := (
   \t mov $0xdeadbeef, %r8            \n
   ::put64

   \t mov %r12, %r8            \n
   ::put64

   \t mov %r13, %r8            \n
   ::put64

   \t mov %r14, %r8            \n
   ::put64

   \t mov %r15, %r8            \n
   ::put64

   ::show-newline
);

::show-close := (
   \t mov $0xdeadcccc, %r8            \n
   ::put64

   \t mov %rsi, %r8             \n
   ::put64

   \t mov 0(%rsi), %r8            \n
   ::put64

   \t mov 8(%rsi), %r8            \n
   ::put64

   \t mov 16(%rsi), %r8            \n
   ::put64

   \t mov 24(%rsi), %r8            \n
   ::put64

   ::show-newline
);

::call := λf. (
   \t call f                   \n
);

::push-this := (
   \t push %r12 \n
   \t push %r13 \n
   \t push %r14 \n
   \t push %r15 \n
);

::pop-this := (
   \t pop %r15 \n
   \t pop %r14 \n
   \t pop %r13 \n
   \t pop %r12 \n
);

::close-this := (
   # move this S onto the heap
   # %rsi becomes pointer to new location
   \t mov $__cons_section, %rsi     \n # %rsi now points to root cons
   \t mov $__cons_counter, %r8      \n # %r8 now points to cons counter
   \t mov 0(%r8), %r10              \n # %r10 now hold value of cons counter
   \t add %r10, %rsi                \n # %rsi now points to top cons
   \t add $32, %r10                \n # increment cons counter
   \t mov %r10, 0(%r8)              \n # overwrite new cons counter
   \t mov %r12, 0(%rsi)             \n # set top.atom
   \t mov %r13, 8(%rsi)             \n # set top.head
   \t mov %r14, 16(%rsi)            \n # set top.tail 
   \t mov %r15, 24(%rsi)            \n # set top.flags
);

::open-this := (
   # move S from heap into this
   # %rsi is pointer to current location
   \t mov 0(%rsi), %r12             \n
   \t mov 8(%rsi), %r13             \n
   \t mov 16(%rsi), %r14            \n
   \t mov 24(%rsi), %r15            \n
);

::head := (
   \t mov %r13, %rsi                \n
   ::open-this
);
::tail := (
   \t mov %r14, %rsi                \n
   ::open-this
);

::program-header := (
   .global _start        \n
   .text                 \n
   _start:               \n
   \t jmp main           \n
);

::data-header := (
                         \n
   .data                 \n
);

::exit-cleanup := (
                         \n
   \t mov $60, %eax      \n # _exit system call
   \t mov $0, %edi       \n # error code 0
   \t syscall            \n
);
