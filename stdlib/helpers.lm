
# LM provides a concept of open vs closed structures
# a closed structure may always be referred to by a single pointer
# a closed structure may exist on the stack or the heap or even a file or mapped network resource
# an open structure by comparison is thought to exist in the registers
# multiple structures may be open at the same time as long as they don't conflict
# fields of open structures are referred to by their ordered position $0, $1, $2
# a mapping of registers is then applied to these field positions
# x.$0 = %rdi
# y.$3 = %r10
# etc.

# for the bootstrap compiler, only one expression will be open at a time

# S-Expressions are a common datastructure used heavily in the bootstrap compiler
# Not all structures need to be S-Expressions, but they will always be available
# Aside from the usual Cons,Atom,Nil information there is also a reference counter and some flags
#
# struct S {
#   $0 ref_counter : u64
#   $1 atom        : *char
#   $2 head        : *S
#   $3 tail        : *S
#   $4 flags       : bool[64]
# }


::yield-nil := (
                         # $_.$0 ref_counter is unnecessary when open
                         # open structures are completely "owned" by the current context
   \t mov $0, %r8    \n # $_.$1 = 0, .atom
   \t mov $0, %r9    \n # $_.$2 = 0, .head
   \t mov $0, %r10   \n # $_.$3 = 0, .tail
   \t mov $0, %r11   \n # $_.$4 = 0, .flags
);

::yield-atom := λlabel. (
                               # $_.$0 ref_counter is unnecessary when open
                               # open structures must be completely "owned" by the current context
   \t mov $ label , %r8     \n # $_.$1 = 0, .atom
   \t mov $0, %r9           \n # $_.$2 = 0, .head
   \t mov $0, %r10          \n # $_.$3 = 0, .tail
   \t mov $0, %r11          \n # $_.$4 = 0, .flags
);

::yield-cons := λhead tail. (
   head                        # this is head
   ::close-this                # %r12 is head
   \t mov %r12, %r13        \n # %r13 is head
   tail                        # this is tail
   ::close-this                # %r12 is tail

   \t mov $0, %r8           \n # this.atom is NULL
   \t mov %r13, %r9         \n # this.head is head
   \t mov %r12, %r10        \n # this.tail is tail
   \t mov $0, %r11          \n # this.flags is 0

   #debug log
   \t mov %r8, %rdi            \n
   \t call __put64             \n
   \t mov %r9, %rdi            \n
   \t call __put64             \n
   \t mov %r10, %rdi           \n
   \t call __put64             \n
   \t mov %r11, %rdi           \n
   \t call __put64             \n
);

::close-this := (
   # move this S onto the heap
   # %r12 becomes pointer to new location
   \t mov $__cons_section, %r12    \n # %r12 now points to root cons
   \t mov $__cons_counter, %r13    \n # %r13 now points to cons counter
   \t mov 0(%r13), %r14            \n # %r14 now hold value of cons counter
   \t add %r14, %r12               \n # %r12 now points to top cons
   \t add $32, %r14                \n # increment cons counter
   \t mov %r14, 0(%r13)            \n # overwrite new cons counter
   \t mov %r8, 0(%r12)             \n # set top.atom
   \t mov %r9, 1(%r12)             \n # set top.head
   \t mov %r10, 2(%r12)            \n # set top.tail 
   \t mov %r11, 3(%r12)            \n # set top.flags
);

::open-this := (
   # move S from heap into this
   # %r12 is pointer to current location
);

::program-header := (
   .global _start        \n
   .text                 \n
   _start:               \n
   \t jmp main           \n
);

::data-header := (
                         \n
   .data                 \n
);

::exit-cleanup := (
                         \n
   \t mov $60, %eax      \n # _exit system call
   \t mov $0, %edi       \n # error code 0
   \t syscall            \n
);
