
.text := (
   # internal _strlen (%rax: *char) -> %rbx
   # not a call-convention function
   _strlen:                     \n
   \t xor %rbx, %rbx            \n
   _strlen_loop:                \n
   \t cmpb $0, 0(%rax)          \n
   \t jz _strlen_exit           \n
   \t inc %rax                  \n
   \t inc %rbx                  \n
   \t jmp _strlen_loop         \n
   _strlen_exit:                \n
   \t ret                       \n
   # result is stored in %rcx

   # print-s
   print_s:                     \n
   __print_this:                \n
   ::callee-save-registers
 
   # if .atom != NULL
   __print_this_atom:           \n
   \t cmp $0, %r12              \n
   \t je __print_this_cons      \n
   \t mov %r12, %rax            \n
   \t call _strlen              \n   # %rbx is length of string
   \t mov %r12, %rsi            \n   # address of string to output
   \t mov %rbx, %rdx            \n   # length is %rcx
   \t mov $1, %rax              \n   # system call 1 is write
   \t mov $1, %rdi              \n   # file handle 1 is stdout
   \t syscall                   \n   # invoke operating system to do the write
   ::callee-restore-registers
   \t ret                       \n

   # if .head != NULL && .tail != NULL
   __print_this_cons:           \n
   \t cmp $0, %r13              \n
   \t je __print_this_nil       \n
   \t cmp $0, %r14              \n
   \t je __print_this_nil       \n
   ::push-this
   ::show-lparen
   \t mov %r13, %rsi            \n
   ::open-this
   \t call __print_this         \n
   ::pop-this
   ::show-space
   \t mov %r14, %rsi            \n
   ::open-this
   \t call __print_this         \n
   ::show-rparen
   ::callee-restore-registers
   \t ret                       \n

   __print_this_nil:            \n
   \t mov $1, %rax              \n   # system call 1 is write
   \t mov $1, %rdi              \n   # file handle 1 is stdout
   \t mov $__nil_literal, %rsi  \n   # address of string to output
   \t mov $2, %rdx              \n   # nil is 2 bytes
   \t syscall                   \n   # invoke operating system to do the write
   ::callee-restore-registers
   \t ret                       \n

   head:                        \n
   ::callee-save-registers
   \t cmp $0, %r13              \n
   \t je __head_is_nil          \n
   ::head
   ::callee-restore-registers
   \t ret                       \n
   __head_is_nil:               \n
   ::yield-nil
   ::callee-restore-registers
   \t ret                       \n

   tail:                        \n
   ::callee-save-registers
   \t cmp $0, %r14              \n
   \t je __tail_is_nil          \n
   ::tail
   ::callee-restore-registers
   \t ret                       \n
   __tail_is_nil:               \n
   ::yield-nil
   ::callee-restore-registers
   \t ret                       \n

   not:                         \n
   ::callee-save-registers
   \t cmp $0, %r12              \n
   \t jne __not_is_some         \n
   \t cmp $0, %r13              \n
   \t jne __not_is_some         \n
   \t cmp $0, %r14              \n
   \t jne __not_is_some         \n
   ::callee-restore-registers
   (::yield-atom __true)
   \t ret                       \n
   __not_is_some:               \n
   ::callee-restore-registers
   ::yield-nil
   \t ret                       \n

   equal:                       \n
   \t cmp $0, %r13              \n
   \t je __equal_nil            \n
   \t cmp $0, %r14              \n
   \t je __equal_nil            \n
   \t mov 0(%r13), %rax         \n # mov x.atom into %rax
   \t mov 0(%r14), %rbx         \n # mov y.atom into %rbx
   \t cmp $0, %rax              \n
   \t je __equal_nil            \n
   \t cmp $0, %rbx              \n
   \t je __equal_nil            \n
   \t call _streq               \n
   \t ret                       \n
   __equal_nil:                 \n
   ::yield-nil
   \t ret                       \n

   inequal:                     \n
   \t call equal                \n
   \t call not                  \n
   \t ret                       \n

   # _streq (%rax: *char, %rbx: *char) -> 
   # internal, not a call-convention function
   _streq:                      \n
   __streq_loop:                \n
   \t mov 0(%rax), %cl          \n
   \t mov 0(%rbx), %dl          \n

   \t cmp %cl, %dl              \n
   \t jne __streq_false         \n
   \t cmp $0, %cl               \n
   \t je __streq_true           \n
   \t inc %rax                  \n
   \t inc %rbx                  \n
   \t jmp __streq_loop          \n
   __streq_true:                \n
   ::yield-true
   \t ret                       \n
   __streq_false:               \n
   ::yield-nil
   \t ret                       \n
);

.data := (
                                \n
  __cons_counter:               \n
  \t .zero 64                   \n
  __cons_section:               \n
  \t .zero 65536                \n
  __nil_literal:                \n
  \t .ascii "()"                \n
  \t .zero 1                    \n
  __hex_buffer:                 \n
  \t .ascii "0123456789abcdef"  \n 
  __put64_buffer:               \n
  \t .ascii "0x"                \n
  __put64_write_buffer:         \n
  \t .ascii "0000000000000000 " \n
  \t .zero 1                    \n
  __newline:                    \n
  \t .ascii "\n"                \n
  __lparen:                     \n
  \t .ascii "\lparen"           \n
  __rparen:                     \n
  \t .ascii "\rparen"           \n
  __space:                      \n
  \t .ascii "\space"            \n
  __true:                       \n
  \t .ascii "True"              \n
  \t .zero 1                    \n
);
