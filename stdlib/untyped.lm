
# LM provides a concept of open vs closed structures
# a closed structure may always be referred to by a single pointer
# a closed structure may exist on the stack or the heap or even a file or mapped network resource
# an open structure by comparison is thought to exist in the registers
# multiple structures may be open at the same time as long as they don't conflict
# fields of open structures are referred to by their ordered position $0, $1, $2
# a mapping of registers is then applied to these field positions
# x.$0 = %rdi
# y.$3 = %r10
# etc.

# struct S {
#   $0 ref_counter : u64
#   $1 atom        : *char
#   $2 head        : *S
#   $3 tail        : *S
#   $4 misc        : bool[64]
# }

::yield-nil := λ_. (
                         # $_.$0 ref_counter is unnecessary when open
   \t mov $0, %rdi    \n # $_.$1 = 0
   \t mov $0, %rsi    \n # $_.$2 = 0
   \t mov $0, %rdx    \n # $_.$3 = 0
   \t mov $0, %r10    \n # $_.$4 = 0
);

::print-$_ := λ_. (
   \n                    # TODO print $_
);

::yield-program := λprogram. (
   .global _start     \n
   .text              \n
   _start:            \n
   (::yield-nil ())      # mov nil into $_
   (::print-$_  ())      # print $_
   \t mov $0 , %rdi   \n # set exit status to 0
   \t mov $60 , %rax  \n # system call 60 is exit
   \t syscall         \n # invoke operating system
);

::yield-expression := λblock. (
   TODO implement yield-expression
);

::safe-compile-expression := λexpr rett. (
   ::yield-expression ()
);

::safe-compile-program := λsymbols rett. (
   ::yield-program ()
);
