
fragment type U8;     size U8 1;     atom suffix U8     _u8;
fragment type U16;    size U16 2;    atom suffix U16    _u16;
fragment type U32;    size U32 4;    atom suffix U32    _u32;
fragment type U64;    size U64 8;    atom suffix U64    _u64;
fragment type I8;     size I8 1;     atom suffix I8     _i8;
fragment type I16;    size I16 2;    atom suffix I16    _i16;
fragment type I32;    size I32 4;    atom suffix I32    _i32;
fragment type I64;    size I64 8;    atom suffix I64    _i64;
fragment type ASCII;  size ASCII 1;  atom suffix ASCII  _c;
fragment type String; size String 8; atom suffix String _s;

fragment : DontChain [] := λ(: l LocalVariable+Array<x+Sized<1>,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15b \n
   ))
   (.expression( 'r15b ))
) x+Reg8);

fragment : DontChain [] := λ(: l LocalVariable+Array<x+Sized<8>,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'shl \s '$3, '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain [] := λ(: l LocalVariable+Field<x+Sized<8>,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s '%rbp , \s '%r15 \n
      \t 'add \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'shl \s '$3, '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain [] := λ(: l LocalVariable+Array<x,?>)(: r GlobalVariable+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '$ (.expression r) , \s '%r14 \n
      \t 'mov \s '0 \[ '%r14 \] , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain set[] := λ(: l LocalVariable+Array<Field<Sized<8>,?>,?>)(: i Literal+Constant+U64)(: v Reg64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s '% (.expression v) , \s (*( '8 (.expression i) )) \[ '%r15 \] \n
   ))
) Nil);

fragment : DontChain set[] := λ(: dst Reg64+Array<Sized<size>,?>)(: src LocalVariable+Sized<size>). (: (
   (.program (
      (if-eq (.expression size) 1 (
         \t 'mov \t (.expression src) \[ '%rbp \] , \s '%r15b \n
         \t 'mov \s '%r15b , \s 0 \[ '% (.expression dst) \] \n
      ))
      (if-eq (.expression size) 2 (
         \t 'mov \t (.expression src) \[ '%rbp \] , \s '%r15w \n
         \t 'mov \s '%r15w , \s 0 \[ '% (.expression dst) \] \n
      ))
      (if-eq (.expression size) 4 (
         \t 'mov \t (.expression src) \[ '%rbp \] , \s '%r15d \n
         \t 'mov \s '%r15d , \s 0 \[ '% (.expression dst) \] \n
      ))
      (if-eq (.expression size) 8 (
         \t 'mov \t (.expression src) \[ '%rbp \] , \s '%r15 \n
         \t 'mov \s '%r15 , \s 0 \[ '% (.expression dst) \] \n
      ))
      (if-eq 1 (>( (.expression size) 8 )) (
         (for word-offset in (range( 0 (/( (.expression size) 8 )) )) (
            \t 'mov \t (+( (.expression src) (*( 8 (.expression word-offset) )) )) \[ '%rbp \] , \s '%r15 \n
            \t 'mov \s '%r15 , \s (*( 8 (.expression word-offset) )) \[ '% (.expression dst) \] \n
         ))
      ))
   ))
) Nil);

fragment : DontChain [] := λ(: l GlobalVariable+Array<x,?>)(: r GlobalVariable+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '$ (.expression r) , \s '%r14 \n
      \t 'mov \s '0 \[ '%r14 \] , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);
fragment : DontChain [] := λ(: l GlobalVariable+Array<x,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);
fragment : DontChain [] := λ(: l GlobalVariable+Array<x,?>)(: r Constant+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '$ (.expression r) , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain > := λ(: l GlobalVariable+U64)(: r Constant+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'ja ))
) BranchConditional);
fragment : DontChain > := λ(: l LocalVariable+U64)(: r Constant+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'ja ))
) BranchConditional);

fragment : DontChain > := λ(: l LocalVariable+U64)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'cmp \s '%r14 , '%r15 \n
   ))
   (.expression( 'ja ))
) BranchConditional);

fragment : DontChain > := λ(: l LocalVariable+I64)(: r LocalVariable+I64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'cmp \s '%r14 , '%r15 \n
   ))
   (.expression( 'jg ))
) BranchConditional);

fragment : DontChain > := λ(: l GlobalVariable+I64)(: r Constant+I64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'jg ))
) BranchConditional);
fragment : DontChain > := λ(: l LocalVariable+I64)(: r Constant+I64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'jg ))
) BranchConditional);

fragment : DontChain << := λ(: l U64+LocalVariable)(: r U64+Constant+Literal). (: (
   (.program(
      \t 'mov \s (.expression l) \[ '%rbp \] , '%rax \n
      \t 'shl \s '$ (.expression r) , '%rax \n
   ))
   (.expression 'rax)
) U64+Reg64);

fragment : DontChain >> := λ(: l U64+LocalVariable)(: r U64+Constant+Literal). (: (
   (.program(
      \t 'mov \s (.expression l) \[ '%rbp \] , '%rax \n
      \t 'shr \s '$ (.expression r) , '%rax \n
   ))
   (.expression 'rax)
) U64+Reg64);

fragment : DontChain branchtrue := λ(: _ Nil). (: (
   (.expression( 'jmp ))
) BranchConditional);
fragment : DontChain branchfalse := λ(: _ Nil). (: (
   (.program( \t 'cmp \s '%rsp, \s '%rsp \n ))
   (.expression( 'jne ))
) BranchConditional);

fragment : DontChain as-branch-conditional := λ(: l Reg64). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);
fragment : DontChain as-branch-conditional := λ(: l Reg32). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);
fragment : DontChain as-branch-conditional := λ(: l Reg16). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);
fragment : DontChain as-branch-conditional := λ(: l Reg8). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);

fragment : DontChain primitive::if := λ(: ictx ImplicitContext)(: e1 BranchConditional)(: e2 ?)(: e3 ?). (: (
   (.program (
      \t 'push \s '%rbp \n
      (.frame e1)
      (.program e1)
      \t (.expression e1) \s (uuid label-true-branch) \n
      (.frame e3)
      (.program e3)
      (.unframe e3)
      \t 'jmp \s (uuid label-end) \n
      (uuid label-true-branch) ': \n
      (.frame e2)
      (.program e2)
      (uuid label-end) ': \n
      (if-eq (.return-size ictx) 1 (\t 'pop \s '%rax \n))
      (if-eq (.return-size ictx) 2 (\t 'pop \s '%rax \n))
      (if-eq (.return-size ictx) 4 (\t 'pop \s '%rax \n))
      (if-eq (.return-size ictx) 8 (\t 'pop \s '%rax \n))
      \t 'mov \s (.rsp-offset ictx) \[ '%rbp \] , '%rsp \n
      \t 'add \s '$ (.end-offset ictx) ', \s '%rsp \n
   ))
   (.unframe(
      (.unframe e1)
      (.unframe e2)
      \t 'add \s '$8 , \s '%rsp \n
   ))
   (.expression 'rax)
) Nil);

fragment : DontChain primitive::while := λ(: ictx ImplicitContext)(: e1 BranchConditional)(: e2 ?). (: (
   (.program(
      (uuid label-begin-loop) ': \n
      (.frame e1)
      (.program e1)
      \t (.expression e1) \s (uuid label-do-loop) \n
      \t 'jmp \s (uuid label-end-loop) \n
      (uuid label-do-loop) ': \n
      (.frame e2)
      (.program e2)
      (.unframe e2)
      (.unframe e1)
      \t 'jmp \s (uuid label-begin-loop) \n
      (uuid label-end-loop) ': \n
      (.unframe e1)
   ))
) Nil);

fragment : DontChain cdecl::call := λ(: ictx ImplicitContext)(: args ?). (: (
   (.program(
      \o 'call \s 'function \s (.function-name ictx) \s ': \s (.function-type ictx) \n
      \t 'push \s '%rbp \n
      \t 'mov \s '%rsp , \s '%rbp \n
      (.program args)
      \t 'call \s (.function-id ictx) \n
      \t 'mov \s '%rbp , \s '%rsp \n
      \t 'pop \s '%rbp \n
      (if-eq '1 (>( (.return-size ictx) '8 )) (
      (if-eq Used (.used ictx) (
         (for rsi in (range( '0 (/( (.return-size ictx) '8 )) )) (
            \t 'push \s (-( '-24 (.args-size ictx) )) \[ '%rsp \] \n
         ))
      ))))
   ))
   (.expression(
      (if-eq (.return-size ictx) 1 'al)
      (if-eq (.return-size ictx) 2 'ax)
      (if-eq (.return-size ictx) 4 'eax)
      (if-eq (.return-size ictx) 8 'rax)
   ))
) Nil);
