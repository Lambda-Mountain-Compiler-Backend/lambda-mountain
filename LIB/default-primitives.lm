
import LIB/default-u8.lm;
import LIB/default-u16.lm;
import LIB/default-u32.lm;
import LIB/default-u64.lm;
import LIB/default-i8.lm;
import LIB/default-i16.lm;
import LIB/default-i32.lm;
import LIB/default-i64.lm;
import LIB/default-string.lm;

[] := λ: Blob(: l LocalVariable+Array<x+Sized<1>,?>)(: r LocalVariable+U64). (: (
   (:program (
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tmov\s_l (:expression r) '\[%RBP\],\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15B\n_l
   ))
   (:expression( 'R15B_l ))
) x+Reg8);
[] := λ: Blob(: l LocalVariable+Array<x+Sized<2>,?>)(: r LocalVariable+U64). (: (
   (:program (
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tmov\s_l (:expression r) '\[%RBP\],\s%R14\n_l
      '\tshl\s$1,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15W\n_l
   ))
   (:expression( 'R15W_l ))
) x+Reg16);
[] := λ: Blob(: l LocalVariable+Array<x+Sized<4>,?>)(: r LocalVariable+U64). (: (
   (:program (
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tmov\s_l (:expression r) '\[%RBP\],\s%R14\n_l
      '\tshl\s$2,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15D\n_l
   ))
   (:expression( 'R15D_l ))
) x+Reg32);
[] := λ: Blob(: l LocalVariable+Array<x+Sized<8>,?>)(: r LocalVariable+U64). (: (
   (:program (
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tmov\s_l (:expression r) '\[%RBP\],\s%R14\n_l
      '\tshl\s$3,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15\n_l
   ))
   (:expression( 'R15_l ))
) x+Reg64);

[] := λ: Blob(: l LocalVariable+Array<x+Sized<8>,?>)(: r Constant+U64). (: (
   (:program (
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tadd\s$_l (*( 8_l (:expression r) )) ',\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15\n_l
   ))
   (:expression( 'R15_l ))
) x+Reg64);

[] := λ: Blob(: l LocalVariable+Array<x+Sized<8>,?>)(: r GlobalVariable+U64). (: (
   (:program (
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tmov\s$_l (:expression r) ',\s%R15\n_l
      '\tmov\s0\[%R14\],\s%R14\n_l
      '\tshl\s$3,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15\n_l
   ))
   (:expression( 'R15_l ))
) x+Reg64);

[] := λ: Blob(: l LocalVariable+Field<x+Sized<8>,?>)(: r LocalVariable+U64). (: (
   (:program (
      '\tmov\s%RBP,\s%R15\n_l
      '\tadd\s$_l (:expression l) ',\s%R15\n_l
      '\tmov\s_l (:expression r) '\[%RBP\],\s%R14\n_l
      '\tshl\s$3,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15\n_l
   ))
   (:expression( 'R15_l ))
) x+Reg64);

set[] := λ: Blob(: l LocalVariable+Array<Field<Sized<8>,?>,?>)(: i Literal+Constant+U64)(: v Reg64). (: (
   (:program (
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tmov\s%_l (:expression v) ',\s_l (*( 8_l (:expression i) )) '\[%R15\]\n_l
   ))
) Nil);

set[] := λ: Blob(: l LocalVariable+Array<Sized<8>,?>)(: i Literal+Constant+U64)(: v LocalVariable+Sized<8>). (: (
   (:program (
      '\tmov\s_l (:expression v) '\[%RBP\],\s%R14\n_l
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tmov\s%R14,\s_l (*( 8_l (:expression i) )) '\[%R15\]\n_l
   ))
) Nil);
set[] := λ: Blob(: l Reg64+Array<Sized<8>,?>)(: i Literal+Constant+U64)(: v LocalVariable+Sized<8>). (: (
   (:program (
      '\tmov\s%_l (:expression l) ',\s%R15\n_l
      '\tmov\s_l (:expression v) '\[%RBP\],\s%R14\n_l
      '\tmov\s%R14,\s_l (*( 8_l (:expression i) )) '\[%R15\]\n_l
   ))
) Nil);
set[] := λ: Blob(: l LocalVariable+Array<Sized<1>,?>)(: i LocalVariable+U64)(: v Reg8+Sized<1>). (: (
   (:program (
      '\tmov\s%_l (:expression v) ',\s%R14B\n_l
      '\tmov\s_l (:expression i) '\[%RBP\],\s%R13\n_l
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tadd\s%R13,\s%R15\n_l
      '\tmov\s%R14B,\s0\[%R15\]\n_l
   ))
) Nil);
set[] := λ: Blob(: l LocalVariable+Array<Sized<1>,?>)(: i LocalVariable+U64)(: v Literal+Constant+Sized<1>). (: (
   (:program (
      '\tmov\s_l (:expression i) '\[%RBP\],\s%R13\n_l
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tadd\s%R13,\s%R15\n_l
      '\tmovb\s$_l (:expression v) ',\s0\[%R15\]\n_l
   ))
) Nil);
set[] := λ: Blob(: l LocalVariable+Array<Sized<1>,?>)(: i LocalVariable+U64)(: v LocalVariable+Sized<1>). (: (
   (:program (
      '\tmov\s_l (:expression v) '\[%RBP\],\s%R14B\n_l
      '\tmov\s_l (:expression i) '\[%RBP\],\s%R13\n_l
      '\tmov\s_l (:expression l) '\[%RBP\],\s%R15\n_l
      '\tadd\s%R13,\s%R15\n_l
      '\tmovb\s%R14B,\s0\[%R15\]\n_l
   ))
) Nil);

set[] := λ: Blob(: dst Reg64+Array<Sized<size>,?>)(: src LocalVariable+Sized<size>). (: (
   (:frame (:frame dst))
   (:unframe (:unframe dst))
   (:program (
      (:program dst)
      (if (==( (: size L) 1_l )) (
         '\tmov\t_l (:expression src) '\[%RBP\],\s%R15B\n_l
         '\tmov\s%R15B,\s0\[%_l (:expression dst) '\]\n_l
      ) ())
      (if (==( (: size L) 2_l )) (
         '\tmov\t_l (:expression src) '\[%RBP\],\s%R15W\n_l
         '\tmov\s%R15W,\s0\[%_l (:expression dst) '\]\n_l
      ) ())
      (if (==( (: size L) 4_l )) (
         '\tmov\t_l (:expression src) '\[%RBP\],\s%R15D\n_l
         '\tmov\s%R15D,\s0\[%_l (:expression dst) '\]\n_l
      ) ())
      (if (==( (: size L) 8_l )) (
         '\tmov\t_l (:expression src) '\[%RBP\],\s%R15\n_l
         '\tmov\s%R15,\s0\[%_l (:expression dst) '\]\n_l
      ) ())
      (if (>( (: size L) 8_l )) (
         (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
            '\tmov\t_l (+( (:expression src) (*( 8_l (:expression word-offset) )) )) '\[%RBP\],\s%R15\n_l
            '\tmov\s%R15,\s_l (*( 8_l (:expression word-offset) )) '\[%_l (:expression dst) '\]\n_l
         ))
      ) ())
   ))
) Nil);

[] := λ: Blob(: l GlobalVariable+Array<x,?>)(: r GlobalVariable+U64). (: (
   (:program (
      '\tmov\s$_l (:expression l) ',\s%R15\n_l
      '\tmov\s$_l (:expression r) ',\s%R14\n_l
      '\tmov\s0\[%R14\],\s%R14\n_l
      '\tshl\s$3,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15\n_l
   ))
   (:expression( 'R15_l ))
) x+Reg64);
[] := λ: Blob(: l GlobalVariable+Array<x,?>)(: r LocalVariable+U64). (: (
   (:program (
      '\tmov\s$_l (:expression l) ',\s%R15\n_l
      '\tmov\s_l (:expression r) '\[%RBP\],\s%R14\n_l
      '\tshl\s$3,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15\n_l
   ))
   (:expression( 'R15_l ))
) x+Reg64);
[] := λ: Blob(: l GlobalVariable+Array<x,?>)(: r Constant+U64). (: (
   (:program (
      '\tmov\s$_l (:expression l) ',\s%R15\n_l
      '\tmov\s$_l (:expression r) ',\s%R14\n_l
      '\tshl\s$3,\s%R14\n_l
      '\tadd\s%R14,\s%R15\n_l
      '\tmov\s0\[%R15\],\s%R15\n_l
   ))
   (:expression( 'R15_l ))
) x+Reg64);

<< := λ: Blob(: l U64+LocalVariable)(: r U64+Constant+Literal). (: (
   (:program(
      '\tmov\s_l (:expression l) '\[%RBP\],%RAX\n_l
      '\tshl\s$_l (:expression r) ',%RAX\n_l
   ))
   (:expression 'RAX_l)
) U64+Reg64);

>> := λ: Blob(: l U64+LocalVariable)(: r U64+Constant+Literal). (: (
   (:program(
      '\tmov\s_l (:expression l) '\[%RBP\],%RAX\n_l
      '\tshr\s$_l (:expression r) ',%RAX\n_l
   ))
   (:expression 'RAX_l)
) U64+Reg64);

branchtrue := λ: Blob(: _ Nil). (: (
   (:expression( 'jmp_l ))
) BranchConditional);
branchfalse := λ: Blob(: _ Nil). (: (
   (:program( '\tcmp\s%RSP,\s%RSP\n_l ))
   (:expression( 'jne_l ))
) BranchConditional);

into-branch-conditional := λ: Blob(: l BranchConditional+Meta<ImpureOffset>). (: (
   (:program (:program l))
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:expression( (:expression l) ))
) BranchConditional);
into-branch-conditional := λ: Blob(: l Reg64+Meta<ImpureOffset>). (: (
   (:program (
      (:program l)
      '\tcmp\s$0,\s%_l (:expression l) '\n_l
   ))
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:expression( 'jne_l ))
) BranchConditional);
into-branch-conditional := λ: Blob(: l Reg32+Meta<ImpureOffset>). (: (
   (:program (
      (:program l)
      '\tcmp\s$0,\s%_l (:expression l) '\n_l
   ))
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:expression( 'jne_l ))
) BranchConditional);
into-branch-conditional := λ: Blob(: l Reg16+Meta<ImpureOffset>). (: (
   (:program (
      (:program l)
      '\tcmp\s$0,\s%_l (:expression l) '\n_l
   ))
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:expression( 'jne_l ))
) BranchConditional);
into-branch-conditional := λ: Blob(: l Reg8+Meta<ImpureOffset>). (: (
   (:program (
      (:program l)
      '\tcmp\s$0,\s%_l (:expression l) '\n_l
   ))
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:expression( 'jne_l ))
) BranchConditional);

fragment  primitive::if := λ: DontChain(: ictx ImplicitContext)(: e1 BranchConditional)(: e2 ?)(: e3 ?). (: (
   (.program (
      \t 'push \s '%RBP \n
      (.frame e1)
      (.program e1)
      \t (.expression e1) \s (uuid label-true-branch) \n
      (.frame e2)
      (.frame e3)
      (.program e3)
      (.del e3)
      (if-eq (>( (.return-size ictx) 8 )) 1 (
         \t 'mov \s '%RSP , \s '%R14 \n
         (.unframe e3)
         (for ri in (range( 0 (/( (.return-size ictx) 8 )) )) (
            \t 'movq \s (-( (-( (.return-size ictx) 8 )) (*( (.expression ri) '8 )) )) \[ '%R14 \] , \s '%R15 \n
            \t 'movq \s '%R15 , \s (-( (-( (.return-size ictx) 8 )) (*( (.expression ri) '8 )) )) \[ '%RSP \] \n
         ))
      ))
      \t 'jmp \s (uuid label-end) \n
      (uuid label-true-branch) ': \n
      (.frame e2)
      (.program e2)
      (uuid label-end) ': \n
      (if-eq (.return-size ictx) 1 (\t 'pop \s '%RAX \n))
      (if-eq (.return-size ictx) 2 (\t 'pop \s '%RAX \n))
      (if-eq (.return-size ictx) 4 (\t 'pop \s '%RAX \n))
      (if-eq (.return-size ictx) 8 (\t 'pop \s '%RAX \n))
      \t 'mov \s (.rsp-offset ictx) \[ '%RBP \] , '%RSP \n
      \t 'add \s '$ (.end-offset ictx) ', \s '%RSP \n
   ))
   (.del(
      (.del e1)
      (.del e2)
   ))
   (.unframe(
      (.unframe e1)
      (.unframe e2)
      \t 'add \s '$8 , \s '%RSP \n
   ))
   (.expression(
      (if-eq (.return-size ictx) 1 'AL)
      (if-eq (.return-size ictx) 2 'AX)
      (if-eq (.return-size ictx) 4 'EAX)
      (if-eq (.return-size ictx) 8 'RAX)
   ))
) Nil);

dev-primitive::if := λ: Blob(: ictx ImplicitContext)(: f Meta<Any>)(: t Meta<Any>)(: c BranchConditional). (: (
   (:program (
      (let label-true-branch (uuid '_l))
      (let label-true-end (uuid '_l))
      (let label-end (uuid '_l))
      '\tpush\s%RBP\n_l
      (:frame c)
      (:program c)
      '\t_l (:expression c) '\s_l (:expression label-true-branch) '\n_l
      (:frame t)
      (:frame f)
      (:program f)
      (:del f)
      (if (>( (:return-size ictx) 8_l )) (
         '\tmov\s%RSP,\s%R14\n_l
         (:unframe f)
         (for-atom (ri in (range( 0_l (/( (:return-size ictx) 8_l )) ))) (
            '\tmovq\s_l (-( (-( (:return-size ictx) 8_l )) (*( (:expression ri) 8_l )) )) '\[%R14\],\s%R15\n_l
            '\tmovq\s%R15,\s_l (-( (-( (:return-size ictx) 8_l )) (*( (:expression ri) 8_l )) )) '\[%RSP\]\n_l
         ))
      ) ())
      '\tjmp\s_l (:expression label-end) '\n_l
      (:expression label-true-branch) ':\n_l
      (:frame t)
      (:program t)
      (:expression label-end) ':\n_l
      (if (==( (:return-size ictx) 1_l )) '\tpop\s%RAX\n_l ())
      (if (==( (:return-size ictx) 2_l )) '\tpop\s%RAX\n_l ())
      (if (==( (:return-size ictx) 4_l )) '\tpop\s%RAX\n_l ())
      (if (==( (:return-size ictx) 8_l )) '\tpop\s%RAX\n_l ())
      '\tmov\s_l (:rsp-offset ictx) '\[%RBP\],%RSP\n_l
      '\tadd\s$_l (:end-offset ictx) ',\s%RSP\n_l
   ))
   (:del( (:del c) (:del t) ))
   (:unframe(
      (:unframe c)
      (:unframe t)
      '\tadd\s$8,\s%RSP\n_l
   ))
   (:expression(
      (if (==( (:return-size ictx) 1_l )) 'AL_l ())
      (if (==( (:return-size ictx) 2_l )) 'AX_l ())
      (if (==( (:return-size ictx) 4_l )) 'EAX_l ())
      (if (==( (:return-size ictx) 8_l )) 'RAX_l ())
   ))
) Nil);

primitive::while := λ: Blob(: body Meta<Any>)(: cond BranchConditional). (: (
   (:program(
      (let label-begin-loop (uuid '_l))
      (let label-do-loop (uuid '_l))
      (let label-end-loop (uuid '_l))
      (:expression label-begin-loop) ':\n_l
      (:frame cond)
      (:program cond)
      '\t_l (:expression cond) '\s_l (:expression label-do-loop) '\n_l
      '\tjmp\s_l (:expression label-end-loop) '\n_l
      (:expression label-do-loop) ':\n_l
      (:frame body)
      (:program body)
      (:del body)
      (:unframe body)
      (:unframe cond)
      '\tjmp\s_l (:expression label-begin-loop) '\n_l
      (:expression label-end-loop) ':\n_l
      (:unframe cond)
   ))
) Nil);

primitive::call := λ: Blob(: ictx ImplicitContext)(: args Meta<Any>). (: (
   (:program(
      '\ocall\sfunction\s_l (:function-name ictx) '\s:\s_l (:function-type ictx) '\n_l
      '\tpush\s%RBX\n_l
      '\tpush\s%RBP\n_l
      '\tmov\s%RSP,\s%RBX\n_l
      (:program args)
      '\tmov\s%RBX,\s%RBP\n_l
      '\tcall\s_l (:function-id ictx) '\n_l
      '\tmov\s%RBP,\s%RSP\n_l
      '\tpop\s%RBP\n_l
      '\tpop\s%RBX\n_l
      (if (>( (:return-size ictx) 8_l )) (
         (if (==( Used_l (:used ictx) )) (
            '\oYesIsUsed\s_l (:used ictx) (:return-size ictx) '\n_l
            (for-atom (rsi in (range( 0_l (/( (:return-size ictx) 8_l )) ))) (
               '\tpush\s_l (-( -32_l (:args-size ictx) )) '\[%RSP\]\n_l
            ))
         ) ())
      ) ())
   ))
   (:expression(
      (if (==( (:return-size ictx) 1_l )) 'AL_l ())
      (if (==( (:return-size ictx) 2_l )) 'AX_l ())
      (if (==( (:return-size ictx) 4_l )) 'EAX_l ())
      (if (==( (:return-size ictx) 8_l )) 'RAX_l ())
   ))
) Nil);
