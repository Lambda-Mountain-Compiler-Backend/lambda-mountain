
fragment type U8;     size U8 1;     atom suffix U8     _u8;
fragment type U16;    size U16 2;    atom suffix U16    _u16;
fragment type U32;    size U32 4;    atom suffix U32    _u32;
fragment type U64;    size U64 8;    atom suffix U64    _u64;
fragment type I8;     size I8 1;     atom suffix I8     _i8;
fragment type I16;    size I16 2;    atom suffix I16    _i16;
fragment type I32;    size I32 4;    atom suffix I32    _i32;
fragment type I64;    size I64 8;    atom suffix I64    _i64;
fragment type ASCII;  size ASCII 1;  atom suffix ASCII  _c;
fragment type String; size String 8; atom suffix String _s;

fragment : DontChain [] := λ(: l LocalVariable+Array<x+Sized<1>,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15b \n
   ))
   (.expression( 'r15b ))
) x+Reg8);

fragment : DontChain [] := λ(: l LocalVariable+Array<x+Sized<8>,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'shl \s '$3, '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain [] := λ(: l LocalVariable+Field<x+Sized<8>,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s '%rbp , \s '%r15 \n
      \t 'add \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'shl \s '$3, '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain [] := λ(: l LocalVariable+Array<x,?>)(: r GlobalVariable+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '$ (.expression r) , \s '%r14 \n
      \t 'mov \s '0 \[ '%r14 \] , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain set[] := λ(: l LocalVariable+Array<Field<Sized<8>,?>,?>)(: i Literal+Constant+U64)(: v Reg64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s '% (.expression v) , \s (*( '8 (.expression i) )) \[ '%r15 \] \n
   ))
) Nil);

fragment : DontChain [] := λ(: l GlobalVariable+Array<x,?>)(: r GlobalVariable+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '$ (.expression r) , \s '%r14 \n
      \t 'mov \s '0 \[ '%r14 \] , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);
fragment : DontChain [] := λ(: l GlobalVariable+Array<x,?>)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);
fragment : DontChain [] := λ(: l GlobalVariable+Array<x,?>)(: r Constant+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '$ (.expression r) , \s '%r14 \n
      \t 'shl \s '$3 , \s '%r14 \n
      \t 'add \s '%r14 , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
   ))
   (.expression( 'r15 ))
) x+Reg64);

fragment : DontChain > := λ(: l GlobalVariable+U64)(: r Constant+U64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'ja ))
) BranchConditional);
fragment : DontChain > := λ(: l LocalVariable+U64)(: r Constant+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'ja ))
) BranchConditional);

fragment : DontChain > := λ(: l LocalVariable+U64)(: r LocalVariable+U64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'cmp \s '%r14 , '%r15 \n
   ))
   (.expression( 'ja ))
) BranchConditional);

fragment : DontChain > := λ(: l LocalVariable+I64)(: r LocalVariable+I64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression r) \[ '%rbp \] , \s '%r14 \n
      \t 'cmp \s '%r14 , '%r15 \n
   ))
   (.expression( 'jg ))
) BranchConditional);

fragment : DontChain > := λ(: l GlobalVariable+I64)(: r Constant+I64). (: (
   (.program (
      \t 'mov \s '$ (.expression l) , \s '%r15 \n
      \t 'mov \s '0 \[ '%r15 \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'jg ))
) BranchConditional);
fragment : DontChain > := λ(: l LocalVariable+I64)(: r Constant+I64). (: (
   (.program (
      \t 'mov \s (.expression l) \[ '%rbp \] , \s '%r15 \n
      \t 'cmp \s '$ (.expression r) , '%r15 \n
   ))
   (.expression( 'jg ))
) BranchConditional);

fragment : DontChain << := λ(: l U64+LocalVariable)(: r U64+Constant+Literal). (: (
   (.program(
      \t 'mov \s (.expression l) \[ '%rbp \] , '%rax \n
      \t 'shl \s '$ (.expression r) , '%rax \n
   ))
   (.expression 'rax)
) U64+Reg64);

fragment : DontChain >> := λ(: l U64+LocalVariable)(: r U64+Constant+Literal). (: (
   (.program(
      \t 'mov \s (.expression l) \[ '%rbp \] , '%rax \n
      \t 'shr \s '$ (.expression r) , '%rax \n
   ))
   (.expression 'rax)
) U64+Reg64);

fragment : DontChain branchtrue := λ(: _ Nil). (: (
   (.expression( 'jmp ))
) BranchConditional);
fragment : DontChain branchfalse := λ(: _ Nil). (: (
   (.program( \t 'cmp \s '%rsp, \s '%rsp \n ))
   (.expression( 'jne ))
) BranchConditional);

fragment : DontChain non-zero := λ(: l Reg64+U64). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);
fragment : DontChain non-zero := λ(: l Reg32+U32). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);
fragment : DontChain non-zero := λ(: l Reg16+U16). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);
fragment : DontChain non-zero := λ(: l Reg8+U8). (: (
   (.program (
      \t 'cmp \s '$0 , \s '% (.expression l) \n
   ))
   (.expression( 'jne ))
) BranchConditional);
fragment : DontChain non-zero := λ(: l BranchConditional). (: (
   (.expression( (.expression l) ))
) BranchConditional);
