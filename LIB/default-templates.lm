
fragment template::push := λ(: src Sized<size>). (: (
   (.program(
      (for wsz in (range( '0 (/( (-( (-( (.expression return-size) (.expression size) )) '8 )) '8 )) )) (
         \t 'pushq \s '$0 \n
      ))
      (.program src)
      \t 'pushq \s '$ 'case-number \n
   ))
) Sized<return-size>);

fragment template::mov := λ(: src Sized<size>)(: dst LocalVariable). (: (
   (.program(
      (.program src)
      (for index in (range( 0 (/( (.expression size) '8 )) )) (
         \t 'popq \s (+( (.expression dst) (*( '8 (.expression index) )) )) \[ '%rbp \] \n
      ))
   ))
) Nil);

fragment template::mov := λ(: src Sized<size>)(: dst GlobalVariable). (: (
   (.program(
      (.program src)
      \t 'movq \s '$ (.expression dst) , \s '%r15 \n
      (for index in (range( 0 (/( (.expression size) '8 )) )) (
         \t 'popq \s (*( '8 (.expression index) )) \[ '%r15 \] \n
      ))
   ))
) Nil);

fragment .1 := λ(: src LocalVariable+Fields<Cons<_,f1+Sized<1>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression src) 8 )) \[ '%rbp \] , \s '%al \n
   ))
   (.expression( 'al ))
) f1+Reg8);

fragment .1 := λ(: src LocalVariable+Fields<Cons<_,f1+Sized<2>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression src) 8 )) \[ '%rbp \] , \s '%ax \n
   ))
   (.expression( 'ax ))
) f1+Reg16);

fragment .1 := λ(: src LocalVariable+Fields<Cons<_,f1+Sized<4>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression src) 8 )) \[ '%rbp \] , \s '%eax \n
   ))
   (.expression( 'eax ))
) f1+Reg32);

fragment .1 := λ(: src LocalVariable+Fields<Cons<_,f1+Sized<8>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression src) 8 )) \[ '%rbp \] , \s '%rax \n
   ))
   (.expression( 'rax ))
) f1+Reg64);

fragment .1 := λ(: src LocalVariable+Fields<Cons<_,f1+Sized<size1+GT<8>>>>). (: (
   (.program(
      (for index in (range( 0 (/( (.expression size1) '8 )) )) (
         # + 8 (head tag) - 8 (index overbite) = 0
         (let word-offset (-( (+( (.expression src) (.expression size1) )) (*( (.expression index) '8 )) )) )
         \t 'pushq \s (.expression word-offset) \[ '%rbp \] \n
      ))
   ))
) f1+StackVariable);

#fragment .2 := λ(: src LocalVariable+Fields<Cons<Cons<_,f2+Sized<1>>,Sized<size1>>>). (: (
#   (.program(
#      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
#      \t 'mov \s (+( (.expression base-offset) 8 )) \[ '%rbp \] , \s '%al \n
#   ))
#   (.expression( 'al ))
#) f2+Reg8);

#fragment .2 := λ(: src LocalVariable+Fields<Cons<Cons<_,f2+Sized<2>>,Sized<size1>>>). (: (
#   (.program(
#      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
#      \t 'mov \s (+( (.expression base-offset) 8 )) \[ '%rbp \] , \s '%ax \n
#   ))
#   (.expression( 'ax ))
#) f2+Reg16);

#fragment .2 := λ(: src LocalVariable+Fields<Cons<Cons<_,f2+Sized<4>>,Sized<size1>>>). (: (
#   (.program(
#      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
#      \t 'mov \s (+( (.expression base-offset) 8 )) \[ '%rbp \] , \s '%eax \n
#   ))
#   (.expression( 'eax ))
#) f2+Reg32);

#fragment .2 := λ(: src LocalVariable+Fields<Cons<Cons<_,f2+Sized<8>>,Sized<size1>>>). (: (
#   (.program(
#      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
#      \t 'mov \s (+( (.expression base-offset) 8 )) \[ '%rbp \] , \s '%rax \n
#   ))
#   (.expression( 'rax ))
#) f2+Reg64);

#fragment .2 := λ(: src LocalVariable+Fields<Cons<Cons<_,f2+Sized<size2+GT<8>>>,Sized<size1>>>). (: (
#   (.program(
#      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
#      (for index in (range( 0 (/( (.expression size1) '8 )) )) (
#         # + 8 (head tag) - 8 (index overbite) = 0
#         (let word-offset (-( (+( (.expression base-offset) (.expression size2) )) (*( (.expression index) '8 )) )) )
#         \t 'pushq \s (.expression word-offset) \[ '%rbp \] \n
#      ))
#   ))
#) f2+StackVariable);
