
import LIB/default-templates-stackvariable.lm;

fragment  template::push := λ: DontChain(: src Constructor<tag>+Sized<struct-size>+FieldsSized<fields-size>). (: (
   (.program(
      (for wsz in (range( '0 (/( (-( (-( (.expression struct-size) (.expression fields-size) )) '8 )) '8 )) )) (
         \t 'pushq \s '$0 \n
      ))
      (.program src)
      \t 'pushq \s '$ 'case-number \n
   ))
) StackVariable);

fragment  template::mov := λ: DontChain(: src Constructor<tag>+Sized<struct-size>+FieldsSized<fields-size>)(: dst LocalVariable). (: (
   (.program(
      (for wsz in (range( '0 (/( (-( (-( (.expression struct-size) (.expression fields-size) )) '8 )) '8 )) )) (
         \t 'pushq \s '$0 \n
      ))
      (.program src)
      \t 'pushq \s '$ 'case-number \n
      (for index in (range( 0 (/( (.expression struct-size) '8 )) )) (
         \t 'popq \s (+( (.expression dst) (*( '8 (.expression index) )) )) \[ '%RBP \] \n
      ))
   ))
) Nil);

fragment  template::mov := λ: DontChain(: src Constructor<tag>+Sized<struct-size>+FieldsSized<fields-size>)(: dst GlobalVariable). (: (
   (.program(
      (for wsz in (range( '0 (/( (-( (-( (.expression struct-size) (.expression fields-size) )) '8 )) '8 )) )) (
         \t 'pushq \s '$0 \n
      ))
      (.program src)
      \t 'pushq \s '$ 'case-number \n
      \t 'movq \s '$ (.expression dst) , \s '%R15 \n
      (for index in (range( 0 (/( (.expression struct-size) '8 )) )) (
         \t 'popq \s (*( '8 (.expression index) )) \[ '%R15 \] \n
      ))
   ))
) Nil);

.0 := λ: Blob(: src Constant). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) U64+Reg64);

.0 := λ: Blob(: src LocalVariable). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) U64+Reg64);

.0 := λ: Blob(: src GlobalVariable). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) U64+Reg64);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AL_s )
) f0+Reg8);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AX_s )
) f0+Reg16);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'EAX_s )
) f0+Reg32);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) f0+Reg64);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      (for-atom (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression src) (:expression size0) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%RBP\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AL_s )
) f0+Reg8);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AX_s )
) f0+Reg16);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'EAX_s )
) f0+Reg32);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) f0+Reg64);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      (for-atom (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression src) (:expression size0) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%RBP\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<1>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_l ))
) f1+Reg8);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<2>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f1+Reg16);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<4>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f1+Reg32);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<8>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f1+Reg64);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<size1+GT<8>>>,Sized<size0>>>). (: (
   (:program(
      (for-atom (index in (range( 0_l (/( (: size1 L) 8_l )) ))) (
         (let word-offset (-( (+( (-( (+( (:expression src) (: size1 L) )) (*( (:expression index) 8_l )) )) (align(: size0 L)) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%RBP\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f1+StackVariable);

fragment  .2 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<1>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f2+Reg8);

fragment  .2 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f2+Reg16);

fragment  .2 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<4>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f2+Reg32);

fragment  .2 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<8>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f2+Reg64);

fragment  .2 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<size2+GT<8>>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (.expression src) (align( (.expression size1) )) )))
      (for index in (range( 0 (/( (.expression size2) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size2) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%RBP \] \n
      ))
   ))
) f2+StackVariable);

fragment  .3 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<1>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f3+Reg8);

fragment  .3 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<2>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f3+Reg16);

fragment  .3 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<4>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f3+Reg32);

fragment  .3 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<8>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f3+Reg64);

fragment  .3 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<size3+GT<8>>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      (for index in (range( 0 (/( (.expression size3) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size3) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%RBP \] \n
      ))
   ))
) f3+StackVariable);

fragment  .4 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<1>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f4+Reg8);

fragment  .4 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<2>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f4+Reg16);

fragment  .4 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f4+Reg32);

fragment  .4 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<8>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f4+Reg64);

fragment  .4 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<size4+GT<8>>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      (for index in (range( 0 (/( (.expression size4) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size4) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%RBP \] \n
      ))
   ))
) f4+StackVariable);

fragment  .5 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<1>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f5+Reg8);

fragment  .5 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<2>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f5+Reg16);

fragment  .5 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<4>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f5+Reg32);

fragment  .5 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<8>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f5+Reg64);

fragment  .5 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<size5+GT<8>>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      (for index in (range( 0 (/( (.expression size5) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size5) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%RBP \] \n
      ))
   ))
) f5+StackVariable);


fragment  .6 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<1>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )) (align( (.expression size5) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f6+Reg8);

fragment  .6 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<2>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )) (align( (.expression size5) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f6+Reg16);

fragment  .6 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<4>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )) (align( (.expression size5) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f6+Reg32);

fragment  .6 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<8>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )) (align( (.expression size5) )) )))
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%RBP \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f6+Reg64);

fragment  .6 := λ(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<size6+GT<8>>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( (+( (.expression src) (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )) (align( (.expression size5) )) )))
      (for index in (range( 0 (/( (.expression size6) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size6) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%RBP \] \n
      ))
   ))
) f6+StackVariable);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_s ))
) f0+Reg8);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_s ))
) f0+Reg16);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_s ))
) f0+Reg32);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_s ))
) f0+Reg64);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      (for (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (:expression size0) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%R15\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_s ))
) f0+Reg8);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_s ))
) f0+Reg16);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_s ))
) f0+Reg32);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_s ))
) f0+Reg64);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      (for (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (:expression size0) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%R15\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<1>>,Sized<size0>>>). (: (
   (.program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (.expression( 'AL_l ))
) f1+Reg8);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<2>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f1+Reg16);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<4>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f1+Reg32);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<8>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f1+Reg64);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<size1+GT<8>>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      (for-atom (index in (range( 0_l (/( (: size1 L) 8_l )) ))) (
         (let word-offset (-( (+( (-( (+( 0_l (: size1 L) )) (*( (:expression index) 8_l )) )) (align(: size0 L)) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%R15\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f1+StackVariable);

fragment  .2 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<1>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( '0 (align( (.expression size1) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f2+Reg8);

fragment  .2 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( '0 (align( (.expression size1) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f2+Reg16);

fragment  .2 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<4>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( '0 (align( (.expression size1) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f2+Reg32);

fragment  .2 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<8>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( '0 (align( (.expression size1) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f2+Reg64);

fragment  .2 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<size2+GT<8>>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( '0 (align( (.expression size1) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      (for index in (range( 0 (/( (.expression size2) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size2) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%R15 \] \n
      ))
   ))
) f2+StackVariable);

fragment  .3 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<1>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f3+Reg8);

fragment  .3 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<2>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f3+Reg16);

fragment  .3 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<4>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f3+Reg32);

fragment  .3 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<8>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f3+Reg64);

fragment  .3 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<size3+GT<8>>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      (for index in (range( 0 (/( (.expression size3) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size3) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%R15 \] \n
      ))
   ))
) f3+StackVariable);

fragment  .4 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<1>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f4+Reg8);

fragment  .4 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<2>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f4+Reg16);

fragment  .4 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f4+Reg32);

fragment  .4 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<8>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f4+Reg64);

fragment  .4 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<size4+GT<8>>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )))
      (for index in (range( 0 (/( (.expression size4) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size4) )) (*( (.expression index) '8 )) )) (align(.expression size0)) )) '8 )) )
         \t 'mov \s '$ (.expression src) , \s '%R15 \n
         \t 'pushq \s (.expression word-offset) \[ '%R15 \] \n
      ))
   ))
) f4+StackVariable);

fragment  .5 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<1>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AL \n
   ))
   (.expression( 'AL ))
) f5+Reg8);

fragment  .5 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<2>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%AX \n
   ))
   (.expression( 'AX ))
) f5+Reg16);

fragment  .5 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<4>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%EAX \n
   ))
   (.expression( 'EAX ))
) f5+Reg32);

fragment  .5 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<8>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      \t 'mov \s (+( (.expression base-offset) (.expression size0) )) \[ '%R15 \] , \s '%RAX \n
   ))
   (.expression( 'RAX ))
) f5+Reg64);

fragment  .5 := λ(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<size5+GT<8>>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (.program(
      (let base-offset (+( (+( (+( (+( '0 (align( (.expression size1) )) )) (align( (.expression size2) )) )) (align( (.expression size3) )) )) (align( (.expression size4) )) )))
      \t 'mov \s '$ (.expression src) , \s '%R15 \n
      (for index in (range( 0 (/( (.expression size5) '8 )) )) (
         (let word-offset (-( (+( (-( (+( (.expression base-offset) (.expression size5) )) (*( (.expression index) '8 )) )) (.expression size0) )) '8 )) )
         \t 'pushq \s (.expression word-offset) \[ '%R15 \] \n
      ))
   ))
) f5+StackVariable);
