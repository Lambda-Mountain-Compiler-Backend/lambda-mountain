
import LIB/default-templates-stackvariable.lm;

fragment  template::push := λ: DontChain(: src Constructor<tag>+Sized<struct-size>+FieldsSized<fields-size>). (: (
   (.program(
      (for wsz in (range( '0 (/( (-( (-( (.expression struct-size) (.expression fields-size) )) '8 )) '8 )) )) (
         \t 'pushq \s '$0 \n
      ))
      (.program src)
      \t 'pushq \s '$ 'case-number \n
   ))
) StackVariable);

fragment  template::mov := λ: DontChain(: src Constructor<tag>+Sized<struct-size>+FieldsSized<fields-size>)(: dst LocalVariable). (: (
   (.program(
      (for wsz in (range( '0 (/( (-( (-( (.expression struct-size) (.expression fields-size) )) '8 )) '8 )) )) (
         \t 'pushq \s '$0 \n
      ))
      (.program src)
      \t 'pushq \s '$ 'case-number \n
      (for index in (range( 0 (/( (.expression struct-size) '8 )) )) (
         \t 'popq \s (+( (.expression dst) (*( '8 (.expression index) )) )) \[ '%RBP \] \n
      ))
   ))
) Nil);

fragment  template::mov := λ: DontChain(: src Constructor<tag>+Sized<struct-size>+FieldsSized<fields-size>)(: dst GlobalVariable). (: (
   (.program(
      (for wsz in (range( '0 (/( (-( (-( (.expression struct-size) (.expression fields-size) )) '8 )) '8 )) )) (
         \t 'pushq \s '$0 \n
      ))
      (.program src)
      \t 'pushq \s '$ 'case-number \n
      \t 'movq \s '$ (.expression dst) , \s '%R15 \n
      (for index in (range( 0 (/( (.expression struct-size) '8 )) )) (
         \t 'popq \s (*( '8 (.expression index) )) \[ '%R15 \] \n
      ))
   ))
) Nil);

.0 := λ: Blob(: src Constant). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) U64+Reg64);

.0 := λ: Blob(: src LocalVariable). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) U64+Reg64);

.0 := λ: Blob(: src GlobalVariable). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) U64+Reg64);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AL_s )
) f0+Reg8);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AX_s )
) f0+Reg16);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'EAX_s )
) f0+Reg32);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) f0+Reg64);

.0 := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      (for-atom (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression src) (:expression size0) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%RBP\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AL_s )
) f0+Reg8);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'AX_s )
) f0+Reg16);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'EAX_s )
) f0+Reg32);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s_s (:expression src) '\[%RBP\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression 'RAX_s )
) f0+Reg64);

.tag := λ: Blob(: src LocalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      (for-atom (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression src) (:expression size0) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%RBP\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<1>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_l ))
) f1+Reg8);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<2>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f1+Reg16);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<4>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f1+Reg32);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<8>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s_l (+( (:expression src) (: size0 L) )) '\[%RBP\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f1+Reg64);

.1 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<_,f1+Sized<size1+GT<8>>>,Sized<size0>>>). (: (
   (:program(
      (for-atom (index in (range( 0_l (/( (: size1 L) 8_l )) ))) (
         (let word-offset (-( (+( (-( (+( (:expression src) (: size1 L) )) (*( (:expression index) 8_l )) )) (align(: size0 L)) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%RBP\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f1+StackVariable);

.2 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<1>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (:expression src) (align(: size0 L)) )) (align(: size1 L)) )))
      '\tmov\s_s (:expression base-offset) '\[%RBP\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_l ))
) f2+Reg8);

.2 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (:expression src) (align(: size0 L)) )) (align(: size1 L)) )))
      '\tmov\s_s (:expression base-offset) '\[%RBP\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f2+Reg16);

.2 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<4>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (:expression src) (align(: size0 L)) )) (align(: size1 L)) )))
      '\tmov\s_s (:expression base-offset) '\[%RBP\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f2+Reg32);

.2 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<8>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (:expression src) (align(: size0 L)) )) (align(: size1 L)) )))
      '\tmov\s_s (:expression base-offset) '\[%RBP\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f2+Reg64);

.2 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<size2+GT<8>>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (:expression src) (align(: size0 L)) )) (align(: size1 L)) )))
      (for-atom (index in (range( 0_l (/( (: size2 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size2 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%RBP\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f2+StackVariable);

.3 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<1>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_l ))
) f3+Reg8);

.3 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<2>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f3+Reg16);

.3 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<4>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f3+Reg32);

.3 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<8>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f3+Reg64);

.3 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<size3+GT<8>>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size0 L)) )))
      (for-atom (index in (range( 0_l (/( (: size3 L) 8_l ))) )) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size3 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%RBP\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f3+StackVariable);

.4 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<1>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_l ))
) f4+Reg8);

.4 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<2>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f4+Reg16);

.4 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f4+Reg32);

.4 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<8>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f4+Reg64);

.4 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<size4+GT<8>>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size0 L)) )))
      (for-atom (index in (range( 0_l (/( (: size4 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size4 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%RBP\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f4+StackVariable);

.5 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<1>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_s ))
) f5+Reg8);

.5 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<2>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_s ))
) f5+Reg16);

.5 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<4>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_s ))
) f5+Reg32);

.5 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<8>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_s ))
) f5+Reg64);

.5 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<size5+GT<8>>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size0 L)) )))
      (for-atom (index in (range( 0_l (/( (: size5 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size5 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%RBP\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f5+StackVariable);


.6 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<1>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size5 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_s ))
) f6+Reg8);

.6 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<2>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size5 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_s ))
) f6+Reg16);

.6 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<4>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size5 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_s ))
) f6+Reg32);

.6 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<8>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size5 L)) )) (align(: size0 L)) )))
      '\tmov\s_l (:expression base-offset) '\[%RBP\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_s ))
) f6+Reg64);

.6 := λ: Blob(: src LocalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<Cons<_,f6+Sized<size6+GT<8>>>,Sized<size5>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (+( (+( (:expression src) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )) (align(: size5 L)) )) (align(: size0 L)) )))
      (for-atom (index in (range( 0_l (/( (: size6 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size6 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%RBP\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f6+StackVariable);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_s ))
) f0+Reg8);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_s ))
) f0+Reg16);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_s ))
) f0+Reg32);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_s ))
) f0+Reg64);

.0 := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      (for (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (:expression size0) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%R15\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<1>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AL\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_s ))
) f0+Reg8);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<2>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%AX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_s ))
) f0+Reg16);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<4>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%EAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_s ))
) f0+Reg32);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      '\tmov\s0\[%R15\],\s%RAX\n_s
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_s ))
) f0+Reg64);

.tag := λ: Blob(: src GlobalVariable+Fields<Cons<_,f0+Sized<size0+GT<8>>>>). (: (
   (:program(
      '\tmov\s$_s (:expression src) ',\s%R15\n_s
      (for (index in (range( 0_l (/( (:expression size0) 8_l )) ))) (
         (let word-offset (-( (-( (:expression size0) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_s (:expression word-offset) '\[%R15\]\n_s
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<1>>,Sized<size0>>>). (: (
   (.program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (.expression( 'AL_l ))
) f1+Reg8);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<2>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f1+Reg16);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<4>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f1+Reg32);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<8>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (+( 0_l (: size0 L) )) '\[%R15\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f1+Reg64);

.1 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<_,f1+Sized<size1+GT<8>>>,Sized<size0>>>). (: (
   (:program(
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      (for-atom (index in (range( 0_l (/( (: size1 L) 8_l )) ))) (
         (let word-offset (-( (+( (-( (+( 0_l (: size1 L) )) (*( (:expression index) 8_l )) )) (align(: size0 L)) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%R15\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f1+StackVariable);

.2 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<1>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (align(: size0 L)) (align(: size1 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_l ))
) f2+Reg8);

.2 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (align(: size0 L)) (align(: size1 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f2+Reg16);

.2 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<4>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (align(: size0 L)) (align(: size1 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f2+Reg32);

.2 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<8>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (align(: size0 L)) (align(: size1 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f2+Reg64);

.2 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<_,f2+Sized<size2+GT<8>>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (align(: size0 L)) (align(: size1 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      (for-atom (index in (range( 0_l (/( (: size2 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size2 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%R15\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f2+StackVariable);

.3 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<1>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (align(: size1 L)) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL_l ))
) f3+Reg8);

.3 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<2>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (align(: size1 L)) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX_l ))
) f3+Reg16);

.3 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<4>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (align(: size1 L)) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX_l ))
) f3+Reg32);

.3 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<8>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (align(: size1 L)) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f3+Reg64);

.3 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<size3+GT<8>>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (align(: size1 L)) (align(: size2 L)) )) (align(: size0 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      (for (index in (range( 0_l (/( (: size3 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size3 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%R15\]\n_l
      ))
   ))
) f3+StackVariable);

.4 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<1>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AL\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AL ))
) f4+Reg8);

.4 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<2>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'AX ))
) f4+Reg16);

.4 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%EAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'EAX ))
) f4+Reg32);

.4 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<8>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%RAX\n_l
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX ))
) f4+Reg64);

.4 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<size4+GT<8>>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )))
      (for-atom (index in (range( 0_l (/( (: size4 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size4 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tmov\s$_l (:expression src) ',\s%R15\n_l
         '\tpushq\s_l (:expression word-offset) '\[%R15\]\n_l
      ))
   ))
   (:data( (:data src) ))
   (:text( (:text src) ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f4+StackVariable);

.5 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<1>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AL\n_l
   ))
   (:expression( 'AL ))
) f5+Reg8);

.5 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<2>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%AX\n_l
   ))
   (:expression( 'AX ))
) f5+Reg16);

.5 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<4>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%EAX\n_l
   ))
   (:expression( 'EAX ))
) f5+Reg32);

.5 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<8>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      '\tmov\s_l (:expression base-offset) '\[%R15\],\s%RAX\n_l
   ))
   (:expression( 'RAX ))
) f5+Reg64);

.5 := λ: Blob(: src GlobalVariable+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<size5+GT<8>>>,Sized<size4>>,Sized<size3>>,Sized<size2>>,Sized<size1>>,Sized<size0>>>). (: (
   (:program(
      (let base-offset (+( (+( (+( (+( (align(: size0 L)) (align(: size1 L)) )) (align(: size2 L)) )) (align(: size3 L)) )) (align(: size4 L)) )))
      '\tmov\s$_l (:expression src) ',\s%R15\n_l
      (for-atom (index in (range( 0_l (/( (: size5 L) 8_l )) ))) (
         (let word-offset (-( (-( (+( (:expression base-offset) (: size5 L) )) (*( (:expression index) 8_l )) )) 8_l )) )
         '\tpushq\s_l (:expression word-offset) '\[%R15\]\n_l
      ))
   ))
) f5+StackVariable);
