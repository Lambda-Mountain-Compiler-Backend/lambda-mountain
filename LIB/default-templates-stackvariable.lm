
fragment  .0 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<_,f0+Sized<8>>>). (: (
   (.program(
      \t 'mov \s '0 \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f0+Reg64);

fragment  .1 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<_,f1+Sized<8>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (.expression f0-size) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f1+Reg64);

fragment  .2 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<_,f2+Sized<8>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression f0-size) (.expression f1-size) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f2+Reg64);

fragment  .3 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<8>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression f0-size) (+( (.expression f1-size) (.expression f2-size) )) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f3+Reg64);

fragment  .4 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<8>>,Sized<f3-size>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression f0-size) (+( (.expression f1-size) (+( (.expression f2-size) (.expression f3-size) )) )) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f4+Reg64);

fragment  .5 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<8>>,Sized<f4-size>>,Sized<f3-size>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (.expression f0-size) (+( (.expression f1-size) (+( (.expression f2-size) (+( (.expression f3-size) (.expression f4-size) )) )) )) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f5+Reg64);
