
.0 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      (:program src)
      '\tmov\s0\[%RSP\],\s%RAX\n_l
      '\taddq\s$_l (: base-size L) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f0+Reg64);

.tag := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<_,f0+Sized<8>>>). (: (
   (:program(
      (:program src)
      '\tmov\s0\[%RSP\],\s%RAX\n_l
      '\taddq\s$_l (: base-size L) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f0+Reg64);

.1 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<_,f1+Sized<8>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      '\tmov\s_l (align(: f0-size L)) '\[%RSP\],\s%RAX\n_l
      '\taddq\s$_l (: base-size L) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f1+Reg64);

.2 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<_,f2+Sized<8>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      '\tmov\s_l (+( (align(: f0-size L)) (align(: f1-size L)) )) '\[%RSP\],\s%RAX\n_l
      '\taddq\s$_l (: base-size L) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f2+Reg64);

.3 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<8>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      '\tmov\s_l (+( (+( (align(: f0-size L)) (align(: f1-size L)) )) (align(: f2-size L)) )) '\[%RSP\],\s%RAX\n_l
      '\taddq\s$_l (: base-size L) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f3+Reg64);

.4 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<8>>,Sized<f3-size>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      '\tmov\s_l (+( (+( (+( (align(: f0-size L)) (align(: f1-size L)) )) (align(: f2-size L)) )) (align(: f3-size L)) )) '\[%RSP\],\s%RAX\n_l
      '\taddq\s$_l (: base-size L) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f4+Reg64);

.5 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<8>>,Sized<f4-size>>,Sized<f3-size>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      '\tmov\s_l (+( (+( (+( (+( (align(: f0-size L)) (align(: f1-size L)) )) (align(: f2-size L)) )) (align(: f3-size L)) )) (align(: f4-size L)) )) '\[%RSP\],\s%RAX\n_l
      '\taddq\s$_l (: base-size L) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
   (:expression( 'RAX_l ))
) f5+Reg64);

.0 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<_,f0+Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      (let pre-size 0_l)
      (let tail-size (+( (:expression pre-size) (: f0-size L) )))
      (let post-size (-( (: base-size L) (:expression tail-size) )))
      (for-atom (bi in (range( 0_l (/( (: f0-size L) 8_l )) ))) (
         (let reversing-offset (*( 8_l (+( (:expression bi) 1_l )) )))
         '\tmovq\s_l (-( (:expression tail-size) (:expression reversing-offset) )) '\[%RSP\],\s%RAX\n_l
         '\tmovq\s%RAX,\s_l (-( (:expression base-size) (:expression reversing-offset) )) '\[%RSP\]\n_l
      ))
      '\taddq\s$_l (+( (:expression pre-size) (:expression post-size) )) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.tag := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<_,f0+Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      (let pre-size 0_l)
      (let tail-size (+( (:expression pre-size) (: f0-size L) )))
      (let post-size (-( (: base-size L) (:expression tail-size) )))
      (for-atom (bi in (range( 0_l (/( (: f0-size L) 8_l )) ))) (
         (let reversing-offset (*( 8_l (+( (:expression bi) 1_l )) )))
         '\tmovq\s_l (-( (:expression tail-size) (:expression reversing-offset) )) '\[%RSP\],\s%RAX\n_l
         '\tmovq\s%RAX,\s_l (-( (:expression base-size) (:expression reversing-offset) )) '\[%RSP\]\n_l
      ))
      '\taddq\s$_l (+( (:expression pre-size) (:expression post-size) )) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f0+StackVariable);

.1 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<_,f1+Sized<f1-size+GT<8>>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      (let pre-size (: f0-size L))
      (let tail-size (+( (:expression pre-size) (: f1-size L) )))
      (let post-size (-( (: base-size L) (:expression tail-size) )))
      (for-atom (bi in (range( 0_l (/( (: f1-size L) 8_l )) ))) (
         (let reversing-offset (*( 8_l (+( (:expression bi) 1_l )) )))
         '\tmovq\s_l (-( (:expression tail-size) (:expression reversing-offset) )) '\[%RSP\],\s%RAX\n_l
         '\tmovq\s%RAX,\s_l (-( (:expression base-size) (:expression reversing-offset) )) '\[%RSP\]\n_l
      ))
      '\taddq\s$_l (+( (:expression pre-size) (:expression post-size) )) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f1+StackVariable);

.2 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<_,f2+Sized<f2-size+GT<8>>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      (let pre-size (+( (: f0-size L) (: f1-size L) )))
      (let tail-size (+( (:expression pre-size) (: f2-size L) )))
      (let post-size (-( (: base-size L) (:expression tail-size) )))
      (for-atom (bi in (range( 0_l (/( (: f2-size L) 8_l )) ))) (
         (let reversing-offset (*( 8_l (+( (:expression bi) 1_l )) )))
         '\tmovq\s_l (-( (:expression tail-size) (:expression reversing-offset) )) '\[%RSP\],\s%RAX\n_l
         '\tmovq\s%RAX,\s_l (-( (:expression base-size) (:expression reversing-offset) )) '\[%RSP\]\n_l
      ))
      '\taddq\s$_l (+( (:expression pre-size) (:expression post-size) )) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f2+StackVariable);

.3 := λ: Blob(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<f3-size+GT<8>>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (:program(
      (:program src)
      (let pre-size (+( (+( (: f0-size L) (: f1-size L) )) (: f2-size L) )))
      (let tail-size (+( (:expression pre-size) (: f3-size L) )))
      (let post-size (-( (: base-size L) (:expression tail-size) )))
      (for-atom (bi in (range( 0_l (/( (: f3-size L) 8_l )) ))) (
         (let reversing-offset (*( 8_l (+( (:expression bi) 1_l )) )))
         '\tmovq\s_l (-( (:expression tail-size) (:expression reversing-offset) )) '\[%RSP\],\s%RAX\n_l
         '\tmovq\s%RAX,\s_l (-( (:expression base-size) (:expression reversing-offset) )) '\[%RSP\]\n_l
      ))
      '\taddq\s$_l (+( (:expression pre-size) (:expression post-size) )) ',\s%RSP\n_l
   ))
   (:frame( (:frame src) ))
   (:unframe( (:unframe src) ))
) f3+StackVariable);
