
fragment  .0 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<_,f0+Sized<8>>>). (: (
   (.program(
      \t 'mov \s '0 \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f0+Reg64);

fragment  .1 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<_,f1+Sized<8>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (align(.expression f0-size)) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f1+Reg64);

fragment  .2 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<_,f2+Sized<8>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (align(.expression f0-size)) (align(.expression f1-size)) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f2+Reg64);

fragment  .3 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<_,f3+Sized<8>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (align(.expression f0-size)) (+( (align(.expression f1-size)) (align(.expression f2-size)) )) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f3+Reg64);

fragment  .4 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<Cons<_,f4+Sized<8>>,Sized<f3-size>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (align(.expression f0-size)) (+( (align(.expression f1-size)) (+( (align(.expression f2-size)) (align(.expression f3-size)) )) )) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f4+Reg64);

fragment  .5 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<Cons<Cons<Cons<_,f5+Sized<8>>,Sized<f4-size>>,Sized<f3-size>>,Sized<f2-size>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      \t 'mov \s (+( (align(.expression f0-size)) (+( (align(.expression f1-size)) (+( (align(.expression f2-size)) (+( (align(.expression f3-size)) (align(.expression f4-size)) )) )) )) )) \[ '%RSP \] , \s '%RAX \n
      \t 'addq \s '$ (.expression base-size) , \s '%RSP \n
   ))
   (.expression( 'RAX ))
) f5+Reg64);

fragment  .2 := λ(: src StackVariable+Sized<base-size>+Fields<Cons<Cons<Cons<_,f2+Sized<f2-size+GT<8>>>,Sized<f1-size>>,Sized<f0-size>>>). (: (
   (.program(
      (let pre-size (+( (.expression f0-size) (.expression f1-size) ))) (if-eq 1 1 (
      (let tail-size (+( (.expression pre-size) (.expression f2-size) ))) (if-eq 1 1 (
      (let post-size (-( (.expression base-size) (.expression tail-size) )))
      # [0]  base.0
      # [8]  base.1
      # [16] base.2 f0.0
      # [24] base.3 f0.1
      # [32] base.4
      # [40] base.4
      (for bi in (range( '0 (/( (.expression f0-size) '8 )) )) (
         (let reversing-offset (*( 8 (+( (.expression bi) 1 )) ))) 
         \t 'movq \s (-( (.expression tail-size) (.expression reversing-offset) )) \[ '%RSP \] , \s '%RAX \n
         \t 'movq \s '%RAX , \s (-( (.expression base-size) (.expression reversing-offset) )) \[ '%RSP \] \n
      ))
      \t 'addq \s '$ (+( (.expression pre-size) (.expression post-size) )) , \s '%RSP \n
      )) ))
   ))
) f2+StackVariable);
