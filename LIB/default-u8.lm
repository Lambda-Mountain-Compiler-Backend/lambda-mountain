
import LIB/binop-macro.lm;

meta
   (description (
      'U8\sis\san\sinteger\sof\sthe\srange\s0\sto\s255.
   ))
   (example (print '123_u8))
;
fragment type U8;     size U8 1;     atom suffix U8     _u8;

(declare-binop( && '\tandb\s%R14B,%AL\n_l U8 U8+Reg8 1_l 1_l Reg8 ));
(declare-binop( || '\torb\s%R14B,%AL\n_l U8 U8+Reg8 1_l 1_l Reg8 ));
(declare-binop( + '\taddb\s%R14B,%AL\n_l U8 U8+Reg8 1_l 1_l Reg8 ));
(declare-binop( - '\tsubb\s%R14B,%AL\n_l U8 U8+Reg8 1_l 1_l Reg8 ));
(declare-binop( ^ '\txorb\s%R14B,%AL\n_l U8 U8+Reg8 1_l 1_l Reg8 ));

(declare-binop( == '\tcmpb\s%R14B,%AL\n\tsete\s%AL\n\tandq\s$1,\s%RAX\n_l U8 U64+Reg64 1_l 8_l Reg8 ));
(declare-binop( != '\tcmpb\s%R14B,%AL\n\tsetne\s%AL\n\tandq\s$1,\s%RAX\n_l U8 U64+Reg64 1_l 8_l Reg8 ));
(declare-binop( < '\tcmpb\s%R14B,%AL\n\tsetl\s%AL\n\tandq\s$1,\s%RAX\n_l U8 U64+Reg64 1_l 8_l Reg8 ));
(declare-binop( <= '\tcmpb\s%R14B,%AL\n\tsetle\s%AL\n\tandq\s$1,\s%RAX\n_l U8 U64+Reg64 1_l 8_l Reg8 ));
(declare-binop( > '\tcmpb\s%R14B,%AL\n\tsetg\s%AL\n\tandq\s$1,\s%RAX\n_l U8 U64+Reg64 1_l 8_l Reg8 ));
(declare-binop( >= '\tcmpb\s%R14B,%AL\n\tsetge\s%AL\n\tandq\s$1,\s%RAX\n_l U8 U64+Reg64 1_l 8_l Reg8 ));
