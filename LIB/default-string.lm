

meta
   (description (
      'A\sString\sis\sa\ssequence\sof\sbytes\sterminated\sby\sa\snull\scharacter.
   ))
   (example (print 'hello_s))
;
fragment type String; size String 8; atom suffix String _s;

head-string := λ: Blob(: s String+Reg64). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      (:program s)
      '\tmov\s0\[%_l (:expression s) '\],\s%AL\n_l
   ))
   (:expression 'AL_l)
) U8+Reg8);
head-string := λ: Blob(: s String+LocalVariable). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      '\tmov\s_l (:expression s) '\[%RBP\],\s%RAX\n_l
      '\tmov\s0\[%RAX\],\s%AL\n_l
   ))
   (:expression 'AL_l)
) U8+Reg8);
head-string := λ: Blob(: s String+GlobalVariable). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      '\tmov\s$_l (:expression s) ',\s%RAX\n_l
      '\tmov\s0\[%RAX\],\s%RAX\n_l
      '\tmov\s0\[%RAX\],\s%AL\n_l
   ))
   (:expression 'AL_l)
) U8+Reg8);
head-string := λ: Blob(: s String+Literal+Constant). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      '\tmov\s$_l (:expression s) ',\s%RAX\n_l
      '\tmov\s0\[%RAX\],\s%AL\n_l
   ))
   (:expression 'AL_l)
) U8+Reg8);

tail-string := λ: Blob(: s String+Reg64). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      (:program s)
      '\tinc\s%_l (:expression s) '\n_l
   ))
   (:expression (:expression s))
) String+Reg64);
tail-string := λ: Blob(: s String+LocalVariable). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      '\tmov\s_l (:expression s) '\[%RBP\],\s%RAX\n_l
      '\tinc\s%RAX\n_l
   ))
   (:expression 'RAX_l)
) String+Reg64);
tail-string := λ: Blob(: s String+GlobalVariable). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      '\tmov\s$_l (:expression s) ',\s%RAX\n_l
      '\tmov\s0\[%RAX\],\s%RAX\n_s
      '\tinc\s%RAX\n_l
   ))
   (:expression 'RAX_l)
) String+Reg64);
tail-string := λ: Blob(: s String+Literal+Constant). (: (
   (:frame (:frame s))
   (:unframe (:unframe s))
   (:program(
      '\tmov\s$_l (:expression s) ',\s%RAX\n_l
      '\tinc\s%RAX\n_l
   ))
   (:expression 'RAX_l)
) String+Reg64);

== := λ(: l String)(: r String). (: (
   (let c1 0_u8)
   (let c2 0_u8)
   (let cc 0_u64)
   (gensym-label start)
   (gensym-label end-true)
   (gensym-label end-false)
   (gensym-label end)
   (mov( l R8 ))
   (mov( r R9 ))
   (cmp( 0_u64 R8 )) # short-circuit if strings are same pointer
   (je( end-true ))
   (cmp( 0_u64 R8 )) # nil strings are never equal
   (je( end-false ))
   (cmp( 0_u64 R9 ))
   (je( end-false ))
   (label start)
   (mov( R8 0_u64 c1 ))
   (mov( R9 0_u64 c2 ))
   (set cc (==( c1 c2 )))
   (mov( cc R10 ))
   (cmp( 0_u64 R10 ))
   (je end-false)
   (set cc (==( c1 0_u8 )))
   (mov( cc R10 ))
   (cmp( 0_u64 R10 ))
   (jne end-true)
   (inc R8)
   (inc R9)
   (jmp start)
   (label end-true)
   (mov( 1_u64 RAX ))
   (jmp end)
   (label end-false)
   (mov( 0_u64 RAX ))
   (jmp end)
   (label end)
   (as RAX U64)
) U64);

!= := λ(: l String)(: r String). (: (not(==( l r ))) U64);
