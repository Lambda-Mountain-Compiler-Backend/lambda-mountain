
type List<x> LEOF | (LCons( x , List<x>[] )); zero List<x> LEOF;

reverse := λ(: l List<x>). (: (tail(
   (let r (: LEOF List<x>))
   (while (non-zero l) (match l (
      ()
      ( (LCons( v rst )) (tail(
         (set r (LCons( v (close r) )))
         (set l rst)
      )))
   )))
   r
)) List<x>);

print := λ(: l List<x>). (: (tail(
   (print '[_s)
   (let some False_u8)
   (while (non-zero l) (match l (
      ()
      ( (LCons( v rst )) (tail(
         (if (==( some True_u8 )) (print ',_s) ())
         (print v)
         (set some True_u8)
         (set l rst)
      )))
   )))
   (print ']_s)
)) Nil);
