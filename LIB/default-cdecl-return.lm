
cdecl::return := λ: Blob(: l Nil). (: (
   (:frame( (:frame l) ))
   (:program( (:program l) (: del l) ))
) Nil);
cdecl::return := λ: Blob(: l Reg8). (: (
   (:frame( (:frame l) ))
   (:expression( 'AL_s ))
   (:program(
      (:program l)
      '\tmov\t%_s (:expression l) ',%AL\n_s
      '\tpush\s%RAX\n_s
      (:del l)
      '\tpop\s%RAX\n_s
   ))
) Nil);
cdecl::return := λ: Blob(: l Reg16). (: (
   (:frame( (:frame l) ))
   (:expression( 'AX_s ))
   (:program(
      (:program l)
      '\tmov\t%_s (:expression l) ',%AX\n_s
      '\tpush\s%RAX\n_s
      (:del l)
      '\tpop\s%RAX\n_s
   ))
) Nil);
cdecl::return := λ: Blob(: l Reg32). (: (
   (:frame (:frame l))
   (:expression 'EAX_s)
   (:program(
      (:program l)
      '\tmov\t%_s (:expression l) ',%EAX\n_s
      '\tpush\s%RAX\n_s
      (:del l)
      '\tpop\s%RAX\n_s
   ))
) Nil);
cdecl::return := λ: Blob(: l Reg64). (: (
   (:frame (:frame l))
   (:expression 'RAX_s)
   (:program(
      (:program l)
      '\tmov\t%_s (:expression l) ',%RAX\n_s
      '\tpush\s%RAX\n_s
      (:del l)
      '\tpop\s%RAX\n_s
   ))
) Nil);
cdecl::return := λ: Blob(: l Constant+Literal+Sized<1>). (: (
   (:frame (:frame l))
   (:expression 'AL_s)
   (:program(
      (:program l)
      (:del l)
      '\tmov\t$_s (:expression l) ',%AL\n_s
   ))
) Nil);
cdecl::return := λ: Blob(: l Constant+Literal+Sized<2>). (: (
   (:frame (:frame l))
   (:expression 'AX_s)
   (:program(
      (:program l)
      (:del l)
      '\tmov\t$_s (:expression l) ',%AX\n_s
   ))
) Nil);
cdecl::return := λ: Blob(: l Constant+Literal+Sized<4>). (: (
   (:frame (:frame l))
   (:expression 'EAX_s)
   (:program(
      (:program l)
      (:del l)
      '\tmov\t$_s (:expression l) ',%EAX\n_s
   ))
) Nil);
cdecl::return := λ: Blob(: l Constant+Literal+Sized<8>). (: (
   (:frame (:frame l))
   (:expression 'RAX_s)
   (:program(
      (:program l)
      (:del l)
      '\tmov\t$_s (:expression l) ',%RAX\n_s
   ))
) Nil);

#cdecl::return := λ: Blob(: src LocalVariable+Sized<size>). (: (
#   (:program(
#      (:program src)
#      (:del src)
#      (if-eq (:expression size) 1 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%AL \n))
#      (if-eq (:expression size) 2 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%AX \n))
#      (if-eq (:expression size) 4 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%EAX \n))
#      (if-eq (:expression size) 8 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%RAX \n))
#      (if-eq 1 (>( (:expression size) 8 )) (
#         \t 'subq \s '$ (:expression size) , \s '%rsp \n
#         (for word-offset in (range( 0 (/( (:expression size) 8 )) )) (
#            \t 'pushq \s (+( (:expression src) (*( (:expression word-offset) 8 )) )) \[ '%rbp \] \n
#         ))
#         (for word-offset in (range( 0 (/( (:expression size) 8 )) )) (
#            \t 'popq \s (-( (-( '-16 (*( (:expression word-offset) 8 )) )) (:expression cdecl::args-size) )) \[ '%rbp \] \n
#         ))
#         \t 'addq \s '$ (:expression size) , \s '%rsp \n
#      ))
#   ))
#   (:frame (:frame src))
#   (:expression(
#      (if-eq (:expression size) 1 'AL)
#      (if-eq (:expression size) 2 'AX)
#      (if-eq (:expression size) 4 'EAX)
#      (if-eq (:expression size) 8 'RAX)
#   ))
#) Nil);

#cdecl::return := λ: Blob(: src GlobalVariable+Sized<size>). (: (
#   (:program(
#      (:program src)
#      (:del src)
#      (\t 'mov \t '$ (:expression src) \s , \s '%r15 \n)
#      (if-eq (:expression size) 1 (\t 'mov \t '0 \[ '%r15 \] , \s '%AL \n))
#      (if-eq (:expression size) 2 (\t 'mov \t '0 \[ '%r15 \] , \s '%AX \n))
#      (if-eq (:expression size) 4 (\t 'mov \t '0 \[ '%r15 \] , \s '%EAX \n))
#      (if-eq (:expression size) 8 (\t 'mov \t '0 \[ '%r15 \] , \s '%RAX \n))
#      (if-eq 1 (>( (:expression size) 8 )) (
#         \t 'subq \s '$ (:expression size) , \s '%rsp \n
#         (for word-offset in (range( 0 (/( (:expression size) 8 )) )) (
#            \t 'pushq \s (*( (:expression word-offset) 8 )) \[ '%r15 \] \n
#         ))
#         (for word-offset in (range( 0 (/( (:expression size) 8 )) )) (
#            \t 'popq \s (-( (-( '-16 (*( (:expression word-offset) 8 )) )) (:expression cdecl::args-size) )) \[ '%rbp \] \n
#         ))
#         \t 'addq \s '$ (:expression size) , \s '%rsp \n
#      ))
#   ))
#   (:expression(
#      (if-eq (:expression size) 1 'AL)
#      (if-eq (:expression size) 2 'AX)
#      (if-eq (:expression size) 4 'EAX)
#      (if-eq (:expression size) 8 'RAX)
#   ))
#) Nil);

#cdecl::return := λ: Blob(: src StackVariable+Sized<size>). (: (
#   (:program(
#      (:program src)
#      (:del src)
#      (if-eq (:expression size) 1 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%AL \n))
#      (if-eq (:expression size) 2 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%AX \n))
#      (if-eq (:expression size) 4 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%EAX \n))
#      (if-eq (:expression size) 8 (\t 'mov \t (:expression src) \[ '%rbp \] , \s '%RAX \n))
#      (if-eq 1 (>( (:expression size) 8 )) (
#         \t 'subq \s '$ (:expression size) , \s '%rsp \n
#         (for word-offset in (range( 0 (/( (:expression size) 8 )) )) (
#            \t 'pushq \s (+( (:expression size) (*( (:expression word-offset) 16 )) )) \[ '%rsp \] \n
#         ))
#         (for word-offset in (range( 0 (/( (:expression size) 8 )) )) (
#            \t 'popq \s (-( (-( '-16 (*( (:expression word-offset) 8 )) )) (:expression cdecl::args-size) )) \[ '%rbp \] \n
#         ))
#         \t 'addq \s '$ (:expression size) , \s '%rsp \n
#      ))
#   ))
#   (:expression(
#      (if-eq (:expression size) 1 'AL)
#      (if-eq (:expression size) 2 'AX)
#      (if-eq (:expression size) 4 'EAX)
#      (if-eq (:expression size) 8 'RAX)
#   ))
#) Nil);

