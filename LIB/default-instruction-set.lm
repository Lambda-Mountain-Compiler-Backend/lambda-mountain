
fragment type Reg8  AL  | BL  | CL  | DL  | SIL | DIL | BPL | SPL | R8B | R9B | R10B | R11B | R12B | R13B | R14B | R15B; size Reg8 1;
fragment type Reg16 AX  | BX  | CX  | DX  | SI  | DI  | BP  | SP  | R8W | R9W | R10W | R11W | R12W | R13W | R14W | R15W; size Reg16 2;
fragment type Reg32 EAX | EBX | ECX | EDX | ESI | EDI | EBP | ESP | R8D | R9D | R10D | R11D | R12D | R13D | R14D | R15D; size Reg32 4;
fragment type Reg64 RAX | RBX | RCX | RDX | RSI | RDI | RBP | RSP | R8  | R9  | R10  | R11  | R12  | R13  | R14  | R15;  size Reg64 8;

import LIB/default-instruction-macros-8.lm;
import LIB/default-instruction-macros-64.lm;

syscall := λ: Blob . (: (:program( '\tsyscall\n_l )) Nil);

& := λ: Blob(: src LocalVariable). (: ( (:program( '\tmov\t%rbp,\s%r12\n\taddq\s$_l (:expression src) ',\s%r12\n_l )) (:expression( 'R12_l )) ) Reg64);
& := λ: Blob(: src GlobalVariable). (: ( (:program( '\tmov\t$_l (:expression src) ',\s%r12\n_l )) (:expression( 'R12_l )) ) Reg64);

# Generic 'mov Semantics
mov := λ: Blob(: src LocalVariable+Sized<size>)(: dst LocalVariable+Sized<size>). (: (
   (:program (
      (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
         '\tmovq\s_l (+( (:expression src) (*( (:expression word-offset) 8_l )) )) '\[%rbp\],\s%r15\n_l
         '\tmovq\s%r15,\s_l (+( (:expression dst) (*( (:expression word-offset) 8_l )) )) '\[%rbp\]\n_l
      ))
      (if (==( (: size L) 8_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15\n_l
         '\tmov\s%r15,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
      (if (==( (: size L) 4_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15l\n_l
         '\tmov\s%r15l,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
      (if (==( (: size L) 2_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15w\n_l
         '\tmov\s%r15w,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
      (if (==( (: size L) 1_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15b\n_l
         '\tmov\s%r15b,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
   ))
) Nil);
mov := λ: Blob(: src LocalVariable+Sized<size>)(: dst GlobalVariable+Sized<size>). (: (
   (:program (
      '\tmov\s$_l (:expression dst) ',\s%r14\n_l
      (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
         '\tmovq\s_l (+( (:expression src) (*( (:expression word-offset) 8_l )) )) '\[%rbp\],\s%r15\n_l
         '\tmovq\s%r15,\s_l (*( (:expression word-offset) 8_l )) '\[%r14\]\n_l
      ))
      (if (==( (: size L) 8_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15\n_l
         '\tmov\s%r15,\s0\[%r14\]\n_l
      ) ())
      (if (==( (: size L) 4_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15l\n_l
         '\tmov\s%r15l,\s0\[%r14\]\n_l
      ) ())
      (if (==( (: size L) 2_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15w\n_l
         '\tmov\s%r15w,\s0\[%r14\]\n_l
      ) ())
      (if (==( (: size L) 1_l )) (
         '\tmov\s_l (:expression src) '\[%rbp\],\s%r15b\n_l
         '\tmov\s%r15b,\s0\[%r14\]\n_l
      ) ())
   ))
) Nil);
mov := λ: Blob(: src GlobalVariable+Sized<size>)(: dst LocalVariable+Sized<size>). (: (
   (:program (
      '\tmov\s$_l (:expression src) ',\s%r14\n_l
      (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
         '\tmovq\s_l (*( (:expression word-offset) 8_l )) '\[%r14\],\s%r15\n_l
         '\tmovq\s%r15,\s_l (+( (:expression dst) (*( (:expression word-offset) 8_l )) )) '\[%rbp\]\n_l
      ))
      (if (==( (: size L) 8_l )) (
         '\tmov\s0\[%r14\],\s%r15\n_l
         '\tmov\s%r15,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
      (if (==( (: size L) 4_l )) (
         '\tmov\s0\[%r14\],\s%r15l\n_l
         '\tmov\s%r15l,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
      (if (==( (: size L) 2_l )) (
         '\tmov\s0\[%r14\],\s%r15w\n_l
         '\tmov\s%r15w,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
      (if (==( (: size L) 1_l )) (
         '\tmov\s0\[%r14\],\s%r15b\n_l
         '\tmov\s%r15b,\s_l (:expression dst) '\[%rbp\]\n_l
      ) ())
   ))
) Nil);

mov := λ: Blob(: src StackVariable+Sized<size>)(: dst GlobalVariable+Sized<size>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program (
      (:program src)
      '\tmov\s$_l (:expression dst) ',\s%r15\n_l
      (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
         '\tpopq\s_l (*( (:expression word-offset) 8_l )) '\[%r15\]\n_l
      ))
      (if (==( (: size L) 4_l )) '\tpopq\s%RAX\n\tmovl\s%EAX,\s0\[%r15\]\n_l ())
      (if (==( (: size L) 2_l )) '\tpopq\s%RAX\n\tmovw\s%AX,\s0\[%r15\]\n_l ())
      (if (==( (: size L) 1_l )) '\tpopq\s%RAX\n\tmovb\s%AL,\s0\[%r15\]\n_l ())
   ))
) Nil);

mov := λ: Blob(: src StackVariable+Sized<size>)(: dst LocalVariable+Sized<size>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program (
      (:program src)
      (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
         '\tpopq\s_l (+( (:expression dst) (*( (:expression word-offset) 8_l )) )) '\[%RBP\]\n_l
      ))
      (if (==( (: size L) 4_l )) ( '\tpopq\s%RAX\n\tmovl\s%EAX,\s_l (:expression dst) '\[%RBP\]_l ) ())
      (if (==( (: size L) 2_l )) ( '\tpopq\s%RAX\n\tmovw\s%AX,\s_l (:expression dst) '\[%RBP\]_l ) ())
      (if (==( (: size L) 1_l )) ( '\tpopq\s%RAX\n\tmovb\s%AL,\s_l (:expression dst) '\[%RBP\]_l ) ())
   ))
) Nil);

push-deref := λ: Blob(: src Reg64+Array<Sized<size>,?>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
         '\tpushq\s_l (-( (+( (: size L) -8_l )) (*( (:expression word-offset) 8_l )) )) '\[%_l (:expression src) '\]\n_l
      ))
      (if (==( (: size L) 4_l )) ( '\tpushq\s0\[%_l (:expression src) ']\n_l ) ())
      (if (==( (: size L) 2_l )) ( '\tpushq\s0\[%_l (:expression src) ']\n_l ) ())
      (if (==( (: size L) 1_l )) ( '\tpushq\s0\[%_l (:expression src) ']\n_l ) ())
   ))
) Nil);

push-deref := λ: Blob(: src LocalVariable+Array<Sized<size>,?>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmov\s_l (:expression src) '\[%rbp\],\s%r15\n_l
      (for-atom (word-offset in (range( 0_l (/( (: size L) 8_l )) ))) (
         '\tpushq\s_l (-( (+( (: size L) -8_l )) (*( (:expression word-offset) 8_l )) )) '\[%r15\]\n_l
      ))
      (if (==( (: size L) 4_l )) ( '\tpushq\s0\[%r15]\n_l ) ())
      (if (==( (: size L) 2_l )) ( '\tpushq\s0\[%r15]\n_l ) ())
      (if (==( (: size L) 1_l )) ( '\tpushq\s0\[%r15]\n_l ) ())
   ))
) Nil);

fragment  push := λ(: src Sized<0>). (: () Nil);

fragment  push := λ(: src GlobalVariable+Sized<size>). (: (
   (.program (
      (\t 'mov \s '$ (.expression src) , \s '%r15 \n)
      (for word-offset in (range( 0 (/( (.expression size) 8 )) )) (
         \t 'pushq \s (+( (+( (.expression size) '-8 )) (inv(*( (.expression word-offset) 8 ))) )) \[ '%r15 \] \n
      ))
      (if-eq (.expression size) 4 (
         \t 'mov \s '0 \[ '%r15 \] , \s '%r15d \n
         \t 'push \s '%r15 \n
      ))
      (if-eq (.expression size) 2 (
         \t 'mov \s '0 \[ '%r15 \] , \s '%r15w \n
         \t 'push \s '%r15 \n
      ))
      (if-eq (.expression size) 1 (
         \t 'mov \s '0 \[ '%r15 \] , \s '%r15b \n
         \t 'push \s '%r15 \n
      ))
   ))
) Nil);
fragment  push := λ(: src LocalVariable+Sized<size>). (: (
   (.program (
      (for word-offset in (range( 0 (/( (.expression size) 8 )) )) (
         \t 'pushq \s (+(
            (.expression src)
            (+(
               (+( (.expression size) '-8 ))
               (inv(*( (.expression word-offset) 8 )))
            ))
         )) \[ '%rbp \] \n
     ))
      (if-eq (.expression size) 4 (
         \t 'pushq \s (.expression src) \[ '%rbp \] \n
      ))
      (if-eq (.expression size) 2 (
         \t 'pushq \s (.expression src) \[ '%rbp \] \n
      ))
      (if-eq (.expression size) 1 (
         \t 'pushq \s (.expression src) \[ '%rbp \] \n
      ))
   ))
) Nil);

fragment  pop := λ(: src LocalVariable+Sized<size>). (: (
   (.program ( for word-offset in (range( 1 (+( (/( (.expression size) 8 )) 1 )) )) (
      \t 'popq \s (-( (.expression src) (*( (.expression word-offset) 8 )) )) \[ '%rbp \] \n
   )))
) Nil);

fragment  mov := λ(: src LocalVariable+Sized<size>)(: index Literal+Constant)(: dst Reg64+x[]). (: (
   (.program (
      (\t 'mov \s '% (.expression dst) , \s '%r14 \n)
      (\t 'add \s '$ (*( (.expression index) (.expression size) )) , \s '%r14 \n)
      (for word-offset in (range( 0 (/( (.expression size) 8 )) )) (
         \t 'movq \s (+( (.expression src) (*( (.expression word-offset) 8 )) )) \[ '%rbp \] , \s '%r15 \n
         \t 'movq \s '%r15 , \s (*( (.expression word-offset) 8 )) \[ '%r14 \] \n
      ))
      (if-eq (.expression size) 4 (
         \t 'mov \s (.expression src) \[ '%rbp \] , \s '%r15d \n
         \t 'mov \s '%r15d , \s '0 \[ '%r14 \] \n
      ))
      (if-eq (.expression size) 2 (
         \t 'mov \s (.expression src) \[ '%rbp \] , \s '%r15w \n
         \t 'mov \s '%r15w , \s '0 \[ '%r14 \] \n
      ))
      (if-eq (.expression size) 1 (
         \t 'mov \s (.expression src) \[ '%rbp \] , \s '%r15b \n
         \t 'mov \s '%r15b , \s '0 \[ '%r14 \] \n
      ))
   ))
) Nil);
fragment  mov := λ(: src LocalVariable+Sized<size>)(: index Literal+Constant)(: dst LocalVariable+Array<Sized<size>,?>). (: (
   (.program (
      \t 'mov \s (.expression dst) \[ '%rbp \] , \s '%r14 \n
      (for word-offset in (range( 0 (/( (.expression size) 8 )) )) (
         \t 'mov \s (+( (+( (*( (.expression word-offset) 8 )) (.expression src) )) (*( (.expression index) (.expression size) )) )) \[ '%rbp \] , '%r15 \n
         \t 'mov \s '%r15 , \s (+( (*( (.expression word-offset) 8 )) (*( (.expression index) (.expression size) )) )) \[ '%r14 \] \n
      ))
      (if-eq (.expression size) 4 (
         \t 'mov \s (+( (.expression src) (*( (.expression index) (.expression size) )) )) \[ '%rbp \] , '%r15d \n
         \t 'mov \s '%r15d , \s (*( (.expression index) (.expression size) )) \[ '%r14 \] \n
      ))
      (if-eq (.expression size) 2 (
         \t 'mov \s (+( (.expression src) (*( (.expression index) (.expression size) )) )) \[ '%rbp \] , '%r15w \n
         \t 'mov \s '%r15w , \s (*( (.expression index) (.expression size) )) \[ '%r14 \] \n
      ))
      (if-eq (.expression size) 1 (
         \t 'mov \s (+( (.expression src) (*( (.expression index) (.expression size) )) )) \[ '%rbp \] , '%r15b \n
         \t 'mov \s '%r15b , \s (*( (.expression index) (.expression size) )) \[ '%r14 \] \n
      ))
   ))
) Nil);
fragment  mov := λ(: src Reg64)(: index Literal+Constant)(: dst LocalVariable+Sized<size>). (: (
   (.program (
      (\t 'mov \s '% (.expression src) , \s '%r14 \n)
      (for word-offset in (range( 0 (/( (.expression size) 8 )) )) (
         \t 'movq \s (*( (.expression word-offset) 8 )) \[ '%r14 \] , '%r15 \n
         \t 'movq \s '%r15 , \s (+( (.expression dst) (*( (.expression word-offset) 8 )) )) \[ '%rbp \] \n
      ))
      (if-eq (.expression size) 4 (
         \t 'movq \s '0 \[ '%r14 \] , \s '%r15 \n
         \t 'movq \s '%r15 , \s (.expression dst) \[ '%rbp \] \n
      ))
      (if-eq (.expression size) 2 (
         \t 'movq \s '0 \[ '%r14 \] , \s '%r15 \n
         \t 'movq \s '%r15 , \s (.expression dst) \[ '%rbp \] \n
      ))
      (if-eq (.expression size) 1 (
         \t 'movq \s '0 \[ '%r14 \] , \s '%r15 \n
         \t 'movq \s '%r15 , \s (.expression dst) \[ '%rbp \] \n
      ))
   ))
) Nil);
fragment  mov := λ(: src Literal+Constant)(: index Literal+Constant)(: dst LocalVariable+Array<Sized<size>,?>). (: (
   (.program (
      \t 'mov \s (.expression dst) \[ '%rbp \] , \s '%r15 \n
      (if-eq (.expression size) 8 (
         \t 'movq \s '$ (.expression src) , \s (*( (.expression index) (.expression size) )) \[ '%r15 \] \n
      ))
      (if-eq (.expression size) 4 (
         \t 'movl \s '$ (.expression src) , \s (*( (.expression index) (.expression size) )) \[ '%r15 \] \n
      ))
      (if-eq (.expression size) 2 (
         \t 'movw \s '$ (.expression src) , \s (*( (.expression index) (.expression size) )) \[ '%r15 \] \n
      ))
      (if-eq (.expression size) 1 (
         \t 'movb \s '$ (.expression src) , \s (*( (.expression index) (.expression size) )) \[ '%r15 \] \n
      ))
   ))
) Nil);

fragment  mov := λ(: src Sized<1>[]+LocalVariable)(: index Literal+Constant)(: dst Reg8). (: (
   (.program(
      \t 'mov \s (.expression src) \[ '%rbp \] , \s '%r15 \n
      \t 'mov \s (.expression index) \[ '%r15 \] , \s '% (.expression dst) \n
   ))
) Nil);

mov := λ: Blob(: src GlobalVariable+Sized<8>)(: dst Constant+Reg64). (: ( (:program(
   '\tmov\t$_l (:expression src) ',\s%_l (:expression dst) '\n_l
   '\tmov\t0\[%_l (:expression dst) '\],\s%_l (:expression dst) '\n_l
)) ) Nil);
mov := λ: Blob(: src Reg64)(: dst Constant+Reg64). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmov\t%_l (:expression src) ',\s%_l (:expression dst) '\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg32)(: dst Constant+Reg32). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmov\t%_l (:expression src) ',\s%_l (:expression dst) '\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg16)(: dst Constant+Reg16). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmov\t%_l (:expression src) ',\s%_l (:expression dst) '\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg8)(: dst Constant+Reg8). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmov\t%_l (:expression src) ',\s%_l (:expression dst) '\n_l
   ))
) Nil);

mov := λ: Blob(: src Constant+Literal+Sized<1>)(: dst LocalVariable+Sized<1>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      '\tmovb\s$_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Constant+Literal+Sized<2>)(: dst LocalVariable+Sized<2>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      '\tmovw\s$_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Constant+Literal+Sized<4>)(: dst LocalVariable+Sized<4>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      '\tmovl\s$_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Constant+Literal+Sized<8>)(: dst LocalVariable+Sized<8>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      '\tmovq\s$_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);

mov := λ: Blob(: src Constant+Literal+Sized<1>)(: dst GlobalVariable+Sized<1>). (: (
   (:program(
      '\tmov\s$_l (:expression dst) ',\s%r15\n_l
      '\tmovb\s$_l (:expression src) ',\s0\[%r15\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Constant+Literal+Sized<2>)(: dst GlobalVariable+Sized<2>). (: (
   (:program(
      '\tmov\s$_l (:expression dst) ',\s%r15\n_l
      '\tmovw\s$_l (:expression src) ',\s0\[%r15\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Constant+Literal+Sized<4>)(: dst GlobalVariable+Sized<4>). (: (
   (:program(
      '\tmov\s$_l (:expression dst) ',\s%r15\n_l
      '\tmovl\s$_l (:expression src) ',\s0\[%r15\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Constant+Literal+Sized<8>)(: dst GlobalVariable+Sized<8>). (: (
   (:program(
      '\tmov\s$_l (:expression dst) ',\s%r15\n_l
      '\tmovq\s$_l (:expression src) ',\s0\[%r15\]\n_l
   ))
) Nil);

fragment  push := λ(: src Constant+Literal+Sized<1>). (: (.program( \t 'pushq \s '$ (.expression src) \n )) Nil);
fragment  push := λ(: src Constant+Literal+Sized<2>). (: (.program( \t 'pushq \s '$ (.expression src) \n )) Nil);
fragment  push := λ(: src Constant+Literal+Sized<4>). (: (.program( \t 'pushq \s '$ (.expression src) \n )) Nil);
fragment  push := λ(: src Constant+Literal+Sized<8>). (: (.program( \t 'pushq \s '$ (.expression src) \n )) Nil);

mov := λ: Blob(: src Reg8)(: dst LocalVariable+Sized<1>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovb\s%_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg16)(: dst LocalVariable+Sized<2>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovw\s%_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg32)(: dst LocalVariable+Sized<4>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovl\s%_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg64)(: dst LocalVariable+Sized<8>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovq\s%_l (:expression src) ',\s_l (:expression dst) '\[%rbp\]\n_l
   ))
) Nil);

mov := λ: Blob(: src Reg64)(: dst GlobalVariable+Sized<8>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovq\s%_l (:expression src) ',\s%r15\n_l
      '\tmovq\s$_l (:expression dst) ',\s%r14\n_l
      '\tmovq\s%r15,\s0\[%r14\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg32)(: dst GlobalVariable+Sized<4>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovl\s%_l (:expression src) ',\s%r15d\n_l
      '\tmovq\s$_l (:expression dst) ',\s%r14\n_l
      '\tmovl\s%r15d,\s0\[%r14\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg16)(: dst GlobalVariable+Sized<2>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovw\s%_l (:expression src) ',\s%r15w\n_l
      '\tmovq\s$_l (:expression dst) ',\s%r14\n_l
      '\tmovw\s%r15w,\s0\[%r14\]\n_l
   ))
) Nil);
mov := λ: Blob(: src Reg8)(: dst GlobalVariable+Sized<1>). (: (
   (:frame (:frame src))
   (:unframe (:unframe src))
   (:program(
      (:program src)
      '\tmovb\s%_l (:expression src) ',\s%r15b\n_l
      '\tmovq\s$_l (:expression dst) ',\s%r14\n_l
      '\tmovb\s%r15b,\s0\[%r14\]\n_l
   ))
) Nil);

fragment  mov := λ(: src LocalVariable)(: dst Constant+Reg8). (: (.program( \t 'mov \s (.expression src) \[ '%rbp \] , \s '% (.expression dst) \n )) Nil);
fragment  mov := λ(: src LocalVariable)(: dst Constant+Reg16). (: (.program( \t 'mov \s (.expression src) \[ '%rbp \] , \s '% (.expression dst) \n )) Nil);
fragment  mov := λ(: src LocalVariable)(: dst Constant+Reg32). (: (.program( \t 'mov \s (.expression src) \[ '%rbp \] , \s '% (.expression dst) \n )) Nil);
fragment  mov := λ(: src LocalVariable)(: dst Constant+Reg64). (: (.program( \t 'mov \s (.expression src) \[ '%rbp \] , \s '% (.expression dst) \n )) Nil);

fragment  mov := λ(: src Constant+Literal+Sized<1>)(: dst Constant+Reg8). (: (.program( \t 'mov \s '$ (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  mov := λ(: src Constant+Literal+Sized<2>)(: dst Constant+Reg16). (: (.program( \t 'mov \s '$ (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  mov := λ(: src Constant+Literal+Sized<4>)(: dst Constant+Reg32). (: (.program( \t 'mov \s '$ (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  mov := λ(: src Constant+Literal+Sized<8>)(: dst Constant+Reg64). (: (.program( \t 'mov \s '$ (.expression src) , \s '% (.expression dst) \n )) Nil);

fragment  push := λ(: dst Reg8). (: (.program( \t 'mov \s '% (.expression dst) , '%r15b \n \t 'push \s '%r15 \n )) Nil);
fragment  push := λ(: dst Reg16). (: (.program( \t 'mov \s '% (.expression dst) , '%r15w \n \t 'push \s '%r15 \n )) Nil);
fragment  push := λ(: dst Reg32). (: (.program( \t 'mov \s '% (.expression dst) , '%r15d \n \t 'push \s '%r15 \n )) Nil);
fragment  push := λ(: dst Reg64). (: (.program( \t 'push \s '% (.expression dst) \n )) Nil);

fragment  mov := λ(: offset Constant)(: src Reg64)(: dst Reg8). (: (.program( \t 'mov \s (.expression offset) \[ '% (.expression src) \] , \s '% (.expression dst) \n )) Nil);

cmp := λ: Blob(: imm Constant+Literal+Sized<8>)(: r Constant+Reg64). (: (:program( '\tcmp\s$_l (:expression imm) ',%_l (:expression r) '\n_l )) Nil);
cmp := λ: Blob(: imm Constant+Literal+Sized<4>)(: r Constant+Reg32). (: (:program( '\tcmp\s$_l (:expression imm) ',%_l (:expression r) '\n_l )) Nil);
cmp := λ: Blob(: imm Constant+Literal+Sized<2>)(: r Constant+Reg16). (: (:program( '\tcmp\s$_l (:expression imm) ',%_l (:expression r) '\n_l )) Nil);
cmp := λ: Blob(: imm Constant+Literal+Sized<1>)(: r Constant+Reg8). (: (:program( '\tcmp\s$_l (:expression imm) ',%_l (:expression r) '\n_l )) Nil);

cmp := λ: Blob(: l Constant+Reg64)(: r Constant+Reg64). (: (:program( '\tcmp\s%_l (:expression l) ',%_l (:expression r) '\n_l )) Nil);
cmp := λ: Blob(: l Constant+Reg32)(: r Constant+Reg32). (: (:program( '\tcmp\s%_l (:expression l) ',%_l (:expression r) '\n_l )) Nil);
cmp := λ: Blob(: l Constant+Reg16)(: r Constant+Reg16). (: (:program( '\tcmp\s%_l (:expression l) ',%_l (:expression r) '\n_l )) Nil);
cmp := λ: Blob(: l Constant+Reg8)(: r Constant+Reg8). (: (:program( '\tcmp\s%_l (:expression l) ',%_l (:expression r) '\n_l )) Nil);

movsx := λ: Blob(: src Constant+Reg8)(: dst Constant+Reg64). (: (:program( '\tmovsx\s%_l (:expression src) ',%_l (:expression dst) '\n_l )) Nil);
movsx := λ: Blob(: src Constant+Reg16)(: dst Constant+Reg64). (: (:program( '\tmovsx\s%_l (:expression src) ',%_l (:expression dst) '\n_l )) Nil);
movsx := λ: Blob(: src Constant+Reg32)(: dst Constant+Reg64). (: (:program( '\tmovsx\s%_l (:expression src) ',%_l (:expression dst) '\n_l )) Nil);

jg := λ: Blob(: dst Label). (: (:program( '\tjg\s_l (:expression dst) '\n_l )) Nil);
jge := λ: Blob(: dst Label). (: (:program( '\tjge\s_l (:expression dst) '\n_l )) Nil);
jb := λ: Blob(: dst Label). (: (:program( '\tjb\s_l (:expression dst) '\n_l )) Nil);
jbe := λ: Blob(: dst Label). (: (:program( '\tjbe\s_l (:expression dst) '\n_l )) Nil);
ja := λ: Blob(: dst Label). (: (:program( '\tja\s_l (:expression dst) '\n_l )) Nil);
jae := λ: Blob(: dst Label). (: (:program( '\tjae\s_l (:expression dst) '\n_l )) Nil);
jl := λ: Blob(: dst Label). (: (:program( '\tjl\s_l (:expression dst) '\n_l )) Nil);
jle := λ: Blob(: dst Label). (: (:program( '\tjle\s_l (:expression dst) '\n_l )) Nil);
je := λ: Blob(: dst Label). (: (:program( '\tje\s_l (:expression dst) '\n_l )) Nil);
jne := λ: Blob(: dst Label). (: (:program( '\tjne\s_l (:expression dst) '\n_l )) Nil);
jmp := λ: Blob(: dst Label). (: (:program( '\tjmp\s_l (:expression dst) '\n_l )) Nil);


neg := λ: Blob(: l Reg64). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tneg\s%_l (:expression l) '\n_l
   ))
) Nil);
neg := λ: Blob(: l Reg32). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tneg\s%_l (:expression l) '\n_l
   ))
) Nil);
neg := λ: Blob(: l Reg16). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tneg\s%_l (:expression l) '\n_l
   ))
) Nil);
neg := λ: Blob(: l Reg8). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tneg\s%_l (:expression l) '\n_l
   ))
) Nil);

inc := λ: Blob(: l Reg64). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tinc\s%_l (:expression l) '\n_l
   ))
) Nil);
inc := λ: Blob(: l Reg32). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tinc\s%_l (:expression l) '\n_l
   ))
) Nil);
inc := λ: Blob(: l Reg16). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tinc\s%_l (:expression l) '\n_l
   ))
) Nil);
inc := λ: Blob(: l Reg8). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tinc\s%_l (:expression l) '\n_l
   ))
) Nil);

dec := λ: Blob(: l Reg64). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tdec\s%_l (:expression l) '\n_l
   ))
) Nil);
dec := λ: Blob(: l Reg32). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tdec\s%_l (:expression l) '\n_l
   ))
) Nil);
dec := λ: Blob(: l Reg16). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tdec\s%_l (:expression l) '\n_l
   ))
) Nil);
dec := λ: Blob(: l Reg8). (: (
   (:frame (:frame l))
   (:unframe (:unframe l))
   (:program(
      (:program l)
      '\tdec\s%_l (:expression l) '\n_l
   ))
) Nil);

fragment  div := λ(: l Reg64). (: (.program( \t 'div \s '% (.expression l) \n )) Nil);
fragment  idiv := λ(: l Reg64). (: (.program( \t 'idiv \s '% (.expression l) \n )) Nil);

fragment  mul := λ(: l Reg64). (: (.program( \t 'mul \s '% (.expression l) \n )) Nil);
fragment  imul := λ(: l Reg64). (: (.program( \t 'imul \s '% (.expression l) \n )) Nil);

fragment  add := λ(: src Constant+Literal+Sized<1>)(: dst LocalVariable). (: (.program( \t 'addb \s '$ (.expression src) , \s (.expression dst) \[ '%rbp \] \n )) Nil);
fragment  add := λ(: src Constant+Literal+Sized<8>)(: dst Reg64). (: (.program( \t 'addq \s '$ (.expression src) , \s '% (.expression dst) \n )) Nil);

fragment  add := λ(: src LocalVariable+Sized<8>)(: dst Reg64). (: (.program( \t 'addq \s (.expression src) \[ '%rbp \] , \s '% (.expression dst) \n )) Nil);

fragment  add := λ(: src Reg8)(: dst Reg8). (: (.program( \t 'add \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  add := λ(: src Reg16)(: dst Reg16). (: (.program( \t 'add \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  add := λ(: src Reg32)(: dst Reg32). (: (.program( \t 'add \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  add := λ(: src Reg64)(: dst Reg64). (: (.program( \t 'add \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);

fragment  sub := λ(: src Reg8)(: dst Reg8). (: (.program( \t 'sub \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  sub := λ(: src Reg16)(: dst Reg16). (: (.program( \t 'sub \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  sub := λ(: src Reg32)(: dst Reg32). (: (.program( \t 'sub \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);
fragment  sub := λ(: src Reg64)(: dst Reg64). (: (.program( \t 'sub \s '% (.expression src) , \s '% (.expression dst) \n )) Nil);

fragment  pop := λ(: l Reg64). (: (.program( \t 'pop \s '% (.expression l) \n )) Nil);

fragment  shl := λ(: c Literal+Constant)(: l Reg64). (: (.program( \t 'shl \s '$ (.expression c) , \s '% (.expression l) \n )) Nil);
fragment  shr := λ(: c Literal+Constant)(: l Reg64). (: (.program( \t 'shr \s '$ (.expression c) , \s '% (.expression l) \n )) Nil);
fragment  xor := λ(: c Reg64)(: l Reg64). (: (.program( \t 'xor \s '% (.expression c) , \s '% (.expression l) \n )) Nil);
