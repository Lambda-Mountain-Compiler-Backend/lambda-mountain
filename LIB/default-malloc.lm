
# type MallocBlock = {
#    block-size : U64
#    block-prev : *MallocBlock
#    block-next : *MallocBlock
#    [data] : U8[block-size]
# }

.block-size := 位(: b MallocBlock[]). (: (
   (let r 0_u64)
   (mov( b R8 ))
   (mov( R8 0_u64 r ))
   r
) U64);
.block-prev := 位(: b MallocBlock[]). (: (
   (let r 0_u64)
   (mov( b R8 ))
   (mov( R8 1_u64 r ))
   (as r MallocBlock[])
) MallocBlock[]);
.block-next := 位(: b MallocBlock[]). (: (
   (let r 0_u64)
   (mov( b R8 ))
   (mov( R8 2_u64 r ))
   (as r MallocBlock[])
) MallocBlock[]);
.block-data := 位(: b MallocBlock[]). (: (
   (let r 0_u64)
   (mov( b R8 ))
   (mov( R8 3_u64 r ))
   (as r ?[])
) ?[]);

malloc-block-head := 0_u64;
# malloc-block-tail : call sys_brk for this information
malloc-first-free := 0_u64;
