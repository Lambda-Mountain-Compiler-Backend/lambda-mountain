
import LIB/binop-macro.lm;

meta
   (description (
      'U64\sis\san\sinteger\sof\sthe\srange\s0\sto\s18446744073709551615.
   ))
   (example (print '123_u64))
;
fragment type U64;    size U64 8;    atom suffix U64    _u64;

(declare-simple-instruction-alias-binop-64( && 'andq_l '_l U64 ));
(declare-simple-instruction-alias-binop-64( || 'orq_l '_l U64 ));
(declare-simple-instruction-alias-binop-64( + 'addq_l '_l U64 ));
(declare-simple-instruction-alias-binop-64( - 'subq_l '_l U64 ));
(declare-simple-instruction-alias-binop-64( ^ 'xorq_l '_l U64 ));

(declare-simple-instruction-alias-binop-64( == 'cmpq_l '\tsete\s%AL\n\tandq\s$1,\s%RAX\n_l U64 ));
(declare-simple-instruction-alias-binop-64( != 'cmpq_l '\tsetne\s%AL\n\tandq\s$1,\s%RAX\n_l U64 ));
(declare-simple-instruction-alias-binop-64( < 'cmpq_l '\tsetl\s%AL\n\tandq\s$1,\s%RAX\n_l U64 ));
(declare-simple-instruction-alias-binop-64( <= 'cmpq_l '\tsetle\s%AL\n\tandq\s$1,\s%RAX\n_l U64 ));
(declare-simple-instruction-alias-binop-64( > 'cmpq_l '\tsetg\s%AL\n\tandq\s$1,\s%RAX\n_l U64 ));
(declare-simple-instruction-alias-binop-64( >= 'cmpq_l '\tsetge\s%AL\n\tandq\s$1,\s%RAX\n_l U64 ));
