
import LIB/binop-macro.lm;

meta
   (description (
      'U64\sis\san\sinteger\sof\sthe\srange\s0\sto\s18446744073709551615.
   ))
   (example (print '123_u64))
;
fragment type U64;    size U64 8;    atom suffix U64    _u64;

(declare-binop( && '\tandq\s%R14,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( || '\torq\s%R14,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( + '\taddq\s%R14,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( - '\tsubq\s%R14,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( ^ '\txorq\s%R14,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));

(declare-binop( == '\tcmp\s%R14,%R13\n\tsete\s%R13B\n\tandq\s$1,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( != '\tcmp\s%R14,%R13\n\tsetne\s%R13B\n\tandq\s$1,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( < '\tcmp\s%R14,%R13\n\tsetl\s%R13B\n\tandq\s$1,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( <= '\tcmp\s%R14,%R13\n\tsetle\s%R13B\n\tandq\s$1,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( > '\tcmp\s%R14,%R13\n\tsetg\s%R13B\n\tandq\s$1,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
(declare-binop( >= '\tcmp\s%R14,%R13\n\tsetge\s%R13B\n\tandq\s$1,%R13\n_l U64 U64+Reg64 '_l '_l Reg64 ));
