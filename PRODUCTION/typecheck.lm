
typecheck-subtypes                       := ();
typecheck-accept-as                      := ();
typecheck-context                        := ();
typecheck-constructors                   := ();
typecheck-types-have-changed             := ();
typecheck-global-context                 := ();

typecheck-init := λ. (
   (set typecheck-subtypes 
     (
        (
           (() (Atom S))
           (Nil S)
        )
        ((Cons(S S)) S)
     )
   )
   (local mode)
);

typecheck := λprogram . (tail(
   (local p)
   (set p program)
   (while p (
      (typecheck-infer-type-expr( (tail p) ))
      (set p (head p))
   ))
   (set typecheck-types-have-changed True)
   (while typecheck-types-have-changed (
      (set typecheck-types-have-changed ())
      (typecheck-infer-prog program)
   ))
   (typecheck-assert-complete program)
   program
));

typecheck-assert-complete := λp . (if p (
   (typecheck-assert-complete( head p ))
   (typecheck-assert-expr( tail p ))
) ());

typecheck-assert-one := λe . (
   (if (typecheck-lookup-type e) () (
      (print-s (typecheck-show-ascript parse-parsed-program))(print-s \n)
      (fail (UnableToInferTypeOfExpression (typecheck-show-ascript e)))
   ))
);

typecheck-assert-expr := λe . (tail(
   (match e (
      ()
      ( () () )
      ( (GExpr ge) (
         (typecheck-assert-expr( ge ))
      ))
      ( (Global( gln gle )) (
         (typecheck-assert-expr( gle ))
      ))
      ( (Type( l ds )) ())
      ( (Fragment( fln fle )) ())
      ( Nil (
         (typecheck-assert-one( e ))
      ))
      ( (App( (Variable 'gensym-label) _ )) (
      ))
      ( (App( (Variable 'label) (Variable l) )) (
      ))
      ( (App( (App( (Literal :) (Literal _) )) tt )) (
         (typecheck-assert-one( e ))
      ))
      ( (App( (App( (Variable 'as) te )) tt )) (
         (typecheck-assert-expr( te ))
         (typecheck-assert-one( e ))
      ))
      ( (App( (App( (Literal :) te )) tt )) (
         (typecheck-assert-expr( te ))
         (typecheck-assert-one( e ))
      ))
      ( (Literal lit) (
         (typecheck-assert-one( e ))
      ))
      ( (App( l r )) (
         (typecheck-assert-expr( r ))
         (typecheck-assert-expr( l ))
         (typecheck-assert-one( e ))
      ))
      ( (Lambda( lhs rhs )) (
         (typecheck-assert-expr( rhs ))
         (typecheck-assert-one( e ))
      ))
      ( (Variable v) (
         (typecheck-assert-one( e ))
      ))
      ( (Size( typf sizf )) (
      ))
      ( u (fail (UnknownAssertTyped u)) )
   ))
));

typecheck-lookup-type := λterm . (tail(
   (local tctx)
   (set tctx typecheck-context)
   (local found)
   (local ttt)
   (while tctx (
      (set ttt (head tctx))
      (if (is( (head ttt) term )) (
         (set found (tail ttt))
         (set tctx ())
      ) (
         (set tctx (tail tctx))
      ))
   ))
   found
));

typecheck-deep-eq := λt1 t2 . if (is( t1 t2 )) True (match (t1 t2) (
   ()
   ( (() ()) True )
   ( (Fragment _) True )
   ( (_ Fragment) True )
   ( ( (And(l1 l2)) (And(r1 r2)) ) True )
   ( ( (And(l1 l2)) r ) (
      if (typecheck-deep-eq(l1 r)) True
         (typecheck-deep-eq(l2 r))
   ))
   ( ( l (And(r1 r2)) ) (
      if (typecheck-deep-eq(l r1)) True
         (typecheck-deep-eq(l r2))
   ))
   ( ((l1 l2) (r1 r2)) (
      if (typecheck-deep-eq(l1 r1))
         (typecheck-deep-eq(l2 r2))
         ()
   ))
   ( (l r) (eq( l r )) )
));

typecheck-ascript := λt tt . (
   if tt (tail(
      (local lt)
      (set lt (typecheck-lookup-type t))
      (if lt (
         (if (typecheck-deep-eq( lt tt )) () (
            fail (TypeAscriptionInequality lt tt)
         ))
      ) (
         (set typecheck-context ((t tt) typecheck-context))
         (set typecheck-types-have-changed True)
      ))
   )) ()
);

typecheck-show-ascript := λp . (tail(
   (local term)
   (set term (match p (
      ()
      ( () () )
      ( Nil p )
      ( (Variable _) p )
      ( (Literal _) p )
      ( (App( f x )) (
         (App( (typecheck-show-ascript f) (typecheck-show-ascript x) ))
      ))
      ( (Lambda( lhs rhs )) (
         (Lambda( (typecheck-show-ascript lhs) (typecheck-show-ascript rhs) ))
      ))
      ( (prog (GExpr( g ))) (
         ( (typecheck-show-ascript prog) (GExpr( typecheck-show-ascript g )) )
      ))
      ( (prog (Global( n v ))) (
         ( (typecheck-show-ascript prog) (Global( n (typecheck-show-ascript v) )) )
      ))
      ( (prog (Type( tn td ))) (
         ((typecheck-show-ascript prog) (Type( tn td )))
      ))
      ( (prog (Fragment( (Variable fragf) body ))) (
         (typecheck-show-ascript prog)
      ))
      ( (prog (Fragment( typf body ))) (
         (typecheck-show-ascript prog)
      ))
      ( (prog (Size( typf sizf ))) (
         (typecheck-show-ascript prog)
      ))
      ( unknown (
         fail (UnknownTerm unknown)
      ))
   )))

   (local type)
   (set type (typecheck-lookup-type p))
   (if type (
      (if (eq( type '? )) (
         term
      ) ( 
         (:( term type ))
      ))
   ) (
      term
   ))
));

typecheck-infer-prog := λp . (
   (while p (
      (typecheck-infer-expr( () (tail p) ))
      (set p (head p))
   ))
);

typecheck-infer-ctx := λctx e . (match e (
   ()
   ( (App( (App( (Literal :) (Variable v) )) tt )) (
      (ctx (v (And( LocalVariable (typecheck-infer-type-compound tt) )) ))
   ))
   ( (App( ps (App( (App( (Literal :) (Variable v) )) tt )) )) (
      ( (typecheck-infer-ctx( ctx ps )) (v (And( LocalVariable (typecheck-infer-type-compound tt) )) ))
   ))
   ( (Variable v) (
      (ctx (v S))
   ))
   ( (App( ps (Variable v) )) (
      ( (typecheck-infer-ctx( ctx ps )) (v S))
   ))
   ( Nil (
      ctx
   ))
   ( u (
      fail (UnknownLhs u)
   ))
));

typecheck-typeof-gvar := λv . (tail(
   (local gctx)
   (set gctx typecheck-global-context)
   (local tt)
   (while gctx (
      (match (tail gctx) (
         ()
         ( (Global( gn gt )) (
            (if (eq( v gn )) (
               (if tt (
                  (set tt (And(tt gt)) )
               ) (
                  (set tt gt)
               ))
            ) ())
            (set gctx (head gctx))
         ))
      ))
   ))
   tt
));

typecheck-typeof-var := λctx v . if (eq( 'asm! v )) ('->(Fragment Fragment)) (match ctx (
   ()
   ( () (typecheck-typeof-gvar v) )
   ( (cs (cv ct)) (
      if (eq( v cv )) (
         ct
      ) (
         (typecheck-typeof-var( cs v ))
      )
   ))
));

typecheck-typeof-lhs := λlhs . (match lhs (
   ()
   ( (App( (App( (Literal :) (Variable v) )) tt )) (
      (typecheck-infer-type-compound tt)
   ))
   ( (App( ps (App( (App( (Literal :) (Variable v) )) tt )) )) (
      (Cons( (typecheck-typeof-lhs ps) (typecheck-infer-type-compound tt) ))
   ))
   ( (Variable v) (
      S
   ))
   ( (App( ps (Variable v) )) (
      (Cons( (typecheck-typeof-lhs ps) S ))
   ))
   ( Nil (
      Nil
   ))
   ( u (
      fail (UnknownLhs u)
   ))
));

typecheck-unify-sub := λctx v . (match ctx (
   ()
   ( Accept v )
   ( (Bind( s1 s2 )) (
      if (eq( v s1 )) s2 v
   ))
   ( (ctxl ctxr) (tail(
      (local lv)
      (set lv (typecheck-unify-sub( ctxl v )))
      (local rv)
      (set rv (typecheck-unify-sub( ctxr v )))
      (if (is( lv v )) (
         (if (is( rv v )) () (set v rv))
      ) (set v lv))
      v
   )))
));

typecheck-unify-ctx := λctx v . (match v (
   ()
   ( (vl vr) (
      ( (typecheck-unify-ctx( ctx vl )) (typecheck-unify-ctx( ctx vr )) )
   ))
   ( _ (
      (typecheck-unify-sub( ctx v ))
   ))
));

typecheck-unify-implies := λlt rt . (if (eq(lt rt)) True (match lt (
   ()
   ( (And( lt1 lt2 )) (
      (if (typecheck-unify-implies( lt1 rt )) True (
         (typecheck-unify-implies( lt2 rt ))
      ))
   ))
   ( lt1 (tail(
      (local accept)
      (local subtypes)
      (local st)
      (set subtypes typecheck-subtypes)
      (while subtypes (
         (set st (tail subtypes))
         (if (eq( (head st) lt1 )) (
            (if (eq( (tail st) rt )) (
               (set accept True)
            ) ())
         ) ())
         (set subtypes (head subtypes))
      ))
      accept
   )))
)));

typecheck-unify-args := λlt rt . (tail(
   (local match)
   (local accept-as)
   (set accept-as typecheck-accept-as)
   (while accept-as (
      (if match () (
         (if (deep-eq( (head (tail accept-as)) rt )) (
            (set match (typecheck-unify-args-inner( lt (tail (tail accept-as)) )))
         ) ())
      ))
      (set accept-as (head accept-as))
   ))
   (if match (
      match
   ) (
      (typecheck-unify-args-inner( lt rt ))
   ))
));

typecheck-unify-args-inner := λlt rt . (match (lt rt) (
   ()
   ( ((lt1 rt1) (lt2 rt2)) (
      (match ( (typecheck-unify-args(lt1 lt2)) (typecheck-unify-args(rt1 rt2)) ) (
         ()
         ( (() _) () )
         ( (_ ()) () )
         ( (lctx rctx) (lctx rctx) )
      ))
   ))
   ( (a1 a2) (
      (if (typecheck-unify-implies( a2 a1 )) ( # argument type must imply parameter type
         Accept
      ) (
         (if (is-variable a1) (
            (if (is-variable a2) (
               Accept
            ) (
               (Bind( a1 a2 ))
            ))
         ) (
            (if (is-variable a2) (
               (Bind( a2 a1 ))
            ) (
               ()
            ))
         ))
      ))
   ))
   (_ (tail(
      (fail (UnknownUnify lt rt))
      '?
   )))
));

typecheck-apply-plural := λmany pt . (match many(
   ()
   ( (And( t1 t2 )) (tail(
      (local r)
      (set r (typecheck-apply-plural( t1 pt )))
      (if r r (typecheck-apply-plural( t2 pt )))
   )))
   ( ('->(lt rt)) (tail(
      ()
      (typecheck-unify-ctx( (typecheck-unify-args(lt pt)) rt ))
   )))
   ( u (fail (ApplicationIsNotAFunction many pt)))
));

typecheck-safe-apply-plural := λterm many pt . (tail(
   (local r)
   (set r (typecheck-apply-plural( many pt )))
   (if r r (
      fail (TypeError( InvalidArgument many pt ))
   ))
));

typecheck-infer-type-compound := λcompound . (match compound (
   ()
   ((Literal tt) tt)
   ((Variable tt) tt)
   ((App( (Literal lt) rt )) ( lt (typecheck-infer-type-compound rt) ) )
   ((App( lt rt )) (Cons( (typecheck-infer-type-compound lt) (typecheck-infer-type-compound rt) )) )
   (u (fail (UnknownTypeCompound u)))
));

typecheck-infer-type-constructor := λname body . (match body (
   ()
   ( (Literal tag) (
      (set typecheck-constructors ( typecheck-constructors (tag (typecheck-infer-type-compound name)) ))
   ))
   ( (App( (Literal tag) args )) (
      (fail (TODO LiteralTagConstructors tag))
#      (local ctype)
#      (set ctype (typecheck-infer-type-compound args))
#      (set typecheck-constructors ( typecheck-constructors (tag ('->(ctype (tag ctype)))) ))
#      (set typecheck-subtypes ( typecheck-subtypes ((tag ctype) (typecheck-infer-type-compound name)) ))
   ))
));

typecheck-infer-type-definition := λname def . (match def (
   ()
   ( (App( (App( tds (Literal |) )) body )) (
      (typecheck-infer-type-definition( name tds ))
      (typecheck-infer-type-constructor( name body ))
   ))
   ( body (
      (typecheck-infer-type-constructor( name body ))
   ))
));

typecheck-infer-constructor-type := λtag . (tail(
   (local ctype)
   (local constructors)
   (set constructors typecheck-constructors)
   (while constructors (
      (if (eq( tag (head(tail(constructors))) )) (
         (if ctype (
            (set ctype (And( ctype (tail(tail(constructors))) )))
         ) (
            (set ctype (tail(tail(constructors))))
         ))
      ) ())
      (set constructors (head constructors))
   ))
   ctype
));

typecheck-infer-type-expr := λe . (match e (
   ()
   ( (Type( l ds )) (
      (typecheck-infer-type-definition( l ds ))
      (typecheck-ascript( e '? ))
   ))
   (_ ())
));

typecheck-infer-expr := λctx e . (tail(
   (match e (
      ()
      ( () () )
      ( (GExpr ge) (
         (typecheck-infer-expr( ctx ge ))
      ))
      ( (Global( gln gle )) (
         (typecheck-infer-expr( ctx gle ))
         (match (typecheck-lookup-type gle) (
            ()
            ( () () )
            ( glt (
               (set typecheck-global-context ( typecheck-global-context (Global( gln glt )) ))
               (typecheck-ascript( e '? ))
            ))
         ))
      ))
      ( (Type( l ds )) () )
      ( (Fragment( fln fle )) (
         (match fle (
            ()
            ( (Lambda( lhs rhs )) (
               (local flt)
               (set flt ('->( (typecheck-typeof-lhs lhs) Fragment )) )
               (typecheck-ascript( fle flt ))
               (match fln (
                  ()
                  ( (Variable flnv) (
                     (set typecheck-global-context ( typecheck-global-context (Global( flnv flt )) ))
                  ))
               ))
            ))
         ))
      ))
      ( Nil (
         (typecheck-ascript( e Nil ))
      ))
      ( (App( (Variable 'gensym-label) (Variable lname) )) (
         (set ctx ( ctx (lname (And( Constant Label ))) ))
         (typecheck-ascript( e Fragment ))
      ))
      ( (App( (Variable 'label) (Variable lname) )) (
         (typecheck-ascript( e Fragment ))
      ))
      ( (App( (App( (Literal ':) (Literal _) )) tt )) (
         (typecheck-ascript( e (typecheck-infer-type-compound tt) ))
      ))
      ( (App( (App( (Literal ':) asc )) tt )) (
         (typecheck-infer-expr( ctx asc ))
         (typecheck-ascript( asc (typecheck-infer-type-compound tt) ))
         (typecheck-ascript( e (typecheck-infer-type-compound tt) ))
      ))
      ( (App( (App( (Variable 'as) ast )) ett )) (
         (typecheck-infer-expr( ctx ast ))
         (typecheck-ascript( e (typecheck-infer-type-compound ett) ))
      ))
      ( (Literal lit) (
         (local ctype)
         (set ctype (typecheck-infer-constructor-type lit))
         (if ctype (
            (typecheck-ascript( e (And( Constant ctype )) ))
         ) (
            (typecheck-ascript( e Atom ))
         ))
      ))
      ( (App( l r )) (tail(
         (set ctx (typecheck-infer-expr( ctx l )))
         (set ctx (typecheck-infer-expr( ctx r )))
         (match ( (typecheck-lookup-type l) (typecheck-lookup-type r) ) (
            ()
            ( (() _) () )
            ( (_ ()) () )
            ( ( ('->(lt rt)) pt ) (
               (typecheck-ascript( e (typecheck-safe-apply-plural( e ('->(lt rt)) pt )) ))
            ))
            ( ( (And(t1 ('->(lt rt)))) pt ) (
               (typecheck-ascript( e (typecheck-safe-apply-plural( e (And(t1 ('->(lt rt)))) pt )) ))
            ))
            ( ( (And(('->(lt rt)) t2)) pt ) (
               (typecheck-ascript( e (typecheck-safe-apply-plural( e (And(('->(lt rt)) t2)) pt )) ))
            ))
            ( (Fragment rt) (
               (typecheck-ascript( e rt ))
            ))
            ( (_ Fragment) (
               (typecheck-ascript( e Fragment ))
            ))
            ( (lt rt) (
               (typecheck-ascript( e (Cons(lt rt)) ))
            ))
         ))
      )))
      ( (Lambda( lhs rhs )) (tail(
         (set ctx (typecheck-infer-ctx( ctx lhs )))
         (typecheck-infer-expr( ctx rhs ))
         (match (typecheck-lookup-type rhs) (
            ()
            ( () () )
            ( rt (
               (typecheck-ascript( e ('->( (typecheck-typeof-lhs lhs) rt)) ))
            ))
         ))
      )))
      ( (Variable v) (
         (match (typecheck-typeof-var( ctx v )) (
            ()
            ( () () )
            ( tt (typecheck-ascript( e tt )) )
         ))
      ))
      ( (Size( typf sizf )) (
      ))
      ( u (fail (UnknownTerm u)) )
   ))
   ctx
));

