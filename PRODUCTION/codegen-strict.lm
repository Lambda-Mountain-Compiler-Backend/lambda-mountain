
compile-push-rvalue := 位ctx e offset . (tail(
   (local e1)
   (local e2)
   (match (typecheck-slot( (typecheck-lookup e) Cons )) (
      ()
      ( (Cons( lt rt )) (
         (match e (
            ()
            ( (App( le re )) (tail(
               (set e1 (compile-push-rvalue( ctx le offset )))
               (set e2 (compile-push-rvalue( ctx re offset )))
               (expr::chain( e1 e2 ))
            )))
            ( u (fail (UnexpectedRvalue e)))
         ))
      ))
      ( lt (tail(
         (set e1 (compile-expr-strict( ctx e offset Used )))
         (match (typecheck-slot( (expr::get-type e1) StackValue )) (
            ()
            ( StackVariable e1 )
            ( _ (tail(
               (set e2 (fragment-apply( ctx 'push lt (() e1) e1 )))
               (expr::chain( e1 e2 ))
            )))
         ))
      )))
   ))
));

compile-expr-strict := 位ctx e offset used . (tail(
   (assert-typeof( 'compile-expr-strict::ctx ctx Context ))
   (assert-typeof( 'compile-expr-strict::e e Or<[Or<[Or<[App,Nil]>,Variable]>,Literal]> ))
   (assert-typeof( 'compile-expr-strict::offset offset Atom ))
   (assert-typeof( 'compile-expr-strict::used used Atom ))
   (local e1)
   (local e2)
   (local e3)
   (local e4)
   (match used (
      ()
      (Return (tail(
         (set e1 (compile-expr-strict( ctx e offset Used )))
         (match e (
            ()
            ( (App( (App( (Literal ':) re )) rtype )) (
               (fragment-apply( ctx 'cdecl::return (typecheck-lookup re) (() e1) e1 ))
            ))
            ( re (
               (fragment-apply( ctx 'cdecl::return (typecheck-lookup e) (() e1) e1 ))
            ))
         ))
      )))
      (_ (
         (match e (
            ()
            ( (App( (Lambda( (Variable lname) Nil )) rhs )) (tail(
               (local sz)
               (set sz (max( 8 (typecheck-sizeof (typecheck-lookup rhs)) )))
               (if sz () (
                  (fail (NoSizeOf (typecheck-lookup rhs)))
               ))
               (set offset (i2s (add( (s2i offset) (inv(s2i sz)) )) )) 
               (set e1 (compile-push-rvalue( ctx rhs offset )))
               (if (eq( sz '0 )) () (
                  (set e1 (expr::set-unframe( e1 ( (expr::get-unframe e1) \t 'add \s '$ sz , \s '%rsp \n ) )))
               ))
               (set ctx (context::bind( (expr::get-context e1) lname
                  (typecheck-ascript( (LocalVariable offset) (typecheck-lookup rhs) ))
               )))
               (set e1 (expr::set-context( e1 ctx )))
               e1
            )))
            ( (App( (Variable 'label) (Variable label-name) )) (
               (match (get-strict-function( ctx label-name Label )) (
                  ()
                  ( (Label( lid )) (tail(
                     (set e2 (expr::new()))
                     (set e2 (expr::set-prog( e2 ( lid ': \n ) )))
                     (set e2 (expr::set-context( e2 ctx )))
                     (set e2 (expr::set-offset( e2 offset )))
                     e2
                  )))
                  ( u (ExpectedLabel u))
               ))
            ))
            ( (App( (App( (Variable 'set) lhs )) rhs )) (tail(
               (assert-eq( 'compile-expr-strict::set (head lhs) Variable ))
               (match (get-strict-function( ctx (tail lhs) (typecheck-lookup rhs))) (
                  ()
                  ( (LocalVariable( sv-offset )) (tail(
                     (set e1 (compile-expr-strict( ctx rhs offset Used )))
                     (set e2 (expr::new()))
                     (set e2 (expr::set-expr( e2 sv-offset )))
                     (set e2 (expr::set-context( e2 ctx )))
                     (set e2 (expr::set-offset( e2 offset )))
                     (set e3 (fragment-apply( ctx 'mov (Cons( (typecheck-lookup rhs) LocalVariable )) ((() e1) e2) e2 )))
                  )))
                  ( u (fail( UnexpectedAssignmentLhs lhs u )))
               ))
               e3
            )))
            ( (App( (App( (Literal :) (Literal lval) )) ltype )) (tail(
               (set e1 (expr::set-expr( (expr::new ()) lval )))
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (Literal lval) (tail(
               (set e1 (expr::set-expr( (expr::new ()) lval )))
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (App( (App( (Literal :) lval )) ltype )) (tail(
               (set e1 (compile-expr-strict( ctx lval offset Unused )))
               e1
            )))
            ( (App( (Variable 'tail) (App( l r )) )) (tail(
               (set e1 (compile-expr-strict( ctx l offset Unused )))
               (set e2 (compile-expr-strict( (expr::get-context e1) r (expr::get-offset e1) Used )))
               (set e2 (expr::set-frame( e2 (  (expr::get-frame e1) (expr::get-frame e2)  ))))
               (set e2 (expr::set-unframe( e2 (  (expr::get-unframe e1) (expr::get-unframe e2)  ))))
               (set e2 (expr::set-text( e2 (  (expr::get-text e1) (expr::get-text e2)  ))))
               (set e2 (expr::set-data( e2 (  (expr::get-data e1) (expr::get-data e2)  ))))
               (set e2 (expr::set-prog( e2 (  (expr::get-prog e1) (expr::get-prog e2)  ))))
               e2
            )))
            ( (App ((Variable 'gensym-label) (Variable arg))) (tail(
               (set ctx (context::bind( ctx arg
                  (typecheck-ascript( (Label( (uuid()) )) Label ))
               )))
               (set e1 (expr::set-context( (expr::new()) ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( Nil (tail(
               (set e1 (expr::new()) )
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (Variable v) (tail(
               (set e1 (fragment-get-local( ctx v offset )))
               e1
            )))
            ( (App (l r)) (tail(
               (local result)
               (set result (match (typecheck-slot( (typecheck-lookup l) '-> )) (
                  ()
                  ( ('-> _) (match l (
                     ()
                     ( (Variable fname) (tail(
                        (set e1 (stack-call( ctx fname r offset )))
                        e1
                     )))
                     ( (Literal tag) (tail(
                        (set e1 (compile-push-rvalue( ctx r offset )))
                        (set e2 (fragment-apply( ctx 'push (And( (typecheck-lookup e) DontChain)) (() e1) e1 )))
                        (set e2 (expr::set-type( e2 StackVariable )))
                        e2
                     )))
                     ( u (tail(
                        (fail (ComplexFunctionConjugatesNotSupportedYet e))
                     )))
                  )))
                  ( _ (
                     (if (eq( used Used )) (
                        (fail( Raw Cons Cells Are Not Permitted In Strict Mode ))
                     ) (tail(
                        (set e1 (compile-expr-strict( ctx l offset Unused )))
                        (set e2 (compile-expr-strict( (expr::get-context e1) r (expr::get-offset e1) Used )))
                        (set e2 (expr::set-frame( e2 (  (expr::get-frame e1) (expr::get-frame e2)  ))))
                        (set e2 (expr::set-unframe( e2 (  (expr::get-unframe e1) (expr::get-unframe e2)  ))))
                        (set e2 (expr::set-text( e2 (  (expr::get-text e1) (expr::get-text e2)  ))))
                        (set e2 (expr::set-data( e2 (  (expr::get-data e1) (expr::get-data e2)  ))))
                        (set e2 (expr::set-prog( e2 (  (expr::get-prog e1) (expr::get-prog e2)  ))))
                        e2
                     )))
                  ))
               )))
               result
            )))
            ( _ (fail (TODO CompileStrict e)))
         ))
      ))
   ))
));

get-strict-function := 位ctx v arg_type . (tail(
   (assert-typeof( 'get-strict-function::ctx ctx Context ))
   (assert-typeof( 'get-strict-function::v v Atom ))
   (match (context::lookup( ctx v arg_type )) (
      ()
      ( (Fragment( body )) (
         (Fragment body)
      ))
      ( (GlobalFunction( body )) (
         (GlobalFunction body)
      ))
      ( (GlobalVariable( body )) (
         (GlobalVariable (label-case v))
      ))
      ( (Label lid) (
         (Label lid)
      ))
      ( (LocalVariable sv-offset) (
         (LocalVariable sv-offset)
      ))
      ( () (fail( UndefinedSymbol v arg_type )))
      ( u (fail( UnknownStrictFunction v arg_type u )))
   ))
));

strict-codegen-type-case := 位 ctx base-type type-body case-number . (tail(
   (assert-typeof( 'strict-codegen-type-case::ctx ctx Context ))
   (if (typecheck-is-fragment base-type) () (match type-body (
      ()
      ( (App( (Literal enum-case) args )) (tail(
         (local args_type)
         (set args_type (typecheck-infer-type-compound args))

         (local body)
         (set body (Fragment (Lambda(
            (App( (App( (Literal ':) (Variable 'src) )) (Literal Constant) ))
            (App( (Variable '.program) (
               (App( (Variable '.program) (Variable 'src) ))
               \t 'pushq \s '$ case-number \n
            )))
         ))))
         (typecheck-ascript( body ('->(
            (And( enum-case base-type ))
            Nil
         ))))
         (set ctx (context::bind( ctx 'push body )))

         (set args_type (Cons( args_type U64 )))
         (local field-offset)
         (local field-number)
         (while args_type (match args_type (
            ()
            ( (Cons( lt rt )) (tail(
               (set ctx (strict-bind-accessors( ctx enum-case rt field-offset field-number )))
               (set field-offset (i2s(add(
                  (s2i field-offset)
                  (s2i(max( 8 (typecheck-sizeof rt) )))
               ))))
               (set field-number (inc field-number))
               (set args_type lt)
            )))
            ( tt (tail(
               (set ctx (strict-bind-accessors( ctx enum-case tt field-offset field-number )))
               (set args_type ())
            )))
         )))
      )))
      ( (Literal enum-case) (tail(
         #define 'push initializer
         (local body)
         (set body (Fragment (Lambda(
            (App( (App( (Literal ':) (Variable 'src) )) (Literal Constant) ))
            (App( (Variable '.program) (
               \t 'pushq \s '$ case-number \n
            )))
         ))))
         (typecheck-ascript( body ('->(
            (And( enum-case base-type ))
            StackVariable
         ))))
         (set ctx (context::bind( ctx 'push body )))

         #define '.0 accessor
         (set body (Fragment (Lambda(
            (App( (App( (Literal ':) (Variable 'src) )) (Literal LocalVariable) ))
            (App(
               (App( (Variable '.program) (
                  \t 'movq \s (App( (Variable '.expression) (Variable 'src) )) \s \[ '%rbp \] ,
                  \s '%r15 \n
               )))
               (App( (Variable '.expression) (
                  'r15
               )))
            ))
         ))))
         (typecheck-ascript( body ('->(
            (And( base-type LocalVariable ))
            Reg64
         ))))
         (set ctx (context::bind( ctx '.0 body )))

      )))
      ( () () )
      ( u (tail(
         (fail ('strict-codegen-type-case u))
      )))
   )))
   (assert-typeof( 'strict-codegen-type-case::ctx ctx Context ))
   ctx
));

strict-codegen-type := 位 ctx type-name type-body case-number . (match type-body (
   ()
   ( (App( (App( tds (Variable '|) )) body )) (tail(
      (local base-type)
      (set base-type (typecheck-infer-type-compound type-name))
      (local next-case-number)
      (set next-case-number (i2s(inc(s2i( case-number )))))
      (set ctx (strict-codegen-type( ctx type-name tds next-case-number )))
      (strict-codegen-type-case( ctx base-type body case-number ))
   )))
   ( body (tail(
      (local base-type)
      (set base-type (typecheck-infer-type-compound type-name))
      (strict-codegen-type-case( ctx base-type type-body case-number ))
   )))
));

strict-bind-accessors := 位 ctx base-type src-type field-offset field-number . (tail(
   (local body)
   (local register-name)
   (local mov-name)
   (local return-type)
   (match (typecheck-sizeof src-type) (
      ()
      (1 (tail(
         (set register-name 'r15b)
         (set return-type 'Reg8)
      )))
      (2 (tail(
         (set register-name 'r15w)
         (set return-type 'Reg16)
      )))
      (4 (tail(
         (set register-name 'r15d)
         (set return-type 'Reg32)
      )))
      (8 (tail(
         (set register-name 'r15)
         (set return-type 'Reg64)
      )))
      (_ (tail(
         (set return-type ())
      )))
   ))
   (if return-type (
      (set body (Fragment (Lambda(
         (App( (App( (Literal ':) (Variable 'src) )) (Literal LocalVariable) ))
         (App(
            (App( (Variable '.program) (
               \t 'movq \s ('+( ('.expression 'src) field-offset )) \s \[ '%rbp \] ,
               \s '%r15 \n
            )))
            (App( (Variable '.expression) (
               register-name
            )))
         ))
      ))))
      (typecheck-ascript( body ('->(
         (And( base-type LocalVariable ))
         return-type
      ))))
      (set ctx (context::bind( ctx (clone-rope( '. (i2s field-number) )) body )))
   ) (
      (fail (TODO Complex Field Types))
   ))
   ctx
));
