
compile-expr-strict := λctx e offset used . (tail(
   (assert-typeof( 'compile-expr-strict::offset offset Atom ))
   (assert-typeof( 'compile-expr-strict::used used Atom ))
   (local e1)
   (local e2)
   (local e3)
   (local e4)
   (match used (
      ()
      (Return (tail(
         (set e1 (compile-expr-strict( ctx e offset Used )))
         (match e (
            ()
            ( (App( (App( (Literal ':) re )) rtype )) (
               (fragment-apply( ctx 'cdecl::return (typecheck-lookup-type re) (() e1) e1 ))
            ))
            ( re (
               (fragment-apply( ctx 'cdecl::return (typecheck-lookup-type e) (() e1) e1 ))
            ))
         ))
      )))
      (_ (
         (match e (
            ()
            ( (App( (Lambda( (Variable lname) Nil )) rhs )) (tail(
               (local sz)
               (set sz (typecheck-sizeof (typecheck-lookup-type rhs)))
               (set ctx (ctx (StackVariable( lname (i2s(add( (s2i offset) (inv(s2i sz)) ))) (typecheck-lookup-type rhs) )) ))
               (set e1 (expr::new()) )
               (set e1 (expr::set-frame( e1 ( \t 'sub \s '$ sz , \s '%rsp \n ) )))
               (set e1 (expr::set-unframe( e1 ( \t 'add \s '$ sz , \s '%rsp \n ) )))
               (match (typecheck-lookup-type rhs) (
                  ()
                  ( (Cons( lt rt )) (tail(
                     (set e2 (expr::new()) )
                     (set e3 (expr::new()) )
                     (local at)
                     (set at (typecheck-lookup-type rhs))
                     (while at (
                        (local next-e2)
                        (local next-e3)
                        (match at (
                           ()
                           ( (Cons( lt rt )) (tail(
                              (match rhs (
                                 ()
                                 ( (App( inner outer )) (tail(
                                    (set offset (i2s (add( (s2i offset) (inv(s2i(typecheck-sizeof rt))) )) )) 
                                    (local edst)
                                    (set edst (expr::new()))
                                    (set edst (expr::set-expr( edst offset )))
                                    (set next-e2 (compile-expr-strict( ctx outer offset Used )))
                                    (set next-e3 (fragment-apply( ctx 'mov (Cons( (typecheck-lookup-type outer) LocalVariable )) ((() next-e2) edst) next-e2 )))
                                    (set rhs inner)
                                 )))
                                 ( u (fail( 'compile-strict::ArrayIndexAssign u )))
                              ))
                              (set at lt)
                           )))
                           ( rt (tail(
                              (set offset (i2s (add( (s2i offset) (inv(s2i(typecheck-sizeof rt))) )) )) 
                              (local edst)
                              (set edst (expr::new()))
                              (set edst (expr::set-expr( edst offset )))
                              (set next-e2 (compile-expr-strict( ctx rhs offset Used )))
                              (set next-e3 (fragment-apply( ctx 'mov (Cons( (typecheck-lookup-type rhs) LocalVariable )) ((() next-e2) edst) next-e2 )))
                              (set at ())
                           )))
                        ))
                        (set e2 (expr::chain( e2 next-e2 )))
                        (set e3 (expr::chain( e3 next-e3 )))
                     ))
                  ))) (_ (tail(
                     (set offset (i2s (add( (s2i offset) (inv(s2i sz)) )) )) 
                     (local edst)
                     (set edst (expr::new()))
                     (set edst (expr::set-expr( edst offset )))
                     (set e2 (compile-expr-strict( ctx rhs offset Used )))
                     (set e3 (fragment-apply( ctx 'mov (Cons( (typecheck-lookup-type rhs) LocalVariable )) ((() e2) edst) e2 )))
                  )))
               ))
               (set e3 (expr::set-frame( e3 (  (expr::get-frame e1) (expr::get-frame e2) (expr::get-frame e3) ))))
               (set e3 (expr::set-unframe( e3 (  (expr::get-unframe e1) (expr::get-unframe e2) (expr::get-unframe e3) ))))
               (set e3 (expr::set-text( e3 (  (expr::get-text e1) (expr::get-text e2) (expr::get-text e3) ))))
               (set e3 (expr::set-data( e3 (  (expr::get-data e1) (expr::get-data e2) (expr::get-data e3) ))))
               (set e3 (expr::set-prog( e3 (  (expr::get-prog e1) (expr::get-prog e2) (expr::get-prog e3) ))))
               (set e3 (expr::set-data( e3 (  (expr::get-data e1) (expr::get-data e2) (expr::get-data e3) ))))
               e3
            )))
            ( (App( (Variable 'label) (Variable label-name) )) (
               (match (get-strict-function( ctx label-name Label )) (
                  ()
                  ( (Label( lname lid )) (tail(
                     (set e2 (expr::new()))
                     (set e2 (expr::set-prog( e2 ( lid ': \n ) )))
                     (set e2 (expr::set-context( e2 ctx )))
                     (set e2 (expr::set-offset( e2 offset )))
                     e2
                  )))
                  ( u (ExpectedLabel u))
               ))
            ))
            ( (App( (App( (Variable 'set) lhs )) rhs )) (tail(
               (assert-eq( 'compile-expr-strict::set (head lhs) Variable ))
               (match (get-strict-function( ctx (tail lhs) (typecheck-lookup-type rhs))) (
                  ()
                  ( (StackVariable( sv-name sv-offset sv-type )) (tail(
                     (set e1 (compile-expr-strict( ctx rhs offset Used )))
                     (set e2 (expr::new()))
                     (set e2 (expr::set-expr( e2 sv-offset )))
                     (set e2 (expr::set-context( e2 ctx )))
                     (set e2 (expr::set-offset( e2 offset )))
                     (set e3 (fragment-apply( ctx 'mov (Cons( (typecheck-lookup-type rhs) LocalVariable )) ((() e1) e2) e2 )))
                  )))
                  ( u (fail( UnexpectedAssignmentLhs lhs u )))
               ))
               e3
            )))
            ( (App( (App( (Literal :) (Literal lval) )) ltype )) (tail(
               (set e1 (expr::set-expr( (expr::new ()) lval )))
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (Literal lval) (tail(
               (set e1 (expr::set-expr( (expr::new ()) lval )))
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (App( (App( (Literal :) lval )) ltype )) (tail(
               (set e1 (compile-expr-strict( ctx lval offset Unused )))
               e1
            )))
            ( (App( (Variable 'tail) (App( l r )) )) (tail(
               (set e1 (compile-expr-strict( ctx l offset Unused )))
               (set e2 (compile-expr-strict( (expr::get-context e1) r (expr::get-offset e1) Used )))
               (set e2 (expr::set-frame( e2 (  (expr::get-frame e1) (expr::get-frame e2)  ))))
               (set e2 (expr::set-unframe( e2 (  (expr::get-unframe e1) (expr::get-unframe e2)  ))))
               (set e2 (expr::set-text( e2 (  (expr::get-text e1) (expr::get-text e2)  ))))
               (set e2 (expr::set-data( e2 (  (expr::get-data e1) (expr::get-data e2)  ))))
               (set e2 (expr::set-prog( e2 (  (expr::get-prog e1) (expr::get-prog e2)  ))))
               e2
            )))
            ( (App ((Variable 'gensym-label) (Variable arg))) (tail(
               (set ctx (ctx (Label( arg (uuid()) )) ))
               (set e1 (expr::set-context( (expr::new()) ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (App ((Variable fname) arg)) (tail(
               (set e1 (stack-call( ctx fname arg offset )))
               e1
            )))
            ( Nil (tail(
               (set e1 (expr::new()) )
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (Variable v) (tail(
               (set e1 (fragment-get-local( ctx v offset )))
               e1
            )))
            ( (App (l r)) (tail(
               (if (eq( used Used )) (
                  (fail (TODO Gradual Type A Cons))
               ) (
                  (set e1 (compile-expr-strict( ctx l offset Unused )))
                  (set e2 (compile-expr-strict( (expr::get-context e1) r (expr::get-offset e1) Used )))
                  (set e2 (expr::set-frame( e2 (  (expr::get-frame e1) (expr::get-frame e2)  ))))
                  (set e2 (expr::set-unframe( e2 (  (expr::get-unframe e1) (expr::get-unframe e2)  ))))
                  (set e2 (expr::set-text( e2 (  (expr::get-text e1) (expr::get-text e2)  ))))
                  (set e2 (expr::set-data( e2 (  (expr::get-data e1) (expr::get-data e2)  ))))
                  (set e2 (expr::set-prog( e2 (  (expr::get-prog e1) (expr::get-prog e2)  ))))
                  e2
               ))
            )))
            ( _ (fail (TODO CompileStrict e)))
         ))
      ))
   ))
));

get-strict-function := λctx v arg_type . (tail(
   (assert-typeof( 'get-strict-function::ctx ctx List<Or<[Or<[Or<[Or<[Label,StackVariable]>,GlobalVariable]>,GlobalFunction]>,Fragment]>> ))
   (assert-typeof( 'get-strict-function::v v Atom ))
   (local r)
   (while ctx (
      (match (tail ctx) (
         ()
         ( (Fragment( (Variable name) body )) (tail(
            ()
            (if r () (
               if (eq(name v)) (
                  (if (typecheck-apply-plural( (typecheck-lookup-type body) arg_type )) (
                     (set r (Fragment( (Variable name) body )))
                  ) ())
               ) ()
            ))
         )))
         ( (GlobalFunction( name body )) (tail(
            ()
            (if r () (
               if (eq(name v)) (
                  (if (typecheck-apply-plural( (typecheck-lookup-type body) arg_type )) (
                     (set r (GlobalFunction( name body )))
                  ) ())
               ) ()
            ))
         )))
         ( (GlobalVariable name) (
            if r () (
               if (eq(name v)) (
                  (set r (GlobalVariable (label-case name)))
               ) ()
            )
         ))
         ( (StackVariable(name offset type)) (
            if r () (
               if (eq(name v)) (
                  (set r (StackVariable( name offset type )))
               ) ()
            )
         ))
         ( (Label(name lid)) (
            if r () (
               if (eq(name v)) (
                  (set r (Label( name lid )))
               ) ()
            )
         ))
         ( u (fail( UnknownStrictFunction u )))
      ))
      (set ctx (head ctx))
   ))
   r
));
