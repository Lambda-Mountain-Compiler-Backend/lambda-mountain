
compile-expr-strict := λctx e offset used . (tail(
   (assert-typeof( 'compile-expr-strict::offset offset Atom ))
   (assert-typeof( 'compile-expr-strict::used used Atom ))
   (local e1)
   (local e2)
   (local e3)
   (local e4)
   (match used (
      ()
      (Return (tail(
         (set e1 (compile-expr-strict( ctx e offset Used )))
         (fragment-apply( ctx 'cdecl::return (typecheck-lookup-type e) e1 e1 ))
      )))
      (_ (
         (match e (
            ()
            ( (App( (Lambda( (Variable lname) Nil )) rhs )) (tail(
               (local sz)
               (set sz (typecheck-sizeof (typecheck-lookup-type rhs)))
               (set ctx (ctx (StackVariable( lname (i2s(add( (s2i offset) (inv(s2i sz)) ))) (typecheck-lookup-type rhs) )) ))
               (set e1 (expr::new()) )
               (set e1 (expr::set-frame( e1 ( \t 'sub \s '$ sz , \s '%rsp \n ) )))
               (set e1 (expr::set-unframe( e1 ( \t 'add \s '$ sz , \s '%rsp \n ) )))
               (set offset (i2s (add( (s2i offset) (inv(s2i sz)) )) )) 
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               (match (typecheck-lookup-type rhs) (
                  ()
                  ( (Array( bt btsz )) (tail(
                     (set btsz (s2i btsz))
                     (local bti)
                     (set bti (dec btsz))
                     (set e3 (expr::new()))
                     (match rhs (
                        ()
                        ( (App( (App( (Literal ':) inner_rhs )) _ )) (tail(
                           (set rhs inner_rhs)
                        )))
                     ))
                     (while btsz (
                        (match (get-maybe-function( ctx 'mov (Cons( (And( Constant bt )) LocalVariable )) )) (
                           ()
                           ( (Fragment( (Variable _) body )) (
                              (local sv4)
                              (set sv4 (get-fragment-local( ctx lname offset )))
                              (local svoffset)
                              (match ((i2s btsz) rhs) (
                                 ()
                                 ( (1 _) (tail(
                                    (set e2 (compile-expr-strict( ctx rhs offset Used )))
                                 )))
                                 ( (_ (App( baserhs singlerhs )) ) (tail(
                                    (set rhs baserhs)
                                    (set e2 (compile-expr-strict( ctx singlerhs offset Used )))
                                 )))
                              ))
                              (set svoffset (i2s (add( bti (s2i(expr::get-expr sv4)) )) ))
                              (set sv4 (expr::set-expr( sv4 svoffset )))
                              (fail (TODO AssembleApplyFragment 1)) 
                              #(set e4 (assemble-apply-fragment( ctx body (App( e2 sv4 )) offset )))
                              (set e3 (expr::set-frame( e3 (  (expr::get-frame e2) (expr::get-frame e3) (expr::get-frame e4) ))))
                              (set e3 (expr::set-unframe( e3 (  (expr::get-unframe e2) (expr::get-unframe e3) (expr::get-unframe e4) ))))
                              (set e3 (expr::set-text( e3 (  (expr::get-text e2) (expr::get-text e3) (expr::get-text e4) ))))
                              (set e3 (expr::set-data( e3 (  (expr::get-data e2) (expr::get-data e3) (expr::get-data e4) ))))
                              (set e3 (expr::set-prog( e3 (  (expr::get-prog e2) (expr::get-prog e3) (expr::get-prog e4) ))))
                              (set e3 (expr::set-context( e3 ctx )))
                              (set e3 (expr::set-offset( e3 offset )))
                           ))
                           ( v (
                              (fail (ReferenceToUndefinedVariable 'mov (Cons( (And( Constant bt )) LocalVariable )) ))
                           ))
                        ))
                        (set bti (dec bti))
                        (set btsz (dec btsz))
                     ))
                     (set e2 (expr::new()))
                  ))) (_ (tail(
                     (local edst)
                     (set edst (expr::new()))
                     (set edst (expr::set-expr( edst offset )))
                     (set e2 (compile-expr-strict( ctx rhs offset Used )))
                     (set e3 (fragment-apply( ctx 'mov (Cons( (typecheck-lookup-type rhs) LocalVariable )) ((() e2) edst) e2 )))
                  )))
               ))
               (set e3 (expr::set-frame( e3 (  (expr::get-frame e1) (expr::get-frame e2) (expr::get-frame e3) ))))
               (set e3 (expr::set-unframe( e3 (  (expr::get-unframe e1) (expr::get-unframe e2) (expr::get-unframe e3) ))))
               (set e3 (expr::set-text( e3 (  (expr::get-text e1) (expr::get-text e2) (expr::get-text e3) ))))
               (set e3 (expr::set-data( e3 (  (expr::get-data e1) (expr::get-data e2) (expr::get-data e3) ))))
               (set e3 (expr::set-prog( e3 (  (expr::get-prog e1) (expr::get-prog e2) (expr::get-prog e3) ))))
               (set e3 (expr::set-data( e3 (  (expr::get-data e1) (expr::get-data e2) (expr::get-data e3) ))))
               e3
            )))
            ( (App( (App( (Literal :) (Literal lval) )) ltype )) (tail(
               (set e1 (expr::set-expr( (expr::new ()) lval )))
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (App( (App( (Literal :) lval )) ltype )) (tail(
               (set e1 (compile-expr-strict( ctx lval offset Unused )))
               e1
            )))
            ( (App( (Variable 'label) (Variable lname) )) (tail(
               (set e1 (compile-fragment( ctx e offset used )))
               e1
            )))
            ( (App( (Variable 'tail) (App( l r )) )) (tail(
               (set e1 (compile-expr-strict( ctx l offset Unused )))
               (set e2 (compile-expr-strict( (expr::get-context e1) r (expr::get-offset e1) Used )))
               (set e2 (expr::set-frame( e2 (  (expr::get-frame e1) (expr::get-frame e2)  ))))
               (set e2 (expr::set-unframe( e2 (  (expr::get-unframe e1) (expr::get-unframe e2)  ))))
               (set e2 (expr::set-text( e2 (  (expr::get-text e1) (expr::get-text e2)  ))))
               (set e2 (expr::set-data( e2 (  (expr::get-data e1) (expr::get-data e2)  ))))
               (set e2 (expr::set-prog( e2 (  (expr::get-prog e1) (expr::get-prog e2)  ))))
               e2
            )))
            ( (App ((Variable 'gensym-label) (Variable arg))) (tail(
               (set ctx (ctx (Label( arg (uuid()) )) ))
               (set e1 (expr::set-context( (expr::new()) ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (App ((Variable fname) arg)) (tail(
               (set e1 (apply-calling-convention-stack( ctx e fname arg offset used )))
               e1
            )))
            ( Nil (tail(
               (set e1 (expr::new()) )
               (set e1 (expr::set-context( e1 ctx )))
               (set e1 (expr::set-offset( e1 offset )))
               e1
            )))
            ( (App (l r)) (tail(
               (if (eq( used Used )) (
                  (fail (TODO Return Strict Cons e))
               ) (
                  (set e1 (compile-expr-strict( ctx l offset Unused )))
                  (set e2 (compile-expr-strict( (expr::get-context e1) r (expr::get-offset e1) Used )))
                  (set e2 (expr::set-frame( e2 (  (expr::get-frame e1) (expr::get-frame e2)  ))))
                  (set e2 (expr::set-unframe( e2 (  (expr::get-unframe e1) (expr::get-unframe e2)  ))))
                  (set e2 (expr::set-text( e2 (  (expr::get-text e1) (expr::get-text e2)  ))))
                  (set e2 (expr::set-data( e2 (  (expr::get-data e1) (expr::get-data e2)  ))))
                  (set e2 (expr::set-prog( e2 (  (expr::get-prog e1) (expr::get-prog e2)  ))))
                  e2
               ))
            )))
            ( _ (fail (TODO CompileStrict e)))
         ))
      ))
   ))
));

apply-calling-convention-stack := λ ctx e fname arg offset used . (tail(
   (local e1)
   (match (get-maybe-function(ctx fname (typecheck-lookup-type arg))) (
      ()
      ( (GlobalFunction mangledname) (tail(
         (set e1 (destructure-calling-convention-stack( ctx e fname arg offset used )))
         (expr::set-prog( e1 (
            (expr::get-prog e1) (enter-function()) (expr::get-expr e1) (\t 'call \s mangledname \n)
              (\t 'mov \s '%rbp, \s '%rsp              \n
               \t 'pop \s '%rbp                        \n)
         )))
      )))
      ( (Fragment( vname body )) (tail(
         ()
         (fail (TODO AssembleApplyFragment 3)) 
         #(set e (assemble-apply-fragment( ctx body arg offset )))
         e
      )))
      ( (StackVariable vname) (tail(
         (set e1 (compile-expr-strict( ctx arg offset used )))
         (local l)
         (set l (get-local( ctx fname )))
         (if l () (fail (UnknownFunctionLocal fname)))
         (expr::set-prog( e1 ( l (expr::get-prog e1) )))
      )))
      ( l (fail (UnknownFunctionCall fname l)) )
   ))
));

define-calling-convention-stack := λ ctx fname lmb . (tail(
   ()
   (match lmb (
      ()
      ( (Lambda( lhs rhs )) (tail(
         (local e1)
         (local e2)
         (local text)
         (set e1 (define-calling-convention-stack-destructure-args( ctx lhs () )))
         (local stack_offset)
         (set stack_offset (expr::get-offset e1))
         (set stack_offset (i2s(add( (s2i(stack_offset)) (s2i '-8) ))) )
         (set e2 (compile-expr-strict( (expr::get-context e1) rhs stack_offset Return)))
         (set text ( text (mangle-global-function( fname lmb )) ': \n ))
         (set text ( text (expr::get-frame e2) ))
         (set text ( text (expr::get-prog e2) ))
         (set text ( text (expr::get-unframe e2) ))
         (set text ( text (\t 'ret \n) ))
         (set text ( text (expr::get-text e2) ))
         (local return)
         (set return (expr::new()))
         (set return (expr::set-text( return text )))
         (set return (expr::set-data( return (expr::get-data e2) )))
         return
      )))
   ))
));

destructure-push-stack := λ ctx arg offset . (match arg (
   ()
   ( _ (
      (match (get-maybe-function(ctx 'push (typecheck-lookup-type arg))) (
         ()
         ( (Fragment( (Variable _) body )) (tail(
            (local e1)
            (set e1 (compile-expr-strict( ctx arg offset Used )))
            (local e2)
            (set e2 (expr::set-expr( (expr::new()) (expr::get-expr e1) )))
            (fail (TODO AssembleApplyFragment 4)) 
            #(set e2 (assemble-apply-fragment( ctx body e2 offset )))
            (set e1 (expr::set-expr( e1 (expr::get-prog e2) )))
            e1
         )))
         ( v (
            (fail (ReferenceToUndefinedVariable 'push (typecheck-lookup-type arg)))
         ))
      ))
   ))
));

destructure-calling-convention-stack := λ ctx e fname arg offset used . (tail(
   ()
   (match (typecheck-lookup-type arg) (
      ()
      ( (Cons( t1 t2 )) (
         (match arg (
            ()
            ( (App( e1 e2 )) (tail(
               (set e1 (destructure-calling-convention-stack( ctx e fname e1 offset used )))
               (set e2 (destructure-calling-convention-stack( (expr::get-context e1) e fname e1 (expr::get-offset e2) used )))
               (local e3)
               (set e3 (expr::new()))
               (set e3 (expr::set-frame (
                  (expr::get-frame e1) (expr::get-frame e2)
               )))
               (set e3 (expr::set-unframe (
                  (expr::get-unframe e1) (expr::get-unframe e2)
               )))
               (set e3 (expr::set-prog (
                  (expr::get-prog e1) (expr::get-prog e2)
               )))
               (set e3 (expr::set-expr (
                  (expr::get-expr e1) (expr::get-expr e2)
               )))
               (set e3 (expr::set-text (
                  (expr::get-text e1) (expr::get-text e2)
               )))
               (set e3 (expr::set-data (
                  (expr::get-data e1) (expr::get-data e2)
               )))
               (set e3 (expr::set-context (
                  (expr::get-context e2)
               )))
               (set e3 (expr::set-offset (
                  (expr::get-offset e2)
               )))
               e3
            )))
            ( v (
               (fail (InvalidParameter fname arg))
            ))
         ))
      ))
      ( t1 (destructure-push-stack( ctx arg offset )) )
   ))
));

define-calling-convention-stack-destructure-args := λ ctx lhs offset . (match lhs (
   ()
   ( (App( (App( (Literal :) (Variable lname) )) ltype )) (tail(
      (set ltype (typecheck-infer-type-compound ltype))
      (local size)
      (set size (typecheck-sizeof ltype))
      (local new_offset)
      (set new_offset (add( offset (inv(s2i size)) )) )
      (local return)
      (set return (expr::new()))
      (set return (expr::set-context( return 
         ( ctx (StackVariable( lname (i2s new_offset) ltype )) )
      )))
      (set return (expr::set-offset( return (i2s new_offset) )))
      return
   )))
   ( (App( more (App( (App( (Literal :) (Variable lname) )) ltype )) )) (tail(
      (set ltype (typecheck-infer-type-compound ltype))
      (local size)
      (set size (typecheck-sizeof ltype))
      (local new_offset)
      (set new_offset (add( offset (inv(s2i size)) )) )
      (set ctx (define-calling-convention-stack-destructure-args( ctx more new_offset )))
      (local return)
      (set return (expr::new()))
      (set return (expr::set-context( return 
         ( ctx (StackVariable( lname (i2s new_offset) ltype )) )
      )))
      (set return (expr::set-offset( return (i2s new_offset) )))
      return
   )))
   ( u (fail (UnknownStackArg lhs)))
));

compile-fragment := λctx e offset used . (match e (
   ()
   ( (StrictExpr _) e )
   ( (App( (App( (Variable 'as) inner_e )) _ )) (
      (compile-fragment( ctx inner_e offset used ))
   ))
   ( (App( (Variable 'label) (Variable lname) )) (tail(
      (set e (get-fragment-local( ctx lname offset )))
      (set e (expr::set-prog( (expr::new()) ((expr::get-expr e) ': \n) )))
      (set e (expr::set-context( e ctx )))
      (set e (expr::set-offset( e offset )))
      e
   )))
   ( (App( (Variable op) arg )) (tail(
      ()
      (match (get-maybe-function(ctx op (typecheck-lookup-type arg))) (
         ()
         ( (Fragment( (Variable _) body )) (tail(
            ()
            (fail (TODO AssembleApplyFragment 5)) 
            #(assemble-apply-fragment( ctx body arg offset ))
         )))
         ( v (
            (fail (ReferenceToUndefinedOperator op (typecheck-lookup-type arg)))
         ))
      ))
   )))
   ( (App( (App( (Literal :) (Literal lval) )) ltype )) (tail(
      (set ltype (typecheck-infer-type-compound ltype))
      (set e (expr::set-expr( (expr::new()) lval )))
      (set e (expr::set-context( e ctx )))
      (set e (expr::set-offset( e offset )))
      e
   )))
   ( (Variable v) (tail(
      ()
      (get-fragment-local( ctx v offset ))
   )))
   ( (Literal val) (tail(
      (set e (expr::set-expr( (expr::new()) val )))
      (set e (expr::set-context( e ctx )))
      (set e (expr::set-offset( e offset )))
      e
   )))
   ( u (fail (UnknownFragment e)))
);

get-fragment-local := λctx v offset . (tail(
   (local r)
   (while ctx (
      (match (tail ctx) (
         ()
         ( (Label(l uid)) (
            if r () (
               if (eq(l v)) (
                  (set r (expr::new()) )
                  (set r (expr::set-expr( r uid )))
                  (set r (expr::set-context( r ctx )))
                  (set r (expr::set-offset( r offset )))
                  r
               ) ()
            )
         ))
         ( (StackVariable(l loffset ltype)) (
            if r () (
               if (eq(l v)) (
                  (set r (expr::new()) )
                  (set r (expr::set-expr( r loffset )))
                  (set r (expr::set-context( r ctx )))
                  (set r (expr::set-offset( r offset )))
                  r
               ) ()
            )
         ))
         ( _ () )
      ))
      (set ctx (head ctx))
   ))
   (if r () (
      (fail (ReferenceToUndefinedFragmentVariable v))
   ))
   r
));

get-strict-function := λctx v arg_type . (tail(
   (local r)
   (while ctx (
      (match (tail ctx) (
         ()
         ( (Fragment( (Variable name) body )) (tail(
            ()
            (if r () (
               if (eq(name v)) (
                  (if (typecheck-apply-plural( (typecheck-lookup-type body) arg_type )) (
                     (set r (Fragment( (Variable name) body )))
                  ) ())
               ) ()
            ))
         )))
         ( (GlobalVariable name) (
            if r () (
               if (eq(name v)) (
                  (set r (GlobalVariable (label-case name)))
               ) ()
            )
         ))
         ( (StackVariable(name offset type)) (
            if r () (
               if (eq(name v)) (
                  (set r (StackVariable( name offset type )))
               ) ()
            )
         ))
         ( u (fail( UnknownStrictFunction u )))
      ))
      (set ctx (head ctx))
   ))
   r
));
