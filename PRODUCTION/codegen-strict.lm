
compile-expr-strict := 位ctx e offset used . (tail(
   (assert-typeof( 'compile-expr-strict::ctx ctx Context ))
   (assert-typeof( 'compile-expr-strict::e e Or<[Or<[Or<[App,Nil]>,Variable]>,Literal]> ))
   (assert-typeof( 'compile-expr-strict::offset offset Atom ))
   (assert-typeof( 'compile-expr-strict::used used Atom ))
));

get-strict-function := 位ctx v arg_type . (tail(
   (assert-typeof( 'get-strict-function::ctx ctx Context ))
   (assert-typeof( 'get-strict-function::v v Atom ))
   (match (context::lookup( ctx v arg_type )) (
      ()
      ( (Fragment( body )) (
         (Fragment body)
      ))
      ( (GlobalFunction( body )) (
         (GlobalFunction body)
      ))
      ( (GlobalVariable( body )) (
         (GlobalVariable (label-case v))
      ))
      ( (Label lid) (
         (Label lid)
      ))
      ( (StackVariable sv-offset) (
         (StackVariable sv-offset)
      ))
      ( u (fail( UnknownStrictFunction v arg_type u )))
   ))
));

strict-codegen-type-case := 位 ctx base-type type-body case-number . (tail(
   (assert-typeof( 'strict-codegen-type-case::ctx ctx Context ))
   (if (typecheck-is-fragment base-type) () (match type-body (
      ()
      ( (App( (Literal enum-case) args )) (tail(
         (local args_type)
         (set args_type (typecheck-infer-type-compound args))

         (local body)
         (set body (Lambda(
            (App(
               (App( (App( (Literal ':) (Variable 'src) )) (Literal Constant) ))
               (App( (App( (Literal ':) (Variable 'dst) )) (Literal LocalVariable) ))
            ))
            (App( (Variable '.program) (
               \t 'movq \s '$ case-number ', \s
               (App( (Variable '.expression) (Variable 'dst) )) \s
               \[ '%rbp \] \n
            )))
         )))
         (typecheck-ascript( body ('->(
            (Cons( (And( enum-case base-type )) LocalVariable ))
            Nil
         ))))
         (set ctx (context::bind( ctx 'mov (Fragment( body )) )))
      )))
      ( (Literal enum-case) (tail(
         #define 'mov initializer
         (local body)
         (set body (Lambda(
            (App(
               (App( (App( (Literal ':) (Variable 'src) )) (Literal Constant) ))
               (App( (App( (Literal ':) (Variable 'dst) )) (Literal LocalVariable) ))
            ))
            (App( (Variable '.program) (
               \t 'movq \s '$ case-number ', \s
               (App( (Variable '.expression) (Variable 'dst) )) \s
               \[ '%rbp \] \n
            )))
         )))
         (typecheck-ascript( body ('->(
            (Cons( (And( enum-case base-type )) LocalVariable ))
            Nil
         ))))
         (set ctx (context::bind( ctx 'mov (Fragment( body )) )))

         #define '.0 accessor
         (set body (Lambda(
            (App( (App( (Literal ':) (Variable 'src) )) (Literal LocalVariable) ))
            (App(
               (App( (Variable '.program) (
                  \t 'movq \s (App( (Variable '.expression) (Variable 'src) )) \s \[ '%rbp \] ,
                  \s '%r15 \n
               )))
               (App( (Variable '.expression) (
                  'r15
               )))
            ))
         )))
         (typecheck-ascript( body ('->(
            (And( base-type LocalVariable ))
            Reg64
         ))))
         (set ctx (context::bind( ctx '0 (Fragment( body )) )))

      )))
      ( () () )
      ( u (tail(
         (fail ('strict-codegen-type-case u))
      )))
   )))
   (assert-typeof( 'strict-codegen-type-case::ctx ctx Context ))
   ctx
));

strict-codegen-type := 位 ctx type-name type-body case-number . (match type-body (
   ()
   ( (App( (App( tds (Variable '|) )) body )) (tail(
      (local base-type)
      (set base-type (typecheck-infer-type-compound type-name))
      (local next-case-number)
      (set next-case-number (i2s(inc(s2i( case-number )))))
      (set ctx (strict-codegen-type( ctx type-name tds next-case-number )))
      (strict-codegen-type-case( ctx base-type body case-number ))
   )))
   ( body (tail(
      (local base-type)
      (set base-type (typecheck-infer-type-compound type-name))
      (strict-codegen-type-case( ctx base-type type-body case-number ))
   )))
));
