
compile-argv-hook                        := ();

compile-fragment := 位ctx e offset used . (match e (
   ()
   ( (App( (App( (Variable 'as) inner_e )) _ )) (
      (compile-fragment( ctx inner_e offset used ))
   ))
   ( (App( (Variable 'label) (Variable lname) )) (tail(
      (set e (get-fragment-local( ctx lname offset )))
      (Expr(
         () ( (get-prog e) ': \n ) () () () ctx offset
      ))
   )))
   ( (App( (Variable op) arg )) (tail(
      ()
      (match (get-maybe-function(ctx op (typecheck-lookup-type arg))) (
         ()
         ( (Fragment( (Variable _) body )) (tail(
            ()
            (assemble-apply-fragment( ctx body arg offset ))
         )))
         ( v (
            (fail (ReferenceToUndefinedOperator op (typecheck-lookup-type arg)))
         ))
      ))
   )))
   ( (App( (App( (Literal :) (Literal lval) )) ltype )) (tail(
      (set ltype (typecheck-infer-type-compound ltype))
      (Expr( () lval () () () ctx offset ))
   )))
   ( (Variable v) (tail(
      ()
      (get-fragment-local( ctx v offset ))
   )))
   ( (Literal val) (
      (Expr( () val () () () ctx offset ))
   ))
   ( u (fail (UnknownFragment e)))
);

# Compile Codegen

compile-include-argv := 位. if compile-argv-hook () (set compile-argv-hook (compile-argv-hook (
   \t 'pop \s '%r10                    \n # put argc in '%r10
   \t 'mov \s '$argv, \s '%r9          \n
   \t 'movq \s '$0, \s '0 \[ '%r9 \]   \n
   \t 'movq \s '$0, \s '8 \[ '%r9 \]   \n

   'before_main_argv:                  \n
   \t 'cmp \s '$0, \s '%r10            \n
   \t 'je \s 'before_main_end          \n

   \t 'pop \s '%r12                    \n #this = argv[i]
   \t 'mov \s '$0, \s '%r13            \n
   (close())                              #r8 is argv[i]

   \t 'mov \s '%r8, \s '0 \[ '%r9 \]   \n #set t.head = argv[i]
   \t 'mov \s '$0, \s '%r12            \n
   \t 'mov \s '$0, \s '%r13            \n
   (close())
   \t 'mov \s '%r8, \s '8 \[ '%r9 \]   \n #set t.tail = ()
   \t 'mov \s '%r8, \s '%r9            \n #set t = t.tail

   \t 'dec \s '%r10                    \n #dec argc
   \t 'jmp \s 'before_main_argv        \n

   'before_main_end:                   \n
)));

compile-append := 位output_e gctx e . (tail(
   (set e (compile-expr( gctx e (get-offset output_e) Used )))
   (Expr(
      ((get-frame output_e) (get-frame e))
      ((get-prog output_e) (get-prog e))
      ((get-unframe output_e) (get-unframe e))
      ((get-text output_e) (get-text e))
      ((get-data output_e) (get-data e))
      (get-pc e)
      (get-offset e)
   ))
));

compile-expr := 位ctx e offset used . (tail(
   (local e1)
   (local e2)
   (local e3)
   (local prog)
   (local tail_safe)
   (local return)
   (set return (match e (
      ()
      ( (Variable '$_) (tail(
         ()
         (Expr( () () () () () ctx offset ))
      )))
      ( (Variable 'argv) (tail(
         (compile-include-argv())
         (set prog (prog ( \t 'mov \s '$argv, \s '%r8 \n )))
         (set prog (prog ( \t 'mov \s '0 \[ '%r8 \] , '%r12 \n )))
         (set prog (prog ( \t 'mov \s '8 \[ '%r8 \] , '%r13 \n )))
         (Expr( () prog () () () ctx offset ))
      )))
      ( (Variable vname) (tail(
         ()
         (if config-strict (
            (Expr( () (get-local(ctx vname)) () () () ctx offset ))
         ) (
            (Expr( () (get-local(ctx vname)) () () () ctx offset ))
         ))
      )))
      ( (App( (App( (Literal :) (Literal lval) )) ltype )) (tail(
         ()
         (fail (TODO CompileExpressionLiteral e))
      )))
      ( (App( (App( (Literal :) inner_expr )) (Literal ltype) )) (tail(
         ()
         (compile-expr( ctx inner_expr offset used ))
      )))
      ( (App ((Variable 'local) (Variable fname))) (tail(
         (set e1 (declare-local(ctx fname offset)))
         (Expr( (get-frame e1) ((yield-nil()) (get-prog e1)) (get-unframe e1) (get-text e1) (get-data e1) (get-pc e1) (get-offset e1) ))
      )))
      ( (App ((Variable 'label) (Variable lname))) (tail(
         ()
         (set e1 (compile-fragment( ctx e offset used )))
         e1
      )))
      ( (App ((Variable 'gensym-label) (Variable fname))) (tail(
         (set ctx (ctx (Label( fname (uuid()) )) ))
         (Expr( () () () () () ctx offset ))
      )))
      ( (App( (Lambda( (Variable lhs) rhs )) bind )) (tail(
         (if config-strict (
            fail (TODO CompileLambdaStrict)
         ) ())
         (set e1 (declare-local(ctx lhs offset)))
         (set e2 (compile-expr((get-pc e1) bind (get-offset e1) Used)))
         (set e3 (compile-expr((get-pc e2) rhs (get-offset e2) Used)))
         (set prog ( prog (yield-nil()) (get-prog e1) ))
         (set prog ( prog (get-prog e2) (set-local((get-pc e2) lhs)) ))
         (set prog ( prog (get-prog e3) ))
         (Expr(
            ((get-frame e1) (get-frame e2) (get-frame e3))
            prog
            ((get-unframe e1) (get-unframe e2) (get-unframe e3))
            ((get-text e1) (get-text e2) (get-text e3))
            ((get-data e1) (get-data e2) (get-data e3))
            (get-pc e3) (get-offset e3)
         ))
      )))
      ( (App( (App( (Variable 'set) (Variable vname) )) x )) (tail(
         (set e1 (compile-expr(ctx x offset Used)))
         (set prog ((get-prog e1) (set-local(ctx vname))))
         (Expr( (get-frame e1) prog (get-unframe e1) (get-text e1) (get-data e1) (get-pc e1) (get-offset e1) ))
      )))
      ( (App( (App( (Variable 'while) c )) d )) (tail(
         (set e1 (compile-expr(ctx c offset Used)))
         (set e2 (compile-expr((get-pc e1) d (get-offset e1) Unused)))
         (local label_while_start)
         (set label_while_start (uuid()))
         (local label_while_end)
         (set label_while_end (uuid()))
         (set prog (prog (label_while_start ': \n)))
         (set prog (prog (get-prog e1)))
         (set prog (prog (\t 'cmp \s '$0, \s '%r12 \n)))
         (set prog (prog (\t 'je \s label_while_end \n)))
         (set prog (prog (get-prog e2)))
         (set prog (prog (\t 'jmp \s label_while_start \n)))
         (set prog (prog (label_while_end ': \n)))
         (set tail_safe True)
         (Expr( ((get-frame e1) (get-frame e2)) prog ((get-unframe e1) (get-unframe e2)) ((get-text e1) (get-text e2)) ((get-data e1) (get-data e2)) (get-pc e2) (get-offset e2) ))
      )))
      ( (App( (Variable 'exit) (Literal _) )) (tail(
         (set tail_safe True)
         (set prog (
            \t 'mov \s '$60, \s '%rax          \n
            \t 'mov \s '$1 , \s '%rdi          \n
            \t 'syscall                        \n
         ))
         (Expr( () prog () () () ctx offset ))
      )))
      ( (App( (App( (App( (Variable 'if) c )) t )) f )) (tail(
         (set e1 (compile-expr(ctx c offset Used)))
         (set e2 (compile-expr( (get-pc e1) t (get-offset e1) Used )))
         (set e3 (compile-expr( (get-pc e2) f (get-offset e2) Used )))
         (local label_if_true)
         (set label_if_true (uuid()))
         (local label_if_end)
         (set label_if_end (uuid()))
         (set prog (prog (get-prog e1)))
         (set prog (prog ( \t 'cmp \s '$0, '%r12 \n )))
         (set prog (prog ( \t 'jne \s label_if_true \n )))
         (set prog (prog ( \t 'cmp \s '$0, '%r13 \n )))
         (set prog (prog ( \t 'jne \s label_if_true \n )))
         (set prog (prog (get-prog e3)))
         (set prog (prog ( \t 'jmp \s label_if_end \n )))
         (set prog (prog ( label_if_true ': \n )))
         (set prog (prog (get-prog e2)))
         (set prog (prog ( label_if_end ': \n )))
         (Expr(
            ((get-frame e1) (get-frame e2) (get-frame e3))
            prog
            ((get-unframe e1) (get-unframe e2) (get-unframe e3))
            ((get-text e1) (get-text e2) (get-text e3))
            ((get-data e1) (get-data e2) (get-data e3))
            (get-pc e3)
            (get-offset e3)
         ))
      )))
      ( (App( (App( (Variable 'match) t )) p )) (tail(
         (set e1 (compile-expr(ctx t offset Used)))
         (set e2 (yield-patterns((get-pc e1) p (get-offset e1))))
         (local label_skip)
         (set label_skip (uuid()))
         (set prog ((get-prog e1) (get-prog e2)))
         (set prog (prog ( \t 'cmp \s '$0, \s '%r14 \n )))
         (set prog (prog ( \t 'jne \s label_skip \n )))
         (set prog (prog (yield-nil())))
         (set prog (prog ( label_skip ': \n )))
         (Expr(
            ((get-frame e1) (get-frame e2))
            prog
            ((get-unframe e1) (get-unframe e2))
            ((get-text e1) (get-text e2))
            ((get-data e1) (get-data e2))
            (get-pc e2)
            (get-offset e2)
         ))
      )))
      ( (App ((Variable fname) arg)) (tail(
         ()
         (if config-strict (
            (apply-calling-convention-stack( ctx e fname arg offset used ))
         ) (
            (apply-calling-convention-s( ctx e fname arg offset used ))
         ))
      )))
      ( (Literal l) (tail(
         ()
         (yield-atom (ctx l offset))
      )))
      ( Nil (tail(
         (set prog (prog ( \t 'mov \s '$0 , '%r12 \n )))
         (set prog (prog ( \t 'mov \s '$0 , '%r13 \n )))
         (set tail_safe True)
         (Expr( () prog () () () ctx offset ))
      )))
      ( (App (l r)) (tail(
         (set tail_safe True)
         (yield-cons(ctx l r e offset used))
      )))
      ( (GlobalVariable mangled-name) (tail(
         (set prog (
            \t 'mov \s '$ mangled-name , \s '%r15   \n
            \t 'mov \s '0 \[ '%r15 \] , \s '%r12     \n
            \t 'mov \s '8 \[ '%r15 \] , \s '%r13     \n
         ))
         (Expr( () prog () () () ctx offset ))
      )))
      ( u (fail (UnrecognizedExpression u)) )
   )))
   (if tail_safe return (tail(
      ()
      (if (eq(used Tail)) (tail(
         (set prog (get-prog return))
         (set prog (prog (\t 'call \s 'tail \n)))
         (Expr( (get-frame return) prog (get-unframe return) (get-text return) (get-data return) (get-pc return) (get-offset return) ))
      )) (
         return
      ))
   )))
));

