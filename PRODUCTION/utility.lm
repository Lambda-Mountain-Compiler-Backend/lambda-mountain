
merge-list := λl r . (tail( if l (
   (while r (
      (set l (l (tail r)))      
      (set r (head r))
   ))
   l
) r ));

is-suffix := λs suff . (tail(
   (local match)
   (while s (
      (if (eq( s suff )) (set match True) ())
      (set s (tail-string s))
   ))
   match
));

remove-suffix := λs suff . (tail(
   (local prefix)
   (while s (
      (if (eq( s suff )) (
         (set s ())
      ) (
         (set prefix (prefix (clone-rope (head-string s))))
         (set s (tail-string s))
      ))
   ))
   (clone-rope prefix)
));

fail := λmsg . (print-s msg) (exit 1);

deep-eq := λl r . match (l r) (
   ()
   ( (() ()) True )
   ( ((ll lr) (rl rr)) (
      if (deep-eq( ll rl )) (
         (deep-eq( lr rr ))
      ) ()
   ))
   ( (la ra) (eq( la ra )) )
);

reverse-list := λl . (tail(
   (local r)
   (while l (
      (set r ( (tail l) r ))
      (set l (head l))
   ))
   r
));

label-case := λk . (match k (
   ()
   (() ())
   ((l r) ('_ (label-case l) (label-case r) '_))
   (a (label-case-atom a))
));

label-case-atom := λk . (tail(
   (local nk)
   (while k (match (head-string k) (
      ()
      (() ())
      ('- (
         (set nk (nk '_))
         (set k (tail-string k))
      ))
      (': (
         (set nk (nk '_C_))
         (set k (tail-string k))
      ))
      ('< (
         (set nk (nk '_LB_))
         (set k (tail-string k))
      ))
      ('> (
         (set nk (nk '_RB_))
         (set k (tail-string k))
      ))
      (\[ (
         (set nk (nk '_LP_))
         (set k (tail-string k))
      ))
      (\] (
         (set nk (nk '_RP_))
         (set k (tail-string k))
      ))
      ('$ (
         (set nk (nk '_DS_))
         (set k (tail-string k))
      ))
      (c (
         (set nk (nk (clone-rope c)))
         (set k (tail-string k))
      ))
   )))
   (clone-rope nk)
));

is-variable := λv . (match (head-string v) (
   ()
   ('@ True )
   ('? True )
   ('! True )
   ('= True )
   ('> True )
   ('< True )
   ('/ True )
   ('* True )
   ('+ True )
   ('- True )
   ('$ True )
   ('& True )
   ('| True )
   ('_ True )
   ('a True )
   ('b True )
   ('c True )
   ('d True )
   ('e True )
   ('f True )
   ('g True )
   ('h True )
   ('i True )
   ('j True )
   ('k True )
   ('l True )
   ('m True )
   ('n True )
   ('o True )
   ('p True )
   ('q True )
   ('r True )
   ('s True )
   ('t True )
   ('u True )
   ('v True )
   ('w True )
   ('x True )
   ('y True )
   ('z True )
));

i2s := λi . (tail(
   (local ten)
   (set ten( inc(inc(inc(inc(inc( inc(inc(inc(inc(inc( ))))) ))))) ))
   (local sign)
   (local s)
   (local r)
   (if (is-neg i) (
      (set sign '-)
      (set i (inv i))
   ) ())
   (while i (
      (set r (mod(i ten)))
      (set s ((clone-rope(digit r) s)))
      (set i (div(i ten)))
   ))
   (if s () (set s 0))
   (clone-rope (sign s))
));

s2i := λs . (tail(
   (local i)
   (local is_neg)
   (local one)
   (local two)
   (local three)
   (local four)
   (local five)
   (local six)
   (local seven)
   (local eight)
   (local nine)
   (local ten)
   (set one( inc() ))
   (set two( inc(inc( )) ))
   (set three( inc(inc(inc( ))) ))
   (set four( inc(inc(inc(inc( )))) ))
   (set five( inc(inc(inc(inc(inc( ))))) ))
   (set six( inc( inc(inc(inc(inc(inc( ))))) ) ))
   (set seven( inc(inc( inc(inc(inc(inc(inc( ))))) )) ))
   (set eight( inc(inc(inc( inc(inc(inc(inc(inc( ))))) ))) ))
   (set nine( inc(inc(inc(inc( inc(inc(inc(inc(inc( ))))) )))) ))
   (set ten( inc(inc(inc(inc(inc( inc(inc(inc(inc(inc( ))))) ))))) ))
   (if (eq( (head-string s) '- )) (
      (set is_neg True)
      (set s (tail-string s))
   ) ())
   (while s (
      (set i (mul( i ten )))
      (match (head-string s) (
         ()
         ('0 ())
         ('1 (set i (add( i one )))) 
         ('2 (set i (add( i two )))) 
         ('3 (set i (add( i three )))) 
         ('4 (set i (add( i four )))) 
         ('5 (set i (add( i five )))) 
         ('6 (set i (add( i six )))) 
         ('7 (set i (add( i seven )))) 
         ('8 (set i (add( i eight ))))          
         ('9 (set i (add( i nine ))))          
         (u (fail (InvalidDigit u)))
      ))
      (set s (tail-string s))
   ))
   (if is_neg (
      (mul( (dec()) i ))
   ) i )
));

uuid-counter := ();
uuid := λ . (tail(
   (set uuid-counter (inc uuid-counter))
   (clone-rope ('uuid_ (dump-i uuid-counter)))
));

is-builtin := λf . (match f (
   ()
   ('is True)
   ('is-atom True)
   ('is-cons True)
   ('eq True)
   ('not True)
   ('head True)
   ('head-string True)
   ('tail-string True)
   ('tail True)
   ('inc True)
   ('dec True)
   ('add True)
   ('mul True)
   ('div True)
   ('mod True)
   ('inv True)
   ('is-neg True)
   ('digit True)
   ('dump-i True)
   ('print-s True)
   ('print-i True)
   ('print-p True)
   ('print-p True)
   ('print-d True)
   ('clone-rope True)
   ('write-file True)
   ('load-file True)
   (_ ())
));



assert-eq := λ loc l r . (
   (if (deep-eq( l r )) () (
      (print-s FailedAssertEqual)(print-s \s)(print-s 'in)(print-s \s)(print-s loc)(print-s \n)
      (print-s \t)(print-s l)(print-s \n)
      (print-s \t)(print-s r)(print-s \n)
      (exit 1)
   ))
));

assert-typeof := λ loc term tt . (tail(
   (set tt (parse-typeof tt))
   (if (is-typeof( term tt )) () (
      (print-s FailedAssertTypeof)(print-s \s)(print-s 'in)(print-s \s)(print-s loc)(print-s \n)
      (print-s \t)(print-s tt)(print-s \n)
      (print-s \t)(print-s term)(print-s \n)
      (exit 1)
   ))
));

assert-not-typeof := λ loc term tt . (tail(
   (set tt (parse-typeof tt))
   (if (is-typeof( term tt )) (
      (print-s FailedAssertNotTypeof)(print-s \s)(print-s 'in)(print-s \s)(print-s loc)(print-s \n)
      (print-s \t)(print-s tt)(print-s \n)
      (print-s \t)(print-s term)(print-s \n)
      (exit 1)
   ) ())
));

parse-parameter-typeof := λ tt . (tail(
   (assert-eq( 'parse-parameter-typeof '< (head-string tt) ))
   (set tt (tail-string tt))
   (local inner)
   (local depth)
   (while tt (
      (match (head-string tt) (
         ()
         ('< (tail(
            (set inner (inner '<))
            (set depth (inc depth))
         )))
         ('> (
            (if depth (
               (set inner (inner '>))
               (set depth (dec depth))
            ) (
               (assert-eq( 'parse-parameter-typeof () (tail-string tt) ))
            ))
         ))
         (c (set inner (inner (clone-rope c)) ))
      ))
      (set tt (tail-string tt))
   ))
   (parse-typeof (clone-rope inner))
));

parse-tuple-typeof := λ tt . (tail(
   (assert-eq( 'parse-tuple-typeof '[ (head-string tt) ))
   (set tt (tail-string tt))
   (local inner)
   (local base)
   (local depth)
   (while tt (
      (match (head-string tt) (
         ()
         ('[ (tail(
            (set inner (inner '[))
            (set depth (inc depth))
         )))
         ('] (
            (if depth (
               (set inner (inner ']))
               (set depth (dec depth))
            ) (
               (assert-eq( 'parse-tuple-typeof () (tail-string tt) ))
            ))
         ))
         (', (tail(
            (if depth (
               (set inner (inner ',))
            ) (
               (set inner (parse-typeof (clone-rope inner) ))
               (if base (
                  (set base ('[] ( base inner )))
               ) (
                  (set base inner)
               ))
               (set inner ())
            ))
         )))
         (c (set inner (inner (clone-rope c)) ))
      ))
      (set tt (tail-string tt))
   ))
   (if base (
      (set base ('[] ( base (parse-typeof (clone-rope inner )) )))
   ) (
      (set base (parse-typeof (clone-rope inner)))
   ))
   base
));

parse-typeof := λ tt . (tail(
   (local buff)
   (local base)
   (if (is-cons tt) (
      (set base tt)
      (set tt ())
   ) ())
   (while tt (
      (match (head-string tt) (
         ()
         ('[ (tail(
            (set base (parse-tuple-typeof tt))
            (set tt ())
         )))
         ('< (tail(
            (set base ( (clone-rope buff) (parse-parameter-typeof tt) ))
            (set tt ())
         )))
         (c (set buff (buff (clone-rope c)) ))
      ))
      (set tt (tail-string tt))
   ))
   (if base base (clone-rope buff))
));

is-typeof := λ term tt . (match tt (
   ()
   ( Nil (not term) )
   ( Atom (is-atom term) )
   ( Cons (is-cons term) )
   ( (List te) (
      (if (is-cons term) (
         (if (is-typeof( (tail term) te )) (
            (is-typeof( (head term) tt ))
         ) ())
      ) (
         (not term)
      ))
   ))
   ( ('[] ( lt rt )) (
     (if (is-cons term) (
        (if (is-typeof( (head term) lt )) (
           (is-typeof( (tail term) rt ))
        ) ())
     ) ())
   ))
   ( (l r) (fail (UnknownTypeofType tt)))
   ( () (fail (UnknownTypeofType tt)))
   ( label (eq( (head term) label )) )
));
