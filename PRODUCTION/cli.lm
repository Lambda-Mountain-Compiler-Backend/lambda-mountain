
# Dependencies

import STDLIB/default-cons-allocator.lm;
import STDLIB/default-atom-allocator.lm;

import PRODUCTION/utility.lm;
import PRODUCTION/tokenize.lm;
import PRODUCTION/parse.lm;
import PRODUCTION/preprocess.lm;
import PRODUCTION/typecheck.lm;
import PRODUCTION/expression.lm;
import PRODUCTION/codegen-dynamic.lm;
import PRODUCTION/codegen-strict.lm;
import PRODUCTION/assemble.lm;
import PRODUCTION/data.lm;

# Static Globals

config-nostd                             := ();
config-strict                            := ();
cli-config                               := ();

# Cli Entry Point

main := (
   (local inputs)
   (local args)

   (typecheck-init())

   (local mode)
   (set mode Compile)

   (set args (tail argv))

   (while args (match args (
      ()
      ( ('-o (tgt remainder)) (
         (set cli-config ( cli-config (Target tgt)))
         (set args remainder)
      ))
      ( ('--compile remainder) (
         (set mode Compile)
         (set args remainder)
      ))
      ( ('--strict remainder) (
         (set config-strict True)
         (set args remainder)
      ))
      ( ('--parse remainder) (
         (set mode Parse)
         (set args remainder)
      ))
      ( ('--nostd remainder) (
         (set config-strict True)
         (set config-nostd True)
         (set args remainder)
      ))
      ( ('--parse-expression remainder) (
         (set mode ParseExpression)
         (set args remainder)
      ))
      ( ('--tokenize remainder) (
         (set mode Tokenize)
         (set args remainder)
      ))
      ( ('--typecheck remainder) (
         (set mode Typecheck)
         (set args remainder)
      ))
      ( (fp remainder) (
         (set inputs (fp inputs))
         (set args remainder)
      ))
      ( u (
         fail (UnexpectionCommand u)
      ))
   )))

   (while inputs (match mode (
      ()
      (Compile (
         (parse-program (tokenize-file (head inputs)))
         (set inputs (tail inputs))
      ))
      (Parse (
         (parse-program (tokenize-file (head inputs)))
         (set inputs (tail inputs))
      ))
      (Typecheck (
         (parse-program (tokenize-file (head inputs)))
         (set inputs (tail inputs))
      ))
      (ParseExpression (
         (print-s (parse-expression (tokenize-file (head inputs))))
         (set inputs (tail inputs))
      ))
      (Tokenize (
         (print-s (tokenize-file (head inputs)))
         (set inputs (tail inputs))
      ))
      (u (
         (fail (UnknownMode u))
      ))
   )))

   (set parse-parsed-program (preprocess-apply-macros parse-parsed-program))
   (if config-strict (typecheck parse-parsed-program) ())

   (match mode (
      ()
      (Compile (assemble parse-parsed-program))
      (Parse (print-s parse-parsed-program))
      (Typecheck (print-s (typecheck-show-ascript (typecheck parse-parsed-program))))
   ))
);

