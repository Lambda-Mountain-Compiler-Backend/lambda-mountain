

stack-call := 位 ctx function-name function-args offset . (tail(
   (assert-typeof( 'stack-call::function-name function-name Atom ))
   (assert-typeof( 'stack-call::offset offset Atom ))
   (match (get-strict-function(ctx function-name (typecheck-lookup-type function-args))) (
      ()
      ( (GlobalFunction mangledname) (tail(
         (fail (TODO Call Global))
         #(set e1 (destructure-calling-convention-stack( ctx e fname arg offset used )))
         #(expr::set-prog( e1 (
         #   (expr::get-prog e1) (enter-function()) (expr::get-expr e1) (\t 'call \s mangledname \n)
         #     (\t 'mov \s '%rbp, \s '%rsp              \n
         #      \t 'pop \s '%rbp                        \n)
         #)))
      )))
      ( (Fragment( vname body )) (tail(
         (local e1)
         (set e1 (expr::new()))
         (set e1 (expr::set-offset( e1 offset )))
         (set e1 (expr::set-context( e1 ctx )))
         (local args)
         (set args (stack-destructure-args( ctx function-args offset Fragment )))
         (fragment-apply-direct(
            (get-strict-function( ctx function-name (typecheck-lookup-type function-args) ))
            args e1
         ))
      )))
      ( l (fail (UnknownFunctionCall function-name l)) )
   ))
));

stack-destructure-args := 位 ctx function-args offset arg-mode . (tail(
   (assert-typeof( 'stack-destructure-args::arg-mode arg-mode Atom ))
   (match ( function-args (typecheck-lookup-type function-args) arg-mode ) (
      ()
      ( ( (App( fl fr )) (Cons( tl tr )) Fragment ) (tail(
         (local inner-e)
         (set inner-e (stack-destructure-args( ctx fl offset Fragment )))
         (local outer-e)
         (set outer-e (compile-expr-strict( ctx fr offset Used )))
         (inner-e outer-e)
      )))
      ( ( fa tt Fragment ) (tail(
         (local outer-e)
         (set outer-e (compile-expr-strict( ctx fa offset Used )))
         (() outer-e)
      )))
      ( u (fail ('stack-destructure-args u )))
   ))
));

stack-define := 位 ctx fname lmb . (tail(
   ()
   (match lmb (
      ()
      ( (Lambda( lhs rhs )) (tail(
         (print-s (Define lmb))(print-s \n)
         (local e1)
         (local e2)
         (local text)
         (set e1 (stack-define-destructure( ctx lhs () )))
         (local stack_offset)
         (set stack_offset (expr::get-offset e1))
         (set stack_offset (i2s(add( (s2i(stack_offset)) (s2i '-8) ))) )
         (set e2 (compile-expr-strict( (expr::get-context e1) rhs stack_offset Return)))
         (set text ( text (mangle-global-function( fname lmb )) ': \n ))
         (set text ( text (expr::get-frame e2) ))
         (set text ( text (expr::get-prog e2) ))
         (set text ( text (expr::get-unframe e2) ))
         (set text ( text (\t 'ret \n) ))
         (set text ( text (expr::get-text e2) ))
         (local return)
         (set return (expr::new()))
         (set return (expr::set-text( return text )))
         (set return (expr::set-data( return (expr::get-data e2) )))
         (print-s (Defined return))(print-s \n)
         return
      )))
   ))
));

stack-define-destructure := 位 ctx lhs offset . (match lhs (
   ()
   ( (App( (App( (Literal :) (Variable lname) )) ltype )) (tail(
      (set ltype (typecheck-infer-type-compound ltype))
      (local size)
      (set size (typecheck-sizeof ltype))
      (local new_offset)
      (set new_offset (add( offset (inv(s2i size)) )) )
      (local return)
      (set return (expr::new()))
      (set return (expr::set-context( return
         ( ctx (StackVariable( lname (i2s new_offset) ltype )) )
      )))
      (set return (expr::set-offset( return (i2s new_offset) )))
      (() return)
   )))
   ( (App( more (App( (App( (Literal :) (Variable lname) )) ltype )) )) (tail(
      (set ltype (typecheck-infer-type-compound ltype))
      (local size)
      (set size (typecheck-sizeof ltype))
      (local new_offset)
      (set new_offset (add( offset (inv(s2i size)) )) )
      (set ctx (stack-define-destructure( ctx more new_offset )))
      (local return)
      (set return (expr::new()))
      (set return (expr::set-context( return
         ( ctx (StackVariable( lname (i2s new_offset) ltype )) )
      )))
      (set return (expr::set-offset( return (i2s new_offset) )))
      return
   )))
   ( u (fail (UnknownStackArg lhs)))
));
