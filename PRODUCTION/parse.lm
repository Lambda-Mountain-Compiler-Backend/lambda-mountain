
parse-parsed-program                     := ();
parse-macros                             := ();
parse-suffix                             := ();

parse-program := λtoks . (tail(
   (local pme)
   (local pme2)
   (while toks (
      match toks (
         ()
         ((\: remainder) (
            (set toks remainder)
         ))
         (('macro remainder) (
            (set pme (parse-one-expression remainder))
            (set remainder (tail pme))
            (set pme2 (parse-one-expression remainder))
            (set parse-macros (parse-macros (Macro( (head pme) (head pme2) )) ))
            (set toks (tail pme2))
         ))
         (('fragment ('type remainder)) (
            (set pme (parse-one-expression remainder))
            (set remainder (tail pme))
            (set pme2 (parse-many-expressions remainder))
            (set parse-parsed-program ( parse-parsed-program (Type( (head pme) (head pme2) )) ))
            (set typecheck-fragment-types ( typecheck-fragment-types
               (typecheck-infer-type-compound (head pme))
            ))
            (set toks (tail pme2))
         ))
         (('fragment remainder) (
            (set pme (parse-one-expression remainder))
            (set remainder (tail pme))
            (parse-expect( := remainder ))
            (set remainder (tail remainder))
            (set pme2 (parse-many-expressions remainder))
            (set parse-parsed-program ( parse-parsed-program (Fragment( (head pme) (head pme2) )) ))
            (set toks (tail pme2))
         ))
         (('type remainder) (
            (set pme (parse-one-expression remainder))
            (set remainder (tail pme))
            (set pme2 (parse-many-expressions remainder))
            (set parse-parsed-program ( parse-parsed-program (Type( (head pme) (head pme2) )) ))
            (set toks (tail pme2))
         ))
         (('atom ('suffix (atype (suffix remainder)))) (
            (set parse-suffix (parse-suffix (atype suffix)))
            (set toks remainder)
         ))
         (('size remainder) (
            (set pme (parse-one-expression remainder))
            (set remainder (tail pme))
            (set pme2 (parse-one-expression remainder))
            (typecheck-set-size( (typecheck-infer-type-compound (head pme)) (typecheck-infer-type-compound (head pme2)) ))
            (set toks (tail pme2))
         ))
         (('import (relative-path remainder)) (
            (parse-program (tokenize-file relative-path))
            (set toks remainder)
         ))
         ((key (:= remainder)) (
            (set pme (parse-many-expressions remainder))
            (set parse-parsed-program ( parse-parsed-program (Global (key (head pme))) ))
            (set toks (tail pme))
         ))
         (remainder (
            (set pme (parse-many-expressions remainder))
            (set parse-parsed-program (parse-parsed-program (GExpr (head pme)) ))
            (set toks (tail pme))
         ))
      )
   ))
));

parse-macro-yield-uuids := λids program . (match program (
   ()
   ( (App( (Variable 'uuid) (Variable x) )) (
      (ids ( x (Variable (uuid())) ))
   ))
   ( (l r) (
      (parse-macro-yield-uuids( (parse-macro-yield-uuids( ids l )) r ))
   ))
   ( u ids )
));

parse-macro-substitute-uuids := λids program . (match program (
   ()
   ( (App( (Variable 'uuid) (Variable x) )) (tail(
      (local id)
      (set id program)
      (while ids (tail(
         (local bind)
         (set bind (tail ids))
         (set ids (head ids))
         (if (eq( (head bind) x )) (
            (set id (tail bind))
         ) ())
      )))
      id
   )))
   ( (l r) (
      (parse-macro-substitute-uuids( ids l ))
      (parse-macro-substitute-uuids( ids r ))
   ))
   ( a a )
));

parse-lambda := λtoks . (tail(
   (local remainder)
   (local pme)
   (set pme (parse-one-expression toks))
   (local lmb)
   (set lmb (head pme))
   (set toks (tail pme))
   (match lmb (
      ()
      ((Literal .) (
         (set pme (parse-many-expressions toks))
         (set lmb (Nil (head pme)))
         (set remainder (tail pme))
         (set toks ())
      ))
   ))
   (while toks (
      (set pme (parse-one-expression toks))
      (match pme (
         ()
         (((Literal .) r) (
            (set pme (parse-many-expressions r))
            (set lmb (lmb (head pme)))
            (set remainder (tail pme))
            (set toks ())
         ))
         ((e ()) (
            (parse-expect( . toks ))
            (set toks ())
         ))
         ((e r) (
            (set lmb (App (lmb e)))
            (set toks r)
         ))
      ))
   ))	
   (lmb remainder)
));

parse-unexpect := λt . fail (UnexpectedToken t);
parse-expect := λt ts . (if (eq( t (head ts) )) () (fail (ExpectedToken t)));

parse-one-expression := λtoks . (tail(
   (local pme)
   (local remainder)
   (local expr)
   (match toks (
      ()
      ( () (
         (set expr Nil)
         (set remainder ())
      ))
      ( ( \l r ) (
         (set pme (parse-lambda r))
         (set expr (Lambda (head pme)))
         (set remainder (tail pme))
      ))
      ( ( \] r ) (
         (parse-unexpect (head toks))
      ))
      ( ( \[ r ) (
         (set pme (parse-many-expressions r))
         (set expr (head pme))
         (set remainder (tail pme))
      ))
      ( ( \\ (\' r) ) (
         (set expr (Literal \'))
         (set remainder r)
      ))
      ( ( \' (i r) ) (
         (set expr (Literal i))
         (set remainder r)
      ))
      ( (a r) (
         (if (is-variable a) (
            (set expr (Variable a))
         ) (
            (set expr (Literal a))
         ))
         (set remainder r)
      ))
   ))
   (expr remainder)
));

parse-many-expressions := λtoks . (tail(
   (local pme)
   (local expr)
   (local remainder)
   (while toks (
      (match toks (
         ()
         ((\: tl) (
            (set remainder toks)
            (set toks ())
         ))
         ((\] tl) (
            (if expr () (set expr Nil))
            (set remainder tl)
            (set toks ())
         ))
         (_ (
            (set pme (parse-one-expression toks))
            (if expr (
               (set expr (App( expr (head pme) )))
            ) (
               (set expr (head pme))
            ))
            (set toks (tail pme))
         ))
      ))
   ))
   (expr remainder)
));

parse-expression := λtoks . (parse-many-expressions toks);

parse-tuple-type := λ tt . (tail(
   (assert-eq( 'parse-tuple-type '[ (head-string tt) ))
   (set tt (tail-string tt))
   (local inner)
   (local base)
   (local depth)
   (while tt (
      (match (head-string tt) (
         ()
         ('[ (tail(
            (set inner (inner '[))
            (set depth (inc depth))
         )))
         ('] (
            (if depth (
               (set inner (inner ']))
               (set depth (dec depth))
            ) (
               (assert-eq( 'parse-tuple-type () (tail-string tt) ))
            ))
         ))
         (', (tail(
            (if depth (
               (set inner (inner ',))
            ) (
               (set inner (parse-type (clone-rope inner) ))
               (if base (
                  (set base ('[] ( base inner )))
               ) (
                  (set base inner)
               ))
               (set inner ())
            ))
         )))
         (c (set inner (inner (clone-rope c)) ))
      ))
      (set tt (tail-string tt))
   ))
   (if base (
      (set base ('[] ( base (parse-type (clone-rope inner )) )))
   ) (
      (set base (parse-type (clone-rope inner)))
   ))
   base
));

parse-type := λ tt . (tail(
   (local buff)
   (local base)
   (if (is-cons tt) (
      (set base tt)
      (set tt ())
   ) ())
   (while tt (
      (match (head-string tt) (
         ()
         ('[ (tail(
            (set base (parse-tuple-type tt))
            (set tt ())
         )))
         ('< (tail(
            (set base ( (clone-rope buff) (parse-parameter-type tt) ))
            (set tt ())
         )))
         (c (set buff (buff (clone-rope c)) ))
      ))
      (set tt (tail-string tt))
   ))
   (if base base (clone-rope buff))
));

parse-parameter-type := λ tt . (tail(
   (assert-eq( 'parse-parameter-type '< (head-string tt) ))
   (set tt (tail-string tt))
   (local inner)
   (local depth)
   (while tt (
      (match (head-string tt) (
         ()
         ('< (tail(
            (set inner (inner '<))
            (set depth (inc depth))
         )))
         ('> (
            (if depth (
               (set inner (inner '>))
               (set depth (dec depth))
            ) (
               (assert-eq( 'parse-parameter-type () (tail-string tt) ))
            ))
         ))
         (c (set inner (inner (clone-rope c)) ))
      ))
      (set tt (tail-string tt))
   ))
   (parse-type (clone-rope inner))
));
