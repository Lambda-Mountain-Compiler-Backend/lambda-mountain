
assemble-text-section                    := ();
assemble-data-section                    := ();

assemble := λprogram . (
   (local target)
   (set target 'tmp.s)
   (while cli-config (
      (match (tail cli-config) (
         ()
         ((Target t) (set target t))
      ))
      (set cli-config (head cli-config))
   ))

   (local main_e)
   (local main_pd)

   (local e1)
   (local e2)

   (local output_pd)
   (set output_pd ( () () ))

   (local global_ctx)
   (set global_ctx (context::new()))
   (local preview_program)
   (set preview_program program)

   (while preview_program (match preview_program (
      ()
      ( (pc1 (Global ('main body))) (
         (set preview_program pc1)
      ))
      ( (pc2 (GExpr e)) (
         (set preview_program pc2)
      ))
      ( (pc3 (Global (fname body))) (
         (match body (
            ()
            ( Nil (
               (set output_pd (
                  (head output_pd)
                  (
                     (tail output_pd)
                     (label-case fname)
                     ': \n \t '.zero \s '16 \n
                  )
               ))
               (set global_ctx (context::bind( global_ctx fname
                  (typecheck-ascript( (GlobalVariable body) (typecheck-lookup-type body) ))
               )))
            ))
            ( (Lambda(lhs rhs)) (
               (set global_ctx (context::bind( global_ctx fname
                  (typecheck-ascript( (GlobalFunction body) (typecheck-lookup-type body) ))
               )))
            ))
         ))
         (set preview_program pc3)
      ))
      ( (prog (Fragment( fname fbody ))) (
         (set global_ctx (context::bind( global_ctx fname
            (typecheck-ascript( (Fragment fbody) (typecheck-lookup-type fbody) ))
         )))
         (set preview_program prog)
      ))
      ( (prog (Type( tn tb ))) (
         (set global_ctx (strict-codegen-type( global_ctx tn tb 0 )) )
         (set preview_program prog)
      ))
      ( (prog (Size( _ _ ))) (
         (set preview_program prog)
      ))
      ( u (
         (fail (UnexpectedProgram (tail u)))
      ))
   )))

   (while program (match program (
      ()
      ( (pc (Global ('main body))) (
         (set main_e body)
         (set program pc)
      ))
      ( (pc (GExpr e)) (
         (set main_pd (compile-append( main_pd global_ctx e )))
         (set program pc)
      ))
      ( (pc (Global (fname body))) (
         (match body (
            ()
            ( Nil (
            ))
            ( (Lambda(lhs rhs)) (
               (if config-strict (
                  (set e1 (stack-define( global_ctx fname body )))
               ) (
                  (set e1 (define-calling-convention-s( global_ctx fname body )))
               ))
               (set output_pd (
                  ( (head output_pd) (expr::get-text e1) )
                  ( (tail output_pd) (expr::get-data e1) )
               ))
            ))
         ))
         (set program pc)
      ))
      ( (pc (Fragment( _ _ ))) (
         (set program pc)
      ))
      ( (pc (Type( _ _ ))) (
         (set program pc)
      ))
      ( (pc (Size( _ _ ))) (
         (set program pc)
      ))
      ( u (
         (fail (UnexpectedProgram (tail u)))
      ))
   )))

   (if main_e (
      (set main_pd (compile-append( main_pd global_ctx main_e )))
   ) ())

   (set output_pd (
      (
         (assemble-program-header())
         (before-main())
         (enter-function())
         (expr::get-frame main_pd)
         (expr::get-prog main_pd)
         (expr::get-unframe main_pd)
         (exit-cleanup())
         (head output_pd)
         (expr::get-text main_pd)
         (if config-nostd () (stdlib-functions()))
      )
      ((if config-nostd () (stdlib-data())) (tail output_pd) (expr::get-data main_pd))
   ))
   (set output_pd (
      ((head output_pd) assemble-text-section)
      ((assemble-data-header()) (tail output_pd) assemble-data-section)
   ))

   (write-file (target (clone-rope output_pd)))
);

assemble-data-header := λ .(
  '.data                                  \n
);

assemble-program-header := λ .(
   '.global \s '_start                    \n
   '.text                                 \n
   '_start:                               \n
   \t 'jmp \s 'main                       \n
);

