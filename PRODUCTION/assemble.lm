
assemble-text-section                    := ();
assemble-data-section                    := ();

assemble-destructure-fragment := λctx lmb args offset . (match lmb (
   ()
   # fragment annotations are required
   ( (Lambda( (App( (App( (Literal :) (Variable v) )) _ )) body )) (tail(
      (set args (compile-fragment( ctx args offset Used )))
      (() (v args))
   )))
   ( (Lambda( (App( rst (App( (App( (Literal :) (Variable v) )) _ )) )) body )) (tail(
      (local ds)
      (set ds (assemble-destructure-fragment(
         ctx (Lambda( rst body )) (head (tail args)) offset
      )))
      (set args (compile-fragment( ctx (tail (tail args)) offset Used )))
      (ds (v args))
   )))
   ( (Lambda( Nil _ )) (
      ()
   ))
   ( () () )
   ( (Lambda( u _ )) (fail (UnrecgonizedDestructureFragment u)))
   ( u (fail (UnrecgonizedDestructureFragment u)))
));

assemble-substitute-fragment := λsubs frag e . (match frag (
   ()
   ( Nil (
      (expr::new())
   ))
   ( (App( (App( (Literal ':) fe )) ft )) (
      (assemble-substitute-fragment( subs fe e ))
   ))
   ( (App( (Literal '.program) f )) (
      (expr::set-prog( e (
         (assemble-substitute-fragment-mode( subs Program f ))
      )))
   ))
   ( (App( inner (App( (Literal '.program) f )) )) (
      (assemble-substitute-fragment(
         subs inner
         (expr::set-prog( e (
            (assemble-substitute-fragment-mode( subs Program f ))
         )))
      ))
   ))
   ( (App( (Literal '.expression) f )) (
      (expr::set-expr( e (
         (assemble-substitute-fragment-mode( subs Expression f ))
      )))
   ))
   ( (App( inner (App( (Literal '.expression) f )) )) (
      (assemble-substitute-fragment(
         subs inner
         (expr::set-expr( e (
            (assemble-substitute-fragment-mode( subs Expression f ))
         )))
      ))
   ))
   ( u (fail (UnknownSubstituteFragment frag)))
));

assemble-substitute-fragment-mode := λsubs mode frag . (match frag (
   ()
   ( () () )
   ( (App( (Literal '.expression) (Variable v) )) (tail(
      (while subs (
         (if (eq( v (head (tail subs)) )) (
            (set v (expr::get-expr (tail (tail subs))))
         ) ())
         (set subs (head subs))
      ))
      v
   )))
   ( (App( (Literal '.program) (Variable v) )) (tail(
      (while subs (
         (if (eq( v (head (tail subs)) )) (
            (set v (expr::get-prog (tail (tail subs))))
         ) ())
         (set subs (head subs))
      ))
      v
   )))
   ( (Variable v) (tail(
      (while subs (
         (if (eq( v (head (tail subs)) )) (
            (match mode (
               ()
               (Expression (
                  (set v (expr::get-expr (tail (tail subs))))
               ))
               (Program (
                  (set v (expr::get-prog (tail (tail subs))))
               ))
               (m (fail (UnexpectedSubstitionMode m)))
            ))
         ) ())
         (set subs (head subs))
      ))
      v
   )))
   ( (Literal v) (tail(
      (while subs (
         (if (eq( v (head (tail subs)) )) (
            (set v (tail (tail subs)))
         ) (
            (set subs (head subs))
         ))
      ))
      (match v (
         ()
         (\\[ \[)
         (\\] \])
         (\\s \s)
         (\\t \t)
         (\\n \n)
         (u u)
      ))
   )))
   ( (App( l r )) (
      (assemble-substitute-fragment-mode( subs mode l ))
      (assemble-substitute-fragment-mode( subs mode r ))
   ))
   ( u (fail (UnknownFragmentSubstitution u)))
));

assemble-apply-fragment := λctx arrow args offset . (tail(
   (local rc)
   (set rc (assemble-destructure-fragment( ctx arrow args offset )))
   (local result)
   (print-s (AssembleFragment rc))(print-s \n)
   (match arrow (
      ()
      ( (Lambda( lhs rhs )) (
         (set result (assemble-substitute-fragment( rc rhs (expr::new()) )))
         (set result (expr::set-context( result ctx )))
         (set result (expr::set-offset( result offset )))
      ))
   ))
   result
));

assemble := λprogram . (
   (local target)
   (set target 'tmp.s)
   (while cli-config (
      (match (tail cli-config) (
         ()
         ((Target t) (set target t))
      ))
      (set cli-config (head cli-config))
   ))

   (local main_e)
   (local main_pd)

   (local e1)
   (local e2)

   (local output_pd)
   (set output_pd ( () () ))

   (local global_ctx)
   (local preview_program)
   (set preview_program program)

   (while preview_program (match preview_program (
      ()
      ( (pc1 (Global ('main body))) (
         (set preview_program pc1)
      ))
      ( (pc2 (GExpr e)) (
         (set preview_program pc2)
      ))
      ( (pc3 (Global (fname body))) (
         (match body (
            ()
            ( Nil (
               (set output_pd (
                  (head output_pd)
                  (
                     (tail output_pd)
                     (label-case fname)
                     ': \n \t '.zero \s '16 \n
                  )
               ))
               (set global_ctx (global_ctx (GlobalVariable fname)))
            ))
            ( (Lambda(lhs rhs)) (
               (set global_ctx (global_ctx (GlobalFunction( fname body ))))
            ))
         ))
         (set preview_program pc3)
      ))
      ( (prog (Fragment( fname fbody ))) (
         (set global_ctx (global_ctx (Fragment( fname fbody )) ))
         (set preview_program prog)
      ))
      ( (prog (Type( _ _ ))) (
         (set preview_program prog)
      ))
      ( (prog (Size( _ _ ))) (
         (set preview_program prog)
      ))
      ( u (
         (fail (UnexpectedProgram (tail u)))
      ))
   )))

   (while program (match program (
      ()
      ( (pc (Global ('main body))) (
         (set main_e body)
         (set program pc)
      ))
      ( (pc (GExpr e)) (
         (set main_pd (compile-append( main_pd global_ctx e )))
         (set program pc)
      ))
      ( (pc (Global (fname body))) (
         (match body (
            ()
            ( Nil (
            ))
            ( (Lambda(lhs rhs)) (
               (if config-strict (
                  (set e1 (define-calling-convention-stack( global_ctx fname body )))
               ) (
                  (set e1 (define-calling-convention-s( global_ctx fname body )))
               ))
               (set output_pd (
                  ( (head output_pd) (expr::get-text e1) )
                  ( (tail output_pd) (expr::get-data e1) )
               ))
            ))
         ))
         (set program pc)
      ))
      ( (pc (Fragment( _ _ ))) (
         (set program pc)
      ))
      ( (pc (Type( _ _ ))) (
         (set program pc)
      ))
      ( (pc (Size( _ _ ))) (
         (set program pc)
      ))
      ( u (
         (fail (UnexpectedProgram (tail u)))
      ))
   )))

   (if main_e (
      (set main_pd (compile-append( main_pd global_ctx main_e )))
   ) ())

   (set output_pd (
      (
         (assemble-program-header())
         (before-main())
         (enter-function())
         (expr::get-frame main_pd)
         (expr::get-prog main_pd)
         (exit-cleanup())
         (head output_pd)
         (expr::get-text main_pd)
         (if config-nostd () (stdlib-functions()))
      )
      ((if config-nostd () (stdlib-data())) (tail output_pd) (expr::get-data main_pd))
   ))
   (set output_pd (
      ((head output_pd) assemble-text-section)
      ((assemble-data-header()) (tail output_pd) assemble-data-section)
   ))

   (write-file (target (clone-rope output_pd)))
);

assemble-data-header := λ .(
  '.data                                  \n
);

assemble-program-header := λ .(
   '.global \s '_start                    \n
   '.text                                 \n
   '_start:                               \n
   \t 'jmp \s 'main                       \n
);

