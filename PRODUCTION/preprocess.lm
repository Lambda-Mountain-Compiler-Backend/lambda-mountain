
substitute-macro-body := λkvs e . (match e (
   ()
   ((Variable n) (tail(
      (while kvs (match kvs (
         ()
         ( Accept (set kvs ()) )
         ( (ks Accept) (set kvs ks) )
         ( (ks ()) (set kvs ks) )
         ( (ks (KV(k v))) (
            (if (eq(n k)) (
               (set e v)
               (set kvs ())
            ) (
               (set kvs ks)
            ))
         ))
         ( u (fail (UnrecognizedKVMacro kvs)))
      )))
      e
   )))
   ( () () )
   ( (vl vr) (
      (substitute-macro-body( kvs vl ))
      (substitute-macro-body( kvs vr ))
   ))
   ( v v )
));

try-destructure-macro := λlhs e . (match (lhs e) (
   ()
   ( ( Nil Nil ) Accept )
   ( ( (App(pl pr)) (App(el er)) ) (tail(
      (local ll)
      (set ll (try-destructure-macro(pl el)))
      (local rl)
      (set rl (try-destructure-macro(pr er)))
      (if ll (
         (if rl (
            (merge-list( ll rl ))
         ) ())
      ) ())
   )))
   ( ((Literal pl) (Variable el)) (
      (if (eq( pl el )) Accept ())
   ))
   ( ((Literal pl) (Literal el)) (
      (if (eq( pl el )) Accept ())
   ))
   ( ( (App( (Literal :Literal:) (Variable pv) )) (Literal el)) (
      (Accept (KV( pv e )))
   ))
   ( ( (App( (Literal :Variable:) (Variable pv) )) (Variable el)) (
      (Accept (KV( pv e )))
   ))
   ( ((Variable pv) e) (
      (Accept (KV( pv e )))
   ))
));

preprocess-destructure-type-atom := λtt . (
   (if (is-variable tt) (
      (Variable tt)
   ) (
      (Literal tt)
   ))
);

preprocess-type-and := λl r . (
   (App(
      (Literal And)
      (App( l r ))
   ))
);

preprocess-destructure-type := λtt . (tail(
   (local buff)
   (local compound)
   (while tt (
      (if (eq( '+ (head-string tt) )) (
         (if compound (
            (set compound (preprocess-type-and( compound (preprocess-destructure-type-atom (clone-rope buff)) )) )
            (set buff ())
         ) (
            (set compound (preprocess-destructure-type-atom (clone-rope buff)))
            (set buff ())
         ))
      ) (
         (set buff (buff (clone-rope (head-string tt)) ))
      ))
      (set tt (tail-string tt))
   ))
   (if compound (
      (preprocess-type-and( compound (preprocess-destructure-type-atom (clone-rope buff)) ))
   ) (
      (preprocess-destructure-type-atom (clone-rope buff))
   ))
));

preprocess-apply-macros := λprogram . (match program (
   ()
   ( (App( (App( (Literal :) mvar )) (Literal mtype) )) (
     (App( (App( (Literal :) mvar )) (preprocess-destructure-type mtype) ))
   ))
   ( (App( (App( (Literal :) mvar )) (Variable mtype) )) (
     (App( (App( (Literal :) mvar )) (preprocess-destructure-type mtype) ))
   ))
   ( (Literal l) (tail(
      (local suffixes)
      (set suffixes parse-suffix)
      (while suffixes (tail(
         (local sfx)
         (set sfx (tail (tail suffixes)) )
         (if (is-suffix( l sfx )) (
            (set program (
               (App(
                  (App(
                     (Literal ':)
                     (Literal (remove-suffix( l sfx )))
                  ))
                  (App(
                     (Literal And)
                     (App(
                        (Literal Constant)
                        (Literal (head (tail suffixes)))
                     ))
                  ))
               ))
            ))
         ) ())
         (set suffixes (head suffixes))
      )))
      program
   )))
   ( _ (tail(
      (local macros)
      (set macros parse-macros)
      (while macros (match macros (
         ()
         ( (ms (Macro( lhs rhs ))) (tail(
            (local new)
            (set new (try-destructure-macro( lhs program )))
            (if new (tail(
               (set program (substitute-macro-body( new rhs )))
               (set program (parse-macro-substitute-uuids (
                  (parse-macro-yield-uuids( () program ))
                  program
               )))
               (set program (preprocess-apply-macros program))
            )) ())
            (set macros ms)
         )))
         ( u (fail (UnrecognizedMacro u)))
      )))
      (match program (
         ()
         ( (l r) (
            (preprocess-apply-macros l)
            (preprocess-apply-macros r)
         ))
         ( () () )
         (u u)
      ))
   )))
));
